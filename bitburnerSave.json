{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hacking\":204,\"hp\":25,\"max_hp\":25,\"strength\":151,\"defense\":151,\"dexterity\":151,\"agility\":151,\"charisma\":2,\"intelligence\":194,\"hacking_chance_mult\":2.134644573715822,\"hacking_speed_mult\":2.7386273137237738,\"hacking_money_mult\":3.138146089917549,\"hacking_grow_mult\":1.8481771201002781,\"hacking_exp\":771662.5335962328,\"strength_exp\":21204,\"defense_exp\":21204,\"dexterity_exp\":21204,\"agility_exp\":21204,\"charisma_exp\":0,\"intelligence_exp\":224382.83906843388,\"hacking_mult\":3.5043633689361586,\"strength_mult\":1.8157529600985187,\"defense_mult\":1.8157529600985187,\"dexterity_mult\":1.8157529600985187,\"agility_mult\":1.8157529600985187,\"charisma_mult\":2.8868526615966346,\"hacking_exp_mult\":5.123721312006345,\"strength_exp_mult\":1.9973282561083707,\"defense_exp_mult\":1.9973282561083707,\"dexterity_exp_mult\":1.9973282561083707,\"agility_exp_mult\":1.9973282561083707,\"charisma_exp_mult\":1.7833288000967595,\"company_rep_mult\":4.63563049024822,\"faction_rep_mult\":2.372865730061537,\"money\":640544742.9503927,\"city\":\"Sector-12\",\"location\":\"Travel Agency\",\"jobs\":{},\"companyName\":\"\",\"currentServer\":\"home\",\"purchasedServers\":[\"pserv-0\",\"pserv-1\",\"pserv-2\",\"pserv-3\",\"pserv-4\",\"pserv-5\",\"pserv-6\",\"pserv-7\",\"pserv-8\",\"pserv-9\",\"pserv-10\",\"pserv-11\",\"pserv-12\",\"pserv-13\",\"pserv-14\",\"pserv-15\",\"pserv-16\",\"pserv-17\",\"pserv-18\",\"pserv-19\",\"pserv-20\",\"pserv-21\",\"pserv-22\",\"pserv-23\"],\"hacknetNodes\":[\"hacknet-node-0\",\"hacknet-node-1\",\"hacknet-node-2\",\"hacknet-node-3\",\"hacknet-node-4\",\"hacknet-node-5\",\"hacknet-node-6\"],\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":4480,\"hashes\":69.38400626703267,\"upgrades\":{\"Sell for Money\":0,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0}}},\"factions\":[\"Church of the Machine God\"],\"factionInvitations\":[\"Slum Snakes\",\"CyberSec\",\"Sector-12\",\"Chongqing\",\"Tetrads\",\"Tian Di Hui\",\"New Tokyo\",\"Netburners\"],\"queuedAugmentations\":[],\"augmentations\":[{\"name\":\"NeuroFlux Governor\",\"level\":28},{\"level\":1,\"name\":\"Stanek's Gift - Genesis\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen I\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen II\"},{\"level\":1,\"name\":\"BitWire\"},{\"level\":1,\"name\":\"Synaptic Enhancement Implant\"},{\"level\":1,\"name\":\"Neurotrainer I\"},{\"level\":1,\"name\":\"Social Negotiation Assistant (S.N.A)\"},{\"level\":1,\"name\":\"Nuoptimal Nootropic Injector Implant\"},{\"level\":1,\"name\":\"ADR-V1 Pheromone Gene\"},{\"level\":1,\"name\":\"Speech Enhancement\"},{\"level\":1,\"name\":\"Stanek's Gift - Awakening\"},{\"level\":1,\"name\":\"Neuralstimulator\"},{\"level\":1,\"name\":\"Neuregen Gene Modification\"}],\"sourceFiles\":[{\"lvl\":3,\"n\":1},{\"lvl\":3,\"n\":5},{\"lvl\":3,\"n\":4},{\"lvl\":3,\"n\":10},{\"lvl\":2,\"n\":6},{\"lvl\":3,\"n\":9},{\"lvl\":19,\"n\":12},{\"lvl\":3,\"n\":2},{\"lvl\":3,\"n\":3},{\"lvl\":1,\"n\":7},{\"lvl\":2,\"n\":11},{\"lvl\":1,\"n\":13}],\"numPeopleKilled\":0,\"karma\":-37918,\"crime_money_mult\":2.3021153601249074,\"crime_success_mult\":2.3021153601249074,\"isWorking\":false,\"focus\":true,\"workType\":\"\",\"workCostMult\":20,\"workExpMult\":10,\"currentWorkFactionName\":\"\",\"currentWorkFactionDescription\":\"\",\"workHackExpGainRate\":0,\"workStrExpGainRate\":0,\"workDefExpGainRate\":0,\"workDexExpGainRate\":0,\"workAgiExpGainRate\":0,\"workChaExpGainRate\":0,\"workRepGainRate\":0,\"workMoneyGainRate\":0,\"workMoneyLossRate\":0,\"workHackExpGained\":0,\"workStrExpGained\":0,\"workDefExpGained\":0,\"workDexExpGained\":0,\"workAgiExpGained\":0,\"workChaExpGained\":0,\"workRepGained\":0,\"workMoneyGained\":0,\"createProgramName\":\"\",\"createProgramReqLvl\":50,\"className\":\"\",\"crimeType\":\"\",\"timeWorked\":0,\"timeWorkedCreateProgram\":0,\"timeNeededToCompleteWork\":72000000,\"work_money_mult\":3.008832351523253,\"hacknet_node_money_mult\":1.8481771201002781,\"hacknet_node_purchase_cost_mult\":0.486289720764851,\"hacknet_node_ram_cost_mult\":0.486289720764851,\"hacknet_node_core_cost_mult\":0.486289720764851,\"hacknet_node_level_cost_mult\":0.486289720764851,\"hasWseAccount\":false,\"hasTixApiAccess\":false,\"has4SData\":false,\"has4SDataTixApi\":false,\"gang\":null,\"corporation\":null,\"bladeburner\":null,\"bladeburner_max_stamina_mult\":1.08,\"bladeburner_stamina_gain_mult\":1.08,\"bladeburner_analysis_mult\":1.08,\"bladeburner_success_chance_mult\":1.08,\"sleeves\":[{\"ctor\":\"Sleeve\",\"data\":{\"hacking\":45,\"strength\":121,\"defense\":121,\"dexterity\":121,\"agility\":121,\"charisma\":1,\"intelligence\":1,\"hp\":22,\"max_hp\":22,\"hacking_exp\":158080,\"strength_exp\":119414.5,\"defense_exp\":119414.5,\"dexterity_exp\":119414.5,\"agility_exp\":119414.5,\"charisma_exp\":0,\"intelligence_exp\":0,\"hacking_mult\":1,\"strength_mult\":1,\"defense_mult\":1,\"dexterity_mult\":1,\"agility_mult\":1,\"charisma_mult\":1,\"hacking_exp_mult\":1,\"strength_exp_mult\":1,\"defense_exp_mult\":1,\"dexterity_exp_mult\":1,\"agility_exp_mult\":1,\"charisma_exp_mult\":1,\"hacking_chance_mult\":382310.44864555524,\"hacking_speed_mult\":56772.61770489272,\"hacking_money_mult\":29116227750045870,\"hacking_grow_mult\":275549237.50675344,\"company_rep_mult\":1,\"faction_rep_mult\":1,\"crime_money_mult\":1,\"crime_success_mult\":1,\"work_money_mult\":1,\"hacknet_node_money_mult\":14995.976501843037,\"hacknet_node_purchase_cost_mult\":0.04959663399532355,\"hacknet_node_ram_cost_mult\":0.7224999999999999,\"hacknet_node_core_cost_mult\":0.7224999999999999,\"hacknet_node_level_cost_mult\":0.14224175713617204,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"augmentations\":[],\"queuedAugmentations\":[],\"city\":\"Volhaven\",\"className\":\"\",\"crimeType\":\"Homicide\",\"currentTask\":3,\"currentTaskLocation\":\"18000\",\"currentTaskMaxTime\":3000,\"currentTaskTime\":1000,\"earningsForSleeves\":{\"hack\":19760,\"str\":14949,\"def\":14949,\"dex\":14949,\"agi\":14949,\"cha\":0,\"money\":0},\"earningsForPlayer\":{\"hack\":19760,\"str\":14949,\"def\":14949,\"dex\":14949,\"agi\":14949,\"cha\":0,\"money\":74938000},\"earningsForTask\":{\"hack\":0,\"str\":2221,\"def\":2221,\"dex\":2221,\"agi\":2221,\"cha\":0,\"money\":15534000},\"factionWorkType\":2,\"gainRatesForTask\":{\"hack\":0,\"str\":1,\"def\":1,\"dex\":1,\"agi\":1,\"cha\":0,\"money\":18000},\"gymStatType\":\"\",\"logs\":[],\"memory\":100,\"shock\":100,\"storedCycles\":1,\"sync\":100}},{\"ctor\":\"Sleeve\",\"data\":{\"hacking\":45,\"strength\":121,\"defense\":121,\"dexterity\":121,\"agility\":121,\"charisma\":1,\"intelligence\":1,\"hp\":22,\"max_hp\":22,\"hacking_exp\":158080,\"strength_exp\":119414.5,\"defense_exp\":119414.5,\"dexterity_exp\":119414.5,\"agility_exp\":119414.5,\"charisma_exp\":0,\"intelligence_exp\":0,\"hacking_mult\":1,\"strength_mult\":1,\"defense_mult\":1,\"dexterity_mult\":1,\"agility_mult\":1,\"charisma_mult\":1,\"hacking_exp_mult\":1,\"strength_exp_mult\":1,\"defense_exp_mult\":1,\"dexterity_exp_mult\":1,\"agility_exp_mult\":1,\"charisma_exp_mult\":1,\"hacking_chance_mult\":50482.70820242008,\"hacking_speed_mult\":9445.68874142341,\"hacking_money_mult\":126693790808556.64,\"hacking_grow_mult\":19194722.395028275,\"company_rep_mult\":1,\"faction_rep_mult\":1,\"crime_money_mult\":1,\"crime_success_mult\":1,\"work_money_mult\":1,\"hacknet_node_money_mult\":778.950440846118,\"hacknet_node_purchase_cost_mult\":0.13033137340555595,\"hacknet_node_ram_cost_mult\":0.85,\"hacknet_node_core_cost_mult\":0.85,\"hacknet_node_level_cost_mult\":0.2724905250390624,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"augmentations\":[],\"queuedAugmentations\":[],\"city\":\"Volhaven\",\"className\":\"\",\"crimeType\":\"Homicide\",\"currentTask\":3,\"currentTaskLocation\":\"18000\",\"currentTaskMaxTime\":3000,\"currentTaskTime\":1000,\"earningsForSleeves\":{\"hack\":19760,\"str\":14923,\"def\":14923,\"dex\":14923,\"agi\":14923,\"cha\":0,\"money\":0},\"earningsForPlayer\":{\"hack\":19760,\"str\":14923,\"def\":14923,\"dex\":14923,\"agi\":14923,\"cha\":0,\"money\":74520400},\"earningsForTask\":{\"hack\":0,\"str\":2215,\"def\":2215,\"dex\":2215,\"agi\":2215,\"cha\":0,\"money\":15426000},\"factionWorkType\":2,\"gainRatesForTask\":{\"hack\":0,\"str\":1,\"def\":1,\"dex\":1,\"agi\":1,\"cha\":0,\"money\":18000},\"gymStatType\":\"\",\"logs\":[],\"memory\":100,\"shock\":100,\"storedCycles\":1,\"sync\":100}},{\"ctor\":\"Sleeve\",\"data\":{\"hacking\":45,\"strength\":121,\"defense\":121,\"dexterity\":121,\"agility\":121,\"charisma\":1,\"intelligence\":1,\"hp\":22,\"max_hp\":22,\"hacking_exp\":158080,\"strength_exp\":119414.5,\"defense_exp\":119414.5,\"dexterity_exp\":119414.5,\"agility_exp\":119414.5,\"charisma_exp\":0,\"intelligence_exp\":0,\"hacking_mult\":1,\"strength_mult\":1,\"defense_mult\":1,\"dexterity_mult\":1,\"agility_mult\":1,\"charisma_mult\":1,\"hacking_exp_mult\":1,\"strength_exp_mult\":1,\"defense_exp_mult\":1,\"dexterity_exp_mult\":1,\"agility_exp_mult\":1,\"charisma_exp_mult\":1,\"hacking_chance_mult\":50482.70820242008,\"hacking_speed_mult\":9445.68874142341,\"hacking_money_mult\":126693790808556.64,\"hacking_grow_mult\":19194722.395028275,\"company_rep_mult\":1,\"faction_rep_mult\":1,\"crime_money_mult\":1,\"crime_success_mult\":1,\"work_money_mult\":1,\"hacknet_node_money_mult\":778.950440846118,\"hacknet_node_purchase_cost_mult\":0.13033137340555595,\"hacknet_node_ram_cost_mult\":0.85,\"hacknet_node_core_cost_mult\":0.85,\"hacknet_node_level_cost_mult\":0.2724905250390624,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"augmentations\":[],\"queuedAugmentations\":[],\"city\":\"Volhaven\",\"className\":\"\",\"crimeType\":\"Homicide\",\"currentTask\":3,\"currentTaskLocation\":\"18000\",\"currentTaskMaxTime\":3000,\"currentTaskTime\":1000,\"earningsForSleeves\":{\"hack\":19760,\"str\":14916.5,\"def\":14916.5,\"dex\":14916.5,\"agi\":14916.5,\"cha\":0,\"money\":0},\"earningsForPlayer\":{\"hack\":19760,\"str\":14916.5,\"def\":14916.5,\"dex\":14916.5,\"agi\":14916.5,\"cha\":0,\"money\":74441200},\"earningsForTask\":{\"hack\":0,\"str\":2207,\"def\":2207,\"dex\":2207,\"agi\":2207,\"cha\":0,\"money\":15282000},\"factionWorkType\":2,\"gainRatesForTask\":{\"hack\":0,\"str\":1,\"def\":1,\"dex\":1,\"agi\":1,\"cha\":0,\"money\":18000},\"gymStatType\":\"\",\"logs\":[],\"memory\":100,\"shock\":100,\"storedCycles\":1,\"sync\":100}},{\"ctor\":\"Sleeve\",\"data\":{\"hacking\":45,\"strength\":121,\"defense\":121,\"dexterity\":121,\"agility\":121,\"charisma\":1,\"intelligence\":1,\"hp\":22,\"max_hp\":22,\"hacking_exp\":158080,\"strength_exp\":119414.5,\"defense_exp\":119414.5,\"dexterity_exp\":119414.5,\"agility_exp\":119414.5,\"charisma_exp\":0,\"intelligence_exp\":0,\"hacking_mult\":1,\"strength_mult\":1,\"defense_mult\":1,\"dexterity_mult\":1,\"agility_mult\":1,\"charisma_mult\":1,\"hacking_exp_mult\":1,\"strength_exp_mult\":1,\"defense_exp_mult\":1,\"dexterity_exp_mult\":1,\"agility_exp_mult\":1,\"charisma_exp_mult\":1,\"hacking_chance_mult\":50482.70820242008,\"hacking_speed_mult\":9445.688741423417,\"hacking_money_mult\":126693790808556.64,\"hacking_grow_mult\":19194722.395028275,\"company_rep_mult\":1,\"faction_rep_mult\":1,\"crime_money_mult\":1,\"crime_success_mult\":1,\"work_money_mult\":1,\"hacknet_node_money_mult\":778.950440846118,\"hacknet_node_purchase_cost_mult\":0.13033137340555595,\"hacknet_node_ram_cost_mult\":0.85,\"hacknet_node_core_cost_mult\":0.85,\"hacknet_node_level_cost_mult\":0.2724905250390624,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"augmentations\":[],\"queuedAugmentations\":[],\"city\":\"Volhaven\",\"className\":\"\",\"crimeType\":\"Homicide\",\"currentTask\":3,\"currentTaskLocation\":\"18000\",\"currentTaskMaxTime\":3000,\"currentTaskTime\":1000,\"earningsForSleeves\":{\"hack\":19760,\"str\":14932.5,\"def\":14932.5,\"dex\":14932.5,\"agi\":14932.5,\"cha\":0,\"money\":0},\"earningsForPlayer\":{\"hack\":19760,\"str\":14932.5,\"def\":14932.5,\"dex\":14932.5,\"agi\":14932.5,\"cha\":0,\"money\":74628400},\"earningsForTask\":{\"hack\":0,\"str\":2198,\"def\":2198,\"dex\":2198,\"agi\":2198,\"cha\":0,\"money\":15120000},\"factionWorkType\":2,\"gainRatesForTask\":{\"hack\":0,\"str\":1,\"def\":1,\"dex\":1,\"agi\":1,\"cha\":0,\"money\":18000},\"gymStatType\":\"\",\"logs\":[],\"memory\":100,\"shock\":100,\"storedCycles\":1,\"sync\":100}},{\"ctor\":\"Sleeve\",\"data\":{\"hacking\":45,\"strength\":121,\"defense\":121,\"dexterity\":121,\"agility\":121,\"charisma\":1,\"intelligence\":1,\"hp\":22,\"max_hp\":22,\"hacking_exp\":158080,\"strength_exp\":119414.5,\"defense_exp\":119414.5,\"dexterity_exp\":119414.5,\"agility_exp\":119414.5,\"charisma_exp\":0,\"intelligence_exp\":0,\"hacking_mult\":1,\"strength_mult\":1,\"defense_mult\":1,\"dexterity_mult\":1,\"agility_mult\":1,\"charisma_mult\":1,\"hacking_exp_mult\":1,\"strength_exp_mult\":1,\"defense_exp_mult\":1,\"dexterity_exp_mult\":1,\"agility_exp_mult\":1,\"charisma_exp_mult\":1,\"hacking_chance_mult\":50482.70820242014,\"hacking_speed_mult\":9445.688741423417,\"hacking_money_mult\":126693790808556.64,\"hacking_grow_mult\":19194722.395028275,\"company_rep_mult\":1,\"faction_rep_mult\":1,\"crime_money_mult\":1,\"crime_success_mult\":1,\"work_money_mult\":1,\"hacknet_node_money_mult\":778.950440846118,\"hacknet_node_purchase_cost_mult\":0.13033137340555595,\"hacknet_node_ram_cost_mult\":0.85,\"hacknet_node_core_cost_mult\":0.85,\"hacknet_node_level_cost_mult\":0.2724905250390624,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"augmentations\":[],\"queuedAugmentations\":[],\"city\":\"Volhaven\",\"className\":\"\",\"crimeType\":\"Homicide\",\"currentTask\":3,\"currentTaskLocation\":\"18000\",\"currentTaskMaxTime\":3000,\"currentTaskTime\":1000,\"earningsForSleeves\":{\"hack\":19760,\"str\":14924.5,\"def\":14924.5,\"dex\":14924.5,\"agi\":14924.5,\"cha\":0,\"money\":0},\"earningsForPlayer\":{\"hack\":19760,\"str\":14924.5,\"def\":14924.5,\"dex\":14924.5,\"agi\":14924.5,\"cha\":0,\"money\":74408800},\"earningsForTask\":{\"hack\":0,\"str\":2199,\"def\":2199,\"dex\":2199,\"agi\":2199,\"cha\":0,\"money\":15138000},\"factionWorkType\":2,\"gainRatesForTask\":{\"hack\":0,\"str\":1,\"def\":1,\"dex\":1,\"agi\":1,\"cha\":0,\"money\":18000},\"gymStatType\":\"\",\"logs\":[],\"memory\":100,\"shock\":100,\"storedCycles\":1,\"sync\":100}},{\"ctor\":\"Sleeve\",\"data\":{\"hacking\":45,\"strength\":121,\"defense\":121,\"dexterity\":121,\"agility\":121,\"charisma\":1,\"intelligence\":1,\"hp\":22,\"max_hp\":22,\"hacking_exp\":158080,\"strength_exp\":119414.5,\"defense_exp\":119414.5,\"dexterity_exp\":119414.5,\"agility_exp\":119414.5,\"charisma_exp\":0,\"intelligence_exp\":0,\"hacking_mult\":1,\"strength_mult\":1,\"defense_mult\":1,\"dexterity_mult\":1,\"agility_mult\":1,\"charisma_mult\":1,\"hacking_exp_mult\":1,\"strength_exp_mult\":1,\"defense_exp_mult\":1,\"dexterity_exp_mult\":1,\"agility_exp_mult\":1,\"charisma_exp_mult\":1,\"hacking_chance_mult\":20193.083280968032,\"hacking_speed_mult\":4722.8443707117085,\"hacking_money_mult\":31673447702139.16,\"hacking_grow_mult\":19194722.395028275,\"company_rep_mult\":1,\"faction_rep_mult\":1,\"crime_money_mult\":1,\"crime_success_mult\":1,\"work_money_mult\":1,\"hacknet_node_money_mult\":778.950440846118,\"hacknet_node_purchase_cost_mult\":0.13033137340555595,\"hacknet_node_ram_cost_mult\":0.85,\"hacknet_node_core_cost_mult\":0.85,\"hacknet_node_level_cost_mult\":0.2724905250390624,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"augmentations\":[],\"queuedAugmentations\":[],\"city\":\"Volhaven\",\"className\":\"\",\"crimeType\":\"Homicide\",\"currentTask\":3,\"currentTaskLocation\":\"18000\",\"currentTaskMaxTime\":3000,\"currentTaskTime\":1000,\"earningsForSleeves\":{\"hack\":19760,\"str\":14895,\"def\":14895,\"dex\":14895,\"agi\":14895,\"cha\":0,\"money\":0},\"earningsForPlayer\":{\"hack\":19760,\"str\":14895,\"def\":14895,\"dex\":14895,\"agi\":14895,\"cha\":0,\"money\":74041600},\"earningsForTask\":{\"hack\":0,\"str\":2183,\"def\":2183,\"dex\":2183,\"agi\":2183,\"cha\":0,\"money\":14850000},\"factionWorkType\":2,\"gainRatesForTask\":{\"hack\":0,\"str\":1,\"def\":1,\"dex\":1,\"agi\":1,\"cha\":0,\"money\":18000},\"gymStatType\":\"\",\"logs\":[],\"memory\":100,\"shock\":100,\"storedCycles\":1,\"sync\":100}},{\"ctor\":\"Sleeve\",\"data\":{\"hacking\":45,\"strength\":121,\"defense\":121,\"dexterity\":121,\"agility\":121,\"charisma\":1,\"intelligence\":1,\"hp\":22,\"max_hp\":22,\"hacking_exp\":158080,\"strength_exp\":119414.5,\"defense_exp\":119414.5,\"dexterity_exp\":119414.5,\"agility_exp\":119414.5,\"charisma_exp\":0,\"intelligence_exp\":0,\"hacking_mult\":1,\"strength_mult\":1,\"defense_mult\":1,\"dexterity_mult\":1,\"agility_mult\":1,\"charisma_mult\":1,\"hacking_exp_mult\":1,\"strength_exp_mult\":1,\"defense_exp_mult\":1,\"dexterity_exp_mult\":1,\"agility_exp_mult\":1,\"charisma_exp_mult\":1,\"hacking_chance_mult\":376.94087819799705,\"hacking_speed_mult\":181.59290821765353,\"hacking_money_mult\":226954380.57318097,\"hacking_grow_mult\":30966.799300813364,\"company_rep_mult\":1,\"faction_rep_mult\":1,\"crime_money_mult\":1,\"crime_success_mult\":1,\"work_money_mult\":1,\"hacknet_node_money_mult\":308.8507082046883,\"hacknet_node_purchase_cost_mult\":0.17036780837327575,\"hacknet_node_ram_cost_mult\":0.85,\"hacknet_node_core_cost_mult\":0.85,\"hacknet_node_level_cost_mult\":0.32057708828124987,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"augmentations\":[],\"queuedAugmentations\":[],\"city\":\"Volhaven\",\"className\":\"\",\"crimeType\":\"Homicide\",\"currentTask\":3,\"currentTaskLocation\":\"18000\",\"currentTaskMaxTime\":3000,\"currentTaskTime\":1000,\"earningsForSleeves\":{\"hack\":19760,\"str\":14930.5,\"def\":14930.5,\"dex\":14930.5,\"agi\":14930.5,\"cha\":0,\"money\":0},\"earningsForPlayer\":{\"hack\":19760,\"str\":14930.5,\"def\":14930.5,\"dex\":14930.5,\"agi\":14930.5,\"cha\":0,\"money\":74592400},\"earningsForTask\":{\"hack\":0,\"str\":2198,\"def\":2198,\"dex\":2198,\"agi\":2198,\"cha\":0,\"money\":15120000},\"factionWorkType\":2,\"gainRatesForTask\":{\"hack\":0,\"str\":1,\"def\":1,\"dex\":1,\"agi\":1,\"cha\":0,\"money\":18000},\"gymStatType\":\"\",\"logs\":[],\"memory\":100,\"shock\":100,\"storedCycles\":1,\"sync\":100}},{\"ctor\":\"Sleeve\",\"data\":{\"hacking\":45,\"strength\":121,\"defense\":121,\"dexterity\":121,\"agility\":121,\"charisma\":1,\"intelligence\":1,\"hp\":22,\"max_hp\":22,\"hacking_exp\":158080,\"strength_exp\":119414.5,\"defense_exp\":119414.5,\"dexterity_exp\":119414.5,\"agility_exp\":119414.5,\"charisma_exp\":0,\"intelligence_exp\":0,\"hacking_mult\":1,\"strength_mult\":1,\"defense_mult\":1,\"dexterity_mult\":1,\"agility_mult\":1,\"charisma_mult\":1,\"hacking_exp_mult\":1,\"strength_exp_mult\":1,\"defense_exp_mult\":1,\"dexterity_exp_mult\":1,\"agility_exp_mult\":1,\"charisma_exp_mult\":1,\"hacking_chance_mult\":197.92871931882203,\"hacking_speed_mult\":100.00074832180943,\"hacking_money_mult\":22489660.10189148,\"hacking_grow_mult\":4718.750369647751,\"company_rep_mult\":1,\"faction_rep_mult\":1,\"crime_money_mult\":1,\"crime_success_mult\":1,\"work_money_mult\":1,\"hacknet_node_money_mult\":122.45806017507809,\"hacknet_node_purchase_cost_mult\":0.22270301748140628,\"hacknet_node_ram_cost_mult\":0.85,\"hacknet_node_core_cost_mult\":0.85,\"hacknet_node_level_cost_mult\":0.3771495156249999,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"augmentations\":[],\"queuedAugmentations\":[],\"city\":\"Volhaven\",\"className\":\"\",\"crimeType\":\"Homicide\",\"currentTask\":3,\"currentTaskLocation\":\"18000\",\"currentTaskMaxTime\":3000,\"currentTaskTime\":1000,\"earningsForSleeves\":{\"hack\":19760,\"str\":14943.5,\"def\":14943.5,\"dex\":14943.5,\"agi\":14943.5,\"cha\":0,\"money\":0},\"earningsForPlayer\":{\"hack\":19760,\"str\":14943.5,\"def\":14943.5,\"dex\":14943.5,\"agi\":14943.5,\"cha\":0,\"money\":74876800},\"earningsForTask\":{\"hack\":0,\"str\":2212,\"def\":2212,\"dex\":2212,\"agi\":2212,\"cha\":0,\"money\":15372000},\"factionWorkType\":2,\"gainRatesForTask\":{\"hack\":0,\"str\":1,\"def\":1,\"dex\":1,\"agi\":1,\"cha\":0,\"money\":18000},\"gymStatType\":\"\",\"logs\":[],\"memory\":100,\"shock\":100,\"storedCycles\":1,\"sync\":100}}],\"resleeves\":[],\"sleevesFromCovenant\":5,\"bitNodeN\":13,\"lastUpdate\":1647907392585,\"lastSave\":1647907392339,\"totalPlaytime\":8200207000,\"playtimeSinceLastAug\":5437600,\"playtimeSinceLastBitnode\":90039600,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":0,\"codingcontract\":0,\"corporation\":0,\"crime\":0,\"gang\":0,\"hacking\":3355028185,\"hacknet\":0,\"hacknet_expenses\":-737818522.0496064,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":128392000,\"stock\":0,\"total\":640543742.9503927,\"work\":0,\"servers\":-1816657920.0000002,\"other\":-288400000,\"augmentations\":0}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":0,\"codingcontract\":4050000000,\"corporation\":0,\"crime\":83914797.78862216,\"gang\":0,\"hacking\":25701537357.313877,\"hacknet\":270000000,\"hacknet_expenses\":-2507038759.8252506,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":594847600,\"stock\":0,\"total\":1425972615.3470016,\"work\":0,\"servers\":-18234844036.42652,\"other\":-1153800000,\"augmentations\":-7378644343.50374}},\"scriptProdSinceLastAug\":3355028185,\"exploits\":[\"EditSaveFile\",\"N00dles\",\"YoureNotMeantToAccessThis\",\"Unclickable\",\"RealityAlteration\",\"Bypass\",\"TimeCompression\",\"UndocumentedFunctionCall\",\"PrototypeTampering\"],\"achievements\":[{\"ID\":\"FORMULAS.EXE\",\"unlockedOn\":1641708178429},{\"ID\":\"SF1.1\",\"unlockedOn\":1641708178438},{\"ID\":\"SF4.1\",\"unlockedOn\":1641708178440},{\"ID\":\"SF5.1\",\"unlockedOn\":1641708178443},{\"ID\":\"INSTALL_1\",\"unlockedOn\":1641708178445},{\"ID\":\"NS2\",\"unlockedOn\":1641708178447},{\"ID\":\"SCRIPT_32GB\",\"unlockedOn\":1641708178450},{\"ID\":\"BRUTESSH.EXE\",\"unlockedOn\":1641708238434},{\"ID\":\"FTPCRACK.EXE\",\"unlockedOn\":1641708238441},{\"ID\":\"RELAYSMTP.EXE\",\"unlockedOn\":1641708238443},{\"ID\":\"TOR\",\"unlockedOn\":1641708238444},{\"ID\":\"CYBERSEC\",\"unlockedOn\":1641709738429},{\"ID\":\"NITESEC\",\"unlockedOn\":1641709738432},{\"ID\":\"THE_BLACK_HAND\",\"unlockedOn\":1641709738433},{\"ID\":\"HTTPWORM.EXE\",\"unlockedOn\":1641709798438},{\"ID\":\"SQLINJECT.EXE\",\"unlockedOn\":1641710578432},{\"ID\":\"TRAVEL\",\"unlockedOn\":1641715138431},{\"ID\":\"BITRUNNERS\",\"unlockedOn\":1641715978434},{\"ID\":\"DRAIN_SERVER\",\"unlockedOn\":1641749518438},{\"ID\":\"FROZE\",\"unlockedOn\":1641796192129},{\"ID\":\"DONATION\",\"unlockedOn\":1641837570104},{\"ID\":\"RUNNING_SCRIPTS_1000\",\"unlockedOn\":1641847680353},{\"ID\":\"DAEDALUS\",\"unlockedOn\":1641854828167},{\"ID\":\"REPUTATION_10M\",\"unlockedOn\":1641856807959},{\"ID\":\"FAST_BN\",\"unlockedOn\":1642127766724},{\"ID\":\"SCRIPTS_30\",\"unlockedOn\":1642182124813},{\"ID\":\"N00DLES\",\"unlockedOn\":1642182124817},{\"ID\":\"WORKOUT\",\"unlockedOn\":1642449915574},{\"ID\":\"FIRST_HACKNET_NODE\",\"unlockedOn\":1642464675621},{\"ID\":\"30_HACKNET_NODE\",\"unlockedOn\":1642464675627},{\"ID\":\"MAX_HACKNET_NODE\",\"unlockedOn\":1642464675630},{\"ID\":\"HACKNET_NODE_10M\",\"unlockedOn\":1642464795526},{\"ID\":\"THE_COVENANT\",\"unlockedOn\":1642481669631},{\"ID\":\"ILLUMINATI\",\"unlockedOn\":1642487205385},{\"ID\":\"COMBAT_3000\",\"unlockedOn\":1642500348152},{\"ID\":\"MAX_CORES\",\"unlockedOn\":1642522248149},{\"ID\":\"SF10.1\",\"unlockedOn\":1642522608143},{\"ID\":\"BLADEBURNER_DIVISION\",\"unlockedOn\":1642576495422},{\"ID\":\"HOSPITALIZED\",\"unlockedOn\":1642577095422},{\"ID\":\"BLADEBURNER_OVERCLOCK\",\"unlockedOn\":1642730615920},{\"ID\":\"DEVMENU\",\"unlockedOn\":1642744104484},{\"ID\":\"EDITSAVEFILE\",\"unlockedOn\":1642744273812},{\"ID\":\"UNCLICKABLE\",\"unlockedOn\":1642744333814},{\"ID\":\"REALITYALTERATION\",\"unlockedOn\":1642744725024},{\"ID\":\"BYPASS\",\"unlockedOn\":1642744801529},{\"ID\":\"UNDOCUMENTEDFUNCTIONCALL\",\"unlockedOn\":1642744981454},{\"ID\":\"TIMECOMPRESSION\",\"unlockedOn\":1642744981461},{\"ID\":\"PROTOTYPETAMPERING\",\"unlockedOn\":1642745701455},{\"ID\":\"SF6.1\",\"unlockedOn\":1642785770037},{\"ID\":\"FIRST_HACKNET_SERVER\",\"unlockedOn\":1642788950040},{\"ID\":\"HACKNET_SERVER_1B\",\"unlockedOn\":1642807972554},{\"ID\":\"MAX_CACHE\",\"unlockedOn\":1642816068703},{\"ID\":\"SF9.1\",\"unlockedOn\":1643235429747},{\"ID\":\"SF12.1\",\"unlockedOn\":1643323114293},{\"ID\":\"GANG\",\"unlockedOn\":1643331994294},{\"ID\":\"FULL_GANG\",\"unlockedOn\":1643355274307},{\"ID\":\"GANG_MEMBER_POWER\",\"unlockedOn\":1643359714297},{\"ID\":\"SF2.1\",\"unlockedOn\":1643416557483},{\"ID\":\"CORPORATION\",\"unlockedOn\":1643613074511},{\"ID\":\"CORPORATION_BRIBE\",\"unlockedOn\":1643779578015},{\"ID\":\"MONEY_1Q\",\"unlockedOn\":1643788362347},{\"ID\":\"QUEUE_40\",\"unlockedOn\":1643788362355},{\"ID\":\"SF3.1\",\"unlockedOn\":1643790288945},{\"ID\":\"CORPORATION_REAL_ESTATE\",\"unlockedOn\":1643950278393},{\"ID\":\"ALL_HACKNET_SERVER\",\"unlockedOn\":1644630361850},{\"ID\":\"MAX_RAM\",\"unlockedOn\":1644722460742},{\"ID\":\"NEUROFLUX_255\",\"unlockedOn\":1644810799727},{\"ID\":\"CORPORATION_EMPLOYEE_3000\",\"unlockedOn\":1644924627440},{\"ID\":\"HACKING_100000\",\"unlockedOn\":1645201992959},{\"ID\":\"SLEEVE_8\",\"unlockedOn\":1645377781786},{\"ID\":\"KARMA_1000000\",\"unlockedOn\":1645844243340},{\"ID\":\"SF7.1\",\"unlockedOn\":1645940491912},{\"ID\":\"MAX_HACKNET_SERVER\",\"unlockedOn\":1646415818428},{\"ID\":\"SF11.1\",\"unlockedOn\":1646946292016},{\"ID\":\"CHALLENGE_BN6\",\"unlockedOn\":1647460017562}],\"terminalCommandHistory\":[\"c\",\"sh 30\",\"sleeve hom\",\"ka\",\"mh\",\"ka\",\"mcp\",\"mh\",\"ka\",\"sh 30\",\"k\",\"ka\",\"mh\",\"ka\",\"sh 30\",\"ka\",\"mcp\",\"sh 30\",\"ka\",\"mh\",\"ka\",\"mcp\",\"mh\",\"ka\",\"sh 30\",\"sleeve hack\",\"join c\",\"mcp\",\"sleeve hom\",\"as max-hardware\",\"tail smart_hack.js\",\"ka\",\"bsa\",\"mh\",\"ka\",\"sh 30\",\"ka\",\"mh\",\"tail mod_hack.js\",\"mcp\",\"bsa c\",\"ka\",\"bsa\",\"run charge.js\",\"ka\",\"mhka\",\"ka\",\"mh\",\"hn\",\"hnk\"],\"identifier\":\"87752bcda21cd\",\"factionWorkType\":\"Faction Hacking Work\",\"committingCrimeThruSingFn\":false,\"singFnCrimeWorkerScript\":null}}","AllServersSave":"{\"home\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":false,\"ip\":\"78.9.5.3\",\"isConnectedTo\":true,\"maxRam\":2048,\"messages\":[\"hackers-starting-handbook.lit\",\"j0.msg\",\"j1.msg\",\"csec-test.msg\",\"j2.msg\",\"nitesec-test.msg\"],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"b1t_flum3.exe\",\"Formulas.exe\",\"fl1ght.exe\",\"BruteSSH.exe\",\"FTPCrack.exe\",\"relaySMTP.exe\",\"HTTPWorm.exe\",\"SQLInject.exe\"],\"ramUsed\":1918.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"clock.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5179.2099999974835,\"pid\":8,\"ramUsage\":1.6,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"clock.js\",\"url\":\"blob:file:///a70b1adb-42d6-430d-915c-591ddda0b067\",\"moduleSequenceNumber\":3260}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"mod_hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":166174.5790795146,\"onlineMoneyMade\":1343558883,\"onlineRunningTime\":448.8099999999831,\"pid\":1006,\"ramUsage\":21.15,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/lib/util.js\",\"url\":\"blob:file:///1e8f195b-591c-41ee-a73f-abec197e6225\",\"moduleSequenceNumber\":90050},{\"filename\":\"/lib/hack/host.js\",\"url\":\"blob:file:///8fd1c835-d97e-4b43-82dc-00bd1ebd2149\",\"moduleSequenceNumber\":92586},{\"filename\":\"/lib/hack/cycle_production.js\",\"url\":\"blob:file:///bd06ad29-d5db-4a76-b782-48122ddbfe91\",\"moduleSequenceNumber\":92582},{\"filename\":\"/lib/util.js\",\"url\":\"blob:file:///9866f60d-b9b4-41e1-b9e7-52ae31438f8a\",\"moduleSequenceNumber\":90050},{\"filename\":\"/lib/hack/mod_hack_env.js\",\"url\":\"blob:file:///76dfd461-9c63-47fd-95f9-66ef384b184d\",\"moduleSequenceNumber\":92588},{\"filename\":\"/lib/util.js\",\"url\":\"blob:file:///28de9303-9579-446a-8d9c-d2c455aad1cb\",\"moduleSequenceNumber\":90050},{\"filename\":\"mod_hack.js\",\"url\":\"blob:file:///7266c441-5109-40e5-b840-85ac9a2ec399\",\"moduleSequenceNumber\":93962}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"script\\\":\\\"/lib/exec/grow.js\\\",\\\"host\\\":\\\"home\\\",\\\"numThreads\\\":144,\\\"target\\\":\\\"phantasy\\\",\\\"hackLevelTiming\\\":153.19873646097005,\\\"hackLevelEffect\\\":204,\\\"batchId\\\":4,\\\"offset\\\":7200,\\\"operationTime\\\":142114,\\\"finish\\\":149314,\\\"realTimeStart\\\":1647907321842,\\\"uid\\\":\\\"004-2G-home\\\",\\\"writeFile\\\":\\\"\\\"}\"],\"dataMap\":{},\"filename\":\"/lib/exec/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":63.61000000000036,\"pid\":1267,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":144,\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///880772b0-ad4e-4aad-b1c3-6edb0399d4fe\",\"moduleSequenceNumber\":90057}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"script\\\":\\\"/lib/exec/hack.js\\\",\\\"host\\\":\\\"home\\\",\\\"numThreads\\\":120,\\\"target\\\":\\\"phantasy\\\",\\\"hackLevelTiming\\\":13.499605144053142,\\\"hackLevelEffect\\\":204,\\\"batchId\\\":5,\\\"offset\\\":8000,\\\"operationTime\\\":142113,\\\"finish\\\":150113,\\\"realTimeStart\\\":1647907321842,\\\"uid\\\":\\\"005-0H-home\\\",\\\"writeFile\\\":\\\"\\\"}\"],\"dataMap\":{},\"filename\":\"/lib/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":62.81000000000035,\"pid\":1269,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":120,\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///501644d4-8cc1-46f0-bde6-f3d40d442827\",\"moduleSequenceNumber\":90251}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"script\\\":\\\"/lib/exec/grow.js\\\",\\\"host\\\":\\\"home\\\",\\\"numThreads\\\":144,\\\"target\\\":\\\"phantasy\\\",\\\"hackLevelTiming\\\":153.19873646097005,\\\"hackLevelEffect\\\":204,\\\"batchId\\\":5,\\\"offset\\\":8800,\\\"operationTime\\\":142114,\\\"finish\\\":150914,\\\"realTimeStart\\\":1647907321842,\\\"uid\\\":\\\"005-2G-home\\\",\\\"writeFile\\\":\\\"\\\"}\"],\"dataMap\":{},\"filename\":\"/lib/exec/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":62.01000000000034,\"pid\":1271,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":144,\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///880772b0-ad4e-4aad-b1c3-6edb0399d4fe\",\"moduleSequenceNumber\":90057}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"script\\\":\\\"/lib/exec/hack.js\\\",\\\"host\\\":\\\"home\\\",\\\"numThreads\\\":120,\\\"target\\\":\\\"phantasy\\\",\\\"hackLevelTiming\\\":13.499605144053142,\\\"hackLevelEffect\\\":204,\\\"batchId\\\":6,\\\"offset\\\":9600,\\\"operationTime\\\":142113,\\\"finish\\\":151713,\\\"realTimeStart\\\":1647907321842,\\\"uid\\\":\\\"006-0H-home\\\",\\\"writeFile\\\":\\\"\\\"}\"],\"dataMap\":{},\"filename\":\"/lib/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":61.21000000000033,\"pid\":1273,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":120,\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///501644d4-8cc1-46f0-bde6-f3d40d442827\",\"moduleSequenceNumber\":90251}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"script\\\":\\\"/lib/exec/grow.js\\\",\\\"host\\\":\\\"home\\\",\\\"numThreads\\\":144,\\\"target\\\":\\\"phantasy\\\",\\\"hackLevelTiming\\\":153.19873646097005,\\\"hackLevelEffect\\\":204,\\\"batchId\\\":6,\\\"offset\\\":10400,\\\"operationTime\\\":142114,\\\"finish\\\":152514,\\\"realTimeStart\\\":1647907321842,\\\"uid\\\":\\\"006-2G-home\\\",\\\"writeFile\\\":\\\"\\\"}\"],\"dataMap\":{},\"filename\":\"/lib/exec/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":60.410000000000316,\"pid\":1275,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":144,\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///880772b0-ad4e-4aad-b1c3-6edb0399d4fe\",\"moduleSequenceNumber\":90057}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"script\\\":\\\"/lib/exec/hack.js\\\",\\\"host\\\":\\\"home\\\",\\\"numThreads\\\":120,\\\"target\\\":\\\"phantasy\\\",\\\"hackLevelTiming\\\":13.499605144053142,\\\"hackLevelEffect\\\":204,\\\"batchId\\\":7,\\\"offset\\\":11200,\\\"operationTime\\\":142113,\\\"finish\\\":153313,\\\"realTimeStart\\\":1647907321842,\\\"uid\\\":\\\"007-0H-home\\\",\\\"writeFile\\\":\\\"\\\"}\"],\"dataMap\":{},\"filename\":\"/lib/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":59.610000000000305,\"pid\":1277,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":120,\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///501644d4-8cc1-46f0-bde6-f3d40d442827\",\"moduleSequenceNumber\":90251}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"script\\\":\\\"/lib/exec/grow.js\\\",\\\"host\\\":\\\"home\\\",\\\"numThreads\\\":144,\\\"target\\\":\\\"phantasy\\\",\\\"hackLevelTiming\\\":153.19873646097005,\\\"hackLevelEffect\\\":204,\\\"batchId\\\":7,\\\"offset\\\":12000,\\\"operationTime\\\":142114,\\\"finish\\\":154114,\\\"realTimeStart\\\":1647907321842,\\\"uid\\\":\\\"007-2G-home\\\",\\\"writeFile\\\":\\\"\\\"}\"],\"dataMap\":{},\"filename\":\"/lib/exec/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":58.810000000000294,\"pid\":1279,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":144,\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///880772b0-ad4e-4aad-b1c3-6edb0399d4fe\",\"moduleSequenceNumber\":90057}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"script\\\":\\\"/lib/exec/hack.js\\\",\\\"host\\\":\\\"home\\\",\\\"numThreads\\\":120,\\\"target\\\":\\\"phantasy\\\",\\\"hackLevelTiming\\\":13.499605144053142,\\\"hackLevelEffect\\\":204,\\\"batchId\\\":8,\\\"offset\\\":12800,\\\"operationTime\\\":142113,\\\"finish\\\":154913,\\\"realTimeStart\\\":1647907321842,\\\"uid\\\":\\\"008-0H-home\\\",\\\"writeFile\\\":\\\"\\\"}\"],\"dataMap\":{},\"filename\":\"/lib/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":58.01000000000028,\"pid\":1281,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":120,\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///501644d4-8cc1-46f0-bde6-f3d40d442827\",\"moduleSequenceNumber\":90251}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"script\\\":\\\"/lib/exec/weaken.js\\\",\\\"host\\\":\\\"home\\\",\\\"numThreads\\\":4,\\\"target\\\":\\\"phantasy\\\",\\\"hackLevelTiming\\\":203.99842057621257,\\\"hackLevelEffect\\\":204,\\\"batchId\\\":9,\\\"offset\\\":14800,\\\"operationTime\\\":113691,\\\"finish\\\":128491,\\\"realTimeStart\\\":1647907321842,\\\"uid\\\":\\\"009-1WH-home\\\",\\\"writeFile\\\":\\\"\\\"}\"],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":56.010000000000254,\"pid\":1286,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":4,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///522ccfc0-4f77-46df-b1d0-e703c27d5576\",\"moduleSequenceNumber\":90445}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"script\\\":\\\"/lib/exec/weaken.js\\\",\\\"host\\\":\\\"home\\\",\\\"numThreads\\\":12,\\\"target\\\":\\\"phantasy\\\",\\\"hackLevelTiming\\\":203.99842057621257,\\\"hackLevelEffect\\\":204,\\\"batchId\\\":9,\\\"offset\\\":15600,\\\"operationTime\\\":113691,\\\"finish\\\":129291,\\\"realTimeStart\\\":1647907321842,\\\"uid\\\":\\\"009-3WG-home\\\",\\\"writeFile\\\":\\\"\\\"}\"],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":55.21000000000024,\"pid\":1289,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":12,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///522ccfc0-4f77-46df-b1d0-e703c27d5576\",\"moduleSequenceNumber\":90445}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"script\\\":\\\"/lib/exec/weaken.js\\\",\\\"host\\\":\\\"home\\\",\\\"numThreads\\\":5,\\\"target\\\":\\\"phantasy\\\",\\\"hackLevelTiming\\\":203.99842057621257,\\\"hackLevelEffect\\\":204,\\\"batchId\\\":10,\\\"offset\\\":16400,\\\"operationTime\\\":113691,\\\"finish\\\":130091,\\\"realTimeStart\\\":1647907321842,\\\"uid\\\":\\\"010-1WH-home\\\",\\\"writeFile\\\":\\\"\\\"}\"],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":54.41000000000023,\"pid\":1291,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///522ccfc0-4f77-46df-b1d0-e703c27d5576\",\"moduleSequenceNumber\":90445}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"script\\\":\\\"/lib/exec/weaken.js\\\",\\\"host\\\":\\\"home\\\",\\\"numThreads\\\":12,\\\"target\\\":\\\"phantasy\\\",\\\"hackLevelTiming\\\":203.99842057621257,\\\"hackLevelEffect\\\":204,\\\"batchId\\\":10,\\\"offset\\\":17200,\\\"operationTime\\\":113691,\\\"finish\\\":130891,\\\"realTimeStart\\\":1647907321842,\\\"uid\\\":\\\"010-3WG-home\\\",\\\"writeFile\\\":\\\"\\\"}\"],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":53.61000000000022,\"pid\":1293,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":12,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///522ccfc0-4f77-46df-b1d0-e703c27d5576\",\"moduleSequenceNumber\":90445}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"script\\\":\\\"/lib/exec/weaken.js\\\",\\\"host\\\":\\\"home\\\",\\\"numThreads\\\":5,\\\"target\\\":\\\"phantasy\\\",\\\"hackLevelTiming\\\":203.99842057621257,\\\"hackLevelEffect\\\":204,\\\"batchId\\\":11,\\\"offset\\\":18000,\\\"operationTime\\\":113691,\\\"finish\\\":131691,\\\"realTimeStart\\\":1647907321842,\\\"uid\\\":\\\"011-1WH-home\\\",\\\"writeFile\\\":\\\"\\\"}\"],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":52.81000000000021,\"pid\":1295,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///522ccfc0-4f77-46df-b1d0-e703c27d5576\",\"moduleSequenceNumber\":90445}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"script\\\":\\\"/lib/exec/weaken.js\\\",\\\"host\\\":\\\"home\\\",\\\"numThreads\\\":3,\\\"target\\\":\\\"phantasy\\\",\\\"hackLevelTiming\\\":203.99842057621257,\\\"hackLevelEffect\\\":204,\\\"batchId\\\":11,\\\"offset\\\":18800,\\\"operationTime\\\":113691,\\\"finish\\\":132491,\\\"realTimeStart\\\":1647907321842,\\\"uid\\\":\\\"011-3WG-home\\\",\\\"writeFile\\\":\\\"\\\"}\"],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":52.0100000000002,\"pid\":1298,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":3,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///522ccfc0-4f77-46df-b1d0-e703c27d5576\",\"moduleSequenceNumber\":90445}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"test me\",\"filename\":\"job.txt\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":83050,\"_hash\":\"e437d8916edcbc62e47f2dfa71786a999732804cbd1e99c5341e1659728e9753\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"12/20/2021, 10:46:49 AM:\\n  hack_me.ns {t=1600} phantasy\\n  job.ns {t=1} \\n12/20/2021, 10:47:20 AM:\\n  hack_me.ns {t=1600} phantasy\\n  job.ns {t=1} \\n12/20/2021, 10:47:23 AM:\\n  hack_me.ns {t=1600} phantasy\\n  job.ns {t=1} \\n12/20/2021, 10:47:25 AM:\\n  hack_me.ns {t=1600} phantasy\\n  job.ns {t=1}\",\"filename\":\"out.txt\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":0,\"server\":\"home\",\"moduleSequenceNumber\":83051,\"_hash\":\"cd9e9b4b8033ea304743475d442987cf5760d0bb94e63296c690c3e821b6c5d9\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const filenames = ns.ls(ns.getHostname()).filter(filename => filename.indexOf(\\\".txt\\\") !== -1);\\r\\n    for (const filename of filenames) {\\r\\n        ns.rm(filename);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm1fYWxsLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsicm1fYWxsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU87SUFDakMsTUFBTSxTQUFTLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFOUYsS0FBSyxNQUFNLFFBQVEsSUFBSSxTQUFTLEVBQUU7UUFDakMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxRQUFRLENBQUMsQ0FBQztLQUNoQjtBQUNGLENBQUMifQ==\",\"filename\":\"rm_all.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"rm_all.js\",\"url\":\"blob:file:///0c6ed3db-76eb-4e08-894c-c1dc9ca15f6a\",\"moduleSequenceNumber\":264}],\"dependents\":[],\"ramUsage\":2.85,\"server\":\"home\",\"moduleSequenceNumber\":83052,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { stFormat } from \\\"lib/util\\\";\\r\\n// AUG NOTES:\\r\\n// CyberSec - Cranial Signal Processors - $70m [10k]\\r\\n// NiteSec - CRTX42-AA Gene Modification - $225m [45k]\\r\\n// The Black Hand - The Black Hand - $550m [100k]\\r\\nexport class Augmentation {\\r\\n    name;\\r\\n    faction;\\r\\n    price;\\r\\n    rep;\\r\\n    stats;\\r\\n    owned;\\r\\n    installed;\\r\\n    purchaseable;\\r\\n    dep;\\r\\n    str;\\r\\n    constructor(ns, name, faction) {\\r\\n        const ownedAugs = ns.getOwnedAugmentations(true);\\r\\n        const installedAugs = ns.getOwnedAugmentations();\\r\\n        const factionRep = (ns.getPlayer().currentWorkFactionName === faction ? ns.getPlayer().workRepGained : 0) +\\r\\n            ns.getFactionRep(faction);\\r\\n        this.name = name;\\r\\n        this.faction = faction;\\r\\n        this.price = ns.getAugmentationPrice(this.name);\\r\\n        this.rep = ns.getAugmentationRepReq(this.name);\\r\\n        this.stats = ns.getAugmentationStats(this.name);\\r\\n        this.owned = ownedAugs.includes(this.name);\\r\\n        this.installed = installedAugs.includes(this.name);\\r\\n        this.purchaseable = factionRep >= this.rep;\\r\\n        let dep = ns.getAugmentationPrereq(this.name)[0];\\r\\n        if (dep === undefined || ownedAugs.includes(dep) || installedAugs.includes(dep))\\r\\n            dep = \\\"\\\";\\r\\n        this.dep = dep;\\r\\n        let installedStr = this.installed\\r\\n            ? \\\"INSTALLED\\\"\\r\\n            : this.owned\\r\\n                ? \\\"OWNED\\\"\\r\\n                : this.purchaseable\\r\\n                    ? \\\"PURCHASEABLE\\\"\\r\\n                    : \\\"\\\";\\r\\n        if (ns.getPlayer().currentWorkFactionName === faction && installedStr === \\\"\\\") {\\r\\n            const repGainPerMs = (ns.getPlayer().workRepGainRate * 5) / 1000;\\r\\n            installedStr = stFormat(ns, (this.rep - factionRep) / repGainPerMs);\\r\\n        }\\r\\n        this.str = ns.sprintf(\\\"%s: %s - %s [%s] %s\\\", this.faction, this.name, ns.nFormat(this.price, \\\"$0.000a\\\"), ns.nFormat(this.rep, \\\"0.000a\\\"), installedStr);\\r\\n    }\\r\\n    printAugStats(ns) {\\r\\n        for (const [key, val] of Object.entries(this.stats)) {\\r\\n            ns.tprintf(\\\"%30s %s\\\", key, val);\\r\\n        }\\r\\n    }\\r\\n    toString() {\\r\\n        return this.str;\\r\\n    }\\r\\n    isHackUseful() {\\r\\n        if (this.name === \\\"Neuroflux Governor\\\")\\r\\n            return false;\\r\\n        //return true;\\r\\n        // if (this.stats.crime_money_mult) return true;\\r\\n        // if (this.stats.crime_success_mult) return true;                    \\r\\n        if (this.stats.company_rep_mult)\\r\\n            return true;\\r\\n        if (this.stats.faction_rep_mult)\\r\\n            return true;\\r\\n        if (this.stats.hacking_chance_mult)\\r\\n            return true;\\r\\n        if (this.stats.hacking_exp_mult)\\r\\n            return true;\\r\\n        if (this.stats.hacking_grow_mult)\\r\\n            return true;\\r\\n        if (this.stats.hacking_money_mult)\\r\\n            return true;\\r\\n        if (this.stats.hacking_mult)\\r\\n            return true;\\r\\n        if (this.stats.hacking_speed_mult)\\r\\n            return true;\\r\\n        // if (this.stats.hacknet_node_core_cost_mult) return true;\\r\\n        // if (this.stats.hacknet_node_level_cost_mult) return true;\\r\\n        // if (this.stats.hacknet_node_money_mult) return true;\\r\\n        // if (this.stats.hacknet_node_purchase_cost_mult) return true;\\r\\n        // if (this.stats.hacknet_node_ram_cost_mult) return true;\\r\\n        if (this.name === \\\"BitRunners Neurolink\\\" ||\\r\\n            this.name === \\\"CashRoot Starter Kit\\\" ||\\r\\n            this.name === \\\"PCMatrix\\\" ||\\r\\n            this.name === \\\"Neuroreceptor Management Implant\\\" ||\\r\\n            this.name === \\\"The Red Pill\\\")\\r\\n            return true;\\r\\n        return false;\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXVnbWVudGF0aW9uLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2F1Z21lbnRhdGlvbi9hdWdtZW50YXRpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUVwQyxhQUFhO0FBQ2Isb0RBQW9EO0FBQ3BELHNEQUFzRDtBQUN0RCxpREFBaUQ7QUFFakQsTUFBTSxPQUFPLFlBQVk7SUFDckIsSUFBSSxDQUFTO0lBQ2IsT0FBTyxDQUFTO0lBQ2hCLEtBQUssQ0FBUztJQUNkLEdBQUcsQ0FBUztJQUNaLEtBQUssQ0FBb0I7SUFDekIsS0FBSyxDQUFVO0lBQ2YsU0FBUyxDQUFVO0lBQ25CLFlBQVksQ0FBVTtJQUN0QixHQUFHLENBQVM7SUFDWixHQUFHLENBQVM7SUFFWixZQUFZLEVBQU0sRUFBRSxJQUFZLEVBQUUsT0FBZTtRQUM3QyxNQUFNLFNBQVMsR0FBRyxFQUFFLENBQUMscUJBQXFCLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDakQsTUFBTSxhQUFhLEdBQUcsRUFBRSxDQUFDLHFCQUFxQixFQUFFLENBQUM7UUFDakQsTUFBTSxVQUFVLEdBQ1osQ0FBQyxFQUFFLENBQUMsU0FBUyxFQUFFLENBQUMsc0JBQXNCLEtBQUssT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsU0FBUyxFQUFFLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDdEYsRUFBRSxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUM5QixJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztRQUNqQixJQUFJLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQztRQUN2QixJQUFJLENBQUMsS0FBSyxHQUFHLEVBQUUsQ0FBQyxvQkFBb0IsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDaEQsSUFBSSxDQUFD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\",\"filename\":\"/lib/augmentation/augmentation.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":23.1,\"server\":\"home\",\"moduleSequenceNumber\":83053,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getOwnedAugmentations\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getFactionRep\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getAugmentationPrice\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"getAugmentationRepReq\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"getAugmentationStats\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getAugmentationPrereq\",\"cost\":5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.grow(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLElBQUksR0FBdUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFFbkUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDdkIsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7UUFDeEMsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7S0FDM0MsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyJ9\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///880772b0-ad4e-4aad-b1c3-6edb0399d4fe\",\"moduleSequenceNumber\":90057}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":90057,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.hack(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLElBQUksR0FBdUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFFbkUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDdkIsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7UUFDeEMsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7S0FDM0MsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyJ9\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///501644d4-8cc1-46f0-bde6-f3d40d442827\",\"moduleSequenceNumber\":90251}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"home\",\"moduleSequenceNumber\":90251,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.weaken(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxJQUFJLEdBQXVCLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO0lBRW5FLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFO1FBQ3pCLGtCQUFrQixFQUFFLElBQUksQ0FBQyxlQUFlO1FBQ3hDLGtCQUFrQixFQUFFLElBQUksQ0FBQyxlQUFlO0tBQzNDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///522ccfc0-4f77-46df-b1d0-e703c27d5576\",\"moduleSequenceNumber\":90445}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":90445,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// {targetname: {hack stat, production lookup table}}\\r\\nconst CYCLE_PRODUCTION_LOOKUP = {};\\r\\nexport function getCycleProductionLookup(ns, env, hackLvl) {\\r\\n    if (CYCLE_PRODUCTION_LOOKUP[env.targetname] &&\\r\\n        CYCLE_PRODUCTION_LOOKUP[env.targetname].hack === hackLvl) {\\r\\n        return CYCLE_PRODUCTION_LOOKUP[env.targetname].prod;\\r\\n    }\\r\\n    // memoize cycle production statistics indexed by cycleThreadAllowance\\r\\n    const cycleProductionLookup = new Array(env.maxThreads + 1).fill(null);\\r\\n    let hackThreads = Math.min(env.maxThreads, Math.floor(1 / env.hackPercentPerThread)) - 1;\\r\\n    const threadStep = Math.max(Math.floor(hackThreads / 10000), 1);\\r\\n    while (hackThreads > 0) {\\r\\n        const hackTotal = env.hackPercentPerThread * hackThreads * env.highMoney;\\r\\n        const hackSecIncrease = ns.hackAnalyzeSecurity(hackThreads);\\r\\n        const growMult = Math.max(env.highMoney / (env.highMoney - hackTotal), 1);\\r\\n        const growThreads = env.calcGrowThreads(ns, growMult, true);\\r\\n        if (hackThreads + growThreads > env.maxThreads) {\\r\\n            //ns.tprintf(\\\"h %d | g %d\\\", hackThreads, growThreads)\\r\\n            hackThreads -= threadStep;\\r\\n            continue;\\r\\n        }\\r\\n        const growSecIncrease = ns.growthAnalyzeSecurity(growThreads);\\r\\n        const weakenHackThreads = Math.ceil(hackSecIncrease / env.weakenAmountPerThread);\\r\\n        const weakenGrowThreads = Math.ceil(growSecIncrease / env.weakenAmountPerThread);\\r\\n        const totalThreads = hackThreads + weakenHackThreads + growThreads + weakenGrowThreads;\\r\\n        hackThreads -= threadStep;\\r\\n        if (totalThreads > env.maxThreads)\\r\\n            continue;\\r\\n        if (cycleProductionLookup[totalThreads] !== null) {\\r\\n            // do nothing\\r\\n        }\\r\\n        else {\\r\\n            cycleProductionLookup[totalThreads] = {\\r\\n                totalThreads: totalThreads,\\r\\n                hackTotal: hackTotal,\\r\\n                hackThreads: hackThreads,\\r\\n                growThreads: growThreads,\\r\\n                weakenHackThreads: weakenHackThreads,\\r\\n                weakenGrowThreads: weakenGrowThreads,\\r\\n            };\\r\\n        }\\r\\n    }\\r\\n    // Fill in the blanks\\r\\n    const zeroThread = {\\r\\n        totalThreads: 0,\\r\\n        hackTotal: 0,\\r\\n        hackThreads: 0,\\r\\n        growThreads: 0,\\r\\n        weakenHackThreads: 0,\\r\\n        weakenGrowThreads: 0,\\r\\n    };\\r\\n    let fillDict = zeroThread;\\r\\n    for (let idx = 0; idx < cycleProductionLookup.length; idx++) {\\r\\n        if (cycleProductionLookup[idx] === null)\\r\\n            cycleProductionLookup[idx] = fillDict;\\r\\n        else\\r\\n            fillDict = cycleProductionLookup[idx];\\r\\n    }\\r\\n    // const endTime = new Date().getTime();\\r\\n    // ns.tprintf(\\r\\n    //     \\\"Calculated %20s:%d in %4dms | %d values | %4d\\\",\\r\\n    //     env.targetname,\\r\\n    //     ns.getPlayer().hacking,\\r\\n    //     endTime - startTime,\\r\\n    //     env.maxThreads,\\r\\n    //     Math.floor(1 / env.hackPercentPerThread)\\r\\n    // );\\r\\n    CYCLE_PRODUCTION_LOOKUP[env.targetname] = { hack: hackLvl, prod: cycleProductionLookup };\\r\\n    return CYCLE_PRODUCTION_LOOKUP[env.targetname].prod;\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3ljbGVfcHJvZHVjdGlvbi5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9oYWNrL2N5Y2xlX3Byb2R1Y3Rpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBWUEscURBQXFEO0FBQ3JELE1BQU0sdUJBQXVCLEdBTXpCLEVBQUUsQ0FBQztBQUVQLE1BQU0sVUFBVSx3QkFBd0IsQ0FBQyxFQUFNLEVBQUUsR0FBaUIsRUFBRSxPQUFlO0lBQy9FLElBQ0ksdUJBQXVCLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQztRQUN2Qyx1QkFBdUIsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUMsSUFBSSxLQUFLLE9BQU8sRUFDMUQ7UUFDRSxPQUFPLHVCQUF1QixDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQyxJQUFJLENBQUM7S0FDdkQ7SUFFRCxzRUFBc0U7SUFDdEUsTUFBTSxxQkFBcUIsR0FBRyxJQUFJLEtBQUssQ0FBQyxHQUFHLENBQUMsVUFBVSxHQUFHLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUV2RSxJQUFJLFdBQVcsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLG9CQUFvQixDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDekYsTUFBTSxVQUFVLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFdBQVcsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUVoRSxPQUFPLFdBQVcsR0FBRyxDQUFDLEVBQUU7UUFDcEIsTUFBTSxTQUFTLEdBQUcsR0FBRyxDQUFDLG9CQUFvQixHQUFHLFdBQVcsR0FBRyxHQUFHLENBQUMsU0FBUyxDQUFDO1FBQ3pFLE1BQU0sZUFBZSxHQUFHLEVBQUUsQ0FB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\",\"filename\":\"/lib/hack/cycle_production.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.7,\"server\":\"home\",\"moduleSequenceNumber\":92582,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { WEAKENJS, GROWJS, HACKJS, UTILJS } from \\\"lib/util\\\";\\r\\nexport class Host {\\r\\n    hostname;\\r\\n    threadSize;\\r\\n    maxThreads;\\r\\n    reservedScriptCalls;\\r\\n    constructor(ns, hostname, threadSize) {\\r\\n        this.hostname = hostname;\\r\\n        this.threadSize = threadSize;\\r\\n        this.reservedScriptCalls = [];\\r\\n        this.maxThreads = 0;\\r\\n        this.getMaxThreads(ns);\\r\\n    }\\r\\n    reset() {\\r\\n        this.reservedScriptCalls = [];\\r\\n    }\\r\\n    getReservedThreads() {\\r\\n        return this.reservedScriptCalls.reduce((a, b) => a + b.numThreads, 0);\\r\\n    }\\r\\n    getAvailableThreads() {\\r\\n        return this.reservedScriptCalls.reduce((a, b) => a - b.numThreads, this.maxThreads);\\r\\n    }\\r\\n    // return # of threads successfully allocated\\r\\n    tryReserveThreads(ns, script, host, numThreads, target, hackLevelTiming, hackLevelEffect, batchId, offset, operationTime, uid, writeFile) {\\r\\n        const allocateThreads = Math.min(this.getAvailableThreads(), numThreads);\\r\\n        if (allocateThreads === 0)\\r\\n            return allocateThreads;\\r\\n        this.reservedScriptCalls.push({\\r\\n            script: script,\\r\\n            host: host,\\r\\n            numThreads: allocateThreads,\\r\\n            target: target,\\r\\n            hackLevelTiming: hackLevelTiming,\\r\\n            hackLevelEffect: hackLevelEffect,\\r\\n            batchId: batchId,\\r\\n            offset: offset,\\r\\n            operationTime: operationTime,\\r\\n            finish: offset + operationTime,\\r\\n            realTimeStart: 0,\\r\\n            uid: uid,\\r\\n            writeFile: writeFile,\\r\\n        });\\r\\n        return allocateThreads;\\r\\n    }\\r\\n    // update max threads in case server size has changed\\r\\n    getMaxThreads(ns) {\\r\\n        this.maxThreads = Math.floor(ns.getServerMaxRam(this.hostname) / this.threadSize);\\r\\n        // if this host is home, reserve 64GB of ram for other stuff\\r\\n        if (this.hostname === \\\"home\\\") {\\r\\n            //const homeram = ns.getServerMaxRam(this.hostname) - 1024 - 128;\\r\\n            const homeram = ns.getServerMaxRam(this.hostname) - 128;\\r\\n            this.maxThreads = Math.max(0, Math.floor(homeram / this.threadSize));\\r\\n        }\\r\\n        this.maxThreads = Math.min(1000000, this.maxThreads);\\r\\n        return this.maxThreads;\\r\\n    }\\r\\n    async prep(ns, force = false) {\\r\\n        if (force || !ns.fileExists(GROWJS, this.hostname))\\r\\n            await ns.scp(GROWJS, \\\"home\\\", this.hostname);\\r\\n        if (force || !ns.fileExists(WEAKENJS, this.hostname))\\r\\n            await ns.scp(WEAKENJS, \\\"home\\\", this.hostname);\\r\\n        if (force || !ns.fileExists(HACKJS, this.hostname))\\r\\n            await ns.scp(HACKJS, \\\"home\\\", this.hostname);\\r\\n        if (force || !ns.fileExists(UTILJS, this.hostname))\\r\\n            await ns.scp(UTILJS, \\\"home\\\", this.hostname);\\r\\n    }\\r\\n}\\r\\nexport function generateHosts(ns, hostnames, threadSize) {\\r\\n    let hosts = [];\\r\\n    let maxThreads = 0;\\r\\n    if (hostnames)\\r\\n        hosts = hostnames\\r\\n            .map((x) => new Host(ns, x, threadSize))\\r\\n            .filter((x) => x.maxThreads > 0)\\r\\n            .sort((a, b) => b.maxThreads - a.maxThreads);\\r\\n    hosts.map((x) => (maxThreads += x.maxThreads));\\r\\n    // Too many threads causes problems\\r\\n    maxThreads = Math.min(1000000, maxThreads);\\r\\n    return [hosts, maxThreads];\\r\\n}\\r\\nexport function getMaxThreads(ns, hosts) {\\r\\n    let maxThreads = 0;\\r\\n    hosts.map((x) => (maxThreads += x.getMaxThreads(ns)));\\r\\n    // Too many threads causes problems\\r\\n    maxThreads = Math.min(1000000, maxThreads);\\r\\n    return maxThreads;\\r\\n}\\r\\nexport function mockReserveThreads(ns, hosts, numThreads, batchId, sloppy = false) {\\r\\n    if (sloppy)\\r\\n        return reserveThreadsForExecutionSloppy(ns, \\\"\\\", hosts, numThreads, \\\"\\\", 0, 0, 0, 0, 0, \\\"\\\", \\\"\\\");\\r\\n    else\\r\\n        return reserveThreadsForExecution(ns, \\\"\\\", hosts, numThreads, \\\"\\\", 0, 0, 0, 0, 0, \\\"\\\", \\\"\\\");\\r\\n}\\r\\nexport function reserveThreadsForExecution(ns, script, hosts, numThreads, target, hackLevelTiming, hackLevelEffect, batchId, offset, operationTime, uid, writeFile) {\\r\\n    for (const host of hosts) {\\r\\n        if (host.getAvailableThreads() >= numThreads) {\\r\\n            host.tryReserveThreads(ns, script, host.hostname, numThreads, target, hackLevelTiming, hackLevelEffect, batchId, offset, operationTime, ns.sprintf(\\\"%03d-%s-%s\\\", batchId, uid, host.hostname), writeFile);\\r\\n            return true;\\r\\n        }\\r\\n    }\\r\\n    return false;\\r\\n}\\r\\nexport function reserveThreadsForExecutionSloppy(ns, script, hosts, numThreads, target, hackLevelTiming, hackLevelEffect, batchId, offset, operationTime, uid, writeFile) {\\r\\n    let unallocatedThreads = numThreads;\\r\\n    for (const host of hosts) {\\r\\n        unallocatedThreads -= host.tryReserveThreads(ns, script, host.hostname, unallocatedThreads, target, hackLevelTiming, hackLevelEffect, batchId, offset, operationTime, ns.sprintf(\\\"%03d-%s-%s\\\", batchId, uid, host.hostname), writeFile);\\r\\n        if (unallocatedThreads === 0) {\\r\\n            return true;\\r\\n        }\\r\\n    }\\r\\n    ns.tprintf(\\\"WARNING: Only able to allocate %d/%d %s threads\\\", numThreads - unallocatedThreads, numThreads, script);\\r\\n    return false;\\r\\n}\\r\\nexport function clearOperationsByBatchId(hosts, batchId) {\\r\\n    for (const host of hosts) {\\r\\n        host.reservedScriptCalls = host.reservedScriptCalls.filter((a) => a.batchId !== batchId);\\r\\n    }\\r\\n}\\r\\nexport function clearAllBatches(hosts) {\\r\\n    for (const host of hosts) {\\r\\n        host.reset();\\r\\n    }\\r\\n}\\r\\nexport function mockPrimaryBatch(ns, hosts, primaryGrowThreads, primaryWeakenThreads) {\\r\\n    let threadsReserved = true;\\r\\n    if (primaryGrowThreads > 0)\\r\\n        threadsReserved = threadsReserved && mockReserveThreads(ns, hosts, primaryGrowThreads, 0, true);\\r\\n    if (primaryWeakenThreads > 0)\\r\\n        threadsReserved = threadsReserved && mockReserveThreads(ns, hosts, primaryWeakenThreads, 0, true);\\r\\n    return threadsReserved;\\r\\n}\\r\\nexport function mockBatch(ns, hosts, batchID, hackThreads, growThreads, weakenHackThreads, weakenGrowThreads) {\\r\\n    let threadsReserved = true;\\r\\n    if (hackThreads > 0)\\r\\n        threadsReserved = threadsReserved && mockReserveThreads(ns, hosts, hackThreads, batchID);\\r\\n    if (growThreads > 0)\\r\\n        threadsReserved = threadsReserved && mockReserveThreads(ns, hosts, growThreads, batchID);\\r\\n    if (weakenHackThreads > 0)\\r\\n        threadsReserved = threadsReserved && mockReserveThreads(ns, hosts, weakenHackThreads, batchID, true);\\r\\n    if (weakenGrowThreads > 0)\\r\\n        threadsReserved = threadsReserved && mockReserveThreads(ns, hosts, weakenGrowThreads, batchID, true);\\r\\n    return threadsReserved;\\r\\n}\\r\\nexport function sloppyPrimaryBatch(ns, env, playerHackLvlGrowTiming, playerHackLvlWeakenTiming, playerHackLvlEffect, growOffsetTime, weakenGrowOffsetTime, primaryGrowThreads, primaryWeakenThreads) {\\r\\n    if (primaryGrowThreads > 0)\\r\\n        reserveThreadsForExecutionSloppy(ns, GROWJS, env.hosts, primaryGrowThreads, env.targetname, playerHackLvlGrowTiming, playerHackLvlEffect, 0, growOffsetTime, env.growTime, \\\"0PG\\\", env.writeFile);\\r\\n    if (primaryWeakenThreads > 0)\\r\\n        reserveThreadsForExecutionSloppy(ns, WEAKENJS, env.hosts, primaryWeakenThreads, env.targetname, playerHackLvlWeakenTiming, playerHackLvlEffect, 0, weakenGrowOffsetTime, env.weakenTime, \\\"1PW\\\", env.writeFile);\\r\\n}\\r\\nexport function cleanPrimaryBatch(ns, env, playerHackLvlGrowTiming, playerHackLvlWeakenTiming, playerHackLvlEffect, growOffsetTime, weakenGrowOffsetTime, primaryGrowThreads, primaryWeakenThreads) {\\r\\n    let threadsReserved = true;\\r\\n    if (primaryGrowThreads > 0)\\r\\n        threadsReserved =\\r\\n            threadsReserved &&\\r\\n                reserveThreadsForExecution(ns, GROWJS, env.hosts, primaryGrowThreads, env.targetname, playerHackLvlGrowTiming, playerHackLvlEffect, 0, growOffsetTime, env.growTime, \\\"0PG\\\", env.writeFile);\\r\\n    if (primaryWeakenThreads > 0)\\r\\n        threadsReserved =\\r\\n            threadsReserved &&\\r\\n                reserveThreadsForExecutionSloppy(ns, WEAKENJS, env.hosts, primaryWeakenThreads, env.targetname, playerHackLvlWeakenTiming, playerHackLvlEffect, 0, weakenGrowOffsetTime, env.weakenTime, \\\"1PW\\\", env.writeFile);\\r\\n    return threadsReserved;\\r\\n}\\r\\nexport function sloppyBatch(ns, env, batchId, playerHackLvlHackTiming, playerHackLvlGrowTiming, playerHackLvlWeakenTiming, playerHackLvlEffect, hackOffsetTime, growOffsetTime, weakenHackOffsetTime, weakenGrowOffsetTime) {\\r\\n    const cycleOffsetTime = batchId * env.cycleSpacer;\\r\\n    reserveThreadsForExecutionSloppy(ns, HACKJS, env.hosts, env.hackThreads, env.targetname, playerHackLvlHackTiming, playerHackLvlEffect, batchId, cycleOffsetTime + hackOffsetTime, env.hackTime, \\\"0H\\\", env.writeFile);\\r\\n    reserveThreadsForExecutionSloppy(ns, GROWJS, env.hosts, env.growThreads, env.targetname, playerHackLvlGrowTiming, playerHackLvlEffect, batchId, cycleOffsetTime + growOffsetTime, env.growTime, \\\"2G\\\", env.writeFile);\\r\\n    reserveThreadsForExecutionSloppy(ns, WEAKENJS, env.hosts, env.weakenHackThreads, env.targetname, playerHackLvlWeakenTiming, playerHackLvlEffect, batchId, cycleOffsetTime + weakenHackOffsetTime, env.weakenTime, \\\"1WH\\\", env.writeFile);\\r\\n    reserveThreadsForExecutionSloppy(ns, WEAKENJS, env.hosts, env.weakenGrowThreads, env.targetname, playerHackLvlWeakenTiming, playerHackLvlEffect, batchId, cycleOffsetTime + weakenGrowOffsetTime, env.weakenTime, \\\"3WG\\\", env.writeFile);\\r\\n}\\r\\nexport function cleanBatch(ns, env, batchId, playerHackLvlHackTiming, playerHackLvlGrowTiming, playerHackLvlWeakenTiming, playerHackLvlEffect, hackOffsetTime, growOffsetTime, weakenHackOffsetTime, weakenGrowOffsetTime) {\\r\\n    const cycleOffsetTime = batchId * env.cycleSpacer;\\r\\n    let threadsReserved = true;\\r\\n    threadsReserved =\\r\\n        threadsReserved &&\\r\\n            reserveThreadsForExecution(ns, HACKJS, env.hosts, env.hackThreads, env.targetname, playerHackLvlHackTiming, playerHackLvlEffect, batchId, cycleOffsetTime + hackOffsetTime, env.hackTime, \\\"0H\\\", env.writeFile);\\r\\n    threadsReserved =\\r\\n        threadsReserved &&\\r\\n            reserveThreadsForExecution(ns, GROWJS, env.hosts, env.growThreads, env.targetname, playerHackLvlGrowTiming, playerHackLvlEffect, batchId, cycleOffsetTime + growOffsetTime, env.growTime, \\\"2G\\\", env.writeFile);\\r\\n    threadsReserved =\\r\\n        threadsReserved &&\\r\\n            reserveThreadsForExecutionSloppy(ns, WEAKENJS, env.hosts, env.weakenHackThreads, env.targetname, playerHackLvlWeakenTiming, playerHackLvlEffect, batchId, cycleOffsetTime + weakenHackOffsetTime, env.weakenTime, \\\"1WH\\\", env.writeFile);\\r\\n    threadsReserved =\\r\\n        threadsReserved &&\\r\\n            reserveThreadsForExecutionSloppy(ns, WEAKENJS, env.hosts, env.weakenGrowThreads, env.targetname, playerHackLvlWeakenTiming, playerHackLvlEffect, batchId, cycleOffsetTime + weakenGrowOffsetTime, env.weakenTime, \\\"3WG\\\", env.writeFile);\\r\\n    return threadsReserved;\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaG9zdC5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9oYWNrL2hvc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxNQUFNLFVBQVUsQ0FBQztBQWtCNUQsTUFBTSxPQUFPLElBQUk7SUFDYixRQUFRLENBQVM7SUFDakIsVUFBVSxDQUFTO0lBQ25CLFVBQVUsQ0FBUztJQUNuQixtQkFBbUIsQ0FBdUI7SUFFMUMsWUFBWSxFQUFNLEVBQUUsUUFBZ0IsRUFBRSxVQUFrQjtRQUNwRCxJQUFJLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztRQUN6QixJQUFJLENBQUMsVUFBVSxHQUFHLFVBQVUsQ0FBQztRQUM3QixJQUFJLENBQUMsbUJBQW1CLEdBQUcsRUFBRSxDQUFDO1FBQzlCLElBQUksQ0FBQyxVQUFVLEdBQUcsQ0FBQyxDQUFDO1FBQ3BCLElBQUksQ0FBQyxhQUFhLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDM0IsQ0FBQztJQUVELEtBQUs7UUFDRCxJQUFJLENBQUMsbUJBQW1CLEdBQUcsRUFBRSxDQUFDO0lBQ2xDLENBQUM7SUFFRCxrQkFBa0I7UUFDZCxPQUFPLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLFVBQVUsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUMxRSxDQUFDO0lBRUQsbUJBQW1CO1FBQ2YsT0FBTyxJQUFJLENBQUMsbUJBQW1CLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQ3hGLENBQUM7SUFFRCw2Q0FBNkM7SUFDN0MsaUJBQWlCLENBQ2IsRUFBTSxFQUNOLE1BQWMsRUFDZCxJQUFZLEVBQ1osVUFBa0IsRUFDbEIsTUFBYyxFQUNkLGVBQXVCLEVBQ3ZCLGVBQXVCLEVBQ3ZCLE9BQWUsRUFDZixNQUFjLEVBQ2QsYUFBcUIsRUFDckIsR0FBVyxFQUNYLFNBQWlCO1FBRWpCLE1BQU0sZUFBZSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLG1CQUFtQixFQUFFLEVBQUUsVUFBVSxDQUFDLENBQUM7UUFFekUsSUFBSSxlQUFlLEtBQUssQ0FBQztZQUFFLE9BQU8sZUFBZSxDQUFDO1FBRWxELElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLENBQUM7WUFDMUIsTUFBTSxFQUFFLE1BQU07WUFDZCxJQUFJLEVBQUUsSUFBSTtZQUNWLFVBQVUsRUFBRSxlQUFlO1lBQzNCLE1BQU0sRUFBRSxNQUFNO1lBQ2QsZUFBZSxFQUFFLGVBQWU7WUFDaEMsZUFBZSxFQUFFLGVBQWU7WUFDaEMsT0FBTyxFQUFFLE9BQU87WUFDaEIsTUFBTSxFQUFFLE1BQU07WUFDZCxhQUFhLEVBQUUsYUFBYTtZQUM1QixNQUFNLEVBQUUsTUFBTSxHQUFHLGFBQWE7WUFDOUIsYUFBYSxFQUFFLENBQUM7WUFDaEIsR0FBRyxFQUFFLEdBQUc7WUFDUixTQUFTLEVBQUUsU0FBUztTQUN2QixDQUFDLENBQUM7UUFFSCxPQUFPLGVBQWUsQ0FBQztJQUMzQixDQUFDO0lBRUQscURBQXFEO0lBQ3JELGFBQWEsQ0FBQyxFQUFNO1FBQ2hCLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7UUFFbEYsNERBQTREO1FBQzVELElBQUksSUFBSSxDQUFDLFFBQVEsS0FBSyxNQUFNLEVBQUU7WUFDMUIsaUVBQWlFO1lBQ2pFLE1BQU0sT0FBTyxHQUFHLEVBQUUsQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLEdBQUcsQ0FBQztZQUN4RCxJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDO1NBQ3hFO1FBRUQsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7UUFFckQsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDO0lBQzNCLENBQUM7SUFFRCxLQUFLLENBQUMsSUFBSSxDQUFDLEVBQU0sRUFBRSxLQUFLLEdBQUcsS0FBSztRQUM1QixJQUFJLEtBQUssSUFBSSxDQUFDLEVBQUUsQ0FBQyxVQUFVLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUM7WUFBRSxNQUFNLEVBQUUsQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFFLE1BQU0sRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDaEcsSUFBSSxLQUFLLElBQUksQ0FBQyxFQUFFLENBQUMsVUFBVSxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDO1lBQUUsTUFBTSxFQUFFLENBQUMsR0FBRyxDQUFDLFFBQVEsRUFBRSxNQUFNLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ3BHLElBQUksS0FBSyxJQUFJLENBQUMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQztZQUFFLE1BQU0sRUFBRSxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsTUFBTSxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUNoRyxJQUFJLEtBQUssSUFBSSxDQUFDLEVBQUUsQ0FBQyxVQUFVLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUM7WUFBRSxNQUFNLEVBQUUsQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFFLE1BQU0sRUFBRSxJQUFJLENB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\",\"filename\":\"/lib/hack/host.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.35,\"server\":\"home\",\"moduleSequenceNumber\":92586,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { stFormat, stdFormat, WEAKENJS, GROWJS, HACKJS, llog } from \\\"lib/util\\\";\\r\\nimport { getCycleProductionLookup } from \\\"lib/hack/cycle_production\\\";\\r\\nimport { generateHosts, getMaxThreads, clearOperationsByBatchId, cleanPrimaryBatch, sloppyPrimaryBatch, cleanBatch, sloppyBatch, mockPrimaryBatch, mockBatch, clearAllBatches } from \\\"lib/hack/host\\\";\\r\\nexport const TSPACER = 400;\\r\\nexport class SmartHackEnv {\\r\\n    targetname;\\r\\n    highMoney;\\r\\n    lowMoney;\\r\\n    tspacer;\\r\\n    weakenRam;\\r\\n    growRam;\\r\\n    hackRam;\\r\\n    threadSize;\\r\\n    cores;\\r\\n    hosts;\\r\\n    maxThreads;\\r\\n    waitPID;\\r\\n    security;\\r\\n    lowSecurity;\\r\\n    money;\\r\\n    // Weaken Info\\r\\n    weakenStartSec;\\r\\n    weakenAmountPerThread;\\r\\n    weakenThreads;\\r\\n    weakenGrowThreads;\\r\\n    weakenHackThreads;\\r\\n    weakenTime;\\r\\n    weakenTimeFullCycle;\\r\\n    // Grow Info\\r\\n    growStartMoney;\\r\\n    growMult;\\r\\n    growThreads;\\r\\n    growSecIncrease;\\r\\n    growTime;\\r\\n    // Hack Info\\r\\n    hackStartMoney;\\r\\n    hackTotal;\\r\\n    hackThreads;\\r\\n    hackSecIncrease;\\r\\n    hackTime;\\r\\n    hackPercentPerThread;\\r\\n    // Batch Cycle Info\\r\\n    threadsPerCycle;\\r\\n    cycleSpacer;\\r\\n    fullBatchTime;\\r\\n    cycleMax;\\r\\n    cycleTotal;\\r\\n    fullCycleTime;\\r\\n    primaryStats;\\r\\n    // Simulator Info\\r\\n    simEnabled;\\r\\n    simTarget;\\r\\n    simPlayer;\\r\\n    writeFile = \\\"\\\";\\r\\n    constructor(ns, targetname, hostnames) {\\r\\n        this.targetname = targetname;\\r\\n        this.highMoney = ns.getServerMaxMoney(this.targetname);\\r\\n        this.lowMoney = ns.getServerMaxMoney(this.targetname) * 0.5;\\r\\n        this.tspacer = TSPACER; // CONST\\r\\n        this.weakenRam = ns.getScriptRam(WEAKENJS);\\r\\n        this.growRam = ns.getScriptRam(GROWJS);\\r\\n        this.hackRam = ns.getScriptRam(HACKJS);\\r\\n        this.threadSize = Math.max(this.weakenRam, this.growRam, this.hackRam);\\r\\n        this.cores = 1; // Simplify\\r\\n        [this.hosts, this.maxThreads] = generateHosts(ns, hostnames, this.threadSize);\\r\\n        this.waitPID = 0;\\r\\n        // Target Info\\r\\n        this.security = 0;\\r\\n        this.lowSecurity = 0;\\r\\n        this.money = 0;\\r\\n        // Weaken Info\\r\\n        this.weakenStartSec = 0;\\r\\n        this.weakenAmountPerThread = 0;\\r\\n        this.weakenThreads = 0;\\r\\n        this.weakenGrowThreads = 0;\\r\\n        this.weakenHackThreads = 0;\\r\\n        this.weakenTime = 0;\\r\\n        this.weakenTimeFullCycle = 0;\\r\\n        // Grow Info\\r\\n        this.growStartMoney = 0;\\r\\n        this.growMult = 0;\\r\\n        this.growThreads = 0;\\r\\n        this.growSecIncrease = 0;\\r\\n        this.growTime = 0;\\r\\n        // Hack Info\\r\\n        this.hackStartMoney = 0;\\r\\n        this.hackTotal = 0;\\r\\n        this.hackThreads = 0;\\r\\n        this.hackSecIncrease = 0;\\r\\n        this.hackTime = 0;\\r\\n        this.hackPercentPerThread = 0;\\r\\n        // Batch Cycle Info\\r\\n        this.threadsPerCycle = 0;\\r\\n        this.cycleSpacer = this.tspacer * 4;\\r\\n        this.fullBatchTime = 0;\\r\\n        this.cycleMax = 0;\\r\\n        this.cycleTotal = 0;\\r\\n        this.fullCycleTime = 0;\\r\\n        this.primaryStats = {\\r\\n            primaryThreadsTotal: 0,\\r\\n            primaryGrowThreads: 0,\\r\\n            primaryWeakenThreads: 0,\\r\\n        };\\r\\n        // Simulator Info\\r\\n        this.simEnabled = false;\\r\\n        this.simTarget = ns.getServer(this.targetname);\\r\\n        this.simPlayer = ns.getPlayer();\\r\\n        //this.writeFile = ns.sprintf(\\\"%s-%d.txt\\\", this.targetname, new Date().getTime());\\r\\n    }\\r\\n    async init(ns, force = false) {\\r\\n        for (const host of this.hosts) {\\r\\n            await host.prep(ns, force);\\r\\n        }\\r\\n        if (this.writeFile !== \\\"\\\") {\\r\\n            await ns.write(this.writeFile, ns.sprintf(\\\"%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\", \\\"Target Name\\\", \\\"UID\\\", \\\"Batch ID\\\", \\\"Start Time\\\", \\\"End Time\\\", \\\"Operation Time\\\", \\\"Real Start Time\\\", \\\"Real End Time\\\", \\\"Real Operation Time\\\", \\\"Start Time Diff\\\", \\\"End Time Diff\\\", \\\"Operation Time Diff\\\", \\\"Result\\\", \\\"Security Before\\\", \\\"Security After\\\", \\\"Cash Before\\\", \\\"Cash After\\\"), \\\"w\\\");\\r\\n        }\\r\\n    }\\r\\n    getServerSecurityLevel(ns) {\\r\\n        if (this.simEnabled)\\r\\n            return this.simTarget.hackDifficulty;\\r\\n        return ns.getServerSecurityLevel(this.targetname);\\r\\n    }\\r\\n    getServerMoneyAvailable(ns) {\\r\\n        if (this.simEnabled)\\r\\n            return Math.max(this.simTarget.moneyAvailable, 1);\\r\\n        return Math.max(ns.getServerMoneyAvailable(this.targetname), 1);\\r\\n    }\\r\\n    getWeakenTime(ns, hackOverride) {\\r\\n        if (this.simEnabled)\\r\\n            return Math.ceil(ns.formulas.hacking.weakenTime(this.simTarget, this.simPlayer, hackOverride));\\r\\n        return Math.ceil(ns.getWeakenTime(this.targetname, hackOverride));\\r\\n    }\\r\\n    getWeakenLevelForTime(ns, ms) {\\r\\n        if (this.simEnabled)\\r\\n            return ns.formulas.hacking.weakenLevelForTime(this.simTarget, ns.getPlayer(), ms);\\r\\n        return ns.formulas.hacking.weakenLevelForTime(ns.getServer(this.targetname), ns.getPlayer(), ms);\\r\\n    }\\r\\n    getGrowTime(ns, hackOverride) {\\r\\n        if (this.simEnabled)\\r\\n            return Math.ceil(ns.formulas.hacking.growTime(this.simTarget, this.simPlayer, hackOverride));\\r\\n        return Math.ceil(ns.getGrowTime(this.targetname, hackOverride));\\r\\n    }\\r\\n    getHackTime(ns, hackOverride) {\\r\\n        if (this.simEnabled)\\r\\n            return Math.ceil(ns.formulas.hacking.hackTime(this.simTarget, this.simPlayer, hackOverride));\\r\\n        return Math.ceil(ns.getHackTime(this.targetname, hackOverride));\\r\\n    }\\r\\n    hackAnalyze(ns, assumeMinSec = false, hackOverride) {\\r\\n        if (this.simEnabled) {\\r\\n            if (assumeMinSec) {\\r\\n                const simTarget = Object.assign({}, this.simTarget);\\r\\n                simTarget.hackDifficulty = simTarget.minDifficulty;\\r\\n                return ns.formulas.hacking.hackPercent(simTarget, this.simPlayer, hackOverride);\\r\\n            }\\r\\n            return ns.formulas.hacking.hackPercent(this.simTarget, this.simPlayer, hackOverride);\\r\\n        }\\r\\n        if (assumeMinSec) {\\r\\n            const simTarget = ns.getServer(this.targetname);\\r\\n            simTarget.hackDifficulty = simTarget.minDifficulty;\\r\\n            return ns.formulas.hacking.hackPercent(simTarget, ns.getPlayer(), hackOverride);\\r\\n        }\\r\\n        return ns.hackAnalyze(this.targetname, hackOverride);\\r\\n    }\\r\\n    numCycleForGrowth(ns, server, growth, player, cores = 1) {\\r\\n        let ajdGrowthRate = 1 + (1.03 - 1) / server.hackDifficulty;\\r\\n        if (ajdGrowthRate > 1.0035) {\\r\\n            ajdGrowthRate = 1.0035;\\r\\n        }\\r\\n        const serverGrowthPercentage = server.serverGrowth / 100;\\r\\n        const coreBonus = 1 + (cores - 1) / 16;\\r\\n        const cycles = Math.log(growth) /\\r\\n            (Math.log(ajdGrowthRate) *\\r\\n                player.hacking_grow_mult *\\r\\n                serverGrowthPercentage *\\r\\n                ns.getBitNodeMultipliers().ServerGrowthRate *\\r\\n                coreBonus);\\r\\n        return cycles;\\r\\n    }\\r\\n    calcGrowThreads(ns, _growMult, assumeMinSec = false) {\\r\\n        const growMult = _growMult === undefined ? this.growMult : _growMult;\\r\\n        let threads = 0;\\r\\n        if (growMult >= 1) {\\r\\n            if (this.simEnabled) {\\r\\n                if (assumeMinSec) {\\r\\n                    const simTarget = Object.assign({}, this.simTarget);\\r\\n                    simTarget.hackDifficulty = simTarget.minDifficulty;\\r\\n                    threads = this.numCycleForGrowth(ns, simTarget, growMult, this.simPlayer);\\r\\n                }\\r\\n                else {\\r\\n                    threads = this.numCycleForGrowth(ns, this.simTarget, growMult, this.simPlayer);\\r\\n                }\\r\\n            }\\r\\n            else {\\r\\n                if (assumeMinSec) {\\r\\n                    const simTarget = ns.getServer(this.targetname);\\r\\n                    simTarget.hackDifficulty = simTarget.minDifficulty;\\r\\n                    threads = this.numCycleForGrowth(ns, simTarget, growMult, ns.getPlayer());\\r\\n                }\\r\\n                else {\\r\\n                    threads = ns.growthAnalyze(this.targetname, growMult, this.cores);\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        return Math.ceil(threads);\\r\\n    }\\r\\n    async refresh(ns, targetMs = Number.MAX_SAFE_INTEGER, fastCheck = false) {\\r\\n        if (this.isWRunning(ns)) {\\r\\n            // process in progress, wait for next refresh to update\\r\\n            await ns.sleep(1000);\\r\\n            return true;\\r\\n        }\\r\\n        // Player State\\r\\n        const playerHackLvl = ns.getPlayer().hacking;\\r\\n        // Host state\\r\\n        this.maxThreads = getMaxThreads(ns, this.hosts);\\r\\n        // Target Info\\r\\n        this.highMoney = ns.getServerMaxMoney(this.targetname);\\r\\n        this.lowMoney = ns.getServerMaxMoney(this.targetname) * 0.5;\\r\\n        this.money = this.getServerMoneyAvailable(ns);\\r\\n        this.lowSecurity = ns.getServerMinSecurityLevel(this.targetname);\\r\\n        this.security = this.getServerSecurityLevel(ns);\\r\\n        // Hack Info\\r\\n        this.hackTime = this.getHackTime(ns, playerHackLvl);\\r\\n        this.hackPercentPerThread = this.hackAnalyze(ns, true, playerHackLvl);\\r\\n        this.hackThreads = 1 / this.hackPercentPerThread - 1;\\r\\n        this.hackTotal = this.hackPercentPerThread * this.hackThreads * this.money;\\r\\n        this.hackSecIncrease = ns.hackAnalyzeSecurity(this.hackThreads);\\r\\n        // Grow Info\\r\\n        this.growTime = this.getGrowTime(ns, playerHackLvl);\\r\\n        // Weaken Info\\r\\n        this.weakenTime = this.getWeakenTime(ns, playerHackLvl);\\r\\n        this.weakenAmountPerThread = ns.weakenAnalyze(1, this.cores);\\r\\n        // Cycle Info\\r\\n        this.fullBatchTime = this.weakenTime + this.tspacer * 2;\\r\\n        this.cycleMax = Math.max(Math.floor((this.hackTime - this.tspacer) / this.cycleSpacer), 1);\\r\\n        this.threadsPerCycle = this.hackThreads + this.weakenHackThreads + this.growThreads + this.weakenGrowThreads;\\r\\n        // Primary Cycle Info\\r\\n        const primaryGrowMult = Math.max(this.highMoney / this.money, 1);\\r\\n        let primaryGrowThreads = this.calcGrowThreads(ns, primaryGrowMult);\\r\\n        let primaryGrowSecIncrease = ns.growthAnalyzeSecurity(primaryGrowThreads);\\r\\n        let primarySecDiff = this.security - this.lowSecurity;\\r\\n        let primaryWeakenThreads = Math.ceil((primaryGrowSecIncrease + primarySecDiff) / this.weakenAmountPerThread);\\r\\n        let primaryThreadsTotal = primaryGrowThreads + primaryWeakenThreads;\\r\\n        if (primarySecDiff < 1 && primaryGrowMult < 1.05)\\r\\n            primaryThreadsTotal = 0; // dont bother with the grow/weaken cycle if we're already very close to optimal\\r\\n        while (primaryThreadsTotal > this.maxThreads) {\\r\\n            primaryGrowThreads--;\\r\\n            primaryGrowSecIncrease = ns.growthAnalyzeSecurity(primaryGrowThreads);\\r\\n            primarySecDiff = this.security - this.lowSecurity;\\r\\n            primaryWeakenThreads = Math.ceil((primaryGrowSecIncrease + primarySecDiff) / this.weakenAmountPerThread);\\r\\n            primaryThreadsTotal = primaryGrowThreads + primaryWeakenThreads;\\r\\n        }\\r\\n        // memoize cycle production statistics indexed by cycleThreadAllowance\\r\\n        const cycleProductionLookup = getCycleProductionLookup(ns, this, playerHackLvl);\\r\\n        let allCycles = [];\\r\\n        for (let cycleTotal = 1; cycleTotal <= this.cycleMax; cycleTotal++) {\\r\\n            const usableThreads = this.maxThreads - primaryThreadsTotal;\\r\\n            const usableCycles = primaryThreadsTotal > 0 ? cycleTotal - 1 : cycleTotal;\\r\\n            const fullCycleTime = this.fullBatchTime + this.cycleSpacer * (cycleTotal - 1);\\r\\n            const cycleThreadAllowance = Math.floor(usableThreads / usableCycles);\\r\\n            const cycleStats = cycleProductionLookup[cycleThreadAllowance];\\r\\n            if (cycleTotal === 1 && primaryThreadsTotal > 0) {\\r\\n                allCycles.push({\\r\\n                    cycleTotal: cycleTotal,\\r\\n                    hackTotal: 1,\\r\\n                    production: 1,\\r\\n                    fullCycleTime: fullCycleTime,\\r\\n                    hackThreads: 0,\\r\\n                    growThreads: 0,\\r\\n                    weakenHackThreads: 0,\\r\\n                    weakenGrowThreads: 0,\\r\\n                    percentPerCycle: 0,\\r\\n                });\\r\\n                continue;\\r\\n            }\\r\\n            if (cycleStats === undefined) {\\r\\n                ns.print(ns.sprintf(\\\"WARNING: Thread Total %s is undefined\\\", cycleThreadAllowance));\\r\\n                continue;\\r\\n            }\\r\\n            let actualBatches = 0;\\r\\n            if (fastCheck) {\\r\\n                actualBatches = usableCycles;\\r\\n            }\\r\\n            else {\\r\\n                const doPrimary = primaryThreadsTotal > 0;\\r\\n                if (doPrimary)\\r\\n                    mockPrimaryBatch(ns, this.hosts, primaryGrowThreads, primaryWeakenThreads);\\r\\n                for (let batchID = doPrimary ? 1 : 0; batchID < cycleTotal; batchID++) {\\r\\n                    const result = mockBatch(ns, this.hosts, batchID, cycleStats.hackThreads, cycleStats.growThreads, cycleStats.weakenHackThreads, cycleStats.weakenGrowThreads);\\r\\n                    if (result)\\r\\n                        actualBatches++;\\r\\n                    else\\r\\n                        break;\\r\\n                }\\r\\n                clearAllBatches(this.hosts);\\r\\n            }\\r\\n            allCycles.push({\\r\\n                cycleTotal: cycleTotal,\\r\\n                hackTotal: cycleStats.hackTotal,\\r\\n                production: (actualBatches * cycleStats.hackTotal) / (fullCycleTime / 1000),\\r\\n                fullCycleTime: fullCycleTime,\\r\\n                hackThreads: cycleStats.hackThreads,\\r\\n                growThreads: cycleStats.growThreads,\\r\\n                weakenHackThreads: cycleStats.weakenHackThreads,\\r\\n                weakenGrowThreads: cycleStats.weakenGrowThreads,\\r\\n                percentPerCycle: (cycleStats.hackTotal / ns.getServerMaxMoney(this.targetname)) * 100,\\r\\n            });\\r\\n        }\\r\\n        allCycles = allCycles.sort((a, b) => b.production - a.production);\\r\\n        //this.debugPrintCycleStats(ns, primaryThreadsTotal, allCycles);\\r\\n        const cycleTarget = allCycles[0];\\r\\n        if (!cycleTarget) {\\r\\n            this.hackTotal = 0;\\r\\n            this.hackThreads = 0;\\r\\n            this.growThreads = 0;\\r\\n            this.weakenHackThreads = 0;\\r\\n            this.weakenGrowThreads = 0;\\r\\n            this.cycleTotal = 1;\\r\\n            this.fullCycleTime = Number.MAX_SAFE_INTEGER;\\r\\n            this.primaryStats = {\\r\\n                primaryThreadsTotal: primaryThreadsTotal,\\r\\n                primaryGrowThreads: primaryGrowThreads,\\r\\n                primaryWeakenThreads: primaryWeakenThreads,\\r\\n            };\\r\\n            return false;\\r\\n        }\\r\\n        this.hackTotal = cycleTarget.hackTotal;\\r\\n        this.hackThreads = cycleTarget.hackThreads;\\r\\n        this.growThreads = cycleTarget.growThreads;\\r\\n        this.weakenHackThreads = cycleTarget.weakenHackThreads;\\r\\n        this.weakenGrowThreads = cycleTarget.weakenGrowThreads;\\r\\n        this.cycleTotal = cycleTarget.cycleTotal;\\r\\n        this.fullCycleTime = cycleTarget.fullCycleTime;\\r\\n        this.primaryStats = {\\r\\n            primaryThreadsTotal: primaryThreadsTotal,\\r\\n            primaryGrowThreads: primaryGrowThreads,\\r\\n            primaryWeakenThreads: primaryWeakenThreads,\\r\\n        };\\r\\n        // dont do thread reservation and execution if this is a simulation\\r\\n        if (this.simEnabled)\\r\\n            return true;\\r\\n        const weakenGrowOffsetTime = this.tspacer * 2;\\r\\n        const growOffsetTime = this.weakenTime + this.tspacer - this.growTime;\\r\\n        const hackOffsetTime = this.weakenTime - this.hackTime - this.tspacer;\\r\\n        if (primaryThreadsTotal > 0) {\\r\\n            const threadsReserved = cleanPrimaryBatch(ns, this, playerHackLvl, playerHackLvl, playerHackLvl, growOffsetTime, weakenGrowOffsetTime, primaryGrowThreads, primaryWeakenThreads);\\r\\n            if (!threadsReserved) {\\r\\n                llog(ns, \\\"WARNING: Unable to reserve primary threads cleanly\\\");\\r\\n                clearOperationsByBatchId(this.hosts, 0);\\r\\n                sloppyPrimaryBatch(ns, this, playerHackLvl, playerHackLvl, playerHackLvl, growOffsetTime, weakenGrowOffsetTime, primaryGrowThreads, primaryWeakenThreads);\\r\\n            }\\r\\n        }\\r\\n        const allCycleTotal = this.cycleTotal;\\r\\n        for (let i = 0; i < allCycleTotal; i++) {\\r\\n            if (primaryThreadsTotal > 0 && i === 0)\\r\\n                continue;\\r\\n            const threadsReserved = cleanBatch(ns, this, i, playerHackLvl, playerHackLvl, playerHackLvl, playerHackLvl, hackOffsetTime, growOffsetTime, 0, weakenGrowOffsetTime);\\r\\n            if (!threadsReserved) {\\r\\n                if (this.cycleTotal > 1) {\\r\\n                    llog(ns, \\\"WARNING: Unable to Reserve batch %d\\\", i);\\r\\n                    this.cycleTotal--;\\r\\n                    clearOperationsByBatchId(this.hosts, i);\\r\\n                }\\r\\n                else {\\r\\n                    llog(ns, \\\"WARNING: Only reserving one bad batch\\\");\\r\\n                    sloppyBatch(ns, this, 0, playerHackLvl, playerHackLvl, playerHackLvl, playerHackLvl, hackOffsetTime, growOffsetTime, 0, weakenGrowOffsetTime);\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        const port = ns.getPortHandle(1);\\r\\n        port.clear();\\r\\n        port.write(JSON.stringify([\\r\\n            new Date(),\\r\\n            this.fullCycleTime,\\r\\n            this.targetname,\\r\\n            ns.getScriptIncome(ns.getScriptName(), ns.getHostname(), ...ns.args).toString(),\\r\\n            \\\"SMART\\\",\\r\\n        ]));\\r\\n        this.logStats(ns);\\r\\n        await this.execute(ns);\\r\\n        this.resetThreads();\\r\\n        return true;\\r\\n    }\\r\\n    debugPrintCycleStats(ns, primaryThreadsTotal, allCycles) {\\r\\n        for (const cycle of allCycles) {\\r\\n            let batchThreads = cycle.hackThreads + cycle.growThreads + cycle.weakenHackThreads + cycle.weakenGrowThreads;\\r\\n            if (cycle.hackThreads === undefined)\\r\\n                batchThreads = 0;\\r\\n            let cycleThreads = primaryThreadsTotal + batchThreads * (cycle.cycleTotal - 1);\\r\\n            if (primaryThreadsTotal === 0) {\\r\\n                cycleThreads = batchThreads * cycle.cycleTotal;\\r\\n            }\\r\\n            const cycleMem = cycleThreads * this.threadSize;\\r\\n            ns.tprintf(\\\"%3d;%s  %9s/s %5.2f %d/%4d/%5d %6dGB, %s|%s|%s|%s %s\\\", cycle.cycleTotal, this.targetname, ns.nFormat(cycle.production, \\\"($0.000a)\\\"), cycle.percentPerCycle ? cycle.percentPerCycle : 0, primaryThreadsTotal, batchThreads, cycleThreads, cycleMem, cycle.hackThreads, cycle.growThreads, cycle.weakenHackThreads, cycle.weakenGrowThreads, stFormat(ns, cycle.fullCycleTime));\\r\\n        }\\r\\n    }\\r\\n    logStats(ns) {\\r\\n        if (this.primaryStats.primaryThreadsTotal > 0) {\\r\\n            llog(ns, \\\"SMART-PRIMARY: %s => Grow %d; Weaken %d; Total Threads %d\\\", this.targetname, this.primaryStats.primaryGrowThreads, this.primaryStats.primaryWeakenThreads, this.primaryStats.primaryThreadsTotal);\\r\\n        }\\r\\n        const percentPerCycle = (this.hackTotal / ns.getServerMaxMoney(this.targetname)) * 100;\\r\\n        llog(ns, \\\"SMART: %s => H %d|%d; G %d|%d; T %d|%d(%d)/%d; Cycles %s/%s\\\", this.targetname, this.hackThreads, this.weakenHackThreads, this.growThreads, this.weakenGrowThreads, this.threadsPerCycle, this.threadsPerCycle * this.cycleTotal, this.threadsPerCycle * this.cycleTotal + this.primaryStats.primaryThreadsTotal, this.maxThreads, this.cycleTotal, this.cycleMax);\\r\\n        llog(ns, \\\"SMART: %s => Income %s|%s (%.2f%%|%.2f%%) %s/s\\\", this.targetname, ns.nFormat(this.hackTotal, \\\"($0.000a)\\\"), ns.nFormat(this.hackTotal * this.cycleTotal, \\\"($0.000a)\\\"), percentPerCycle, percentPerCycle * this.cycleTotal, ns.nFormat(((this.hackTotal * this.cycleTotal) / this.fullCycleTime) * 1000, \\\"($0.000a)\\\"));\\r\\n        llog(ns, \\\"SMART: %s => Complete %s; Total %s; Active -%s\\\", this.targetname, stdFormat(ns, this.fullCycleTime, true), stFormat(ns, this.fullCycleTime, true), stFormat(ns, this.fullCycleTime - this.weakenTime, true));\\r\\n    }\\r\\n    async execute(ns) {\\r\\n        let execs = [];\\r\\n        this.hosts.map((host) => host.reservedScriptCalls.map((sc) => execs.push(sc)));\\r\\n        execs = execs.sort((a, b) => b.offset - a.offset);\\r\\n        this.waitPID = 0;\\r\\n        let waitPIDFinishTime = 0;\\r\\n        const startTime = new Date().getTime();\\r\\n        execs.map((exec) => (exec.realTimeStart = startTime));\\r\\n        while (execs.length > 0) {\\r\\n            const exec = execs.pop();\\r\\n            if (exec === undefined)\\r\\n                break;\\r\\n            while (new Date().getTime() - startTime < exec.offset)\\r\\n                await ns.sleep(5);\\r\\n            // script call has come up, make sure it is starting and finishing within +- tspacer / 2\\r\\n            const curTOffset = new Date().getTime() - startTime;\\r\\n            const offsetDiff = Math.abs(curTOffset - exec.offset);\\r\\n            if (offsetDiff > this.tspacer / 2) {\\r\\n                execs = execs.filter((a) => a.batchId !== exec.batchId);\\r\\n                ns.print(ns.sprintf(\\\"WARNING: %s:%s #%d start time was off by %dms (limit is +- %d) and the batch was canceled s: %s c: %s\\\", exec.target, exec.script, exec.batchId, curTOffset - exec.offset, this.tspacer / 2, stFormat(ns, exec.offset, true), stFormat(ns, curTOffset, true)));\\r\\n                continue;\\r\\n            }\\r\\n            const pid = ns.exec(exec.script, exec.host, exec.numThreads, JSON.stringify(exec));\\r\\n            if (waitPIDFinishTime <= exec.finish) {\\r\\n                this.waitPID = pid;\\r\\n                waitPIDFinishTime = exec.finish;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n    resetThreads() {\\r\\n        for (const host of this.hosts) {\\r\\n            host.reset();\\r\\n        }\\r\\n    }\\r\\n    isWRunning(ns) {\\r\\n        if (this.simEnabled)\\r\\n            return false;\\r\\n        if (this.waitPID === 0)\\r\\n            return false;\\r\\n        if (ns.getRunningScript(this.waitPID)) {\\r\\n            return true;\\r\\n        }\\r\\n        this.waitPID = 0;\\r\\n        return false;\\r\\n    }\\r\\n    resetSim(ns) {\\r\\n        this.simTarget = ns.getServer(this.targetname);\\r\\n        this.simPlayer = ns.getPlayer();\\r\\n    }\\r\\n    async fastSim(ns, time) {\\r\\n        this.resetSim(ns);\\r\\n        this.simEnabled = true;\\r\\n        let simIncome = 0;\\r\\n        let simTime = 0;\\r\\n        let simState = 0; // 0: primary, 1: no-primary\\r\\n        while (true) {\\r\\n            if (simState === 0) {\\r\\n                const result = await this.refresh(ns, time - simTime, true);\\r\\n                if (!result)\\r\\n                    break;\\r\\n                if (this.primaryStats.primaryThreadsTotal === 0)\\r\\n                    simState = 1;\\r\\n                this.simTarget.moneyAvailable *= ns.formulas.hacking.growPercent(this.simTarget, this.primaryStats.primaryGrowThreads, this.simPlayer);\\r\\n                this.simTarget.moneyAvailable = Math.min(this.simTarget.moneyAvailable, this.simTarget.moneyMax);\\r\\n                this.simTarget.hackDifficulty += ns.growthAnalyzeSecurity(this.primaryStats.primaryGrowThreads);\\r\\n                this.simTarget.hackDifficulty -= ns.weakenAnalyze(this.primaryStats.primaryWeakenThreads);\\r\\n                this.simTarget.hackDifficulty = Math.max(this.simTarget.minDifficulty, this.simTarget.hackDifficulty);\\r\\n                simIncome += this.hackTotal * (this.cycleTotal - 1);\\r\\n                simTime += this.fullCycleTime;\\r\\n            }\\r\\n            else {\\r\\n                const timeRemaining = time - simTime;\\r\\n                const cyclesRemaining = Math.floor(timeRemaining / this.fullCycleTime);\\r\\n                simIncome += this.hackTotal * this.cycleTotal * cyclesRemaining;\\r\\n                simTime += this.fullCycleTime * cyclesRemaining;\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n        this.simEnabled = false;\\r\\n        if (simIncome === 0) {\\r\\n            ns.tprintf(\\\"%s - %s (%s / %s)\\\", this.targetname, stFormat(ns, this.fullCycleTime), this.simTarget.hackDifficulty, this.simTarget.minDifficulty);\\r\\n            return 0;\\r\\n        }\\r\\n        return simIncome / (simTime / 1000);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic21hcnRfaGFja19lbnYuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvaGFjay9zbWFydF9oYWNrX2Vudi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsUUFBUSxFQUFFLFNBQVMsRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFDL0UsT0FBTyxFQUFFLHdCQUF3QixFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFDckUsT0FBTyxFQUVILGFBQWEsRUFDYixhQUFhLEVBRWIsd0JBQXdCLEVBQ3hCLGlCQUFpQixFQUNqQixrQkFBa0IsRUFDbEIsVUFBVSxFQUNWLFdBQVcsRUFDWCxnQkFBZ0IsRUFDaEIsU0FBUyxFQUNULGVBQWUsRUFDbEIsTUFBTSxlQUFlLENBQUM7QUFFdkIsTUFBTSxDQUFDLE1BQU0sT0FBTyxHQUFHLEdBQUcsQ0FBQztBQWMzQixNQUFNLE9BQU8sWUFBWTtJQUNyQixVQUFVLENBQVM7SUFDbkIsU0FBUyxDQUFTO0lBQ2xCLFFBQVEsQ0FBUztJQUNqQixPQUFPLENBQVM7SUFFaEIsU0FBUyxDQUFTO0lBQ2xCLE9BQU8sQ0FBUztJQUNoQixPQUFPLENBQVM7SUFDaEIsVUFBVSxDQUFTO0lBRW5CLEtBQUssQ0FBUztJQUNkLEtBQUssQ0FBUztJQUNkLFVBQVUsQ0FBUztJQUVuQixPQUFPLENBQVM7SUFFaEIsUUFBUSxDQUFTO0lBQ2pCLFdBQVcsQ0FBUztJQUNwQixLQUFLLENBQVM7SUFFZCxjQUFjO0lBQ2QsY0FBYyxDQUFTO0lBQ3ZCLHFCQUFxQixDQUFTO0lBQzlCLGFBQWEsQ0FBUztJQUN0QixpQkFBaUIsQ0FBUztJQUMxQixpQkFBaUIsQ0FBUztJQUMxQixVQUFVLENBQVM7SUFDbkIsbUJBQW1CLENBQVM7SUFFNUIsWUFBWTtJQUNaLGNBQWMsQ0FBUztJQUN2QixRQUFRLENBQVM7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\",\"filename\":\"/lib/hack/smart_hack_env.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":16.35,\"server\":\"home\",\"moduleSequenceNumber\":93167,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getBitNodeMultipliers\",\"cost\":4},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getScriptIncome\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export class ExtendedNodeStats {\\r\\n    name;\\r\\n    level;\\r\\n    ram;\\r\\n    ramUsed;\\r\\n    cores;\\r\\n    cache;\\r\\n    hashCapacity;\\r\\n    production;\\r\\n    timeOnline;\\r\\n    totalCost;\\r\\n    totalValue;\\r\\n    constructor(stats) {\\r\\n        this.name = stats.name;\\r\\n        this.level = stats.level;\\r\\n        this.ram = stats.ram;\\r\\n        this.ramUsed = stats.ramUsed;\\r\\n        this.cores = stats.cores;\\r\\n        this.cache = stats.cache;\\r\\n        this.hashCapacity = stats.hashCapacity;\\r\\n        this.production = stats.production;\\r\\n        this.timeOnline = stats.timeOnline;\\r\\n        this.totalCost = 0;\\r\\n        this.totalValue = 0;\\r\\n    }\\r\\n    updateProduction(ns, zeroRamUsed = true) {\\r\\n        this.production = ns.formulas.hacknetServers.hashGainRate(this.level, zeroRamUsed ? 0 : this.ramUsed, this.ram, this.cores, ns.getPlayer().hacknet_node_money_mult);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXh0ZW5kZWQtbm9kZS1zdGF0cy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9oYWNrbmV0L2V4dGVuZGVkLW5vZGUtc3RhdHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxPQUFPLGlCQUFpQjtJQUMxQixJQUFJLENBQVM7SUFDYixLQUFLLENBQVM7SUFDZCxHQUFHLENBQVM7SUFDWixPQUFPLENBQVM7SUFDaEIsS0FBSyxDQUFTO0lBQ2QsS0FBSyxDQUFTO0lBQ2QsWUFBWSxDQUFTO0lBQ3JCLFVBQVUsQ0FBUztJQUNuQixVQUFVLENBQVM7SUFDbkIsU0FBUyxDQUFTO0lBQ2xCLFVBQVUsQ0FBUztJQUVuQixZQUFZLEtBQWdCO1FBQ3hCLElBQUksQ0FBQyxJQUFJLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQztRQUN2QixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUM7UUFDekIsSUFBSSxDQUFDLEdBQUcsR0FBRyxLQUFLLENBQUMsR0FBRyxDQUFDO1FBQ3JCLElBQUksQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFDLE9BQU8sQ0FBQztRQUM3QixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUM7UUFDekIsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUMsS0FBSyxDQUFDO1FBQ3pCLElBQUksQ0FBQyxZQUFZLEdBQUcsS0FBSyxDQUFDLFlBQVksQ0FBQztRQUN2QyxJQUFJLENBQUMsVUFBVSxHQUFHLEtBQUssQ0FBQyxVQUFVLENBQUM7UUFDbkMsSUFBSSxDQUFDLFVBQVUsR0FBRyxLQUFLLENBQUMsVUFBVSxDQUFDO1FBQ25DLElBQUksQ0FBQyxTQUFTLEdBQUcsQ0FBQyxDQUFDO1FBQ25CLElBQUksQ0FBQyxVQUFVLEdBQUcsQ0FBQyxDQUFDO0lBQ3hCLENBQUM7SUFFRCxnQkFBZ0IsQ0FBQyxFQUFNLEVBQUUsV0FBVyxHQUFHLElBQUk7UUFDdkMsSUFBSSxDQUFDLFVBQVUsR0FBRyxFQUFFLENBQUMsUUFBUSxDQUFDLGNBQWMsQ0FBQyxZQUFZLENBQ3JELElBQUksQ0FBQyxLQUFLLEVBQ1YsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQzlCLElBQUksQ0FBQyxHQUFHLEVBQ1IsSUFBSSxDQUFDLEtBQUssRUFDVixFQUFFLENBQUMsU0FBUyxFQUFFLENBQUMsdUJBQXVCLENBQ3pDLENBQUM7SUFDTixDQUFDO0NBQ0oifQ==\",\"filename\":\"/lib/hacknet/extended-node-stats.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.1,\"server\":\"home\",\"moduleSequenceNumber\":83060,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export var HSUpgradeType;\\r\\n(function (HSUpgradeType) {\\r\\n    HSUpgradeType[\\\"LEVEL\\\"] = \\\"LEVEL\\\";\\r\\n    HSUpgradeType[\\\"RAM\\\"] = \\\"RAM\\\";\\r\\n    HSUpgradeType[\\\"CORES\\\"] = \\\"CORES\\\";\\r\\n    HSUpgradeType[\\\"CACHE\\\"] = \\\"CACHE\\\";\\r\\n    HSUpgradeType[\\\"SERVER\\\"] = \\\"SERVER\\\";\\r\\n})(HSUpgradeType || (HSUpgradeType = {}));\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHMtdXBncmFkZS10eXBlLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2hhY2tuZXQvaHMtdXBncmFkZS10eXBlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE1BQU0sQ0FBTixJQUFZLGFBTVg7QUFORCxXQUFZLGFBQWE7SUFDckIsZ0NBQWUsQ0FBQTtJQUNmLDRCQUFXLENBQUE7SUFDWCxnQ0FBZSxDQUFBO0lBQ2YsZ0NBQWUsQ0FBQTtJQUNmLGtDQUFpQixDQUFBO0FBQ3JCLENBQUMsRUFOVyxhQUFhLEtBQWIsYUFBYSxRQU14QiJ9\",\"filename\":\"/lib/hacknet/hs-upgrade-type.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":83061,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { stFormat } from \\\"lib/util\\\";\\r\\nimport { HSUpgradeType } from \\\"lib/hacknet/hs-upgrade-type\\\";\\r\\nimport { ExtendedNodeStats } from \\\"lib/hacknet/extended-node-stats\\\";\\r\\nexport class HSUpgrade {\\r\\n    id;\\r\\n    type;\\r\\n    upgradeCost = 0;\\r\\n    upgradeProductionTotal = 0;\\r\\n    cacheIncrease = 0;\\r\\n    cacheCostPerHash = 0;\\r\\n    upgradeProductionIncrease = 0;\\r\\n    upgradeCashProduction = 0;\\r\\n    upgradePayoffTime = 0;\\r\\n    upgradeValue = 0;\\r\\n    constructor(ns, id, type, _stats) {\\r\\n        const hashBuyCost = ns.hacknet.hashCost(\\\"Sell for Money\\\");\\r\\n        const prodMult = ns.getPlayer().hacknet_node_money_mult;\\r\\n        const coreCostMult = ns.getPlayer().hacknet_node_core_cost_mult;\\r\\n        const levelCostMult = ns.getPlayer().hacknet_node_level_cost_mult;\\r\\n        const ramCostMult = ns.getPlayer().hacknet_node_ram_cost_mult;\\r\\n        let stats;\\r\\n        if (_stats)\\r\\n            stats = _stats;\\r\\n        else {\\r\\n            stats = new ExtendedNodeStats(ns.hacknet.getNodeStats(id));\\r\\n            stats.ramUsed = 0;\\r\\n            stats.updateProduction(ns);\\r\\n        }\\r\\n        this.id = id;\\r\\n        this.type = type;\\r\\n        switch (this.type) {\\r\\n            case HSUpgradeType.LEVEL: {\\r\\n                this.upgradeCost = ns.formulas.hacknetServers.levelUpgradeCost(stats.level, 1, levelCostMult);\\r\\n                this.upgradeProductionTotal = ns.formulas.hacknetServers.hashGainRate(stats.level + 1, 0, stats.ram, stats.cores, prodMult);\\r\\n                break;\\r\\n            }\\r\\n            case HSUpgradeType.RAM: {\\r\\n                this.upgradeCost = ns.formulas.hacknetServers.ramUpgradeCost(stats.ram, 1, ramCostMult);\\r\\n                this.upgradeProductionTotal = ns.formulas.hacknetServers.hashGainRate(stats.level, 0, stats.ram * 2, stats.cores, prodMult);\\r\\n                break;\\r\\n            }\\r\\n            case HSUpgradeType.CORES: {\\r\\n                this.upgradeCost = ns.formulas.hacknetServers.coreUpgradeCost(stats.cores, 1, coreCostMult);\\r\\n                this.upgradeProductionTotal = ns.formulas.hacknetServers.hashGainRate(stats.level, 0, stats.ram, stats.cores + 1, prodMult);\\r\\n                break;\\r\\n            }\\r\\n            case HSUpgradeType.CACHE: {\\r\\n                this.upgradeCost = ns.formulas.hacknetServers.cacheUpgradeCost(stats.cache);\\r\\n                this.upgradeProductionTotal = stats.production;\\r\\n                this.cacheIncrease = stats.cache;\\r\\n                this.cacheCostPerHash = this.upgradeCost / this.cacheIncrease;\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n        this.upgradeProductionIncrease = this.upgradeProductionTotal - stats.production;\\r\\n        this.upgradeCashProduction = (this.upgradeProductionTotal / hashBuyCost) * 1000000;\\r\\n        this.upgradePayoffTime = (this.upgradeCost / this.upgradeCashProduction) * 1000;\\r\\n        this.upgradeValue = this.upgradeProductionIncrease / this.upgradeCost;\\r\\n    }\\r\\n    toString(ns, totalProduction) {\\r\\n        const hashBuyCost = ns.hacknet.hashCost(\\\"Sell for Money\\\");\\r\\n        const totalUpgradeCashProduction = ((totalProduction + this.upgradeProductionIncrease) / hashBuyCost) * 1000000;\\r\\n        const totalUpgradePayoffTime = (this.upgradeCost / totalUpgradeCashProduction) * 1000;\\r\\n        return ns.sprintf(\\\"%02d => %6s %9s +%s h/s %6s %5.2f h/s/$bn\\\", this.id, this.type, ns.nFormat(this.upgradeCost, \\\"($0.000a)\\\"), // cost\\r\\n        ns.nFormat(this.upgradeProductionIncrease, \\\"(0.000a)\\\"), // hash increase\\r\\n        stFormat(ns, totalUpgradePayoffTime), // upgrade payoff time\\r\\n        this.upgradeValue * 1000000000);\\r\\n    }\\r\\n    buy(ns) {\\r\\n        const hashBuyCost = ns.hacknet.hashCost(\\\"Sell for Money\\\");\\r\\n        const numHashBuys = Math.floor(ns.hacknet.numHashes() / hashBuyCost);\\r\\n        const effectiveMoneyAvailable = ns.getPlayer().money + numHashBuys * 1000000;\\r\\n        if (effectiveMoneyAvailable < this.upgradeCost) {\\r\\n            ns.print(\\\"WARNING: Attempted to buy an upgrade you can't afford\\\");\\r\\n            return false;\\r\\n        }\\r\\n        while (ns.getPlayer().money < this.upgradeCost) {\\r\\n            ns.hacknet.spendHashes(\\\"Sell for Money\\\");\\r\\n        }\\r\\n        switch (this.type) {\\r\\n            case HSUpgradeType.LEVEL: {\\r\\n                return ns.hacknet.upgradeLevel(this.id, 1);\\r\\n            }\\r\\n            case HSUpgradeType.RAM: {\\r\\n                return ns.hacknet.upgradeRam(this.id, 1);\\r\\n            }\\r\\n            case HSUpgradeType.CORES: {\\r\\n                return ns.hacknet.upgradeCore(this.id, 1);\\r\\n            }\\r\\n            case HSUpgradeType.CACHE: {\\r\\n                return ns.hacknet.upgradeCache(this.id, 1);\\r\\n            }\\r\\n            case HSUpgradeType.SERVER: {\\r\\n                return ns.hacknet.purchaseNode() !== -1;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHMtdXBncmFkZS5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9oYWNrbmV0L2hzLXVwZ3JhZGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUNwQyxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sNkJBQTZCLENBQUM7QUFDNUQsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0saUNBQWlDLENBQUM7QUFrQnBFLE1BQU0sT0FBTyxTQUFTO0lBQ2xCLEVBQUUsQ0FBUztJQUNYLElBQUksQ0FBZ0I7SUFDcEIsV0FBVyxHQUFHLENBQUMsQ0FBQztJQUNoQixzQkFBc0IsR0FBRyxDQUFDLENBQUM7SUFDM0IsYUFBYSxHQUFHLENBQUMsQ0FBQztJQUNsQixnQkFBZ0IsR0FBRyxDQUFDLENBQUM7SUFDckIseUJBQXlCLEdBQUcsQ0FBQyxDQUFDO0lBQzlCLHFCQUFxQixHQUFHLENBQUMsQ0FBQztJQUMxQixpQkFBaUIsR0FBRyxDQUFDLENBQUM7SUFDdEIsWUFBWSxHQUFHLENBQUMsQ0FBQztJQUVqQixZQUFZLEVBQU0sRUFBRSxFQUFVLEVBQUUsSUFBbUIsRUFBRSxNQUF5QjtRQUMxRSxNQUFNLFdBQVcsR0FBRyxFQUFFLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1FBQzFELE1BQU0sUUFBUSxHQUFHLEVBQUUsQ0FBQyxTQUFTLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQztRQUN4RCxNQUFNLFlBQVksR0FBRyxFQUFFLENBQUMsU0FBUyxFQUFFLENBQUMsMkJBQTJCLENBQUM7UUFDaEUsTUFBTSxhQUFhLEdBQUcsRUFBRSxDQUFDLFNBQVMsRUFBRSxDQUFDLDRCQUE0QixDQUFDO1FBQ2xFLE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxTQUFTLEVBQUUsQ0FBQywwQkFBMEIsQ0FBQztRQUU5RCxJ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\",\"filename\":\"/lib/hacknet/hs-upgrade.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.1,\"server\":\"home\",\"moduleSequenceNumber\":83062,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export var ReservedPorts;\\r\\n(function (ReservedPorts) {\\r\\n    ReservedPorts[ReservedPorts[\\\"HACKING_INFO\\\"] = 1] = \\\"HACKING_INFO\\\";\\r\\n    ReservedPorts[ReservedPorts[\\\"HACKNET_INFO\\\"] = 2] = \\\"HACKNET_INFO\\\";\\r\\n    ReservedPorts[ReservedPorts[\\\"HACK_WRITE_INFO\\\"] = 3] = \\\"HACK_WRITE_INFO\\\";\\r\\n})(ReservedPorts || (ReservedPorts = {}));\\r\\nexport const WEAKENJS = \\\"/lib/exec/weaken.js\\\";\\r\\nexport const GROWJS = \\\"/lib/exec/grow.js\\\";\\r\\nexport const HACKJS = \\\"/lib/exec/hack.js\\\";\\r\\nexport const UTILJS = \\\"/lib/util.js\\\";\\r\\nexport const CITIES = [\\\"Aevum\\\", \\\"Chongqing\\\", \\\"Sector-12\\\", \\\"New Tokyo\\\", \\\"Ishima\\\", \\\"Volhaven\\\"];\\r\\nexport function llog(ns, str, ...args) {\\r\\n    ns.print(ns.sprintf(\\\"%8s \\\" + str, new Date().toLocaleTimeString(\\\"it-IT\\\"), ...args));\\r\\n}\\r\\nexport function softenServer(ns, hostname) {\\r\\n    if (ns.hasRootAccess(hostname)) {\\r\\n        return;\\r\\n    }\\r\\n    let ports = 0;\\r\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n        ns.brutessh(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n        ns.ftpcrack(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n        ns.httpworm(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n        ns.relaysmtp(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n        ns.sqlinject(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ports >= ns.getServerNumPortsRequired(hostname)) {\\r\\n        ns.nuke(hostname);\\r\\n    }\\r\\n}\\r\\nexport function serverIsHackable(ns, hostname) {\\r\\n    return ns.hasRootAccess(hostname) && ns.getHackingLevel() >= ns.getServerRequiredHackingLevel(hostname);\\r\\n}\\r\\nexport function canExecuteOnServer(ns, hostname) {\\r\\n    return ns.hasRootAccess(hostname) && ns.getServerMaxRam(hostname) > 0;\\r\\n}\\r\\nexport function mapHosts(ns, hosts = {}, parents = [], current = \\\"home\\\") {\\r\\n    const newParents = parents.concat(current);\\r\\n    hosts[current] = newParents;\\r\\n    const children = ns.scan(current).filter((element) => !parents.includes(element));\\r\\n    for (const child of children) {\\r\\n        mapHosts(ns, hosts, newParents, child);\\r\\n    }\\r\\n    return hosts;\\r\\n}\\r\\nexport function allHosts(ns) {\\r\\n    return Object.keys(mapHosts(ns));\\r\\n}\\r\\nexport function doProgramBuys(ns) {\\r\\n    const player = ns.getPlayer();\\r\\n    if (!player.tor && player.money > 200e3)\\r\\n        ns.purchaseTor();\\r\\n    if (!ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\") && player.money > 500e3)\\r\\n        ns.purchaseProgram(\\\"BruteSSH.exe\\\");\\r\\n    if (!ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\") && player.money > 1500e3)\\r\\n        ns.purchaseProgram(\\\"FTPCrack.exe\\\");\\r\\n    if (!ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\") && player.money > 5e6)\\r\\n        ns.purchaseProgram(\\\"relaySMTP.exe\\\");\\r\\n    if (!ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\") && player.money > 30e6)\\r\\n        ns.purchaseProgram(\\\"HTTPWorm.exe\\\");\\r\\n    if (!ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\") && player.money > 250e6)\\r\\n        ns.purchaseProgram(\\\"SQLInject.exe\\\");\\r\\n}\\r\\nexport function doBuyAndSoftenAll(ns) {\\r\\n    doProgramBuys(ns);\\r\\n    for (const hostname of allHosts(ns)) {\\r\\n        softenServer(ns, hostname);\\r\\n    }\\r\\n}\\r\\nexport function stFormat(ns, ms, showms = false, showfull = false) {\\r\\n    let timeLeft = ms;\\r\\n    const hours = Math.floor(ms / (1000 * 60 * 60));\\r\\n    timeLeft -= hours * (1000 * 60 * 60);\\r\\n    const minutes = Math.floor(timeLeft / (1000 * 60));\\r\\n    timeLeft -= minutes * (1000 * 60);\\r\\n    const seconds = Math.floor(timeLeft / 1000);\\r\\n    timeLeft -= seconds * 1000;\\r\\n    const milliseconds = timeLeft;\\r\\n    if (showms) {\\r\\n        if (hours > 0 || showfull)\\r\\n            return ns.sprintf(\\\"%02d:%02d:%02d.%03d\\\", hours, minutes, seconds, milliseconds);\\r\\n        if (minutes > 0)\\r\\n            return ns.sprintf(\\\"%02d:%02d.%03d\\\", minutes, seconds, milliseconds);\\r\\n        return ns.sprintf(\\\"%02d.%03d\\\", seconds, milliseconds);\\r\\n    }\\r\\n    else {\\r\\n        if (hours > 0 || showfull)\\r\\n            return ns.sprintf(\\\"%02d:%02d:%02d\\\", hours, minutes, seconds);\\r\\n        if (minutes > 0)\\r\\n            return ns.sprintf(\\\"%02d:%02d\\\", minutes, seconds);\\r\\n        return ns.sprintf(\\\"%02d\\\", seconds);\\r\\n    }\\r\\n}\\r\\nexport function stdFormat(ns, offset = 0, showms = false) {\\r\\n    const date = new Date(new Date().getTime() + offset);\\r\\n    if (showms) {\\r\\n        const ms = ns.sprintf(\\\"%03d\\\", date.getUTCMilliseconds());\\r\\n        return date.toLocaleTimeString(\\\"it-IT\\\") + \\\".\\\" + ms;\\r\\n    }\\r\\n    else {\\r\\n        return date.toLocaleTimeString(\\\"it-IT\\\");\\r\\n    }\\r\\n}\\r\\nexport async function doBackdoors(ns) {\\r\\n    //const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"w0r1d_d43m0n\\\", \\\"b-and-a\\\", \\\"ecorp\\\", \\\"fulcrumassets\\\", \\\"fulcrumtech\\\"];\\r\\n    //const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"omnitek\\\", \\\"kuai-gong\\\", \\\"megacorp\\\"];\\r\\n    const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"w0r1d_d43m0n\\\"];\\r\\n    const hosts = mapHosts(ns);\\r\\n    for (const [hostName, trail] of Object.entries(hosts)) {\\r\\n        const server = ns.getServer(hostName);\\r\\n        if (!targetHosts.includes(hostName) ||\\r\\n            server.backdoorInstalled ||\\r\\n            server.requiredHackingSkill > ns.getHackingLevel() ||\\r\\n            !server.hasAdminRights)\\r\\n            continue;\\r\\n        ns.print(hostName);\\r\\n        for (const hostHopName of trail) {\\r\\n            ns.connect(hostHopName);\\r\\n        }\\r\\n        await ns.installBackdoor();\\r\\n        ns.connect(\\\"home\\\");\\r\\n    }\\r\\n}\\r\\nexport function cleanLogs(ns) {\\r\\n    ns.disableLog(\\\"disableLog\\\");\\r\\n    ns.disableLog(\\\"ALL\\\");\\r\\n    // ns.disableLog(\\\"sleep\\\")\\r\\n    // ns.disableLog(\\\"exec\\\")\\r\\n    // ns.disableLog(\\\"getServerMaxRam\\\")\\r\\n    // ns.disableLog(\\\"getServerSecurityLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerMinSecurityLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerMaxMoney\\\")\\r\\n    // ns.disableLog(\\\"getHackingLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerRequiredHackingLevel\\\")\\r\\n    // ns.disableLog(\\\"scan\\\")\\r\\n    // ns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n    // ns.disableLog(\\\"getServerUsedRam\\\")\\r\\n}\\r\\nexport const ALL_FACTIONS = [\\r\\n    \\\"Illuminati\\\",\\r\\n    \\\"Daedalus\\\",\\r\\n    \\\"The Covenant\\\",\\r\\n    \\\"ECorp\\\",\\r\\n    \\\"MegaCorp\\\",\\r\\n    \\\"Bachman & Associates\\\",\\r\\n    \\\"Blade Industries\\\",\\r\\n    \\\"NWO\\\",\\r\\n    \\\"Clarke Incorporated\\\",\\r\\n    \\\"OmniTek Incorporated\\\",\\r\\n    \\\"Four Sigma\\\",\\r\\n    \\\"KuaiGong International\\\",\\r\\n    \\\"Fulcrum Secret Technologies\\\",\\r\\n    \\\"BitRunners\\\",\\r\\n    \\\"The Black Hand\\\",\\r\\n    \\\"NiteSec\\\",\\r\\n    \\\"Aevum\\\",\\r\\n    \\\"Chongqing\\\",\\r\\n    \\\"Ishima\\\",\\r\\n    \\\"New Tokyo\\\",\\r\\n    \\\"Sector-12\\\",\\r\\n    \\\"Volhaven\\\",\\r\\n    \\\"Speakers for the Dead\\\",\\r\\n    \\\"The Dark Army\\\",\\r\\n    \\\"The Syndicate\\\",\\r\\n    \\\"Silhouette\\\",\\r\\n    \\\"Tetrads\\\",\\r\\n    \\\"Slum Snakes\\\",\\r\\n    \\\"Netburners\\\",\\r\\n    \\\"Tian Di Hui\\\",\\r\\n    \\\"CyberSec\\\",\\r\\n    \\\"Bladeburners\\\",\\r\\n    \\\"Church of the Machine God\\\",\\r\\n];\\r\\nexport async function writeOut(ns, data, startTime, endTime, result, startSec, startCash) {\\r\\n    if (data.writeFile !== \\\"\\\") {\\r\\n        const outstr = ns.sprintf(\\\"%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\", data.target, data.uid, data.batchId, data.realTimeStart + data.offset, data.realTimeStart + data.finish, data.operationTime, startTime, endTime, endTime - startTime, startTime - (data.realTimeStart + data.offset), endTime - (data.realTimeStart + data.finish), endTime - startTime - data.operationTime, result, startSec.toFixed(2), ns.getServerSecurityLevel(data.target).toFixed(2), ns.nFormat(startCash, \\\"($0.000a)\\\"), ns.nFormat(ns.getServerMoneyAvailable(data.target), \\\"($0.000a)\\\"));\\r\\n        while (!await ns.tryWritePort(ReservedPorts.HACK_WRITE_INFO, [data.writeFile, outstr]))\\r\\n            ;\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi91dGlsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLE1BQU0sQ0FBTixJQUFZLGFBSVg7QUFKRCxXQUFZLGFBQWE7SUFDckIsaUVBQWdCLENBQUE7SUFDaEIsaUVBQVksQ0FBQTtJQUNaLHVFQUFlLENBQUE7QUFDbkIsQ0FBQyxFQUpXLGFBQWEsS0FBYixhQUFhLFFBSXhCO0FBRUQsTUFBTSxDQUFDLE1BQU0sUUFBUSxHQUFHLHFCQUFxQixDQUFDO0FBQzlDLE1BQU0sQ0FBQyxNQUFNLE1BQU0sR0FBRyxtQkFBbUIsQ0FBQztBQUMxQyxNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUcsbUJBQW1CLENBQUM7QUFDMUMsTUFBTSxDQUFDLE1BQU0sTUFBTSxHQUFHLGNBQWMsQ0FBQztBQUVyQyxNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUcsQ0FBQyxPQUFPLEVBQUUsV0FBVyxFQUFFLFdBQVcsRUFBRSxXQUFXLEVBQUUsUUFBUSxFQUFFLFVBQVUsQ0FBQyxDQUFDO0FBRTdGLE1BQU0sVUFBVSxJQUFJLENBQUMsRUFBTSxFQUFFLEdBQVcsRUFBRSxHQUFHLElBQXlCO0lBQ2xFLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEdBQUcsR0FBRyxFQUFFLElBQUksSUFBSSxFQUFFLENBQUMsa0JBQWtCLENBQUMsT0FBTyxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDO0FBQ3hGLENBQUM7QUFFRCxNQUFNLFVBQVUsWUFBWSxDQUFDLEVBQU0sRUFBRSxRQUFnQjtJQUNqRCxJQUFJLEVBQUUsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDNUIsT0FBTztLQUNWO0lBRUQsSUFBSSxLQUFLLEdBQUcsQ0FBQyxDQUFDO0lBQ2QsSUFBSSxFQUFFLENBQUMsVUFBVSxDQUFDLGNBQWMsRUFB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\",\"filename\":\"/lib/util.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":13.25,\"server\":\"home\",\"moduleSequenceNumber\":90050,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"purchaseTor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"purchaseProgram\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"connect\",\"cost\":2},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    if (typeof ns.args[0] !== \\\"string\\\" && typeof ns.args[0] !== undefined) {\\r\\n        ns.tprintf(\\\"ERROR: Bad Server Name: %s\\\", ns.args[0]);\\r\\n        return;\\r\\n    }\\r\\n    if (typeof ns.args[0] === \\\"string\\\" && !ns.serverExists(ns.args[0])) {\\r\\n        ns.tprintf(\\\"ERROR: Server Doesn't Exist: %s\\\", ns.args[0]);\\r\\n        return;\\r\\n    }\\r\\n    const targetServer = ns.getServer(ns.args[0].toString());\\r\\n    const availableFunds = targetServer.moneyAvailable <= 1 ? 1 : targetServer.moneyAvailable;\\r\\n    const growthRequired = targetServer.moneyMax / availableFunds;\\r\\n    let growThreadsNeeded = 0;\\r\\n    if (growthRequired > 1)\\r\\n        growThreadsNeeded = Math.ceil(ns.growthAnalyze(targetServer.hostname, growthRequired));\\r\\n    const targetGrowTime = ns.getGrowTime(targetServer.hostname);\\r\\n    const targetWeakenTime = ns.getWeakenTime(targetServer.hostname);\\r\\n    ns.tprintf(\\\"%s:\\\", targetServer.hostname);\\r\\n    ns.tprintf(\\\"  %25s: %s/%s\\\", \\\"Target Funds\\\", ns.nFormat(targetServer.moneyAvailable, \\\"($0.000a)\\\"), ns.nFormat(targetServer.moneyMax, \\\"($0.000a)\\\"));\\r\\n    ns.tprintf(\\\"  %25s: %.2fx, %d Threads\\\", \\\"Growth Required\\\", growthRequired, growThreadsNeeded);\\r\\n    ns.tprintf(\\\"  %25s: %s @ %s\\\", \\\"Server Growth\\\", targetServer.serverGrowth, ns.tFormat(targetGrowTime));\\r\\n    ns.tprintf(\\\"  %25s: %s\\\", \\\"Weaken Time\\\", ns.tFormat(targetWeakenTime));\\r\\n    ns.tprintf(\\\"  %25s: %s / %s / %s\\\", \\\"Hack Difficulty [M/B/H]\\\", targetServer.minDifficulty, targetServer.baseDifficulty, targetServer.hackDifficulty);\\r\\n    ns.tprintf(\\\"  %25s: %d/%d\\\", \\\"Ram Available\\\", targetServer.maxRam - targetServer.ramUsed, targetServer.maxRam);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXNzZXNzLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsiYXNzZXNzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsSUFBSSxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssUUFBUSxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxTQUFTLEVBQUU7UUFDbkUsRUFBRSxDQUFDLE9BQU8sQ0FBQyw0QkFBNEIsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDckQsT0FBTztLQUNWO0lBQ0QsSUFBSSxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssUUFBUSxJQUFJLENBQUMsRUFBRSxDQUFDLFlBQVksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUU7UUFDaEUsRUFBRSxDQUFDLE9BQU8sQ0FBQyxpQ0FBaUMsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDMUQsT0FBTztLQUNWO0lBQ0QsTUFBTSxZQUFZLEdBQUcsRUFBRSxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFDekQsTUFBTSxjQUFjLEdBQUcsWUFBWSxDQUFDLGNBQWMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLGNBQWMsQ0FBQztJQUMxRixNQUFNLGNBQWMsR0FBRyxZQUFZLENBQUMsUUFBUSxHQUFHLGNBQWMsQ0FBQztJQUM5RCxJQUFJLGlCQUFpQixHQUFHLENBQUMsQ0FBQztJQUMxQixJQUFJLGNBQWMsR0FBRyxDQUFDO1FBQUUsaUJBQWlCLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDLFlBQVksQ0FBQyxRQUFRLEVBQUUsY0FBYyxDQUFDLENBQUMsQ0FBQztJQUUvRyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMsV0FBVyxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUM3RCxNQUFNLGdCQUFnQixHQUFHLEVBQUUsQ0FBQyxhQUFhLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBRWpFLEVBQUUsQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLFlBQVksQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUN6QyxFQUFFLENBQUMsT0FBTyxDQUNOLGVBQWUsRUFDZixjQUFjLEVBQ2QsRUFBRSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsY0FBYyxFQUFFLFdBQVcsQ0FBQyxFQUNwRCxFQUFFLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxRQUFRLEVBQUUsV0FBVyxDQUFDLENBQ2pELENBQUM7SUFDRixFQUFFLENBQUMsT0FBTyxDQUFDLDJCQUEyQixFQUFFLGlCQUFpQixFQUFFLGNBQWMsRUFBRSxpQkFBaUIsQ0FBQyxDQUFDO0lBQzlGLEVBQUUsQ0FBQyxPQUFPLENBQUMsaUJBQWlCLEVBQUUsZUFBZSxFQUFFLFlBQVksQ0FBQyxZQUFZLEVBQUUsRUFBRSxDQUFDLE9BQU8sQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDO0lBQ3RHLEVBQUUsQ0FBQyxPQUFPLENBQUMsWUFBWSxFQUFFLGFBQWEsRUFBRSxFQUFFLENBQUMsT0FBTyxDQUFDLGdCQUFnQixDQUFDLENBQUMsQ0FBQztJQUN0RSxFQUFFLENBQUMsT0FBTyxDQUNOLHNCQUFzQixFQUN0Qix5QkFBeUIsRUFDekIsWUFBWSxDQUFDLGFBQWEsRUFDMUIsWUFBWSxDQUFDLGNBQWMsRUFDM0IsWUFBWSxDQUFDLGNBQWMsQ0FDOUIsQ0FBQztJQUNGLEVBQUUsQ0FBQyxPQUFPLENBQUMsZUFBZSxFQUFFLGVBQWUsRUFBRSxZQUFZLENBQUMsTUFBTSxHQUFHLFlBQVksQ0FBQyxPQUFPLEVBQUUsWUFBWSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQ2xILENBQUMifQ==\",\"filename\":\"assess.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"assess.js\",\"url\":\"blob:file:///3e2a3e4e-be09-4b6b-989a-178042da2ed5\",\"moduleSequenceNumber\":86752}],\"dependents\":[],\"ramUsage\":4.8,\"server\":\"home\",\"moduleSequenceNumber\":86752,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"serverExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    for (const faction of ns.getPlayer().factions) {\\r\\n        ns.corporation.bribe(faction, ns.corporation.getCorporation().funds * 0.001, 0);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnJpYmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJicmliZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFPO0lBQ2pDLEtBQUssTUFBTSxPQUFPLElBQUksRUFBRSxDQUFDLFNBQVMsRUFBRSxDQUFDLFFBQVEsRUFBRTtRQUM5QyxFQUFFLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUFDLFdBQVcsQ0FBQyxjQUFjLEVBQUUsQ0FBQyxLQUFLLEdBQUcsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFBO0tBQy9FO0FBQ0YsQ0FBQyJ9\",\"filename\":\"bribe.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"bribe.js\",\"url\":\"blob:file:///5f2b83a2-40df-49b1-9331-0027d8253db8\",\"moduleSequenceNumber\":43769}],\"dependents\":[],\"ramUsage\":1024.5,\"server\":\"home\",\"moduleSequenceNumber\":83065,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"ns\",\"name\":\"corporation\",\"cost\":1022.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { doProgramBuys } from \\\"lib/util\\\";\\r\\nexport async function main(ns) {\\r\\n    doProgramBuys(ns);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnV5X3Byb2dyYW1zLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsiYnV5X3Byb2dyYW1zLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFFekMsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUNqQyxhQUFhLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDbkIsQ0FBQyJ9\",\"filename\":\"buy_programs.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.2,\"server\":\"home\",\"moduleSequenceNumber\":83066,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"purchaseTor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"purchaseProgram\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let ram = Number(ns.args[0]);\\r\\n    let count = Number(ns.args[1]);\\r\\n    const cash = ns.getServerMoneyAvailable(\\\"home\\\");\\r\\n    if (isNaN(count)) {\\r\\n        if (ns.args[1] !== undefined)\\r\\n            ns.tprintf(\\\"count was not a number\\\");\\r\\n        count = 1;\\r\\n    }\\r\\n    if (isNaN(ram) && ns.args[0] !== \\\"max\\\") {\\r\\n        // ns.tprintf(\\\"Calculating maximum ram allocation for new server (Cash: %s)\\\", ns.nFormat(cash, '($0.000a)'))\\r\\n        ram = 0;\\r\\n        for (let i = 0; i <= 20; i++) {\\r\\n            const curRam = Math.pow(2, i);\\r\\n            const cost = ns.getPurchasedServerCost(curRam);\\r\\n            if (cost <= cash)\\r\\n                ram = curRam;\\r\\n            else\\r\\n                break;\\r\\n        }\\r\\n        let cost = ns.getPurchasedServerCost(ram);\\r\\n        let maxServers = Math.min(Math.floor(cash / cost), 25);\\r\\n        ns.tprintf(\\\"run buy_server.js %d %d %s\\\", ram, maxServers, ns.nFormat(cost * maxServers, \\\"($0.000a)\\\"));\\r\\n        ram /= 2;\\r\\n        if (ram < 256)\\r\\n            return;\\r\\n        cost = ns.getPurchasedServerCost(ram);\\r\\n        maxServers = Math.min(Math.floor(cash / cost), 25);\\r\\n        ns.tprintf(\\\"run buy_server.js %d %d %s\\\", ram, maxServers, ns.nFormat(cost * maxServers, \\\"($0.000a)\\\"));\\r\\n        ram /= 2;\\r\\n        if (ram < 256)\\r\\n            return;\\r\\n        cost = ns.getPurchasedServerCost(ram);\\r\\n        maxServers = Math.min(Math.floor(cash / cost), 25);\\r\\n        ns.tprintf(\\\"run buy_server.js %d %d %s\\\", ram, maxServers, ns.nFormat(cost * maxServers, \\\"($0.000a)\\\"));\\r\\n        ram /= 2;\\r\\n        if (ram < 256)\\r\\n            return;\\r\\n        cost = ns.getPurchasedServerCost(ram);\\r\\n        maxServers = Math.min(Math.floor(cash / cost), 25);\\r\\n        ns.tprintf(\\\"run buy_server.js %d %d %s\\\", ram, maxServers, ns.nFormat(cost * maxServers, \\\"($0.000a)\\\"));\\r\\n        ram /= 2;\\r\\n        if (ram < 256)\\r\\n            return;\\r\\n        cost = ns.getPurchasedServerCost(ram);\\r\\n        maxServers = Math.min(Math.floor(cash / cost), 25);\\r\\n        ns.tprintf(\\\"run buy_server.js %d %d %s\\\", ram, maxServers, ns.nFormat(cost * maxServers, \\\"($0.000a)\\\"));\\r\\n        ram /= 2;\\r\\n        if (ram < 256)\\r\\n            return;\\r\\n        cost = ns.getPurchasedServerCost(ram);\\r\\n        maxServers = Math.min(Math.floor(cash / cost), 25);\\r\\n        ns.tprintf(\\\"run buy_server.js %d %d %s\\\", ram, maxServers, ns.nFormat(cost * maxServers, \\\"($0.000a)\\\"));\\r\\n        return;\\r\\n    }\\r\\n    if (ns.args[0] === \\\"max\\\") {\\r\\n        ram = 0;\\r\\n        for (let i = 0; i <= 20; i++) {\\r\\n            const curRam = Math.pow(2, i);\\r\\n            const cost = ns.getPurchasedServerCost(curRam);\\r\\n            if (cost <= cash)\\r\\n                ram = curRam;\\r\\n            else\\r\\n                break;\\r\\n        }\\r\\n    }\\r\\n    const cost = ns.getPurchasedServerCost(ram) * count;\\r\\n    if (cash < cost) {\\r\\n        ns.tprintf(\\\"Unable to purchase %d server%s with %d ram (%s < %s)\\\", count, count > 1 ? \\\"s\\\" : \\\"\\\", ram, ns.nFormat(cash, \\\"($0.000a)\\\"), ns.nFormat(cost, \\\"($0.000a)\\\"));\\r\\n        return;\\r\\n    }\\r\\n    for (let i = 0; i < count; i++) {\\r\\n        const pservers = ns.getPurchasedServers().sort((a, b) => ns.getServerMaxRam(a) - ns.getServerMaxRam(b));\\r\\n        const nextIdx = pservers.length;\\r\\n        let nextServerName = \\\"pserv-\\\" + nextIdx;\\r\\n        if (pservers.length === ns.getPurchasedServerLimit()) {\\r\\n            const delServer = ns.getServer(pservers[0]);\\r\\n            if (delServer.maxRam >= ram) {\\r\\n                ns.tprintf(\\\"Max servers reached and new server is not an improvement (%dGB/%dGB ram)\\\", delServer.maxRam, ram);\\r\\n                return;\\r\\n            }\\r\\n            ns.tprintf(\\\"Deleting server %s with %dGB ram\\\", delServer.hostname, delServer.maxRam);\\r\\n            nextServerName = delServer.hostname;\\r\\n            ns.killall(delServer.hostname);\\r\\n            ns.deleteServer(delServer.hostname);\\r\\n        }\\r\\n        const hostname = ns.purchaseServer(nextServerName, ram);\\r\\n        ns.tprintf(\\\"Purchased server %s with %d ram for %s\\\", hostname, ram, ns.nFormat(cost / count, \\\"($0.000a)\\\"));\\r\\n        return;\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnV5X3NlcnZlci5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImJ1eV9zZXJ2ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixJQUFJLEdBQUcsR0FBRyxNQUFNLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzdCLElBQUksS0FBSyxHQUFHLE1BQU0sQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFL0IsTUFBTSxJQUFJLEdBQUcsRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBRWhELElBQUksS0FBSyxDQUFDLEtBQUssQ0FBQyxFQUFFO1FBQ2QsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFNBQVM7WUFBRSxFQUFFLENBQUMsT0FBTyxDQUFDLHdCQUF3QixDQUFDLENBQUM7UUFDbkUsS0FBSyxHQUFHLENBQUMsQ0FBQztLQUNiO0lBRUQsSUFBSSxLQUFLLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxLQUFLLEVBQUU7UUFDcEMsNEdBQTRHO1FBQzVHLEdBQUcsR0FBRyxDQUFDLENBQUM7UUFDUixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQzFCLE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1lBQzlCLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUMvQyxJQUFJLElBQUksSUFBSSxJQUFJO2dCQUFFLEdBQUcsR0FBRyxNQUFNLENBQUM7O2dC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\",\"filename\":\"buy_server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"buy_server.js\",\"url\":\"blob:file:///48ecd6c7-fbc1-48df-a1e0-c17f182a2c84\",\"moduleSequenceNumber\":355641}],\"dependents\":[],\"ramUsage\":11.3,\"server\":\"home\",\"moduleSequenceNumber\":83067,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { allHosts } from \\\"lib/util\\\";\\r\\nfunction answerCCT(ns, cct, answer) {\\r\\n    const reward = ns.codingcontract.attempt(answer, cct.name, cct.host, { returnReward: true });\\r\\n    if (reward === \\\"\\\") {\\r\\n        ns.tprintf(\\\"ERROR: Failed to solve %s:%s of type %s\\\", cct.host, cct.name, cct.type);\\r\\n        ns.tprintf(\\\"  data: %s; answer: %s\\\", cct.data.toString(), answer.toString());\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(\\\"SUCCESS: Solved %s:%s => %s\\\", cct.host, cct.name, reward);\\r\\n    }\\r\\n}\\r\\nclass CCT {\\r\\n    name;\\r\\n    host;\\r\\n    type;\\r\\n    desc;\\r\\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n    data;\\r\\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n    solve;\\r\\n    constructor(ns, hostname, filename) {\\r\\n        this.name = filename;\\r\\n        this.host = hostname;\\r\\n        this.type = ns.codingcontract.getContractType(filename, hostname);\\r\\n        this.desc = ns.codingcontract.getDescription(filename, hostname);\\r\\n        this.data = ns.codingcontract.getData(filename, hostname);\\r\\n        switch (this.type) {\\r\\n            case \\\"Find Largest Prime Factor\\\":\\r\\n                this.solve = _.bind(CCT.solveFindLargestPrimeFactor, null, _, this);\\r\\n                break;\\r\\n            case \\\"Subarray with Maximum Sum\\\":\\r\\n                this.solve = _.bind(CCT.solveSubarraywithMaximumSum, null, _, this);\\r\\n                break;\\r\\n            case \\\"Total Ways to Sum\\\":\\r\\n                this.solve = _.bind(CCT.solveTotalWaystoSum, null, _, this);\\r\\n                break;\\r\\n            case \\\"Spiralize Matrix\\\":\\r\\n                this.solve = _.bind(CCT.solveSpiralizeMatrix, null, _, this);\\r\\n                break;\\r\\n            case \\\"Array Jumping Game\\\":\\r\\n                this.solve = _.bind(CCT.solveArrayJumpingGame, null, _, this);\\r\\n                break;\\r\\n            case \\\"Merge Overlapping Intervals\\\":\\r\\n                this.solve = _.bind(CCT.solveMergeOverlappingIntervals, null, _, this);\\r\\n                break;\\r\\n            case \\\"Generate IP Addresses\\\":\\r\\n                this.solve = _.bind(CCT.solveGenerateIPAddresses, null, _, this);\\r\\n                break;\\r\\n            case \\\"Algorithmic Stock Trader I\\\":\\r\\n                this.solve = _.bind(CCT.solveAlgorithmicStockTraderI, null, _, this);\\r\\n                break;\\r\\n            case \\\"Algorithmic Stock Trader II\\\":\\r\\n                this.solve = _.bind(CCT.solveAlgorithmicStockTraderII, null, _, this);\\r\\n                break;\\r\\n            case \\\"Algorithmic Stock Trader III\\\":\\r\\n                this.solve = _.bind(CCT.solveAlgorithmicStockTraderIII, null, _, this);\\r\\n                break;\\r\\n            case \\\"Algorithmic Stock Trader IV\\\":\\r\\n                this.solve = _.bind(CCT.solveAlgorithmicStockTraderIV, null, _, this);\\r\\n                break;\\r\\n            case \\\"Minimum Path Sum in a Triangle\\\":\\r\\n                this.solve = _.bind(CCT.solveMinimumPathSuminaTriangle, null, _, this);\\r\\n                break;\\r\\n            case \\\"Unique Paths in a Grid I\\\":\\r\\n                this.solve = _.bind(CCT.solveUniquePathsinaGridI, null, _, this);\\r\\n                break;\\r\\n            case \\\"Unique Paths in a Grid II\\\":\\r\\n                this.solve = _.bind(CCT.solveUniquePathsinaGridII, null, _, this);\\r\\n                break;\\r\\n            case \\\"Sanitize Parentheses in Expression\\\":\\r\\n                this.solve = _.bind(CCT.solveSanitizeParenthesesinExpression, null, _, this);\\r\\n                break;\\r\\n            case \\\"Find All Valid Math Expressions\\\":\\r\\n                this.solve = _.bind(CCT.solveFindAllValidMathExpressions, null, _, this);\\r\\n                break;\\r\\n        }\\r\\n        //this.print(ns);\\r\\n    }\\r\\n    print(ns) {\\r\\n        ns.tprintf(\\\"%s %s:\\\", this.host, this.name);\\r\\n        ns.tprintf(\\\"  %s\\\", this.type);\\r\\n        ns.tprintf(\\\"  %s\\\", this.desc);\\r\\n        ns.tprintf(\\\"  %s\\\", this.data);\\r\\n    }\\r\\n    static solveTotalWaystoSum(ns, cct) {\\r\\n        const ways = [1];\\r\\n        ways.length = cct.data + 1;\\r\\n        ways.fill(0, 1);\\r\\n        for (let i = 1; i < cct.data; ++i) {\\r\\n            for (let j = i; j <= cct.data; ++j) {\\r\\n                ways[j] += ways[j - i];\\r\\n            }\\r\\n        }\\r\\n        answerCCT(ns, cct, ways[cct.data]);\\r\\n    }\\r\\n    static solveSubarraywithMaximumSum(ns, cct) {\\r\\n        const nums = cct.data.slice();\\r\\n        for (let i = 1; i < nums.length; i++) {\\r\\n            nums[i] = Math.max(nums[i], nums[i] + nums[i - 1]);\\r\\n        }\\r\\n        answerCCT(ns, cct, Math.max(...nums));\\r\\n    }\\r\\n    static solveSpiralizeMatrix(ns, cct) {\\r\\n        const spiral = [];\\r\\n        const m = cct.data.length;\\r\\n        const n = cct.data[0].length;\\r\\n        let u = 0;\\r\\n        let d = m - 1;\\r\\n        let l = 0;\\r\\n        let r = n - 1;\\r\\n        let k = 0;\\r\\n        while (true) {\\r\\n            // Up\\r\\n            for (let col = l; col <= r; col++) {\\r\\n                spiral[k] = cct.data[u][col];\\r\\n                ++k;\\r\\n            }\\r\\n            if (++u > d) {\\r\\n                break;\\r\\n            }\\r\\n            // Right\\r\\n            for (let row = u; row <= d; row++) {\\r\\n                spiral[k] = cct.data[row][r];\\r\\n                ++k;\\r\\n            }\\r\\n            if (--r < l) {\\r\\n                break;\\r\\n            }\\r\\n            // Down\\r\\n            for (let col = r; col >= l; col--) {\\r\\n                spiral[k] = cct.data[d][col];\\r\\n                ++k;\\r\\n            }\\r\\n            if (--d < u) {\\r\\n                break;\\r\\n            }\\r\\n            // Left\\r\\n            for (let row = d; row >= u; row--) {\\r\\n                spiral[k] = cct.data[row][l];\\r\\n                ++k;\\r\\n            }\\r\\n            if (++l > r) {\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n        answerCCT(ns, cct, spiral);\\r\\n    }\\r\\n    static solveArrayJumpingGame(ns, cct) {\\r\\n        const n = cct.data.length;\\r\\n        let i = 0;\\r\\n        for (let reach = 0; i < n && i <= reach; ++i) {\\r\\n            reach = Math.max(i + cct.data[i], reach);\\r\\n        }\\r\\n        answerCCT(ns, cct, i === n ? 1 : 0);\\r\\n    }\\r\\n    static solveMergeOverlappingIntervals(ns, cct) {\\r\\n        function convert2DArrayToString(arr) {\\r\\n            const components = [];\\r\\n            arr.forEach((e) => {\\r\\n                let s = e.toString();\\r\\n                s = [\\\"[\\\", s, \\\"]\\\"].join(\\\"\\\");\\r\\n                components.push(s);\\r\\n            });\\r\\n            return components.join(\\\",\\\").replace(/\\\\s/g, \\\"\\\");\\r\\n        }\\r\\n        const intervals = cct.data.slice();\\r\\n        intervals.sort((a, b) => {\\r\\n            return a[0] - b[0];\\r\\n        });\\r\\n        const result = [];\\r\\n        let start = intervals[0][0];\\r\\n        let end = intervals[0][1];\\r\\n        for (const interval of intervals) {\\r\\n            if (interval[0] <= end) {\\r\\n                end = Math.max(end, interval[1]);\\r\\n            }\\r\\n            else {\\r\\n                result.push([start, end]);\\r\\n                start = interval[0];\\r\\n                end = interval[1];\\r\\n            }\\r\\n        }\\r\\n        result.push([start, end]);\\r\\n        answerCCT(ns, cct, [convert2DArrayToString(result)]);\\r\\n    }\\r\\n    static solveGenerateIPAddresses(ns, cct) {\\r\\n        function validate(str) {\\r\\n            if (str === \\\"0\\\")\\r\\n                return true;\\r\\n            if (str.length > 1 && str[0] === \\\"0\\\")\\r\\n                return false;\\r\\n            if (str.length > 3)\\r\\n                return false;\\r\\n            return parseInt(str) < 255;\\r\\n        }\\r\\n        const results = [];\\r\\n        for (let i = 1; i <= 3; i++) {\\r\\n            if (cct.data.length - i > 9)\\r\\n                continue;\\r\\n            const a = cct.data.substr(0, i);\\r\\n            if (!validate(a))\\r\\n                continue;\\r\\n            for (let j = 1; j <= 3; j++) {\\r\\n                if (cct.data.length - (i + j) > 6)\\r\\n                    continue;\\r\\n                const b = cct.data.substr(i, j);\\r\\n                if (!validate(b))\\r\\n                    continue;\\r\\n                for (let k = 1; k <= 3; k++) {\\r\\n                    if (cct.data.length - (i + j + k) > 3)\\r\\n                        continue;\\r\\n                    const c = cct.data.substr(i + j, k);\\r\\n                    const d = cct.data.substr(i + j + k);\\r\\n                    if (validate(c) && validate(d)) {\\r\\n                        results.push(a + \\\".\\\" + b + \\\".\\\" + c + \\\".\\\" + d);\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        answerCCT(ns, cct, results);\\r\\n    }\\r\\n    static solveAlgorithmicStockTraderI(ns, cct) {\\r\\n        let maxCur = 0;\\r\\n        let maxSoFar = 0;\\r\\n        for (let i = 1; i < cct.data.length; ++i) {\\r\\n            maxCur = Math.max(0, (maxCur += cct.data[i] - cct.data[i - 1]));\\r\\n            maxSoFar = Math.max(maxCur, maxSoFar);\\r\\n        }\\r\\n        answerCCT(ns, cct, maxSoFar);\\r\\n    }\\r\\n    static solveAlgorithmicStockTraderII(ns, cct) {\\r\\n        let profit = 0;\\r\\n        for (let p = 1; p < cct.data.length; ++p) {\\r\\n            profit += Math.max(cct.data[p] - cct.data[p - 1], 0);\\r\\n        }\\r\\n        answerCCT(ns, cct, profit);\\r\\n    }\\r\\n    static solveAlgorithmicStockTraderIII(ns, cct) {\\r\\n        let hold1 = Number.MIN_SAFE_INTEGER;\\r\\n        let hold2 = Number.MIN_SAFE_INTEGER;\\r\\n        let release1 = 0;\\r\\n        let release2 = 0;\\r\\n        for (const price of cct.data) {\\r\\n            release2 = Math.max(release2, hold2 + price);\\r\\n            hold2 = Math.max(hold2, release1 - price);\\r\\n            release1 = Math.max(release1, hold1 + price);\\r\\n            hold1 = Math.max(hold1, price * -1);\\r\\n        }\\r\\n        answerCCT(ns, cct, release2);\\r\\n    }\\r\\n    static solveAlgorithmicStockTraderIV(ns, cct) {\\r\\n        const k = cct.data[0];\\r\\n        const prices = cct.data[1];\\r\\n        const len = prices.length;\\r\\n        if (len < 2) {\\r\\n            answerCCT(ns, cct, 0);\\r\\n        }\\r\\n        if (k > len / 2) {\\r\\n            let res = 0;\\r\\n            for (let i = 1; i < len; ++i) {\\r\\n                res += Math.max(prices[i] - prices[i - 1], 0);\\r\\n            }\\r\\n            answerCCT(ns, cct, res);\\r\\n        }\\r\\n        const hold = [];\\r\\n        const rele = [];\\r\\n        hold.length = k + 1;\\r\\n        rele.length = k + 1;\\r\\n        for (let i = 0; i <= k; ++i) {\\r\\n            hold[i] = Number.MIN_SAFE_INTEGER;\\r\\n            rele[i] = 0;\\r\\n        }\\r\\n        let cur;\\r\\n        for (let i = 0; i < len; ++i) {\\r\\n            cur = prices[i];\\r\\n            for (let j = k; j > 0; --j) {\\r\\n                rele[j] = Math.max(rele[j], hold[j] + cur);\\r\\n                hold[j] = Math.max(hold[j], rele[j - 1] - cur);\\r\\n            }\\r\\n        }\\r\\n        answerCCT(ns, cct, rele[k]);\\r\\n    }\\r\\n    static solveMinimumPathSuminaTriangle(ns, cct) {\\r\\n        const n = cct.data.length;\\r\\n        const dp = cct.data[n - 1].slice();\\r\\n        for (let i = n - 2; i > -1; --i) {\\r\\n            for (let j = 0; j < cct.data[i].length; ++j) {\\r\\n                dp[j] = Math.min(dp[j], dp[j + 1]) + cct.data[i][j];\\r\\n            }\\r\\n        }\\r\\n        answerCCT(ns, cct, dp[0]);\\r\\n    }\\r\\n    static solveUniquePathsinaGridI(ns, cct) {\\r\\n        const n = cct.data[0]; // Number of rows\\r\\n        const m = cct.data[1]; // Number of columns\\r\\n        const currentRow = [];\\r\\n        currentRow.length = n;\\r\\n        for (let i = 0; i < n; i++) {\\r\\n            currentRow[i] = 1;\\r\\n        }\\r\\n        for (let row = 1; row < m; row++) {\\r\\n            for (let i = 1; i < n; i++) {\\r\\n                currentRow[i] += currentRow[i - 1];\\r\\n            }\\r\\n        }\\r\\n        answerCCT(ns, cct, currentRow[n - 1]);\\r\\n    }\\r\\n    static solveUniquePathsinaGridII(ns, cct) {\\r\\n        const obstacleGrid = [];\\r\\n        obstacleGrid.length = cct.data.length;\\r\\n        for (let i = 0; i < obstacleGrid.length; ++i) {\\r\\n            obstacleGrid[i] = cct.data[i].slice();\\r\\n        }\\r\\n        for (let i = 0; i < obstacleGrid.length; i++) {\\r\\n            for (let j = 0; j < obstacleGrid[0].length; j++) {\\r\\n                if (obstacleGrid[i][j] == 1) {\\r\\n                    obstacleGrid[i][j] = 0;\\r\\n                }\\r\\n                else if (i == 0 && j == 0) {\\r\\n                    obstacleGrid[0][0] = 1;\\r\\n                }\\r\\n                else {\\r\\n                    obstacleGrid[i][j] = (i > 0 ? obstacleGrid[i - 1][j] : 0) + (j > 0 ? obstacleGrid[i][j - 1] : 0);\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        answerCCT(ns, cct, obstacleGrid[obstacleGrid.length - 1][obstacleGrid[0].length - 1]);\\r\\n    }\\r\\n    static solveSanitizeParenthesesinExpression(ns, cct) {\\r\\n        let left = 0;\\r\\n        let right = 0;\\r\\n        const res = [];\\r\\n        for (let i = 0; i < cct.data.length; ++i) {\\r\\n            if (cct.data[i] === \\\"(\\\") {\\r\\n                ++left;\\r\\n            }\\r\\n            else if (cct.data[i] === \\\")\\\") {\\r\\n                left > 0 ? --left : ++right;\\r\\n            }\\r\\n        }\\r\\n        function dfs(pair, index, left, right, s, solution, res) {\\r\\n            if (s.length === index) {\\r\\n                if (left === 0 && right === 0 && pair === 0) {\\r\\n                    for (let i = 0; i < res.length; i++) {\\r\\n                        if (res[i] === solution) {\\r\\n                            return;\\r\\n                        }\\r\\n                    }\\r\\n                    res.push(solution);\\r\\n                }\\r\\n                return;\\r\\n            }\\r\\n            if (s[index] === \\\"(\\\") {\\r\\n                if (left > 0) {\\r\\n                    dfs(pair, index + 1, left - 1, right, s, solution, res);\\r\\n                }\\r\\n                dfs(pair + 1, index + 1, left, right, s, solution + s[index], res);\\r\\n            }\\r\\n            else if (s[index] === \\\")\\\") {\\r\\n                if (right > 0)\\r\\n                    dfs(pair, index + 1, left, right - 1, s, solution, res);\\r\\n                if (pair > 0)\\r\\n                    dfs(pair - 1, index + 1, left, right, s, solution + s[index], res);\\r\\n            }\\r\\n            else {\\r\\n                dfs(pair, index + 1, left, right, s, solution + s[index], res);\\r\\n            }\\r\\n        }\\r\\n        dfs(0, 0, left, right, cct.data, \\\"\\\", res);\\r\\n        answerCCT(ns, cct, res);\\r\\n    }\\r\\n    static solveFindAllValidMathExpressions(ns, cct) {\\r\\n        const num = cct.data[0];\\r\\n        const target = cct.data[1];\\r\\n        function helper(res, path, num, target, pos, evaluated, multed) {\\r\\n            if (pos === num.length) {\\r\\n                if (target === evaluated) {\\r\\n                    res.push(path);\\r\\n                }\\r\\n                return;\\r\\n            }\\r\\n            for (let i = pos; i < num.length; ++i) {\\r\\n                if (i != pos && num[pos] == \\\"0\\\") {\\r\\n                    break;\\r\\n                }\\r\\n                const cur = parseInt(num.substring(pos, i + 1));\\r\\n                if (pos === 0) {\\r\\n                    helper(res, path + cur, num, target, i + 1, cur, cur);\\r\\n                }\\r\\n                else {\\r\\n                    helper(res, path + \\\"+\\\" + cur, num, target, i + 1, evaluated + cur, cur);\\r\\n                    helper(res, path + \\\"-\\\" + cur, num, target, i + 1, evaluated - cur, -cur);\\r\\n                    helper(res, path + \\\"*\\\" + cur, num, target, i + 1, evaluated - multed + multed * cur, multed * cur);\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        const result = [];\\r\\n        helper(result, \\\"\\\", num, target, 0, 0, 0);\\r\\n        answerCCT(ns, cct, result);\\r\\n    }\\r\\n    static solveFindLargestPrimeFactor(ns, cct) {\\r\\n        let fac = 2;\\r\\n        let n = cct.data;\\r\\n        while (n > (fac - 1) * (fac - 1)) {\\r\\n            while (n % fac === 0) {\\r\\n                n = Math.round(n / fac);\\r\\n            }\\r\\n            ++fac;\\r\\n        }\\r\\n        answerCCT(ns, cct, n === 1 ? fac - 1 : n);\\r\\n    }\\r\\n}\\r\\nexport async function main(ns) {\\r\\n    const hosts = allHosts(ns);\\r\\n    while (true) {\\r\\n        const ccts = [];\\r\\n        for (const hostname of hosts) {\\r\\n            const ls = ns.ls(hostname).filter((filename) => filename.indexOf(\\\".cct\\\") !== -1);\\r\\n            if (ls.length === 0)\\r\\n                continue;\\r\\n            ccts.push(new CCT(ns, hostname, ls[0]));\\r\\n        }\\r\\n        for (const cct of ccts) {\\r\\n            cct.solve(ns);\\r\\n        }\\r\\n        await ns.sleep(60 * 1000);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2N0LmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsiY2N0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFFcEMsU0FBUyxTQUFTLENBQUMsRUFBTSxFQUFFLEdBQVEsRUFBRSxNQUF5QjtJQUMxRCxNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUUsR0FBRyxDQUFDLElBQUksRUFBRSxHQUFHLENBQUMsSUFBSSxFQUFFLEVBQUUsWUFBWSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7SUFFN0YsSUFBSSxNQUFNLEtBQUssRUFBRSxFQUFFO1FBQ2YsRUFBRSxDQUFDLE9BQU8sQ0FBQyx5Q0FBeUMsRUFBRSxHQUFHLENBQUMsSUFBSSxFQUFFLEdBQUcsQ0FBQyxJQUFJLEVBQUUsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3BGLEVBQUUsQ0FBQyxPQUFPLENBQUMsd0JBQXdCLEVBQUUsR0FBRyxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsRUFBRSxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztLQUNoRjtTQUFNO1FBQ0gsRUFBRSxDQUFDLE9BQU8sQ0FBQyw2QkFBNkIsRUFBRSxHQUFHLENBQUMsSUFBSSxFQUFFLEdBQUcsQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUM7S0FDekU7QUFDTCxDQUFDO0FBRUQsTUFBTSxHQUFHO0lBSUwsSUFBSSxDQUFTO0lBQ2IsSUFBSSxDQUFTO0lBQ2IsSUFBSSxDQUFTO0lBQ2IsSUFBSSxDQUFTO0lBRWIsOERBQThEO0lBQzlELElBQUksQ0FBTTtJQUNWLDhEQUE4RDtJQUM5RCxLQUFLLENBQU07SUFFWCxZQUFZLEVBQU0sRUFBRSxRQUFnQixFQUFFLFFBQWdCO1FBQ2xELElBQUksQ0FBQyxJQUFJLEdBQUcsUUFBUSxDQUFD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QUNQO1lBQ0QsSUFBSSxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUU7Z0JBQ1QsTUFBTTthQUNUO1lBRUQsT0FBTztZQUNQLEtBQUssSUFBSSxHQUFHLEdBQUcsQ0FBQyxFQUFFLEdBQUcsSUFBSSxDQUFDLEVBQUUsR0FBRyxFQUFFLEVBQUU7Z0JBQy9CLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO2dCQUM3QixFQUFFLENBQUMsQ0FBQzthQUNQO1lBQ0QsSUFBSSxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUU7Z0JBQ1QsTUFBTTthQUNUO1lBRUQsT0FBTztZQUNQLEtBQUssSUFBSSxHQUFHLEdBQUcsQ0FBQyxFQUFFLEdBQUcsSUFBSSxDQUFDLEVBQUUsR0FBRyxFQUFFLEVBQUU7Z0JBQy9CLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUM3QixFQUFFLENBQUMsQ0FBQzthQUNQO1lBQ0QsSUFBSSxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUU7Z0JBQ1QsTUFBTTthQUNUO1NBQ0o7UUFFRCxTQUFTLENBQUMsRUFBRSxFQUFFLEdBQUcsRUFBRSxNQUFNLENBQUMsQ0FBQztJQUMvQixDQUFDO0lBRUQsTUFBTSxDQUFDLHFCQUFxQixDQUFDLEVBQU0sRUFBRSxHQUFRO1FBQ3pDLE1BQU0sQ0FBQyxHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDO1FBQzFCLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNWLEtBQUssSUFBSSxLQUFLLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLEtBQUssRUFBRSxFQUFFLENBQUMsRUFBRTtZQUMxQyxLQUFLLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxLQUFL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\",\"filename\":\"cct.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/util.js\",\"url\":\"blob:file:///5dcbf632-434a-40aa-849f-a27e6e115902\",\"moduleSequenceNumber\":2961},{\"filename\":\"cct.js\",\"url\":\"blob:file:///7cc07ae4-a9c8-4302-af9f-785076ae7fdf\",\"moduleSequenceNumber\":9281}],\"dependents\":[],\"ramUsage\":27,\"server\":\"home\",\"moduleSequenceNumber\":83068,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"codingcontract.getContractType\",\"cost\":5},{\"type\":\"fn\",\"name\":\"codingcontract.getDescription\",\"cost\":5},{\"type\":\"fn\",\"name\":\"codingcontract.getData\",\"cost\":5},{\"type\":\"fn\",\"name\":\"codingcontract.attempt\",\"cost\":10},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"let lastEl;\\r\\nconst roots = [];\\r\\nfunction stFormat(ns, ms, showms = true, showfull = false) {\\r\\n    if (ms <= 0)\\r\\n        return \\\"--\\\";\\r\\n    let timeLeft = ms;\\r\\n    const hours = Math.floor(ms / (1000 * 60 * 60));\\r\\n    timeLeft -= hours * (1000 * 60 * 60);\\r\\n    const minutes = Math.floor(timeLeft / (1000 * 60));\\r\\n    timeLeft -= minutes * (1000 * 60);\\r\\n    const seconds = Math.floor(timeLeft / 1000);\\r\\n    timeLeft -= seconds * 1000;\\r\\n    const milliseconds = timeLeft;\\r\\n    if (showms) {\\r\\n        if (hours > 0 || showfull)\\r\\n            return ns.sprintf(\\\"%dh%02dm%02d.%03ds\\\", hours, minutes, seconds, milliseconds);\\r\\n        if (minutes > 0)\\r\\n            return ns.sprintf(\\\"%dm%02d.%03ds\\\", minutes, seconds, milliseconds);\\r\\n        return ns.sprintf(\\\"%d.%03ds\\\", seconds, milliseconds);\\r\\n    }\\r\\n    else {\\r\\n        if (hours > 0 || showfull)\\r\\n            return ns.sprintf(\\\"%dh%02dm%02ds\\\", hours, minutes, seconds);\\r\\n        if (minutes > 0)\\r\\n            return ns.sprintf(\\\"%dm%02ds\\\", minutes, seconds);\\r\\n        return ns.sprintf(\\\"%ds\\\", seconds);\\r\\n    }\\r\\n}\\r\\nfunction insertAfter(newNode, existingNode) {\\r\\n    if (!existingNode.parentNode)\\r\\n        throw \\\"insertAfter init failed\\\";\\r\\n    if (existingNode.nextSibling)\\r\\n        return existingNode.parentNode.insertBefore(newNode, existingNode.nextSibling);\\r\\n    else\\r\\n        return existingNode.parentNode.appendChild(newNode);\\r\\n}\\r\\nfunction addBottomLine() {\\r\\n    const self = globalThis;\\r\\n    const doc = self[\\\"document\\\"];\\r\\n    const hook0 = doc?.getElementById(\\\"overview-extra-hook-0\\\");\\r\\n    const hookRootEl = hook0?.parentElement?.parentElement;\\r\\n    const newRootEl = hookRootEl?.cloneNode(true);\\r\\n    if (!hookRootEl || !newRootEl)\\r\\n        throw \\\"addBottomLine init failed\\\";\\r\\n    const child1 = newRootEl?.children[0]?.children[0];\\r\\n    if (child1) {\\r\\n        child1.innerText = \\\"\\\";\\r\\n    }\\r\\n    const child2 = newRootEl?.children[0]?.children[0];\\r\\n    if (child2) {\\r\\n        child2.innerText = \\\"\\\";\\r\\n        child2.removeAttribute(\\\"id\\\");\\r\\n    }\\r\\n    if (lastEl === undefined)\\r\\n        lastEl = hookRootEl;\\r\\n    try {\\r\\n        lastEl = insertAfter(newRootEl, lastEl);\\r\\n    }\\r\\n    catch (e) {\\r\\n        throw `${e}; addBottomLine init failed`;\\r\\n    }\\r\\n    roots.push(newRootEl);\\r\\n    return newRootEl;\\r\\n}\\r\\nfunction addSingle() {\\r\\n    const self = globalThis;\\r\\n    const doc = self[\\\"document\\\"];\\r\\n    const hook0 = doc?.getElementById(\\\"overview-extra-hook-0\\\");\\r\\n    const hookRootEl = hook0?.parentElement?.parentElement;\\r\\n    const overviewEl = hookRootEl?.parentElement;\\r\\n    const hackRootEl = overviewEl?.children[2];\\r\\n    const newRootEl = hackRootEl?.cloneNode(true);\\r\\n    const newEl = newRootEl?.children[0]?.firstChild;\\r\\n    if (!hookRootEl || !newRootEl || !newEl)\\r\\n        throw \\\"addSingle init failed\\\";\\r\\n    if (newRootEl?.childNodes[1])\\r\\n        newRootEl.removeChild(newRootEl.childNodes[1]);\\r\\n    newEl.removeAttribute(\\\"id\\\");\\r\\n    newEl.innerText = \\\"\\\";\\r\\n    if (lastEl === undefined)\\r\\n        lastEl = hookRootEl;\\r\\n    try {\\r\\n        lastEl = insertAfter(newRootEl, lastEl);\\r\\n    }\\r\\n    catch (e) {\\r\\n        throw `${e}; addSingle init failed`;\\r\\n    }\\r\\n    roots.push(newRootEl);\\r\\n    return newEl;\\r\\n}\\r\\nfunction addDouble() {\\r\\n    const self = globalThis;\\r\\n    const doc = self[\\\"document\\\"];\\r\\n    const hook0 = doc.getElementById(\\\"overview-extra-hook-0\\\");\\r\\n    const hookRootEl = hook0?.parentElement?.parentElement;\\r\\n    const overviewEl = hookRootEl?.parentElement;\\r\\n    const hackRootEl = overviewEl?.children[2];\\r\\n    const newRootEl = hackRootEl?.cloneNode(true);\\r\\n    const newEl1 = newRootEl?.children[0]?.children[0];\\r\\n    const newEl2 = newRootEl?.children[1]?.children[0];\\r\\n    // check if anything failed\\r\\n    if (!hookRootEl || !newRootEl || !newEl1 || !newEl2)\\r\\n        throw \\\"addDouble init failed\\\";\\r\\n    newEl1.removeAttribute(\\\"id\\\");\\r\\n    newEl1.innerText = \\\"\\\";\\r\\n    newEl2.removeAttribute(\\\"id\\\");\\r\\n    newEl2.innerText = \\\"\\\";\\r\\n    if (lastEl === undefined)\\r\\n        lastEl = hookRootEl;\\r\\n    try {\\r\\n        lastEl = insertAfter(newRootEl, lastEl);\\r\\n    }\\r\\n    catch (e) {\\r\\n        throw `${e}; addDouble init failed`;\\r\\n    }\\r\\n    roots.push(newRootEl);\\r\\n    return [newEl1, newEl2];\\r\\n}\\r\\nfunction addProgress() {\\r\\n    const self = globalThis;\\r\\n    const doc = self[\\\"document\\\"];\\r\\n    const hook0 = doc.getElementById(\\\"overview-extra-hook-0\\\");\\r\\n    const hookRootEl = hook0?.parentElement?.parentElement;\\r\\n    const overviewEl = hookRootEl?.parentElement;\\r\\n    const hackProgressEl = overviewEl?.children[3];\\r\\n    const newRootEl = hackProgressEl?.cloneNode(true);\\r\\n    const newSub1 = newRootEl?.children[0]?.children[0];\\r\\n    const newSub2 = newRootEl?.children[0]?.children[0]?.children[0];\\r\\n    // check if anything failed\\r\\n    if (!newRootEl || !newSub1 || !newSub2)\\r\\n        throw \\\"addProgress init failed\\\";\\r\\n    if (lastEl === undefined)\\r\\n        lastEl = newRootEl;\\r\\n    try {\\r\\n        lastEl = insertAfter(newRootEl, lastEl);\\r\\n    }\\r\\n    catch (e) {\\r\\n        throw `${e}; addProgress init failed`;\\r\\n    }\\r\\n    roots.push(newRootEl);\\r\\n    return [newSub1, newSub2];\\r\\n}\\r\\nexport async function main(ns) {\\r\\n    const args = ns.flags([[\\\"help\\\", false]]);\\r\\n    if (args.help) {\\r\\n        ns.tprint(\\\"This script will enhance your HUD (Heads up Display) with custom statistics.\\\");\\r\\n        ns.tprint(`Usage: run ${ns.getScriptName()}`);\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprint(`> run ${ns.getScriptName()}`);\\r\\n        return;\\r\\n    }\\r\\n    ns.atExit(function () {\\r\\n        for (const root of roots) {\\r\\n            root.parentNode?.removeChild(root);\\r\\n        }\\r\\n    });\\r\\n    try {\\r\\n        const [clockEl, karmaEl] = addDouble();\\r\\n        const targetEl = addSingle();\\r\\n        const incomeEl = addSingle();\\r\\n        const [stateEl, countdownEl] = addDouble();\\r\\n        const [hackProgressEl1, hackProgressEl2] = addProgress();\\r\\n        addBottomLine();\\r\\n        const hacknetProdEl = addSingle();\\r\\n        const hacknetTargetEl1 = addSingle();\\r\\n        const hacknetTargetEl2 = addSingle();\\r\\n        addBottomLine();\\r\\n        karmaEl.classList.toggle(\\\"makeStyles-hack-17\\\", false);\\r\\n        karmaEl.classList.add(\\\"makeStyles-hp-15\\\");\\r\\n        const port1 = ns.getPortHandle(1);\\r\\n        const port2 = ns.getPortHandle(2);\\r\\n        let startTime = 0;\\r\\n        let endTime = 1000;\\r\\n        let fullTime = 1000;\\r\\n        while (true) {\\r\\n            if (!port1.empty()) {\\r\\n                const data = JSON.parse(port1.peek().toString());\\r\\n                startTime = new Date(data[0]).getTime();\\r\\n                endTime = new Date(startTime + data[1]).getTime();\\r\\n                fullTime = endTime - startTime;\\r\\n                const date = new Date();\\r\\n                const curTime = date.getTime();\\r\\n                // Update Clock\\r\\n                // let ms = ns.sprintf(\\\"%03d\\\", date.getUTCMilliseconds());\\r\\n                // clockEl.innerText = date.toLocaleTimeString(\\\"it-IT\\\") + \\\".\\\" + ms;\\r\\n                clockEl.innerText = date.toLocaleTimeString(\\\"it-IT\\\");\\r\\n                // Update Karma\\r\\n                karmaEl.innerText = `k: ${ns.heart.break().toFixed(0)}`;\\r\\n                // Update Target & Income\\r\\n                targetEl.innerText = data[2];\\r\\n                incomeEl.innerText = `${ns.nFormat(data[3], \\\"($0.0a)\\\")}/s`;\\r\\n                // Update State & Countdown\\r\\n                stateEl.innerText = data[4];\\r\\n                countdownEl.innerText = stFormat(ns, endTime - curTime, false);\\r\\n                // Update Progress\\r\\n                const tvalue = curTime - startTime;\\r\\n                const nvalue = (tvalue / fullTime) * 100;\\r\\n                let transform = 100 - nvalue;\\r\\n                let wholeValue = Math.floor(nvalue);\\r\\n                if (startTime === 0 || wholeValue > 100) {\\r\\n                    port1.clear();\\r\\n                    transform = 100;\\r\\n                    wholeValue = 0;\\r\\n                }\\r\\n                hackProgressEl1.setAttribute(\\\"aria-valuenow\\\", `${wholeValue}`);\\r\\n                hackProgressEl2.setAttribute(\\\"style\\\", `transform: translateX(${-transform.toFixed(3)}%);`);\\r\\n            }\\r\\n            else {\\r\\n                const date = new Date();\\r\\n                clockEl.innerText = date.toLocaleTimeString(\\\"it-IT\\\");\\r\\n                karmaEl.innerText = ns.heart.break().toFixed(0).toString();\\r\\n                targetEl.innerText = \\\"NO TARGET\\\";\\r\\n                incomeEl.innerText = \\\"\\\";\\r\\n                stateEl.innerText = \\\"\\\";\\r\\n                countdownEl.innerText = \\\"\\\";\\r\\n                hackProgressEl1.setAttribute(\\\"aria-valuenow\\\", \\\"0\\\");\\r\\n                hackProgressEl2.setAttribute(\\\"style\\\", \\\"transform: translateX(-100%);\\\");\\r\\n            }\\r\\n            if (!port2.empty()) {\\r\\n                const data = JSON.parse(port2.peek().toString());\\r\\n                const production = data[0];\\r\\n                const upgrade = data[1];\\r\\n                const totalUpgradeCashProduction = ((production + upgrade.upgradeProductionIncrease) / 4) * 1000000;\\r\\n                const totalUpgradePayoffTime = (upgrade.upgradeCost / totalUpgradeCashProduction) * 1000;\\r\\n                hacknetProdEl.innerText = `hacknet: ${ns.nFormat((production / 4) * 1000000, \\\"($0.0a)\\\")}/s`;\\r\\n                hacknetTargetEl1.innerText = ns.sprintf(\\\"%02d/%s %s\\\", upgrade.id, upgrade.type, stFormat(ns, totalUpgradePayoffTime, false));\\r\\n                hacknetTargetEl2.innerText = ns.sprintf(\\\"%s %.2f\\\", ns.nFormat(upgrade.upgradeCost, \\\"($0.0a)\\\"), upgrade.upgradeValue * 1000000000);\\r\\n            }\\r\\n            else {\\r\\n                hacknetProdEl.innerText = \\\"\\\";\\r\\n                hacknetTargetEl1.innerText = \\\"\\\";\\r\\n                hacknetTargetEl2.innerText = \\\"\\\";\\r\\n            }\\r\\n            await ns.sleep(1000);\\r\\n        }\\r\\n    }\\r\\n    catch (e) {\\r\\n        ns.tprintf(\\\"ERROR: %s\\\", e);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xvY2suanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJjbG9jay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFJQSxJQUFJLE1BQW1CLENBQUM7QUFDeEIsTUFBTSxLQUFLLEdBQWtCLEVBQUUsQ0FBQztBQUVoQyxTQUFTLFFBQVEsQ0FBQyxFQUFNLEVBQUUsRUFBVSxFQUFFLE1BQU0sR0FBRyxJQUFJLEVBQUUsUUFBUSxHQUFHLEtBQUs7SUFDcEUsSUFBSSxFQUFFLElBQUksQ0FBQztRQUNWLE9BQU8sSUFBSSxDQUFBO0lBRVQsSUFBSSxRQUFRLEdBQUcsRUFBRSxDQUFDO0lBQ2xCLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxHQUFHLENBQUMsSUFBSSxHQUFHLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ2hELFFBQVEsSUFBSSxLQUFLLEdBQUcsQ0FBQyxJQUFJLEdBQUcsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDO0lBQ3JDLE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxHQUFHLENBQUMsSUFBSSxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDbkQsUUFBUSxJQUFJLE9BQU8sR0FBRyxDQUFDLElBQUksR0FBRyxFQUFFLENBQUMsQ0FBQztJQUNsQyxNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsQ0FBQztJQUM1QyxRQUFRLElBQUksT0FBTyxHQUFHLElBQUksQ0FBQztJQUMzQixNQUFNLFlBQVksR0FBRyxRQUFRLENBQUM7SUFFOUIsSUFBSSxNQUFNLEVBQUU7UUFDUixJQUFJLEtBQUssR0FBRyxDQUFDLElBQUksUUFBUTtZQUFFLE9BQU8sRUFBRSxDQUFDLE9BQU8sQ0FBQyxvQkFBb0IsRUFBRSxLQUFLLEVBQUUsT0FBTyxFQUFFLE9BQU8sRUFBRSxZQUFZLENB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\",\"filename\":\"clock.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"clock.js\",\"url\":\"blob:file:///95c20b74-5d6a-42d6-9cb4-d296ca55a2ff\",\"moduleSequenceNumber\":83423}],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":83423,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { cleanLogs, llog, CITIES } from \\\"lib/util\\\";\\r\\nimport { getMaterialPrice } from \\\"/lib/corp/sale\\\";\\r\\nfunction findProp(propName) {\\r\\n    for (const div of eval(\\\"document\\\").querySelectorAll(\\\"div\\\")) {\\r\\n        const propKey = Object.keys(div)[1];\\r\\n        if (!propKey)\\r\\n            continue;\\r\\n        const props = div[propKey];\\r\\n        if (props.children?.props && props.children.props[propName])\\r\\n            return props.children.props[propName];\\r\\n        if (props.children instanceof Array)\\r\\n            for (const child of props.children)\\r\\n                if (child?.props && child.props[propName])\\r\\n                    return child.props[propName];\\r\\n    }\\r\\n}\\r\\n// 10:22:01 Offer: 252.191b 2.274m - All Warehouses, selling at MP\\r\\nfunction unassignEmployees(divisionName, cityName) {\\r\\n    const playerProp = findProp(\\\"player\\\");\\r\\n    if (playerProp?.corporation?.divisions) {\\r\\n        const division = playerProp.corporation.divisions.find((a) => a.type === divisionName);\\r\\n        if (division) {\\r\\n            const office = division.offices[cityName];\\r\\n            if (office) {\\r\\n                for (const employee of office.employees) {\\r\\n                    employee.pos = \\\"Unassigned\\\";\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\nfunction unassignAllEmployees(divisionName) {\\r\\n    const playerProp = findProp(\\\"player\\\");\\r\\n    if (playerProp?.corporation?.divisions) {\\r\\n        const division = playerProp.corporation.divisions.find((a) => a.type === divisionName);\\r\\n        if (division) {\\r\\n            for (const cityName of Object.keys(division.offices)) {\\r\\n                unassignEmployees(divisionName, cityName);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\nfunction assignEmployees(ns, divisionName, city, assignments) {\\r\\n    const playerProp = findProp(\\\"player\\\");\\r\\n    if (playerProp?.corporation?.divisions) {\\r\\n        const division = playerProp.corporation.divisions.find((a) => a.type === divisionName);\\r\\n        if (division) {\\r\\n            const office = division.offices[city];\\r\\n            if (office) {\\r\\n                for (const employee of office.employees) {\\r\\n                    employee.pos = \\\"Unassigned\\\";\\r\\n                }\\r\\n                for (const assignment of assignments) {\\r\\n                    const employeeCount = office.employees.length;\\r\\n                    const job = assignment[0];\\r\\n                    const num = Math.floor(eval((assignment[1] + \\\"\\\").replace(/ec/g, employeeCount + \\\"\\\")));\\r\\n                    office.setEmployeeToJob(job, num);\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\nfunction assignAllEmployees(ns, divisionName, assignments) {\\r\\n    for (const city of ns.corporation.getDivision(divisionName).cities) {\\r\\n        assignEmployees(ns, divisionName, city, assignments);\\r\\n    }\\r\\n}\\r\\nasync function doAgSell(ns, selloff) {\\r\\n    const playerProp = findProp(\\\"player\\\");\\r\\n    const agDivName = \\\"Agriculture\\\";\\r\\n    if (playerProp?.corporation?.divisions) {\\r\\n        const agDiv = playerProp.corporation.divisions.find((a) => a.type === agDivName);\\r\\n        if (agDiv) {\\r\\n            if (selloff) {\\r\\n                assignAllEmployees(ns, agDivName, [\\r\\n                    [\\\"Engineer\\\", 1],\\r\\n                    [\\\"Business\\\", \\\"ec-1\\\"],\\r\\n                ]);\\r\\n            }\\r\\n            else {\\r\\n                assignAllEmployees(ns, agDivName, [\\r\\n                    [\\\"Operations\\\", \\\"ec-2\\\"],\\r\\n                    [\\\"Engineer\\\", 1],\\r\\n                    [\\\"Management\\\", 1],\\r\\n                ]);\\r\\n            }\\r\\n            await waitForState(ns);\\r\\n            for (const [city, warehouse] of Object.entries(agDiv.warehouses)) {\\r\\n                if (warehouse) {\\r\\n                    for (const matName of Object.keys(warehouse.materials)) {\\r\\n                        if (!Object.prototype.hasOwnProperty.call(warehouse.materials, matName))\\r\\n                            continue;\\r\\n                        const mat = warehouse.materials[matName];\\r\\n                        if (mat.name === \\\"Plants\\\")\\r\\n                            mat.marketTa2 = true;\\r\\n                        if (mat.name === \\\"Food\\\") {\\r\\n                            if (selloff) {\\r\\n                                mat.marketTa2 = false;\\r\\n                                const sellPrice = getMaterialPrice(agDivName, city, mat.name) + \\\"\\\";\\r\\n                                //ns.tprintf(\\\"selling %s:%s:%s\\\", city, mat.name, sellPrice)\\r\\n                                ns.corporation.sellMaterial(agDivName, city, mat.name, \\\"MAX\\\", \\\"MP*0.5\\\");\\r\\n                            }\\r\\n                            else {\\r\\n                                mat.marketTa2 = false;\\r\\n                                ns.corporation.sellMaterial(agDivName, city, mat.name, \\\"0\\\", \\\"0\\\");\\r\\n                            }\\r\\n                        }\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\nfunction buyOneTimeUpgrades(ns, _upgrades) {\\r\\n    let upgrades;\\r\\n    if (typeof _upgrades === \\\"string\\\") {\\r\\n        upgrades = [_upgrades];\\r\\n    }\\r\\n    else {\\r\\n        upgrades = _upgrades;\\r\\n    }\\r\\n    for (const upgrade of upgrades) {\\r\\n        if (!ns.corporation.hasUnlockUpgrade(upgrade)) {\\r\\n            const upgradeCost = ns.corporation.getUnlockUpgradeCost(upgrade);\\r\\n            const corpFunds = ns.corporation.getCorporation().funds;\\r\\n            if (corpFunds < upgradeCost) {\\r\\n                llog(ns, \\\"WARNING: Insufficient funds to purchase %s %s < %s\\\", upgrade, ns.nFormat(corpFunds, \\\"($0.000a)\\\"), ns.nFormat(upgradeCost, \\\"($0.000a)\\\"));\\r\\n            }\\r\\n            else {\\r\\n                llog(ns, \\\"Purchasing %s upgrade for %s\\\", upgrade, ns.nFormat(upgradeCost, \\\"($0.000a)\\\"));\\r\\n                ns.corporation.unlockUpgrade(upgrade);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\nfunction buyLeveledUpgrades(ns, _upgrades, _amount, threshold = 1) {\\r\\n    let upgrades;\\r\\n    if (typeof _upgrades === \\\"string\\\") {\\r\\n        upgrades = [_upgrades];\\r\\n    }\\r\\n    else {\\r\\n        upgrades = _upgrades;\\r\\n    }\\r\\n    const amount = _amount <= 0 ? Number.MAX_SAFE_INTEGER : _amount;\\r\\n    for (const upgrade of upgrades) {\\r\\n        let upgradeCount = 0;\\r\\n        let upgradeCost = 0;\\r\\n        while (ns.corporation.getUpgradeLevelCost(upgrade) < ns.corporation.getCorporation().funds * threshold &&\\r\\n            ns.corporation.getUpgradeLevel(upgrade) < amount) {\\r\\n            upgradeCost += ns.corporation.getUpgradeLevelCost(upgrade);\\r\\n            upgradeCount++;\\r\\n            ns.corporation.levelUpgrade(upgrade);\\r\\n        }\\r\\n        if (upgradeCount > 0) {\\r\\n            llog(ns, \\\"Purchased %dx of %s for %s\\\", upgradeCount, upgrade, ns.nFormat(upgradeCost, \\\"($0.000a)\\\"));\\r\\n        }\\r\\n    }\\r\\n}\\r\\nfunction buyAllWarehouseUpgrades(ns, divisionName, size) {\\r\\n    for (const city of ns.corporation.getDivision(divisionName).cities) {\\r\\n        buyWarehouseUpgrades(ns, divisionName, city, size);\\r\\n    }\\r\\n}\\r\\nfunction buyWarehouseUpgrades(ns, divisionName, city, size) {\\r\\n    let spentFunds = 0;\\r\\n    const startSize = ns.corporation.getWarehouse(divisionName, city).size;\\r\\n    if (startSize >= size)\\r\\n        return;\\r\\n    let newSize = startSize;\\r\\n    while (true) {\\r\\n        const upgradeCost = ns.corporation.getUpgradeWarehouseCost(divisionName, city);\\r\\n        const corpFunds = ns.corporation.getCorporation().funds;\\r\\n        if (corpFunds < upgradeCost)\\r\\n            break;\\r\\n        spentFunds += upgradeCost;\\r\\n        ns.corporation.upgradeWarehouse(divisionName, city);\\r\\n        newSize = ns.corporation.getWarehouse(divisionName, city).size;\\r\\n        if (newSize >= size)\\r\\n            break;\\r\\n    }\\r\\n    if (newSize < size) {\\r\\n        llog(ns, \\\"WARNING: Unable to purchase warehouse upgrades %d => %d (target %d)\\\", startSize, newSize, size);\\r\\n    }\\r\\n    llog(ns, \\\"Upgraded %s %s's warehouse size from %s to %s for %s\\\", divisionName, city, ns.nFormat(startSize, \\\"(0.000a)\\\"), ns.nFormat(newSize, \\\"(0.000a)\\\"), ns.nFormat(spentFunds, \\\"($0.000a)\\\"));\\r\\n}\\r\\nasync function waitForState(ns, state = \\\"START\\\", next = true) {\\r\\n    if (next)\\r\\n        while (ns.corporation.getCorporation().state === state)\\r\\n            await ns.sleep(20);\\r\\n    while (ns.corporation.getCorporation().state !== state)\\r\\n        await ns.sleep(20);\\r\\n}\\r\\nasync function buyMaterials(ns, divisionName, materials) {\\r\\n    // Check to see if we already have the materials we need\\r\\n    let materialCheck = true;\\r\\n    for (const city of ns.corporation.getDivision(divisionName).cities) {\\r\\n        for (const data of materials) {\\r\\n            const name = data[0];\\r\\n            const qty = data[1];\\r\\n            const material = ns.corporation.getMaterial(divisionName, city, name);\\r\\n            if (material.qty < qty) {\\r\\n                materialCheck = false;\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n        if (!materialCheck)\\r\\n            break;\\r\\n    }\\r\\n    if (materialCheck)\\r\\n        return false;\\r\\n    // Wait for start state\\r\\n    await waitForState(ns, \\\"START\\\", false);\\r\\n    // Set up all material buys\\r\\n    for (const city of ns.corporation.getDivision(divisionName).cities) {\\r\\n        for (const data of materials) {\\r\\n            const name = data[0];\\r\\n            const qty = data[1];\\r\\n            const material = ns.corporation.getMaterial(divisionName, city, name);\\r\\n            if (material.qty < qty) {\\r\\n                const tickBuy = (qty - material.qty) / 10;\\r\\n                ns.corporation.buyMaterial(divisionName, city, name, tickBuy);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n    await waitForState(ns, \\\"START\\\");\\r\\n    // Clear all material buys\\r\\n    for (const city of ns.corporation.getDivision(divisionName).cities) {\\r\\n        for (const data of materials) {\\r\\n            const name = data[0];\\r\\n            ns.corporation.buyMaterial(divisionName, city, name, 0);\\r\\n        }\\r\\n    }\\r\\n    // Check it\\r\\n    materialCheck = true;\\r\\n    for (const city of ns.corporation.getDivision(divisionName).cities) {\\r\\n        for (const data of materials) {\\r\\n            const name = data[0];\\r\\n            const qty = data[1];\\r\\n            const material = ns.corporation.getMaterial(divisionName, city, name);\\r\\n            if (material.qty < qty) {\\r\\n                llog(ns, \\\"WARNING: Expected %d %s:%s but found %d\\\", qty, city, name, material.qty);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n    return true;\\r\\n    /*\\r\\n        Hardware at 12.5/s for one tick to 125 total\\r\\n        AI Cores at 7.5/s for one tick to 75 total\\r\\n        Real Estate at 2.7k/s (that’s twenty-seven hundred, 2 700, 2.7×103) for one tick to 27k total\\r\\n\\r\\n        Hardware at 267.5/s for one tick to get to 125 + 2675 = 2800\\r\\n        Robots at 9.6/s for one tick to get to 96\\r\\n        AI Cores at 244.5/s for one tick to get to 75 + 2445 = 2520\\r\\n        Real Estate at 11940/s for one tick to get to 27000 + 119400 = 146400\\r\\n\\r\\n        Hardware at 650/s for one tick to 2800 + 6500 = 9300\\r\\n        Robots at 63/s for one tick to 96 + 630 = 726\\r\\n        AI Cores at 375/s for one tick to 2520 + 3750 = 6270\\r\\n        Real Estate at 8400/s for one tick to 146400 + 84000 = 230400\\r\\n    */\\r\\n}\\r\\nfunction growOffice(ns, divisionName, city, size) {\\r\\n    // Hire and assign jobs\\r\\n    let spentFunds = 0;\\r\\n    const startSize = ns.corporation.getOffice(divisionName, city).size;\\r\\n    if (startSize >= size) {\\r\\n        while (ns.corporation.getOffice(divisionName, city).employees.length < size) {\\r\\n            ns.corporation.hireEmployee(divisionName, city);\\r\\n        }\\r\\n        return;\\r\\n    }\\r\\n    let newSize = startSize;\\r\\n    while (true) {\\r\\n        const upgradeCost = ns.corporation.getOfficeSizeUpgradeCost(divisionName, city, 1);\\r\\n        const corpFunds = ns.corporation.getCorporation().funds;\\r\\n        if (corpFunds < upgradeCost)\\r\\n            break;\\r\\n        spentFunds += upgradeCost;\\r\\n        ns.corporation.upgradeOfficeSize(divisionName, city, 1);\\r\\n        newSize = ns.corporation.getOffice(divisionName, city).size;\\r\\n        if (newSize >= size)\\r\\n            break;\\r\\n    }\\r\\n    if (newSize < size) {\\r\\n        llog(ns, \\\"WARNING: Unable to purchase office size upgrade %d => %d (target %d)\\\", startSize, newSize, size);\\r\\n    }\\r\\n    llog(ns, \\\"Upgraded %s %s's office size from %s to %s for %s\\\", divisionName, city, ns.nFormat(startSize, \\\"(0.000a)\\\"), ns.nFormat(newSize, \\\"(0.000a)\\\"), ns.nFormat(spentFunds, \\\"($0.000a)\\\"));\\r\\n    while (ns.corporation.getOffice(divisionName, city).employees.length < size) {\\r\\n        ns.corporation.hireEmployee(divisionName, city);\\r\\n    }\\r\\n}\\r\\nfunction growAllOffices(ns, divisionName, size) {\\r\\n    for (const city of ns.corporation.getDivision(divisionName).cities) {\\r\\n        growOffice(ns, divisionName, city, size);\\r\\n    }\\r\\n}\\r\\nexport async function main(ns) {\\r\\n    cleanLogs(ns);\\r\\n    const playerProp = findProp(\\\"player\\\");\\r\\n    const agDivName = \\\"Agriculture\\\";\\r\\n    const tbDivName = \\\"Tobacco\\\";\\r\\n    const tbRDCity = \\\"Aevum\\\";\\r\\n    let waitForBuy = true;\\r\\n    while (waitForBuy) {\\r\\n        try {\\r\\n            ns.corporation.getCorporation();\\r\\n            waitForBuy = false;\\r\\n        }\\r\\n        catch (e) {\\r\\n            const bought = ns.corporation.createCorporation(\\\"Corporation\\\", true);\\r\\n            if (bought) {\\r\\n                llog(ns, \\\"Created Corporation for $150b\\\");\\r\\n                waitForBuy = false;\\r\\n            }\\r\\n            else {\\r\\n                llog(ns, \\\"Waiting to buy Corporation for $150b\\\");\\r\\n                await ns.sleep(1000);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n    // open the Agriculture division\\r\\n    if (ns.corporation.getCorporation().divisions.find((div) => div.type === agDivName) === undefined) {\\r\\n        const divCost = ns.corporation.getExpandIndustryCost(agDivName);\\r\\n        llog(ns, \\\"Starting %s division for %s\\\", agDivName, ns.nFormat(divCost, \\\"($0.000a)\\\"));\\r\\n        ns.corporation.expandIndustry(agDivName, agDivName);\\r\\n        // buy one time upgrades Smart Supply\\r\\n        buyOneTimeUpgrades(ns, [\\\"Smart Supply\\\", \\\"Warehouse API\\\"]);\\r\\n        // buy advert\\r\\n        ns.corporation.hireAdVert(agDivName);\\r\\n        // buy levelable upgrades FocusWires, Neural Accelerators, Speech Processor Implants,\\r\\n        // Nuoptimal Nootropic Injector Implants, and Smart Factories\\r\\n        buyLeveledUpgrades(ns, [\\r\\n            \\\"FocusWires\\\",\\r\\n            \\\"Neural Accelerators\\\",\\r\\n            \\\"Speech Processor Implants\\\",\\r\\n            \\\"Nuoptimal Nootropic Injector Implants\\\",\\r\\n            \\\"Smart Factories\\\",\\r\\n        ], 2);\\r\\n    }\\r\\n    // Expand to additional cities\\r\\n    for (const city of CITIES.filter((a) => !ns.corporation.getDivision(agDivName).cities.includes(a))) {\\r\\n        const expandCost = ns.corporation.getExpandCityCost();\\r\\n        const corpFunds = ns.corporation.getCorporation().funds;\\r\\n        if (corpFunds < expandCost) {\\r\\n            llog(ns, \\\"ERROR: Insufficient funds to expand %s to %s %s < %s\\\", agDivName, city, ns.nFormat(corpFunds, \\\"($0.000a)\\\"), ns.nFormat(expandCost, \\\"($0.000a)\\\"));\\r\\n            return;\\r\\n        }\\r\\n        else {\\r\\n            llog(ns, \\\"Expanding %s to %s for %s\\\", agDivName, city, ns.nFormat(expandCost, \\\"($0.000a)\\\"));\\r\\n            ns.corporation.expandCity(agDivName, city);\\r\\n        }\\r\\n    }\\r\\n    // Hire in all offices\\r\\n    growAllOffices(ns, agDivName, 3);\\r\\n    // Buy warehouses in all cities\\r\\n    for (const city of ns.corporation.getDivision(agDivName).cities) {\\r\\n        if (!ns.corporation.hasWarehouse(agDivName, city)) {\\r\\n            const warehouseCost = ns.corporation.getPurchaseWarehouseCost();\\r\\n            const corpFunds = ns.corporation.getCorporation().funds;\\r\\n            if (warehouseCost <= corpFunds) {\\r\\n                llog(ns, \\\"Purchasing a %s warehouse in %s for %s\\\", agDivName, city, ns.nFormat(warehouseCost, \\\"($0.000a)\\\"));\\r\\n                ns.corporation.purchaseWarehouse(agDivName, city);\\r\\n            }\\r\\n            else {\\r\\n                llog(ns, \\\"Insufficient funds to purchase a %s warehouse in %s %s < %s\\\", agDivName, city, ns.nFormat(corpFunds, \\\"($0.000a)\\\"), ns.nFormat(warehouseCost, \\\"($0.000a)\\\"));\\r\\n                return;\\r\\n            }\\r\\n        }\\r\\n        ns.corporation.setSmartSupply(agDivName, city, true);\\r\\n        ns.corporation.sellMaterial(agDivName, city, \\\"Food\\\", \\\"MAX\\\", \\\"MP\\\");\\r\\n        ns.corporation.sellMaterial(agDivName, city, \\\"Plants\\\", \\\"MAX\\\", \\\"MP\\\");\\r\\n    }\\r\\n    // upgrade the size of the warehouses in all of the cities to 300\\r\\n    buyAllWarehouseUpgrades(ns, agDivName, 300);\\r\\n    // buy production materials for all cities\\r\\n    const round1Mats = await buyMaterials(ns, agDivName, [\\r\\n        [\\\"Hardware\\\", 125],\\r\\n        [\\\"AI Cores\\\", 75],\\r\\n        [\\\"Real Estate\\\", 27000],\\r\\n    ]);\\r\\n    if (round1Mats)\\r\\n        llog(ns, \\\"Purchased Round 1 of production materials\\\");\\r\\n    // Attempt to get first round of funding\\r\\n    if (ns.corporation.getInvestmentOffer().round < 2) {\\r\\n        llog(ns, \\\"Investment round 1: %s warehoses are empty, beginning stockpile\\\", agDivName);\\r\\n        let invState = \\\"growing\\\";\\r\\n        await doAgSell(ns, false);\\r\\n        let tookOffer = false;\\r\\n        while (!tookOffer) {\\r\\n            if (invState === \\\"growing\\\") {\\r\\n                // growing, set all sale prices to food 0, plants max and wait until all warehouses are > 95% full\\r\\n                let countFullWarehouses = 0;\\r\\n                for (const city of ns.corporation.getDivision(agDivName).cities) {\\r\\n                    const warehouse = ns.corporation.getWarehouse(agDivName, city);\\r\\n                    if (warehouse.sizeUsed > warehouse.size * 0.95)\\r\\n                        countFullWarehouses++;\\r\\n                }\\r\\n                if (countFullWarehouses === ns.corporation.getDivision(agDivName).cities.length) {\\r\\n                    await doAgSell(ns, true);\\r\\n                    llog(ns, \\\"Investment round 1: %s warehouses are full, initiating bulk sell-off to woo investors\\\", agDivName);\\r\\n                    invState = \\\"selling\\\";\\r\\n                }\\r\\n            }\\r\\n            else {\\r\\n                // selling - bulk sell everything at market price until all warehouses are empty\\r\\n                let countEmptyWarehouses = 0;\\r\\n                for (const city of ns.corporation.getDivision(agDivName).cities) {\\r\\n                    const foodMat = ns.corporation.getMaterial(agDivName, city, \\\"Food\\\");\\r\\n                    if (foodMat.qty < 100)\\r\\n                        countEmptyWarehouses++;\\r\\n                }\\r\\n                if (countEmptyWarehouses === ns.corporation.getDivision(agDivName).cities.length) {\\r\\n                    await doAgSell(ns, false);\\r\\n                    llog(ns, \\\"Investment round 1: %s warehoses are empty, beginning stockpile\\\", agDivName);\\r\\n                    invState = \\\"growing\\\";\\r\\n                }\\r\\n            }\\r\\n            const offer = ns.corporation.getInvestmentOffer();\\r\\n            llog(ns, \\\"Offer: %s  (Revenue: %s)\\\", ns.nFormat(offer.funds, \\\"(0.000a)\\\"), ns.nFormat(ns.corporation.getCorporation().revenue, \\\"(0.000a)\\\"));\\r\\n            // only take offers over $220b\\r\\n            if (offer.funds > 220000000000) {\\r\\n                ns.corporation.acceptInvestmentOffer();\\r\\n                llog(ns, \\\"Investment round 1: Taking offer of %s for %d%%\\\", ns.nFormat(offer.funds, \\\"(0.000a)\\\"), (offer.shares / 1000000000) * 100);\\r\\n                tookOffer = true;\\r\\n                break;\\r\\n            }\\r\\n            //await waitForState(ns, \\\"START\\\");\\r\\n            await ns.sleep(500);\\r\\n        }\\r\\n    }\\r\\n    // upgrade the office size in every city to 9\\r\\n    growAllOffices(ns, agDivName, 9);\\r\\n    // Upgrade Smart Factories and Smart Storage\\r\\n    buyLeveledUpgrades(ns, [\\\"Smart Factories\\\", \\\"Smart Storage\\\"], 10);\\r\\n    // Increase Warehouse Sizes to 3000\\r\\n    buyAllWarehouseUpgrades(ns, agDivName, 3000);\\r\\n    const round2Mats = await buyMaterials(ns, agDivName, [\\r\\n        [\\\"Hardware\\\", 2800],\\r\\n        [\\\"AI Cores\\\", 2520],\\r\\n        [\\\"Robots\\\", 96],\\r\\n        [\\\"Real Estate\\\", 146400],\\r\\n    ]);\\r\\n    if (round2Mats)\\r\\n        llog(ns, \\\"Purchased Round 2 of production materials\\\");\\r\\n    // Attempt to get first round of funding\\r\\n    if (ns.corporation.getInvestmentOffer().round < 3) {\\r\\n        llog(ns, \\\"Investment round 2: %s warehoses are empty, beginning stockpile\\\", agDivName);\\r\\n        let invState = \\\"growing\\\";\\r\\n        await doAgSell(ns, false);\\r\\n        let tookOffer = false;\\r\\n        while (!tookOffer) {\\r\\n            if (invState === \\\"growing\\\") {\\r\\n                // growing, set all sale prices to food 0, plants max and wait until all warehouses are > 95% full\\r\\n                let countFullWarehouses = 0;\\r\\n                for (const city of ns.corporation.getDivision(agDivName).cities) {\\r\\n                    const warehouse = ns.corporation.getWarehouse(agDivName, city);\\r\\n                    if (warehouse.sizeUsed > warehouse.size * 0.95)\\r\\n                        countFullWarehouses++;\\r\\n                }\\r\\n                if (countFullWarehouses === ns.corporation.getDivision(agDivName).cities.length) {\\r\\n                    await doAgSell(ns, true);\\r\\n                    llog(ns, \\\"Investment round 2: %s warehouses are full, initiating bulk sell-off to woo investors\\\", agDivName);\\r\\n                    invState = \\\"selling\\\";\\r\\n                }\\r\\n            }\\r\\n            else {\\r\\n                // selling - bulk sell everything at market price until all warehouses are empty\\r\\n                let countEmptyWarehouses = 0;\\r\\n                for (const city of ns.corporation.getDivision(agDivName).cities) {\\r\\n                    const foodMat = ns.corporation.getMaterial(agDivName, city, \\\"Food\\\");\\r\\n                    if (foodMat.qty < 100)\\r\\n                        countEmptyWarehouses++;\\r\\n                }\\r\\n                if (countEmptyWarehouses === ns.corporation.getDivision(agDivName).cities.length) {\\r\\n                    await doAgSell(ns, false);\\r\\n                    llog(ns, \\\"Investment round 2: %s warehoses are empty, beginning stockpile\\\", agDivName);\\r\\n                    invState = \\\"growing\\\";\\r\\n                }\\r\\n            }\\r\\n            const offer = ns.corporation.getInvestmentOffer();\\r\\n            llog(ns, \\\"Offer: %s %s\\\", ns.nFormat(offer.funds, \\\"(0.000a)\\\"), ns.nFormat(ns.corporation.getCorporation().revenue, \\\"(0.000a)\\\"));\\r\\n            //only take offers over $2.5t\\r\\n            if (offer.funds > 2500000000000) {\\r\\n                ns.corporation.acceptInvestmentOffer();\\r\\n                llog(ns, \\\"Investment round 2: Taking offer of %s for %d%%\\\", ns.nFormat(offer.funds, \\\"(0.000a)\\\"), (offer.shares / 1000000000) * 100);\\r\\n                tookOffer = true;\\r\\n                break;\\r\\n            }\\r\\n            await ns.sleep(500);\\r\\n        }\\r\\n    }\\r\\n    // open the Tobacco division\\r\\n    if (ns.corporation.getCorporation().divisions.find((div) => div.type === tbDivName) === undefined) {\\r\\n        const divCost = ns.corporation.getExpandIndustryCost(tbDivName);\\r\\n        llog(ns, \\\"Starting %s division for %s\\\", tbDivName, ns.nFormat(divCost, \\\"($0.000a)\\\"));\\r\\n        ns.corporation.expandIndustry(tbDivName, tbDivName);\\r\\n    }\\r\\n    // Expand to additional cities\\r\\n    for (const city of CITIES.filter((a) => !ns.corporation.getDivision(tbDivName).cities.includes(a))) {\\r\\n        const expandCost = ns.corporation.getExpandCityCost();\\r\\n        const corpFunds = ns.corporation.getCorporation().funds;\\r\\n        if (corpFunds < expandCost) {\\r\\n            llog(ns, \\\"ERROR: Insufficient funds to expand %s to %s %s < %s\\\", tbDivName, city, ns.nFormat(corpFunds, \\\"($0.000a)\\\"), ns.nFormat(expandCost, \\\"($0.000a)\\\"));\\r\\n            return;\\r\\n        }\\r\\n        else {\\r\\n            llog(ns, \\\"Expanding %s to %s for %s\\\", tbDivName, city, ns.nFormat(expandCost, \\\"($0.000a)\\\"));\\r\\n            ns.corporation.expandCity(tbDivName, city);\\r\\n        }\\r\\n    }\\r\\n    // Buy warehouses in all cities\\r\\n    for (const city of ns.corporation.getDivision(tbDivName).cities) {\\r\\n        if (!ns.corporation.hasWarehouse(tbDivName, city)) {\\r\\n            const warehouseCost = ns.corporation.getPurchaseWarehouseCost();\\r\\n            const corpFunds = ns.corporation.getCorporation().funds;\\r\\n            if (warehouseCost <= corpFunds) {\\r\\n                llog(ns, \\\"Purchasing a %s warehouse in %s for %s\\\", tbDivName, city, ns.nFormat(warehouseCost, \\\"($0.000a)\\\"));\\r\\n                ns.corporation.purchaseWarehouse(tbDivName, city);\\r\\n            }\\r\\n            else {\\r\\n                llog(ns, \\\"Insufficient funds to purchase a %s warehouse in %s %s < %s\\\", tbDivName, city, ns.nFormat(corpFunds, \\\"($0.000a)\\\"), ns.nFormat(warehouseCost, \\\"($0.000a)\\\"));\\r\\n                return;\\r\\n            }\\r\\n        }\\r\\n        ns.corporation.setSmartSupply(tbDivName, city, true);\\r\\n    }\\r\\n    // upgrade the size of the warehouses in all of the cities to 1000\\r\\n    buyAllWarehouseUpgrades(ns, tbDivName, 1000);\\r\\n    // upgrade the office size in every city to 10 and assign jobs\\r\\n    growAllOffices(ns, tbDivName, 10);\\r\\n    assignAllEmployees(ns, tbDivName, [\\r\\n        [\\\"Operations\\\", 2],\\r\\n        [\\\"Engineer\\\", 2],\\r\\n        [\\\"Business\\\", 2],\\r\\n        [\\\"Management\\\", 2],\\r\\n        [\\\"Research & Development\\\", 2],\\r\\n    ]);\\r\\n    // Upgrade Aevum office to 30 employees\\r\\n    growOffice(ns, tbDivName, tbRDCity, 30);\\r\\n    assignEmployees(ns, tbDivName, tbRDCity, [\\r\\n        [\\\"Operations\\\", 6],\\r\\n        [\\\"Engineer\\\", 6],\\r\\n        [\\\"Business\\\", 6],\\r\\n        [\\\"Management\\\", 6],\\r\\n        [\\\"Research & Development\\\", 6],\\r\\n    ]);\\r\\n    buyLeveledUpgrades(ns, [\\\"FocusWires\\\", \\\"Neural Accelerators\\\", \\\"Speech Processor Implants\\\", \\\"Nuoptimal Nootropic Injector Implants\\\"], 20);\\r\\n    while (true) {\\r\\n        // Attempt to max out Wilson Analytics\\r\\n        buyLeveledUpgrades(ns, \\\"Wilson Analytics\\\", 0, 0.5);\\r\\n        let maxProducts = 3;\\r\\n        if (ns.corporation.hasResearched(tbDivName, \\\"uPgrade: Capacity.I\\\"))\\r\\n            maxProducts++;\\r\\n        if (ns.corporation.hasResearched(tbDivName, \\\"uPgrade: Capacity.II\\\"))\\r\\n            maxProducts++;\\r\\n        // Develop a product if there are none in development\\r\\n        let products = ns.corporation\\r\\n            .getDivision(tbDivName)\\r\\n            .products.map((prodname) => ns.corporation.getProduct(tbDivName, prodname))\\r\\n            .sort((a, b) => Number(a.name.slice(5)) - Number(b.name.slice(5)));\\r\\n        let productIsDeveloping = false;\\r\\n        for (const product of products) {\\r\\n            if (product.developmentProgress < 100) {\\r\\n                productIsDeveloping = true;\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n        // if there are no products in development, discontinue the oldest one if needed\\r\\n        if (!productIsDeveloping) {\\r\\n            if (products.length === maxProducts) {\\r\\n                llog(ns, \\\"Discontinuing %s product %s\\\", tbDivName, products[0].name);\\r\\n                ns.corporation.discontinueProduct(tbDivName, products[0].name);\\r\\n            }\\r\\n            const investmentCash = ns.corporation.getCorporation().funds * 0.01;\\r\\n            let productName = \\\"prod-0\\\";\\r\\n            if (products.length > 0) {\\r\\n                productName = \\\"prod-\\\" + (Number(products[products.length - 1].name.slice(5)) + 1).toString();\\r\\n            }\\r\\n            llog(ns, \\\"Developing new %s product %s for %s\\\", tbDivName, productName, ns.nFormat(investmentCash * 2, \\\"($0.000a)\\\"));\\r\\n            ns.corporation.makeProduct(tbDivName, tbRDCity, productName, investmentCash, investmentCash);\\r\\n            ns.corporation.sellProduct(tbDivName, tbRDCity, productName, \\\"MAX\\\", \\\"MP\\\", true);\\r\\n        }\\r\\n        products = ns.corporation\\r\\n            .getDivision(tbDivName)\\r\\n            .products.map((prodname) => ns.corporation.getProduct(tbDivName, prodname))\\r\\n            .sort((a, b) => Number(a.name) - Number(b.name));\\r\\n        if (playerProp?.corporation?.divisions) {\\r\\n            const tobaccoDiv = playerProp.corporation.divisions.find((a) => a.type === \\\"Tobacco\\\");\\r\\n            if (tobaccoDiv) {\\r\\n                for (const prod of Object.values(tobaccoDiv.products)) {\\r\\n                    if (prod)\\r\\n                        prod.marketTa2 = true;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        // compare price of increasing advertising vs increasing office space, do the cheaper if it's affordable\\r\\n        let officeSizeIncrease = 0;\\r\\n        let advertIncrease = 0;\\r\\n        let advertPrice = 0;\\r\\n        while (true) {\\r\\n            const advertCost = ns.corporation.getHireAdVertCost(tbDivName);\\r\\n            const tbRDCityOfficeExpandCost = ns.corporation.getOfficeSizeUpgradeCost(tbDivName, tbRDCity, 15);\\r\\n            if (advertCost > ns.corporation.getCorporation().funds * 0.5 &&\\r\\n                tbRDCityOfficeExpandCost > ns.corporation.getCorporation().funds * 0.5)\\r\\n                break;\\r\\n            if (advertCost < tbRDCityOfficeExpandCost) {\\r\\n                advertIncrease++;\\r\\n                advertPrice += advertCost;\\r\\n                ns.corporation.hireAdVert(tbDivName);\\r\\n                continue;\\r\\n            }\\r\\n            officeSizeIncrease += 15;\\r\\n            ns.corporation.upgradeOfficeSize(tbDivName, tbRDCity, 15);\\r\\n        }\\r\\n        if (advertIncrease > 0) {\\r\\n            llog(ns, \\\"Hiring %s AdVert %dx for %s\\\", tbDivName, advertIncrease, ns.nFormat(advertPrice, \\\"($0.000a)\\\"));\\r\\n        }\\r\\n        if (officeSizeIncrease > 0) {\\r\\n            const officeSize = ns.corporation.getOffice(tbDivName, tbRDCity).size;\\r\\n            while (ns.corporation.getOffice(tbDivName, tbRDCity).employees.length < officeSize) {\\r\\n                ns.corporation.hireEmployee(tbDivName, tbRDCity);\\r\\n            }\\r\\n            assignEmployees(ns, tbDivName, tbRDCity, [\\r\\n                [\\\"Operations\\\", officeSize / 5],\\r\\n                [\\\"Engineer\\\", officeSize / 5],\\r\\n                [\\\"Business\\\", officeSize / 5],\\r\\n                [\\\"Management\\\", officeSize / 5],\\r\\n                [\\\"Research & Development\\\", officeSize / 5],\\r\\n            ]);\\r\\n        }\\r\\n        // if any of the other office sizes are < 20% the size of the Aevum office, attempt to increase their size\\r\\n        const cityIncrease = {};\\r\\n        for (const city of ns.corporation.getDivision(tbDivName).cities) {\\r\\n            // iterate as long as this city's office size is less than 20% of Aevum's and the price\\r\\n            // of upgrading is less than 5% of the corporation's funds\\r\\n            while (ns.corporation.getOffice(tbDivName, city).size <\\r\\n                ns.corporation.getOffice(tbDivName, tbRDCity).size * 0.2 &&\\r\\n                ns.corporation.getOfficeSizeUpgradeCost(tbDivName, city, 5) <\\r\\n                    ns.corporation.getCorporation().funds * 0.05) {\\r\\n                const cost = ns.corporation.getOfficeSizeUpgradeCost(tbDivName, city, 5);\\r\\n                ns.corporation.upgradeOfficeSize(tbDivName, city, 5);\\r\\n                if (!(city in cityIncrease)) {\\r\\n                    cityIncrease[city] = {\\r\\n                        inc: 5,\\r\\n                        cost: cost,\\r\\n                    };\\r\\n                }\\r\\n                else {\\r\\n                    cityIncrease[city].inc += 5;\\r\\n                    cityIncrease[city].cost += cost;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        for (const [city, val] of Object.entries(cityIncrease)) {\\r\\n            llog(ns, \\\"Hiring %d employees in %s:%s for %s\\\", val.inc, tbDivName, city, ns.nFormat(val.cost, \\\"($0.000a)\\\"));\\r\\n            const officeSize = ns.corporation.getOffice(tbDivName, city).size;\\r\\n            while (ns.corporation.getOffice(tbDivName, city).employees.length < officeSize) {\\r\\n                ns.corporation.hireEmployee(tbDivName, city);\\r\\n            }\\r\\n            assignEmployees(ns, tbDivName, city, [\\r\\n                [\\\"Operations\\\", officeSize / 5],\\r\\n                [\\\"Engineer\\\", officeSize / 5],\\r\\n                [\\\"Business\\\", officeSize / 5],\\r\\n                [\\\"Management\\\", officeSize / 5],\\r\\n                [\\\"Research & Development\\\", officeSize / 5],\\r\\n            ]);\\r\\n        }\\r\\n        const leveledUpgrades = [\\r\\n            \\\"Project Insight\\\",\\r\\n            \\\"Nuoptimal Nootropic Injector Implants\\\",\\r\\n            \\\"Smart Factories\\\",\\r\\n            \\\"DreamSense\\\",\\r\\n            \\\"Speech Processor Implants\\\",\\r\\n            \\\"Neural Accelerators\\\",\\r\\n            \\\"FocusWires\\\",\\r\\n            \\\"ABC SalesBots\\\",\\r\\n            \\\"Smart Storage\\\",\\r\\n        ];\\r\\n        buyLeveledUpgrades(ns, leveledUpgrades, 0, 0.01);\\r\\n        // attempt to expand to additional divisions to improve valuation\\r\\n        const divisions = [\\r\\n            \\\"Food\\\",\\r\\n            \\\"Software\\\",\\r\\n            \\\"Chemical\\\",\\r\\n            \\\"Fishing\\\",\\r\\n            \\\"Utilities\\\",\\r\\n            \\\"Pharmaceutical\\\",\\r\\n            \\\"Energy\\\",\\r\\n            // \\\"Mining\\\",\\r\\n            // \\\"Computer\\\",\\r\\n            // \\\"RealEstate\\\",\\r\\n            // \\\"Healthcare\\\",\\r\\n            // \\\"Robotics\\\",\\r\\n        ];\\r\\n        for (const division of divisions) {\\r\\n            if (ns.corporation.getCorporation().divisions.find((div) => div.type === division) === undefined &&\\r\\n                ns.corporation.getExpandIndustryCost(division) < ns.corporation.getCorporation().funds) {\\r\\n                const divCost = ns.corporation.getExpandIndustryCost(division);\\r\\n                llog(ns, \\\"Starting %s division for %s\\\", division, ns.nFormat(divCost, \\\"($0.000a)\\\"));\\r\\n                ns.corporation.expandIndustry(division, division);\\r\\n            }\\r\\n        }\\r\\n        // If all divisions have been built and a 3rd round investment offer is made for > $1.5q, accept\\r\\n        const offer = ns.corporation.getInvestmentOffer();\\r\\n        if (offer.round === 3 && offer.funds > 1500000000000000) {\\r\\n            ns.corporation.acceptInvestmentOffer();\\r\\n            llog(ns, \\\"Investment round 3: Taking offer of %s for %d%%\\\", ns.nFormat(offer.funds, \\\"(0.000a)\\\"), (offer.shares / 1000000000) * 100);\\r\\n            ns.corporation.goPublic(0);\\r\\n            ns.corporation.issueDividends(.05);\\r\\n        }\\r\\n        // Buy Research Upgrades -- buy after high priority researches, and only if purchase cost is < 5% of total research\\r\\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n        const lowPriorityResearches = [\\r\\n            \\\"Automatic Drug Administration\\\",\\r\\n            \\\"CPH4 Injections\\\",\\r\\n            \\\"Drones\\\",\\r\\n            \\\"Drones - Assembly\\\",\\r\\n            \\\"Drones - Transport\\\",\\r\\n            \\\"Go-Juice\\\",\\r\\n            \\\"JoyWire\\\",\\r\\n            \\\"Overclock\\\",\\r\\n            \\\"Self-Correcting Assemblers\\\",\\r\\n            \\\"Sti.mu\\\",\\r\\n        ];\\r\\n        // High Priority - buy when purchase cost is 50% of total research\\r\\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n        const highPriorityResearches = [\\r\\n            \\\"Hi-Tech R&D Laboratory\\\",\\r\\n            \\\"Market-TA.I\\\",\\r\\n            \\\"Market-TA.II\\\",\\r\\n            \\\"uPgrade: Fulcrum\\\",\\r\\n            \\\"uPgrade: Capacity.I\\\",\\r\\n            \\\"uPgrade: Capacity.II\\\",\\r\\n        ];\\r\\n        // buy one time unlocks government partnership and shady accounting after going public\\r\\n        await waitForState(ns, \\\"START\\\");\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29ycC5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImNvcnAudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLFNBQVMsRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLE1BQU0sVUFBVSxDQUFDO0FBQ25ELE9BQU8sRUFBRSxnQkFBZ0IsRUFBWSxNQUFNLGdCQUFnQixDQUFDO0FBRTVELFNBQVMsUUFBUSxDQUFDLFFBQWdCO0lBQzlCLEtBQUssTUFBTSxHQUFHLElBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLGdCQUFnQixDQUFDLEtBQUssQ0FBQyxFQUFFO1FBQ3hELE1BQU0sT0FBTyxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDcEMsSUFBSSxDQUFDLE9BQU87WUFBRSxTQUFTO1FBQ3ZCLE1BQU0sS0FBSyxHQUFHLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUMzQixJQUFJLEtBQUssQ0FBQyxRQUFRLEVBQUUsS0FBSyxJQUFJLEtBQUssQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQztZQUFFLE9BQU8sS0FBSyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDbkcsSUFBSSxLQUFLLENBQUMsUUFBUSxZQUFZLEtBQUs7WUFDL0IsS0FBSyxNQUFNLEtBQUssSUFBSSxLQUFLLENBQUMsUUFBUTtnQkFBRSxJQUFJLEtBQUssRUFBRSxLQUFLLElBQUksS0FBSyxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUM7b0JBQUUsT0FBTyxLQUFLLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0tBQ25IO0FBQ0wsQ0FBQztBQUVELGtFQUFrRTtBQUVsRSxTQUFTLGlCQUFpQixDQUFDLFlBQW9CLEVBQUUsUUFBZ0I7SUFDN0QsTUFBTSxVQUFVLEdBQUcsUUFBUSxDQUFDLFFB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\",\"filename\":\"corp.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/corp/sale.js\",\"url\":\"blob:file:///d886515b-f9b7-4b34-87d8-dfe27e20580a\",\"moduleSequenceNumber\":1189},{\"filename\":\"/lib/util.js\",\"url\":\"blob:file:///a5499505-e16e-454f-8ba6-86251982692d\",\"moduleSequenceNumber\":1159},{\"filename\":\"corp.js\",\"url\":\"blob:file:///72489f7f-72d5-4821-a468-b6c6074cbe49\",\"moduleSequenceNumber\":1204}],\"dependents\":[],\"ramUsage\":1024,\"server\":\"home\",\"moduleSequenceNumber\":83070,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"ns\",\"name\":\"corporation\",\"cost\":1022.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { allHosts, softenServer } from \\\"lib/util\\\";\\r\\nfunction listServers(ns, hostnames) {\\r\\n    const hackableHosts = hostnames.sort(\\r\\n    //(a, b) => ns.getServerRequiredHackingLevel(b) - ns.getServerRequiredHackingLevel(a)\\r\\n    (a, b) => ns.getServerMaxMoney(b) - ns.getServerMaxMoney(a));\\r\\n    for (const hostname of hackableHosts) {\\r\\n        const rootStr = ns.hasRootAccess(hostname) ? \\\"[O]\\\" : \\\"[X]\\\";\\r\\n        const hackStr = ns.getHackingLevel() >= ns.getServerRequiredHackingLevel(hostname) ? \\\"[O]\\\" : \\\"[X]\\\";\\r\\n        ns.tprintf(\\\"%20s %-9s %4d %s %s %6dGB %8.2f\\\", hostname, ns.nFormat(ns.getServerMaxMoney(hostname), \\\"($0.000a)\\\"), ns.getServerRequiredHackingLevel(hostname), rootStr, hackStr, ns.getServerMaxRam(hostname), Math.ceil(ns.getWeakenTime(hostname) / 1000) / 60);\\r\\n    }\\r\\n}\\r\\nexport async function main(ns) {\\r\\n    const hostnames = allHosts(ns);\\r\\n    for (const hostname of hostnames) {\\r\\n        softenServer(ns, hostname);\\r\\n    }\\r\\n    listServers(ns, hostnames);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3Jhd2wuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJjcmF3bC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsUUFBUSxFQUFFLFlBQVksRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUVsRCxTQUFTLFdBQVcsQ0FBQyxFQUFNLEVBQUUsU0FBbUI7SUFDNUMsTUFBTSxhQUFhLEdBQUcsU0FBUyxDQUFDLElBQUk7SUFDaEMscUZBQXFGO0lBQ3JGLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLGlCQUFpQixDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLENBQUMsQ0FDOUQsQ0FBQztJQUVGLEtBQUssTUFBTSxRQUFRLElBQUksYUFBYSxFQUFFO1FBQ2xDLE1BQU0sT0FBTyxHQUFHLEVBQUUsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDO1FBQzNELE1BQU0sT0FBTyxHQUFHLEVBQUUsQ0FBQyxlQUFlLEVBQUUsSUFBSSxFQUFFLENBQUMsNkJBQTZCLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDO1FBQ25HLEVBQUUsQ0FBQyxPQUFPLENBQ04saUNBQWlDLEVBQ2pDLFFBQVEsRUFDUixFQUFFLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxRQUFRLENBQUMsRUFBRSxXQUFXLENBQUMsRUFDdkQsRUFBRSxDQUFDLDZCQUE2QixDQUFDLFFBQVEsQ0FBQyxFQUMxQyxPQUFPLEVBQ1AsT0FBTyxFQUNQLEVBQUUsQ0FBQyxlQUFlLENBQUMsUUFBUSxDQUFDLEVBQzVCLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQ3BELENBQUM7S0FDTDtBQUNMLENBQUM7QUFFRCxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUUvQixLQUFLLE1BQU0sUUFBUSxJQUFJLFNBQVMsRUFBRTtRQUM5QixZQUFZLENBQUMsRUFBRSxFQUFFLFFBQVEsQ0FBQyxDQUFDO0tBQzlCO0lBRUQsV0FBVyxDQUFDLEVBQUUsRUFBRSxTQUFTLENBQUMsQ0FBQztBQUMvQixDQUFDIn0=\",\"filename\":\"crawl.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/util.js\",\"url\":\"blob:file:///0eaabba7-2d9b-4475-a097-8fb54a46e082\",\"moduleSequenceNumber\":2961},{\"filename\":\"crawl.js\",\"url\":\"blob:file:///129eba98-5fae-4536-866d-7c75d79cd294\",\"moduleSequenceNumber\":58104}],\"dependents\":[],\"ramUsage\":2.7,\"server\":\"home\",\"moduleSequenceNumber\":83071,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.disableLog(\\\"sleep\\\");\\r\\n    // const crimes = [\\r\\n    //     \\\"shoplift\\\",\\r\\n    //     \\\"rob store\\\",\\r\\n    //     \\\"mug\\\",\\r\\n    //     \\\"larceny\\\",\\r\\n    //     \\\"drugs\\\",\\r\\n    //     \\\"bond forge\\\",\\r\\n    //     \\\"traffick arms\\\",\\r\\n    //     \\\"homicide\\\",\\r\\n    //     \\\"grand auto\\\",\\r\\n    //     \\\"kidnap\\\",\\r\\n    //     \\\"assassinate\\\",\\r\\n    //     \\\"heist\\\",\\r\\n    // ];\\r\\n    // for (const crimename of crimes) {\\r\\n    //     const crimeStats = ns.getCrimeStats(crimename);\\r\\n    //     ns.tprintf(\\\"%16s  %9s %5s %9s/s\\\", crimeStats.name, ns.nFormat(crimeStats.money, \\\"($0.000a)\\\"), stFormat(ns, crimeStats.time, false), ns.nFormat(crimeStats.money / (crimeStats.time / 1000), \\\"($0.000a)\\\"));\\r\\n    // }\\r\\n    let dynamic = true;\\r\\n    let crime = \\\"shoplift\\\";\\r\\n    if (ns.args[0]) {\\r\\n        crime = ns.args[0].toString();\\r\\n        dynamic = false;\\r\\n    }\\r\\n    while (true) {\\r\\n        if (dynamic) {\\r\\n            if (ns.getCrimeChance(\\\"mug\\\") > 0.7)\\r\\n                crime = \\\"mug\\\";\\r\\n            if (ns.getCrimeChance(\\\"homicide\\\") > 0.7)\\r\\n                crime = \\\"homicide\\\";\\r\\n        }\\r\\n        // (!ns.getPlayer().factions.includes(\\\"NiteSec\\\")) {\\r\\n        await ns.sleep(ns.commitCrime(crime) + 200);\\r\\n        // let allFactions = ns.getPlayer().factions.concat(ns.checkFactionInvitations());\\r\\n        // if (allFactions.includes(\\\"NiteSec\\\")) {\\r\\n        //     ns.joinFaction(\\\"NiteSec\\\")\\r\\n        // }\\r\\n    }\\r\\n    ns.workForFaction(\\\"NiteSec\\\", \\\"Field Work\\\");\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JpbWUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJjcmltZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLEVBQUUsQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLENBQUM7SUFFdkIsbUJBQW1CO0lBQ25CLGtCQUFrQjtJQUNsQixtQkFBbUI7SUFDbkIsYUFBYTtJQUNiLGlCQUFpQjtJQUNqQixlQUFlO0lBQ2Ysb0JBQW9CO0lBQ3BCLHVCQUF1QjtJQUN2QixrQkFBa0I7SUFDbEIsb0JBQW9CO0lBQ3BCLGdCQUFnQjtJQUNoQixxQkFBcUI7SUFDckIsZUFBZTtJQUNmLEtBQUs7SUFFTCxvQ0FBb0M7SUFDcEMsc0RBQXNEO0lBQ3RELGlOQUFpTjtJQUNqTixJQUFJO0lBRUosSUFBSSxPQUFPLEdBQUcsSUFBSSxDQUFDO0lBQ25CLElBQUksS0FBSyxHQUFHLFVBQVUsQ0FBQztJQUN2QixJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUU7UUFDWixLQUFLLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUM5QixPQUFPLEdBQUcsS0FBSyxDQUFDO0tBQ25CO0lBRUQsT0FBTyxJQUFJLEVBQUU7UUFDVCxJQUFJLE9BQU8sRUFBRTtZQUNULElBQUksRUFBRSxDQUFDLGNBQWMsQ0FBQyxLQUFLLENBQUMsR0FBRyxHQUFHO2dCQUFFLEtBQUssR0FBRyxLQUFLLENBQUM7WUFDbEQsSUFBSSxFQUFFLENBQUMsY0FBYyxDQUFDLFVBQVUsQ0FBQyxHQUFHLEdBQUc7Z0JBQUUsS0FBSyxHQUFHLFVBQVUsQ0FBQztTQUMvRDtRQUVELG1EQUFtRDtRQUNuRCxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQztRQUU1QyxrRkFBa0Y7UUFDbEYseUNBQXlDO1FBQ3pDLGdDQUFnQztRQUNoQyxJQUFJO0tBQ1A7SUFFRCxFQUFFLENBQUMsY0FBYyxDQUFDLFNBQVMsRUFBRSxZQUFZLENBQUMsQ0FBQztBQUMvQyxDQUFDIn0=\",\"filename\":\"crime.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"crime.js\",\"url\":\"blob:file:///61e2d8e2-b9d2-4def-afdb-e65486f9ec6f\",\"moduleSequenceNumber\":3589}],\"dependents\":[],\"ramUsage\":14.6,\"server\":\"home\",\"moduleSequenceNumber\":83072,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getCrimeChance\",\"cost\":5},{\"type\":\"fn\",\"name\":\"commitCrime\",\"cost\":5},{\"type\":\"fn\",\"name\":\"workForFaction\",\"cost\":3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const script = ns.args[0].toString();\\r\\n    let host = ns.args[1].toString();\\r\\n    const args = ns.args.slice(2);\\r\\n    let doSpawn = false;\\r\\n    if (host === \\\"local\\\") {\\r\\n        host = ns.getHostname();\\r\\n        doSpawn = true;\\r\\n    }\\r\\n    if (!ns.fileExists(script, \\\"home\\\")) {\\r\\n        ns.tprintf(\\\"[%s] ERROR: %s does not exist on home server\\\", ns.getScriptName(), script, host);\\r\\n        return;\\r\\n    }\\r\\n    await ns.scp(script, \\\"home\\\", host);\\r\\n    const scriptRam = ns.getScriptRam(script, host);\\r\\n    let hostMaxRam = ns.getServerMaxRam(host);\\r\\n    if (host === \\\"home\\\")\\r\\n        hostMaxRam -= 128;\\r\\n    const threads = Math.floor(hostMaxRam / scriptRam);\\r\\n    if (threads <= 0)\\r\\n        return;\\r\\n    if (doSpawn) {\\r\\n        ns.tprintf(\\\"Spawning %s@%s on %s over %d threads\\\", script, host, args.toString(), threads);\\r\\n        ns.spawn(script, threads, ...args.map(x => x.toString()));\\r\\n    }\\r\\n    else {\\r\\n        ns.killall(host);\\r\\n        const pid = ns.exec(script, host, threads, ...args);\\r\\n        ns.tprintf(\\\"Executing %s@%s on %s over %d threads [pid: %d]\\\", script, host, args.toString(), threads, pid);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhlY19tYXguanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJleGVjX21heC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFPO0lBQzlCLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDckMsSUFBSSxJQUFJLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUNqQyxNQUFNLElBQUksR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUM5QixJQUFJLE9BQU8sR0FBRyxLQUFLLENBQUM7SUFFcEIsSUFBSSxJQUFJLEtBQUssT0FBTyxFQUFFO1FBQ2xCLElBQUksR0FBRyxFQUFFLENBQUMsV0FBVyxFQUFFLENBQUM7UUFDeEIsT0FBTyxHQUFHLElBQUksQ0FBQztLQUNsQjtJQUVELElBQUksQ0FBQyxFQUFFLENBQUMsVUFBVSxDQUFDLE1BQU0sRUFBRSxNQUFNLENBQUMsRUFBRTtRQUNoQyxFQUFFLENBQUMsT0FBTyxDQUFDLDhDQUE4QyxFQUFFLEVBQUUsQ0FBQyxhQUFhLEVBQUUsRUFBRSxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDN0YsT0FBTztLQUNWO0lBQ0QsTUFBTSxFQUFFLENBQUMsR0FBRyxDQUFDLE1BQU0sRUFBRSxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFFbkMsTUFBTSxTQUFTLEdBQUcsRUFBRSxDQUFDLFlBQVksQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDaEQsSUFBSSxVQUFVLEdBQUcsRUFBRSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUUxQyxJQUFJLElBQUksS0FBSyxNQUFNO1FBQUUsVUFBVSxJQUFJLEdBQUcsQ0FBQztJQUV2QyxNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLFVBQVUsR0FBRyxTQUFTLENBQUMsQ0FBQztJQUVuRCxJQUFJLE9BQU8sSUFBSSxDQUFDO1FBQUUsT0FBTztJQUV6QixJQUFJLE9BQU8sRUFBRTtRQUNULEVBQUUsQ0FBQyxPQUFPLENBQUMsc0NBQXNDLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsUUFBUSxFQUFFLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFDM0YsRUFBRSxDQUFDLEtBQUssQ0FBQyxNQUFNLEVBQUUsT0FBTyxFQUFFLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDLENBQUM7S0FDN0Q7U0FBTTtRQUNILEVBQUUsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDakIsTUFBTSxHQUFHLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxHQUFHLElBQUksQ0FBQyxDQUFDO1FBQ3BELEVBQUUsQ0FBQyxPQUFPLENBQUMsaURBQWlELEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsUUFBUSxFQUFFLEVBQUUsT0FBTyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0tBQzlHO0FBQ0wsQ0FBQyJ9\",\"filename\":\"exec_max.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.3,\"server\":\"home\",\"moduleSequenceNumber\":83073,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.disableLog(\\\"sleep\\\");\\r\\n    let members;\\r\\n    while (true) {\\r\\n        ns.print(ns.sprintf(\\\"==================================\\\"));\\r\\n        let memberIndex = ns.gang.getMemberNames().length;\\r\\n        while (ns.gang.canRecruitMember()) {\\r\\n            const name = \\\"g\\\" + memberIndex.toString();\\r\\n            ns.gang.recruitMember(name);\\r\\n            ns.gang.setMemberTask(name, \\\"Train Combat\\\");\\r\\n            memberIndex++;\\r\\n        }\\r\\n        ns.print(ns.sprintf(\\\"==================================\\\"));\\r\\n        members = ns.gang.getMemberNames().map((name) => ns.gang.getMemberInformation(name));\\r\\n        for (const member of members) {\\r\\n            const ascmem = ns.gang.getAscensionResult(member.name);\\r\\n            ns.print(ns.sprintf(\\\"%3s:  %10s  %s  %s  %s %10s %s\\\", member.name, member.str_exp.toFixed(2), member.str_mult.toFixed(2), member.str_asc_mult.toFixed(2), ascmem !== undefined ? ascmem.str : 0, member.str_asc_points.toFixed(2), member.upgrades));\\r\\n            if (ascmem !== undefined && ascmem.str > 2) {\\r\\n                ns.print(ns.sprintf(\\\"Ascending %s %.2f => %.2f hack multiplier\\\", member.name, member.str_asc_mult, member.str_asc_mult * ascmem.str));\\r\\n                ns.gang.ascendMember(member.name);\\r\\n            }\\r\\n        }\\r\\n        ns.print(ns.sprintf(\\\"==================================\\\"));\\r\\n        const combatEquipment = ns.gang\\r\\n            .getEquipmentNames()\\r\\n            .map((_name) => Object.assign({ name: _name, price: ns.gang.getEquipmentCost(_name), type: ns.gang.getEquipmentType(_name) }, ns.gang.getEquipmentStats(_name)))\\r\\n            .filter((eq) => eq.str !== undefined ||\\r\\n            eq.dex !== undefined ||\\r\\n            eq.agi !== undefined ||\\r\\n            eq.def !== undefined ||\\r\\n            eq.cha !== undefined)\\r\\n            .sort((a, b) => a.price - b.price);\\r\\n        // for (const eq of combatEquipment) {\\r\\n        //     ns.print(ns.sprintf(\\r\\n        //         \\\"%-13s %20s  %.2f  %9s\\\",\\r\\n        //         eq.type,\\r\\n        //         eq.name,\\r\\n        //         eq.str !== undefined ? eq.str : 0,\\r\\n        //         ns.nFormat(eq.price, \\\"($0.000a)\\\")\\r\\n        //     ));\\r\\n        // }\\r\\n        const newBuys = [];\\r\\n        for (const member of members) {\\r\\n            for (const eq of combatEquipment) {\\r\\n                if (!member.upgrades.includes(eq.name)) {\\r\\n                    newBuys.push({\\r\\n                        member: member,\\r\\n                        equipment: eq,\\r\\n                    });\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        newBuys.sort((a, b) => a.equipment.price - b.equipment.price);\\r\\n        for (const buy of newBuys) {\\r\\n            if (ns.getPlayer().money > buy.equipment.price) {\\r\\n                const result = ns.gang.purchaseEquipment(buy.member.name, buy.equipment.name);\\r\\n                if (result)\\r\\n                    ns.print(ns.sprintf(\\\"Buying %s:%s for %s\\\", buy.member.name, buy.equipment.name, ns.nFormat(buy.equipment.price, \\\"($0.000a)\\\")));\\r\\n            }\\r\\n        }\\r\\n        await ns.sleep(10000);\\r\\n        ns.print(ns.sprintf(\\\"==================================\\\"));\\r\\n        break;\\r\\n    }\\r\\n    const tasks = ns.gang\\r\\n        .getTaskNames()\\r\\n        .map((_name) => ns.gang.getTaskStats(_name))\\r\\n        .filter((task) => task.isCombat)\\r\\n        .sort((a, b) => b.baseMoney - a.baseMoney);\\r\\n    for (const task of tasks) {\\r\\n        ns.tprintf(\\\"%22s %3s %3s %9s %s\\\", task.name, task.baseMoney, task.difficulty, task.baseRespect, task.baseWanted);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2FuZy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImdhbmcudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixFQUFFLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBRXZCLElBQUksT0FBTyxDQUFDO0lBQ1osT0FBTyxJQUFJLEVBQUU7UUFDVCxFQUFFLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsb0NBQW9DLENBQUMsQ0FBQyxDQUFDO1FBQzNELElBQUksV0FBVyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsY0FBYyxFQUFFLENBQUMsTUFBTSxDQUFDO1FBRWxELE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxFQUFFO1lBQy9CLE1BQU0sSUFBSSxHQUFHLEdBQUcsR0FBRyxXQUFXLENBQUMsUUFBUSxFQUFFLENBQUM7WUFDMUMsRUFBRSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDNUIsRUFBRSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxFQUFFLGNBQWMsQ0FBQyxDQUFDO1lBQzVDLFdBQVcsRUFBRSxDQUFDO1NBQ2pCO1FBRUQsRUFBRSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLG9DQUFvQyxDQUFDLENBQUMsQ0FBQztRQUUzRCxPQUFPLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsb0JBQW9CLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztRQUVyRixLQUFLLE1BQU0sTUFBTSxJQUFJLE9BQU8sRUFBRTtZQUMxQixNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFD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\",\"filename\":\"gang.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"gang.js\",\"url\":\"blob:file:///50075bb7-b0be-4a5a-84b6-5d878d3080b1\",\"moduleSequenceNumber\":88065}],\"dependents\":[],\"ramUsage\":31.6,\"server\":\"home\",\"moduleSequenceNumber\":83074,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gang.getMemberNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.canRecruitMember\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.recruitMember\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.setMemberTask\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.getMemberInformation\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.getAscensionResult\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.ascendMember\",\"cost\":4},{\"type\":\"fn\",\"name\":\"gang.getEquipmentNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.getEquipmentCost\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.getEquipmentType\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.getEquipmentStats\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"stock.buy\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"gang.purchaseEquipment\",\"cost\":4},{\"type\":\"fn\",\"name\":\"gang.getTaskNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.getTaskStats\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    function favorToRep(f) {\\r\\n        const raw = 25000 * (Math.pow(1.02, f) - 1);\\r\\n        return Math.round(raw * 10000) / 10000; // round to make things easier.\\r\\n    }\\r\\n    function repToFavor(r) {\\r\\n        const raw = Math.log(r / 25000 + 1) / Math.log(1.02);\\r\\n        return Math.round(raw * 10000) / 10000; // round to make things easier.\\r\\n    }\\r\\n    for (const faction of ns.getPlayer().factions) {\\r\\n        const favor = ns.getFactionFavor(faction);\\r\\n        const targetRep = favorToRep(150);\\r\\n        const currentRep = ns.getFactionRep(faction) +\\r\\n            (ns.getPlayer().currentWorkFactionName === faction ? ns.getPlayer().workRepGained : 0);\\r\\n        const storedRep = Math.max(0, favorToRep(favor));\\r\\n        const totalRep = currentRep + storedRep;\\r\\n        const fTotal = repToFavor(currentRep + storedRep);\\r\\n        const fGain = fTotal - favor;\\r\\n        if (favor > 150)\\r\\n            continue;\\r\\n        let successStr = \\\"\\\";\\r\\n        if (favor + fGain > 150) {\\r\\n            successStr = \\\" (SUCCESS)\\\";\\r\\n        }\\r\\n        let needStr = \\\" \\\";\\r\\n        if (totalRep < targetRep) {\\r\\n            needStr = ns.sprintf(\\\" | Need +%s Rep\\\", ns.nFormat(targetRep - totalRep, \\\"0.000a\\\"));\\r\\n        }\\r\\n        ns.tprintf(\\\"%s => %.2f + %.2f = %.2f%s%s\\\", faction, favor, fGain, favor + fGain, needStr, successStr);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmF2b3IuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJmYXZvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLFNBQVMsVUFBVSxDQUFDLENBQVM7UUFDekIsTUFBTSxHQUFHLEdBQUcsS0FBSyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDNUMsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsR0FBRyxLQUFLLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQywrQkFBK0I7SUFDM0UsQ0FBQztJQUVELFNBQVMsVUFBVSxDQUFDLENBQVM7UUFDekIsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsS0FBSyxHQUFHLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDckQsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsR0FBRyxLQUFLLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQywrQkFBK0I7SUFDM0UsQ0FBQztJQUVELEtBQUssTUFBTSxPQUFPLElBQUksRUFBRSxDQUFDLFNBQVMsRUFBRSxDQUFDLFFBQVEsRUFBRTtRQUMzQyxNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsZUFBZSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQzFDLE1BQU0sU0FBUyxHQUFHLFVBQVUsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNsQyxNQUFNLFVBQVUsR0FDWixFQUFFLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQztZQUN6QixDQUFDLEVBQUUsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxzQkFBc0IsS0FBSyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzNGLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1FBQ2pELE1BQU0sUUFBUSxHQUFHLFVBQVUsR0FBRyxTQUFTLENBQUM7UUFFeEMsTUFBTSxNQUFNLEdBQUcsVUFBVSxDQUFDLFVBQVUsR0FBRyxTQUFTLENBQUMsQ0FBQztRQUNsRCxNQUFNLEtBQUssR0FBRyxNQUFNLEdBQUcsS0FBSyxDQUFDO1FBRTdCLElBQUksS0FBSyxHQUFHLEdBQUc7WUFBRSxTQUFTO1FBRTFCLElBQUksVUFBVSxHQUFHLEVBQUUsQ0FBQztRQUNwQixJQUFJLEtBQUssR0FBRyxLQUFLLEdBQUcsR0FBRyxFQUFFO1lBQ3JCLFVBQVUsR0FBRyxZQUFZLENBQUM7U0FDN0I7UUFFRCxJQUFJLE9BQU8sR0FBRyxHQUFHLENBQUM7UUFDbEIsSUFBSSxRQUFRLEdBQUcsU0FBUyxFQUFFO1lBQ3RCLE9BQU8sR0FBRyxFQUFFLENBQUMsT0FBTyxDQUFDLGlCQUFpQixFQUFFLEVBQUUsQ0FBQyxPQUFPLENBQUMsU0FBUyxHQUFHLFFBQVEsRUFBRSxRQUFRLENBQUMsQ0FBQyxDQUFDO1NBQ3ZGO1FBRUQsRUFBRSxDQUFDLE9BQU8sQ0FBQyw4QkFBOEIsRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEdBQUcsS0FBSyxFQUFFLE9BQU8sRUFBRSxVQUFVLENBQUMsQ0FBQztLQUN6RztBQUNMLENBQUMifQ==\",\"filename\":\"favor.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"favor.js\",\"url\":\"blob:file:///f1e9b93d-7814-4e1e-890a-7a78917f0652\",\"moduleSequenceNumber\":57598}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"home\",\"moduleSequenceNumber\":83075,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getFactionFavor\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getFactionRep\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { llog } from \\\"/lib/util\\\";\\r\\nexport async function main(ns) {\\r\\n    ns.disableLog(\\\"sleep\\\");\\r\\n    let members;\\r\\n    while (true) {\\r\\n        ns.print(ns.sprintf(\\\"==================================\\\"));\\r\\n        let memberIndex = ns.gang.getMemberNames().length;\\r\\n        while (ns.gang.canRecruitMember()) {\\r\\n            const name = \\\"g\\\" + memberIndex.toString();\\r\\n            ns.gang.recruitMember(name);\\r\\n            ns.gang.setMemberTask(name, \\\"Train Hacking\\\");\\r\\n            memberIndex++;\\r\\n        }\\r\\n        ns.print(ns.sprintf(\\\"==================================\\\"));\\r\\n        members = ns.gang.getMemberNames().map((name) => ns.gang.getMemberInformation(name));\\r\\n        for (const member of members) {\\r\\n            const ascmem = ns.gang.getAscensionResult(member.name);\\r\\n            let hack1str = \\\"--\\\";\\r\\n            let hack2str = \\\"--\\\";\\r\\n            let cha1str = \\\"--\\\";\\r\\n            let cha2str = \\\"--\\\";\\r\\n            if (ascmem?.hack) {\\r\\n                hack1str = ns.nFormat(ascmem.hack * member.hack_asc_mult, \\\"0.0\\\");\\r\\n                hack2str = ns.nFormat(ascmem.hack, \\\"0.0\\\");\\r\\n            }\\r\\n            if (ascmem?.cha) {\\r\\n                cha1str = ns.nFormat(ascmem.cha * member.cha_asc_mult, \\\"0.0\\\");\\r\\n                cha2str = ns.nFormat(ascmem.cha, \\\"0.0\\\");\\r\\n            }\\r\\n            llog(ns, \\\"%3s:  Hacking: %7s  %5s => %5s (%s)\\\", member.name, ns.nFormat(member.hack, \\\"0,0\\\"), ns.nFormat(member.hack_asc_mult, \\\"(0.0)\\\"), hack1str, hack2str);\\r\\n            llog(ns, \\\"     Charisma: %7s  %5s => %5s (%s)\\\", ns.nFormat(member.cha, \\\"0,0\\\"), ns.nFormat(member.cha_asc_mult, \\\"(0.0)\\\"), cha1str, cha2str);\\r\\n            if (ascmem !== undefined && (ascmem.hack > 2 || ascmem.cha > 2)) {\\r\\n                ns.print(ns.sprintf(\\\"Ascending %s %.2f => %.2f hack multiplier\\\", member.name, member.hack_asc_mult, member.hack_asc_mult * ascmem.hack));\\r\\n                ns.gang.ascendMember(member.name);\\r\\n            }\\r\\n        }\\r\\n        ns.print(ns.sprintf(\\\"==================================\\\"));\\r\\n        const combatEquipment = ns.gang\\r\\n            .getEquipmentNames()\\r\\n            .map((_name) => Object.assign({ name: _name, price: ns.gang.getEquipmentCost(_name), type: ns.gang.getEquipmentType(_name) }, ns.gang.getEquipmentStats(_name)))\\r\\n            .filter((eq) => eq.hack !== undefined || eq.cha !== undefined)\\r\\n            //.filter((eq) => eq.hack !== undefined)\\r\\n            .sort((a, b) => a.price - b.price);\\r\\n        // for (const eq of combatEquipment) {\\r\\n        //     ns.print(ns.sprintf(\\r\\n        //         \\\"%-13s %20s  %.2f  %9s\\\",\\r\\n        //         eq.type,\\r\\n        //         eq.name,\\r\\n        //         eq.hack !== undefined ? eq.hack : 0,\\r\\n        //         ns.nFormat(eq.price, \\\"($0.000a)\\\")\\r\\n        //     ));\\r\\n        // }\\r\\n        const newBuys = [];\\r\\n        for (const member of members) {\\r\\n            for (const eq of combatEquipment) {\\r\\n                if (!member.upgrades.includes(eq.name)) {\\r\\n                    newBuys.push({\\r\\n                        member: member,\\r\\n                        equipment: eq,\\r\\n                    });\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        newBuys.sort((a, b) => a.equipment.price - b.equipment.price);\\r\\n        if (ns.getPlayer().money >= ns.getUpgradeHomeRamCost()) {\\r\\n            ns.upgradeHomeRam();\\r\\n        }\\r\\n        for (const buy of newBuys) {\\r\\n            if ((ns.getPlayer().money * 0.25 > buy.equipment.price && buy.equipment.price < 1000000000) ||\\r\\n                ns.getPlayer().money * 0.01 > buy.equipment.price) {\\r\\n                const result = ns.gang.purchaseEquipment(buy.member.name, buy.equipment.name);\\r\\n                if (result)\\r\\n                    ns.print(ns.sprintf(\\\"Buying %s:%s for %s\\\", buy.member.name, buy.equipment.name, ns.nFormat(buy.equipment.price, \\\"($0.000a)\\\")));\\r\\n            }\\r\\n        }\\r\\n        await ns.sleep(10000);\\r\\n        ns.print(ns.sprintf(\\\"==================================\\\"));\\r\\n    }\\r\\n    const tasks = ns.gang\\r\\n        .getTaskNames()\\r\\n        .map((_name) => ns.gang.getTaskStats(_name))\\r\\n        .filter((task) => task.isCombat)\\r\\n        .sort((a, b) => b.baseMoney - a.baseMoney);\\r\\n    for (const task of tasks) {\\r\\n        ns.tprintf(\\\"%22s %3s %3s %9s %s\\\", task.name, task.baseMoney, task.difficulty, task.baseRespect, task.baseWanted);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFja2luZ19nYW5nLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsiaGFja2luZ19nYW5nLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFFakMsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixFQUFFLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBRXZCLElBQUksT0FBTyxDQUFDO0lBQ1osT0FBTyxJQUFJLEVBQUU7UUFDVCxFQUFFLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsb0NBQW9DLENBQUMsQ0FBQyxDQUFDO1FBQzNELElBQUksV0FBVyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsY0FBYyxFQUFFLENBQUMsTUFBTSxDQUFDO1FBRWxELE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxFQUFFO1lBQy9CLE1BQU0sSUFBSSxHQUFHLEdBQUcsR0FBRyxXQUFXLENBQUMsUUFBUSxFQUFFLENBQUM7WUFDMUMsRUFBRSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDNUIsRUFBRSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxFQUFFLGVBQWUsQ0FBQyxDQUFDO1lBQzdDLFdBQVcsRUFBRSxDQUFDO1NBQ2pCO1FBRUQsRUFBRSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLG9DQUFvQyxDQUFDLENBQUMsQ0FBQztRQUUzRCxPQUFPLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsb0JBQW9CLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztRQUVyRixLQUFLLE1BQU0sTUFB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\",\"filename\":\"hacking_gang.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/util.js\",\"url\":\"blob:file:///be52a7b7-dc7b-4a59-b51f-c8f9086b3023\",\"moduleSequenceNumber\":287060},{\"filename\":\"hacking_gang.js\",\"url\":\"blob:file:///01f406b5-89a2-41b0-91d8-58026dd38d7a\",\"moduleSequenceNumber\":370479}],\"dependents\":[],\"ramUsage\":36.2,\"server\":\"home\",\"moduleSequenceNumber\":83076,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gang.getMemberNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.canRecruitMember\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.recruitMember\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.setMemberTask\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.getMemberInformation\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.getAscensionResult\",\"cost\":2},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"gang.ascendMember\",\"cost\":4},{\"type\":\"fn\",\"name\":\"gang.getEquipmentNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.getEquipmentCost\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.getEquipmentType\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.getEquipmentStats\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getUpgradeHomeRamCost\",\"cost\":1.5},{\"type\":\"fn\",\"name\":\"upgradeHomeRam\",\"cost\":3},{\"type\":\"fn\",\"name\":\"stock.buy\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"gang.purchaseEquipment\",\"cost\":4},{\"type\":\"fn\",\"name\":\"gang.getTaskNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.getTaskStats\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { cleanLogs, llog } from \\\"lib/util\\\";\\r\\nimport { HSUpgradeType } from \\\"lib/hacknet/hs-upgrade-type\\\";\\r\\nimport { ExtendedNodeStats } from \\\"lib/hacknet/extended-node-stats\\\";\\r\\nimport { HSUpgrade } from \\\"lib/hacknet/hs-upgrade\\\";\\r\\nfunction generateNewServerValue(ns) {\\r\\n    const stats = new ExtendedNodeStats(ns.hacknet.getNodeStats(0));\\r\\n    stats.cache = 1;\\r\\n    stats.cores = 1;\\r\\n    stats.hashCapacity = 64;\\r\\n    stats.level = 1;\\r\\n    stats.ram = 1;\\r\\n    stats.timeOnline = 1;\\r\\n    stats.totalCost = ns.hacknet.getPurchaseNodeCost();\\r\\n    stats.updateProduction(ns);\\r\\n    // ns.tprintf(\\\"New Server Production: %s\\\", stats.production);\\r\\n    // ns.tprintf(\\\"New Server Cost: %s\\\", ns.nFormat(stats.totalCost, \\\"($0.000a)\\\"));\\r\\n    // ns.tprintf(\\\"New Server Total Value: %.2f h/s/$bn\\\", (stats.production / stats.totalCost) * 1000000000);\\r\\n    let bestUpgrade;\\r\\n    while (true) {\\r\\n        const hashServerUpgrades = Object.keys(HSUpgradeType)\\r\\n            .map((key) => new HSUpgrade(ns, ns.hacknet.numNodes(), HSUpgradeType[key], stats))\\r\\n            .sort((a, b) => b.upgradeValue - a.upgradeValue);\\r\\n        const newBestUpgrade = hashServerUpgrades[0];\\r\\n        switch (newBestUpgrade.type) {\\r\\n            case HSUpgradeType.CORES:\\r\\n                stats.cores += 1;\\r\\n                break;\\r\\n            case HSUpgradeType.LEVEL:\\r\\n                stats.level += 1;\\r\\n                break;\\r\\n            case HSUpgradeType.RAM:\\r\\n                stats.ram *= 2;\\r\\n                break;\\r\\n        }\\r\\n        const newProduction = ns.formulas.hacknetServers.hashGainRate(stats.level, 0, stats.ram, stats.cores, ns.getPlayer().hacknet_node_money_mult);\\r\\n        const newCost = stats.totalCost + newBestUpgrade.upgradeCost;\\r\\n        const newValue = newProduction / newCost;\\r\\n        if (newValue < stats.totalValue)\\r\\n            break;\\r\\n        stats.production = newProduction;\\r\\n        stats.totalCost = newCost;\\r\\n        stats.totalValue = newValue;\\r\\n        bestUpgrade = newBestUpgrade;\\r\\n        // ns.tprintf(\\r\\n        //     \\\"%s => Total Value: %s\\\",\\r\\n        //     hashServerUpgrades[0].toString(ns, stats.production),\\r\\n        //     stats.totalValue * 1000000000\\r\\n        // );\\r\\n        const checkStats = ns.hacknet.getNodeStats(0);\\r\\n        if (stats.cores >= checkStats.cores && stats.level >= checkStats.level && stats.ram >= checkStats.ram)\\r\\n            break;\\r\\n    }\\r\\n    if (bestUpgrade === undefined)\\r\\n        return bestUpgrade;\\r\\n    bestUpgrade.upgradeCost = ns.hacknet.getPurchaseNodeCost();\\r\\n    bestUpgrade.upgradeValue = stats.totalValue;\\r\\n    bestUpgrade.type = HSUpgradeType.SERVER;\\r\\n    bestUpgrade.upgradeProductionIncrease = stats.production;\\r\\n    return bestUpgrade;\\r\\n}\\r\\nexport async function main(ns) {\\r\\n    cleanLogs(ns);\\r\\n    let prodCalc = 0;\\r\\n    for (let idx = 0; idx < ns.hacknet.numNodes(); idx++) {\\r\\n        const stats = ns.hacknet.getNodeStats(idx);\\r\\n        stats.ramUsed = 0;\\r\\n        stats.production = ns.formulas.hacknetServers.hashGainRate(stats.level, 0, stats.ram, stats.cores, ns.getPlayer().hacknet_node_money_mult);\\r\\n        prodCalc += stats.production;\\r\\n    }\\r\\n    const prodIncome = (prodCalc / ns.hacknet.hashCost(\\\"Sell for Money\\\")) * 1000000;\\r\\n    ns.tprintf(\\\"Income: %.2f h/s | %s/s\\\", prodCalc, ns.nFormat(prodIncome, \\\"($0.000a)\\\"));\\r\\n    if (ns.hacknet.numNodes() === 0) {\\r\\n        ns.print(ns.sprintf(\\\"%s | 0 hacknet nodes available, waiting for funds to buy one for %s\\\", new Date().toLocaleTimeString(\\\"it-IT\\\"), ns.nFormat(ns.hacknet.getPurchaseNodeCost(), \\\"($0.000a)\\\")));\\r\\n    }\\r\\n    while (ns.hacknet.numNodes() === 0) {\\r\\n        if (ns.getPlayer().money >= ns.hacknet.getPurchaseNodeCost()) {\\r\\n            ns.hacknet.purchaseNode();\\r\\n        }\\r\\n        else {\\r\\n            await ns.sleep(1000);\\r\\n        }\\r\\n    }\\r\\n    let buyServerUpgrade = generateNewServerValue(ns);\\r\\n    if (ns.args[0]) {\\r\\n        let hashServerUpgrades = [];\\r\\n        if (buyServerUpgrade !== undefined)\\r\\n            hashServerUpgrades.push(buyServerUpgrade);\\r\\n        let totalProduction = 0;\\r\\n        for (let idx = 0; idx < ns.hacknet.numNodes(); idx++) {\\r\\n            const stats = new ExtendedNodeStats(ns.hacknet.getNodeStats(idx));\\r\\n            stats.ramUsed = 0;\\r\\n            stats.updateProduction(ns);\\r\\n            Object.keys(HSUpgradeType).forEach((key) => {\\r\\n                if (key !== \\\"CACHE\\\" && key != \\\"SERVER\\\")\\r\\n                    hashServerUpgrades.push(new HSUpgrade(ns, idx, HSUpgradeType[key], stats));\\r\\n            });\\r\\n            totalProduction += stats.production;\\r\\n        }\\r\\n        hashServerUpgrades = hashServerUpgrades\\r\\n            .sort((a, b) => b.upgradeValue - a.upgradeValue)\\r\\n            .filter((a) => a.upgradeValue * 1000000000 > 0.15);\\r\\n        for (const upg of hashServerUpgrades)\\r\\n            ns.tprintf(upg.toString(ns, totalProduction));\\r\\n        return;\\r\\n    }\\r\\n    while (true) {\\r\\n        let hashServerUpgrades = [];\\r\\n        if (buyServerUpgrade !== undefined)\\r\\n            hashServerUpgrades.push(buyServerUpgrade);\\r\\n        let totalProduction = 0;\\r\\n        for (let idx = 0; idx < ns.hacknet.numNodes(); idx++) {\\r\\n            const stats = new ExtendedNodeStats(ns.hacknet.getNodeStats(idx));\\r\\n            stats.ramUsed = 0;\\r\\n            stats.updateProduction(ns);\\r\\n            Object.keys(HSUpgradeType).forEach((key) => {\\r\\n                if (key !== \\\"CACHE\\\" && key != \\\"SERVER\\\")\\r\\n                    hashServerUpgrades.push(new HSUpgrade(ns, idx, HSUpgradeType[key], stats));\\r\\n            });\\r\\n            totalProduction += stats.production;\\r\\n        }\\r\\n        hashServerUpgrades = hashServerUpgrades\\r\\n            .sort((a, b) => b.upgradeValue - a.upgradeValue);\\r\\n        //.filter((a) => a.upgradeValue * 1000000000 > 0.15);\\r\\n        const targetUpgrade = hashServerUpgrades[0];\\r\\n        if (targetUpgrade) {\\r\\n            const port = ns.getPortHandle(2);\\r\\n            port.clear();\\r\\n            port.write(JSON.stringify([totalProduction, targetUpgrade]));\\r\\n            llog(ns, \\\"%s\\\", targetUpgrade.toString(ns, totalProduction));\\r\\n            // const hashBuyCost = ns.hacknet.hashCost(\\\"Sell for Money\\\");\\r\\n            // const numHashBuys = Math.floor(ns.hacknet.numHashes() / hashBuyCost);\\r\\n            // const effectiveMoneyAvailable = ns.getPlayer().money + numHashBuys * 1000000;\\r\\n            // while (effectiveMoneyAvailable < targetUpgrade.upgradeCost) {\\r\\n            //     numHashBuys = Math.floor(ns.hacknet.numHashes() / hashBuyCost);\\r\\n            //     effectiveMoneyAvailable = ns.getPlayer().money + numHashBuys * 1000000;\\r\\n            //     while (ns.hacknet.numHashes() > ns.hacknet.hashCost(\\\"Sell for Money\\\"))\\r\\n            //         ns.hacknet.spendHashes(\\\"Sell for Money\\\");\\r\\n            //     await ns.sleep(1000);\\r\\n            // }\\r\\n            while (ns.getPlayer().money < targetUpgrade.upgradeCost)\\r\\n                await ns.sleep(1000);\\r\\n            targetUpgrade.buy(ns);\\r\\n        }\\r\\n        else {\\r\\n            // while (ns.hacknet.numHashes() > ns.hacknet.hashCost(\\\"Sell for Money\\\"))\\r\\n            //     ns.hacknet.spendHashes(\\\"Sell for Money\\\");\\r\\n            await ns.sleep(1000);\\r\\n        }\\r\\n        buyServerUpgrade = generateNewServerValue(ns);\\r\\n        await ns.sleep(20);\\r\\n    }\\r\\n    ns.print(ns.sprintf(\\\"%s | Leeching...\\\", new Date().toLocaleTimeString(\\\"it-IT\\\")));\\r\\n    while (true) {\\r\\n        while (ns.hacknet.numHashes() > ns.hacknet.hashCost(\\\"Sell for Money\\\"))\\r\\n            ns.hacknet.spendHashes(\\\"Sell for Money\\\");\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n    while (true) {\\r\\n        //let studyCost = ns.hacknet.hashCost(\\\"Increase Maximum Money\\\");\\r\\n        const studyCost = ns.hacknet.hashCost(\\\"Improve Studying\\\");\\r\\n        while (ns.hacknet.hashCapacity() < studyCost) {\\r\\n            while (ns.hacknet.numHashes() > ns.hacknet.hashCost(\\\"Sell for Money\\\"))\\r\\n                ns.hacknet.spendHashes(\\\"Sell for Money\\\");\\r\\n            // find the cheapest cache upgrade and attempt to buy it\\r\\n            let targetIdx = -1;\\r\\n            let targetIdxCost = Number.MAX_SAFE_INTEGER;\\r\\n            for (let idx = 0; idx < ns.hacknet.numNodes(); idx++) {\\r\\n                const idxCost = ns.hacknet.getCacheUpgradeCost(idx, 1);\\r\\n                if (idxCost < targetIdxCost) {\\r\\n                    targetIdx = idx;\\r\\n                    targetIdxCost = idxCost;\\r\\n                }\\r\\n            }\\r\\n            if (ns.getPlayer().money > targetIdxCost) {\\r\\n                ns.hacknet.upgradeCache(targetIdx, 1);\\r\\n                continue;\\r\\n            }\\r\\n            await ns.sleep(1000);\\r\\n        }\\r\\n        while (ns.hacknet.numHashes() < studyCost)\\r\\n            await ns.sleep(1000);\\r\\n        //ns.hacknet.spendHashes(\\\"Increase Maximum Money\\\", \\\"phantasy\\\");\\r\\n        ns.hacknet.spendHashes(\\\"Improve Studying\\\");\\r\\n        await ns.sleep(20);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFja25ldC5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImhhY2tuZXQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLFNBQVMsRUFBRSxJQUFJLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFDM0MsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBQzVELE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGlDQUFpQyxDQUFDO0FBQ3BFLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUVuRCxTQUFTLHNCQUFzQixDQUFDLEVBQU07SUFDbEMsTUFBTSxLQUFLLEdBQUcsSUFBSSxpQkFBaUIsQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ2hFLEtBQUssQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDO0lBQ2hCLEtBQUssQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDO0lBQ2hCLEtBQUssQ0FBQyxZQUFZLEdBQUcsRUFBRSxDQUFDO0lBQ3hCLEtBQUssQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDO0lBQ2hCLEtBQUssQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDO0lBQ2QsS0FBSyxDQUFDLFVBQVUsR0FBRyxDQUFDLENBQUM7SUFDckIsS0FBSyxDQUFDLFNBQVMsR0FBRyxFQUFFLENBQUMsT0FBTyxDQUFDLG1CQUFtQixFQUFFLENBQUM7SUFDbkQsS0FBSyxDQUFDLGdCQUFnQixDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBRTNCLDZEQUE2RDtJQUM3RCwrRUFBK0U7SUFDL0UseUdBQXlHO0lBRXpHLElBQUksV0FBa0MsQ0FBQztJQUN2QyxPQUFPLElBQUksRUFBRTtRQUNULE1BQU0sa0JBQWtCLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUM7YUFDaEQsR0FBRyxDQUFDLENBQUMs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\",\"filename\":\"hacknet.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/hacknet/extended-node-stats.js\",\"url\":\"blob:file:///95699668-e1e6-4f82-9257-0b5b5c04b0b7\",\"moduleSequenceNumber\":83060},{\"filename\":\"/lib/hacknet/hs-upgrade-type.js\",\"url\":\"blob:file:///3c4ef62f-c296-4737-8057-9560f1bc187a\",\"moduleSequenceNumber\":83061},{\"filename\":\"/lib/util.js\",\"url\":\"blob:file:///6138b8e4-dde9-4f5d-849a-2a4536dbb4f9\",\"moduleSequenceNumber\":90050},{\"filename\":\"/lib/hacknet/hs-upgrade.js\",\"url\":\"blob:file:///54949d26-d890-4e76-8525-d3dd50f8b41e\",\"moduleSequenceNumber\":83062},{\"filename\":\"/lib/hacknet/extended-node-stats.js\",\"url\":\"blob:file:///9c9af599-4182-4f0c-9746-ab9c5b242882\",\"moduleSequenceNumber\":83060},{\"filename\":\"/lib/hacknet/hs-upgrade-type.js\",\"url\":\"blob:file:///61b6759c-7514-469b-9315-ef80882ee3fd\",\"moduleSequenceNumber\":83061},{\"filename\":\"/lib/util.js\",\"url\":\"blob:file:///af722bbd-fa8a-478d-9a2b-2c8aa1971801\",\"moduleSequenceNumber\":90050},{\"filename\":\"hacknet.js\",\"url\":\"blob:file:///2fe23561-5a2c-4d3c-a8fc-a7cb04d5521e\",\"moduleSequenceNumber\":102742}],\"dependents\":[],\"ramUsage\":8.6,\"server\":\"home\",\"moduleSequenceNumber\":102742,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"stock.buy\",\"cost\":2.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { doBuyAndSoftenAll, doBackdoors } from \\\"lib/util\\\";\\r\\nexport async function main(ns) {\\r\\n    doBuyAndSoftenAll(ns);\\r\\n    await doBackdoors(ns);\\r\\n    const findProp = function (propName) {\\r\\n        for (const div of eval(\\\"document\\\").querySelectorAll(\\\"div\\\")) {\\r\\n            const propKey = Object.keys(div)[1];\\r\\n            if (!propKey)\\r\\n                continue;\\r\\n            const props = div[propKey];\\r\\n            if (props.children?.props && props.children.props[propName])\\r\\n                return props.children.props[propName];\\r\\n            if (props.children instanceof Array)\\r\\n                for (const child of props.children)\\r\\n                    if (child?.props && child.props[propName])\\r\\n                        return child.props[propName];\\r\\n        }\\r\\n    };\\r\\n    const playerProp = findProp(\\\"player\\\");\\r\\n    if (!playerProp)\\r\\n        return;\\r\\n    // city priority:\\r\\n    //   Chongqing [Neuregen Gene Modification]\\r\\n    //   Sector-12 [CashRoot Starter Kit]\\r\\n    //   Aevum [PCMatrix]\\r\\n    //   New Tokyo --\\r\\n    //   Ishima --\\r\\n    //   Volhaven --\\r\\n    for (const city of [\\\"Aevum\\\", \\\"Chongqing\\\", \\\"New Tokyo\\\", \\\"Ishima\\\", \\\"Volhaven\\\", \\\"Sector-12\\\"]) {\\r\\n        //ns.tprintf(\\\"Traveling to %s\\\", city);\\r\\n        ns.travelToCity(city);\\r\\n        const factions = playerProp.checkForFactionInvitations();\\r\\n        for (const faction of factions) {\\r\\n            if (!faction.alreadyInvited) {\\r\\n                ns.tprintf(\\\"Getting invite to %s\\\", faction.name);\\r\\n                playerProp.receiveInvite(faction.name);\\r\\n                faction.alreadyInvited = true;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n    if (ns.args[0])\\r\\n        return;\\r\\n    if (ns.checkFactionInvitations().includes(\\\"Chongqing\\\") &&\\r\\n        !ns.getOwnedAugmentations(true).includes(\\\"Neuregen Gene Modification\\\")) {\\r\\n        ns.joinFaction(\\\"Chongqing\\\");\\r\\n    }\\r\\n    if (ns.checkFactionInvitations().includes(\\\"Sector-12\\\") &&\\r\\n        !ns.getOwnedAugmentations(true).includes(\\\"CashRoot Starter Kit\\\")) {\\r\\n        ns.joinFaction(\\\"Sector-12\\\");\\r\\n    }\\r\\n    if (ns.checkFactionInvitations().includes(\\\"Aevum\\\") && !ns.getOwnedAugmentations(true).includes(\\\"PCMatrix\\\")) {\\r\\n        ns.joinFaction(\\\"Aevum\\\");\\r\\n    }\\r\\n    for (const faction of ns.checkFactionInvitations()) {\\r\\n        ns.joinFaction(faction);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiam9pbi5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImpvaW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLGlCQUFpQixFQUFFLFdBQVcsRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUUxRCxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLGlCQUFpQixDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ3RCLE1BQU0sV0FBVyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBRXRCLE1BQU0sUUFBUSxHQUFHLFVBQVUsUUFBZ0I7UUFDdkMsS0FBSyxNQUFNLEdBQUcsSUFBSSxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsZ0JBQWdCLENBQUMsS0FBSyxDQUFDLEVBQUU7WUFDeEQsTUFBTSxPQUFPLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNwQyxJQUFJLENBQUMsT0FBTztnQkFBRSxTQUFTO1lBQ3ZCLE1BQU0sS0FBSyxHQUFHLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUMzQixJQUFJLEtBQUssQ0FBQyxRQUFRLEVBQUUsS0FBSyxJQUFJLEtBQUssQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQztnQkFBRSxPQUFPLEtBQUssQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1lBQ25HLElBQUksS0FBSyxDQUFDLFFBQVEsWUFBWSxLQUFLO2dCQUMvQixLQUFLLE1BQU0sS0FBSyxJQUFJLEtBQUssQ0FBQyxRQUFRO29CQUM5QixJQUFJLEtBQUssRUFBRSxLQUFLLElBQUksS0FBSyxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUM7d0JBQUUsT0FBTyxLQUFLLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1NBQ25GO0lBQ0wsQ0FBQyxDQUFDO0lBRUYsTUFBTSxVQUFVLEdBQUcsUUFBUSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBRXRDLElBQUksQ0FBQyxVQUFVO1FBQUUsT0FBTztJQUV4QixpQkFBaUI7SUFDakIsMkNBQTJDO0lBQzNDLHFDQUFxQztJQUNyQyxxQkFBcUI7SUFDckIsaUJBQWlCO0lBQ2pCLGNBQWM7SUFDZCxnQkFBZ0I7SUFFaEIsS0FBSyxNQUFNLElBQUksSUFBSSxDQUFDLE9BQU8sRUFBRSxXQUFXLEVBQUUsV0FBVyxFQUFFLFFBQVEsRUFBRSxVQUFVLEVBQUUsV0FBVyxDQUFDLEVBQUU7UUFDdkYsc0NBQXNDO1FBQ3RDLEVBQUUsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLENBQUM7UUFFdEIsTUFBTSxRQUFRLEdBQUcsVUFBVSxDQUFDLDBCQUEwQixFQUFFLENBQUM7UUFFekQsS0FBSyxNQUFNLE9BQU8sSUFBSSxRQUFRLEVBQUU7WUFDNUIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxjQUFjLEVBQUU7Z0JBQ3pCLEVBQUUsQ0FBQyxPQUFPLENBQUMsc0JBQXNCLEVBQUUsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO2dCQUNqRCxVQUFVLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztnQkFDdkMsT0FBTyxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUM7YUFDakM7U0FDSjtLQUNKO0lBRUQsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztRQUNWLE9BQU87SUFFWCxJQUNJLEVBQUUsQ0FBQyx1QkFBdUIsRUFBRSxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUM7UUFDbEQsQ0FBQyxFQUFFLENBQUMscUJBQXFCLENBQUMsSUFBSSxDQUFDLENBQUMsUUFBUSxDQUFDLDRCQUE0QixDQUFDLEVBQ3hFO1FBQ0UsRUFBRSxDQUFDLFdBQVcsQ0FBQyxXQUFXLENBQUMsQ0FBQztLQUMvQjtJQUVELElBQ0ksRUFBRSxDQUFDLHVCQUF1QixFQUFFLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQztRQUNsRCxDQUFDLEVBQUUsQ0FBQyxxQkFBcUIsQ0FBQyxJQUFJLENBQUMsQ0FBQyxRQUFRLENBQUMsc0JBQXNCLENBQUMsRUFDbEU7UUFDRSxFQUFFLENBQUMsV0FBVyxDQUFDLFdBQVcsQ0FBQyxDQUFDO0tBQy9CO0lBRUQsSUFBSSxFQUFFLENBQUMsdUJBQXVCLEVBQUUsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMscUJBQXFCLENBQUMsSUFBSSxDQUFDLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxFQUFFO1FBQ3hHLEVBQUUsQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLENBQUM7S0FDM0I7SUFFRCxLQUFLLE1BQU0sT0FBTyxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsRUFBRSxFQUFFO1FBQ2hELEVBQUUsQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLENBQUM7S0FDM0I7QUFDTCxDQUFDIn0=\",\"filename\":\"join.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/util.js\",\"url\":\"blob:file:///16dc54e9-3cdb-47a0-8414-ddfbc2739b6c\",\"moduleSequenceNumber\":83063},{\"filename\":\"join.js\",\"url\":\"blob:file:///1d2a918b-c042-4239-b22f-8ae7b863b72c\",\"moduleSequenceNumber\":85604}],\"dependents\":[],\"ramUsage\":25.9,\"server\":\"home\",\"moduleSequenceNumber\":85604,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"travelToCity\",\"cost\":2},{\"type\":\"fn\",\"name\":\"checkFactionInvitations\",\"cost\":3},{\"type\":\"fn\",\"name\":\"getOwnedAugmentations\",\"cost\":5},{\"type\":\"fn\",\"name\":\"joinFaction\",\"cost\":3},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"connect\",\"cost\":2},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"purchaseTor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"purchaseProgram\",\"cost\":2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { allHosts } from \\\"lib/util\\\";\\r\\nexport async function main(ns) {\\r\\n    for (const hostname of allHosts(ns)) {\\r\\n        if (hostname === \\\"home\\\")\\r\\n            continue;\\r\\n        ns.killall(hostname);\\r\\n    }\\r\\n    for (const ps of ns.ps(\\\"home\\\")) {\\r\\n        if (ps.filename === \\\"ka.js\\\" ||\\r\\n            ps.filename === \\\"clock.js\\\" ||\\r\\n            ps.filename === \\\"leech.js\\\" ||\\r\\n            ps.filename === \\\"hacknet.js\\\" ||\\r\\n            ps.filename === \\\"hacking_gang.js\\\" ||\\r\\n            ps.filename === \\\"corp.js\\\" ||\\r\\n            ps.filename === \\\"cct.js\\\" ||\\r\\n            ps.filename === \\\"bladeburner.js\\\")\\r\\n            continue;\\r\\n        ns.kill(ps.pid);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoia2EuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJrYS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sVUFBVSxDQUFDO0FBRXBDLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsS0FBSyxNQUFNLFFBQVEsSUFBSSxRQUFRLENBQUMsRUFBRSxDQUFDLEVBQUU7UUFDakMsSUFBSSxRQUFRLEtBQUssTUFBTTtZQUFFLFNBQVM7UUFDbEMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQztLQUN4QjtJQUVELEtBQUssTUFBTSxFQUFFLElBQUksRUFBRSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsRUFBRTtRQUM1QixJQUNJLEVBQUUsQ0FBQyxRQUFRLEtBQUssT0FBTztZQUN2QixFQUFFLENBQUMsUUFBUSxLQUFLLFVBQVU7WUFDMUIsRUFBRSxDQUFDLFFBQVEsS0FBSyxVQUFVO1lBQzFCLEVBQUUsQ0FBQyxRQUFRLEtBQUssWUFBWTtZQUM1QixFQUFFLENBQUMsUUFBUSxLQUFLLGlCQUFpQjtZQUNqQyxFQUFFLENBQUMsUUFBUSxLQUFLLFNBQVM7WUFDekIsRUFBRSxDQUFDLFFBQVEsS0FBSyxRQUFRO1lBQ2pDLEVBQUUsQ0FBQyxRQUFRLEtBQUssZ0JBQWdCO1lBRXZCLFNBQVM7UUFDYixFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQztLQUNuQjtBQUNMLENBQUMifQ==\",\"filename\":\"ka.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/util.js\",\"url\":\"blob:file:///648a3219-8a1a-4f2f-8e8d-087e53000be9\",\"moduleSequenceNumber\":90050},{\"filename\":\"ka.js\",\"url\":\"blob:file:///50f5eb58-af32-440a-b650-35681ffd79d8\",\"moduleSequenceNumber\":93168}],\"dependents\":[],\"ramUsage\":3,\"server\":\"home\",\"moduleSequenceNumber\":93168,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    for (const ps of ns.ps(\\\"home\\\")) {\\r\\n        if (ps.filename === \\\"leech.js\\\") {\\r\\n            ns.kill(ps.pid);\\r\\n            return;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoia2xlZWNoLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsia2xlZWNoLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsS0FBSyxNQUFNLEVBQUUsSUFBSSxFQUFFLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxFQUFFO1FBQzVCLElBQUksRUFBRSxDQUFDLFFBQVEsS0FBSyxVQUFVLEVBQUc7WUFDN0IsRUFBRSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDaEIsT0FBTztTQUNWO0tBQ0o7QUFDTCxDQUFDIn0=\",\"filename\":\"kleech.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"kleech.js\",\"url\":\"blob:file:///1b805de6-01af-4bf8-914d-2d1b786ed33a\",\"moduleSequenceNumber\":9469}],\"dependents\":[],\"ramUsage\":2.3,\"server\":\"home\",\"moduleSequenceNumber\":83080,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// Reduce Minimum Security\\r\\n// Increase Maximum Money\\r\\n// Generate Coding Contract\\r\\n// Sell for Money\\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\nexport function autocomplete(data, args) {\\r\\n    return [\\\"sec\\\", \\\"money\\\", \\\"cct\\\", \\\"gym\\\", \\\"research\\\", \\\"bladeburner\\\"]; // Autocomplete 3 specific strings.\\r\\n}\\r\\nexport async function main(ns) {\\r\\n    let buy;\\r\\n    switch (ns.args[0]) {\\r\\n        case \\\"sec\\\": {\\r\\n            buy = \\\"Reduce Minimum Security\\\";\\r\\n            break;\\r\\n        }\\r\\n        case \\\"money\\\": {\\r\\n            buy = \\\"Increase Maximum Money\\\";\\r\\n            break;\\r\\n        }\\r\\n        case \\\"cct\\\": {\\r\\n            buy = \\\"Generate Coding Contract\\\";\\r\\n            break;\\r\\n        }\\r\\n        case \\\"gym\\\": {\\r\\n            buy = \\\"Improve Gym Training\\\";\\r\\n            break;\\r\\n        }\\r\\n        case \\\"research\\\": {\\r\\n            buy = \\\"Exchange for Corporation Research\\\";\\r\\n            break;\\r\\n        }\\r\\n        case \\\"sell\\\":\\r\\n        default: {\\r\\n            buy = \\\"Sell for Money\\\";\\r\\n            break;\\r\\n        }\\r\\n    }\\r\\n    const target = ns.args[1]?.toString();\\r\\n    while (true) {\\r\\n        if (ns.args[0] === \\\"bladeburner\\\") {\\r\\n            if (ns.hacknet.hashCost(\\\"Exchange for Bladeburner Rank\\\") <= ns.hacknet.hashCost(\\\"Exchange for Bladeburner SP\\\"))\\r\\n                buy = \\\"Exchange for Bladeburner Rank\\\";\\r\\n            else\\r\\n                buy = \\\"Exchange for Bladeburner SP\\\";\\r\\n        }\\r\\n        const hashCost = ns.hacknet.hashCost(buy);\\r\\n        while (ns.hacknet.hashCapacity() < hashCost) {\\r\\n            while (ns.hacknet.numHashes() > ns.hacknet.hashCost(\\\"Sell for Money\\\"))\\r\\n                ns.hacknet.spendHashes(\\\"Sell for Money\\\");\\r\\n            // find the cheapest cache upgrade and attempt to buy it\\r\\n            let targetIdx = -1;\\r\\n            let targetIdxCost = Number.MAX_SAFE_INTEGER;\\r\\n            for (let idx = 0; idx < ns.hacknet.numNodes(); idx++) {\\r\\n                const idxCost = ns.hacknet.getCacheUpgradeCost(idx, 1);\\r\\n                if (idxCost < targetIdxCost) {\\r\\n                    targetIdx = idx;\\r\\n                    targetIdxCost = idxCost;\\r\\n                }\\r\\n            }\\r\\n            if (ns.getPlayer().money > targetIdxCost) {\\r\\n                ns.hacknet.upgradeCache(targetIdx, 1);\\r\\n                continue;\\r\\n            }\\r\\n            await ns.sleep(1000);\\r\\n        }\\r\\n        while (ns.hacknet.numHashes() < hashCost)\\r\\n            await ns.sleep(1000);\\r\\n        ns.hacknet.spendHashes(buy, target);\\r\\n        await ns.sleep(20);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGVlY2guanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsZWVjaC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSwwQkFBMEI7QUFDMUIseUJBQXlCO0FBQ3pCLDJCQUEyQjtBQUMzQixpQkFBaUI7QUFFakIsNkRBQTZEO0FBQzdELE1BQU0sVUFBVSxZQUFZLENBQUMsSUFBWSxFQUFFLElBQVk7SUFDbkQsT0FBTyxDQUFDLEtBQUssRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxVQUFVLEVBQUUsYUFBYSxDQUFDLENBQUMsQ0FBQyxtQ0FBbUM7QUFDekcsQ0FBQztBQUVELE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsSUFBSSxHQUFHLENBQUM7SUFDUixRQUFRLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUU7UUFDaEIsS0FBSyxLQUFLLENBQUMsQ0FBQztZQUNSLEdBQUcsR0FBRyx5QkFBeUIsQ0FBQztZQUNoQyxNQUFNO1NBQ1Q7UUFDRCxLQUFLLE9BQU8sQ0FBQyxDQUFDO1lBQ1YsR0FBRyxHQUFHLHdCQUF3QixDQUFDO1lBQy9CLE1BQU07U0FDVDtRQUNELEtBQUssS0FBSyxDQUFDLENBQUM7WUFDUixHQUFHLEdBQUcsMEJBQTBCLENBQUM7WUFDakMsTUFBTTtTQUNUO1FBQ0QsS0FBSyxLQUFLLENBQUMsQ0FBQztZQUNSLEdBQUcsR0FBRyxzQkFBc0IsQ0FBQztZQUM3QixNQUFNO1NBQ1Q7UUFDRCxLQUFLLFVBQVUsQ0FBQyxDQUFDO1lBQ2IsR0FBRyxHQUFHLG1DQUFtQyxDQUFBO1lBQ3pDLE1BQU07U0FDVDtRQUNELEtBQUssTUFBTSxDQUFDO1FBQ1osT0FBTyxDQUFDLENBQUM7WUFDTCxHQUFHLEdBQUcsZ0JBQWdCLENBQUE7WUFDdEIsTUFBTTtTQUNUO0tBQ0o7SUFDRCxNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLFFBQVEsRUFBRSxDQUFDO0lBRXRDLE9BQU8sSUFBSSxFQUFFO1FBQ2YsSUFBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLGFBQWEsRUFBRTtZQUNoQyxJQUFJLEVBQUUsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLCtCQUErQixDQUFDLElBQUksRUFBRSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsNkJBQTZCLENBQUM7Z0JBQzdHLEdBQUcsR0FBRywrQkFBK0IsQ0FBQzs7Z0JBRXRDLEdBQUcsR0FBRyw2QkFBNkIsQ0FBQztTQUNyQztRQUNLLE1BQU0sUUFBUSxHQUFHLEVBQUUsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBRTFDLE9BQU8sRUFBRSxDQUFDLE9BQU8sQ0FBQyxZQUFZLEVBQUUsR0FBRyxRQUFRLEVBQUU7WUFDekMsT0FBTyxFQUFFLENBQUMsT0FBTyxDQUFDLFNBQVMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLGdCQUFnQixDQUFDO2dCQUNqRSxFQUFFLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1lBRTdDLHdEQUF3RDtZQUN4RCxJQUFJLFNBQVMsR0FBRyxDQUFDLENBQUMsQ0FBQztZQUNuQixJQUFJLGFBQWEsR0FBRyxNQUFNLENBQUMsZ0JBQWdCLENBQUM7WUFDNUMsS0FBSyxJQUFJLEdBQUcsR0FBRyxDQUFDLEVBQUUsR0FBRyxHQUFHLEVBQUUsQ0FBQyxPQUFPLENBQUMsUUFBUSxFQUFFLEVBQUUsR0FBRyxFQUFFLEVBQUU7Z0JBQ2xELE1BQU0sT0FBTyxHQUFHLEVBQUUsQ0FBQyxPQUFPLENBQUMsbUJBQW1CLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDO2dCQUN2RCxJQUFJLE9BQU8sR0FBRyxhQUFhLEVBQUU7b0JBQ3pCLFNBQVMsR0FBRyxHQUFHLENBQUM7b0JBQ2hCLGFBQWEsR0FBRyxPQUFPLENBQUM7aUJBQzNCO2FBQ0o7WUFFRCxJQUFJLEVBQUUsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxLQUFLLEdBQUcsYUFBYSxFQUFFO2dCQUN0QyxFQUFFLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxTQUFTLEVBQUUsQ0FBQyxDQUFDLENBQUM7Z0JBQ3RDLFNBQVM7YUFDWjtZQUVELE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUN4QjtRQUVELE9BQU8sRUFBRSxDQUFDLE9BQU8sQ0FBQyxTQUFTLEVBQUUsR0FBRyxRQUFRO1lBQUUsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBRS9ELEVBQUUsQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLEdBQUcsRUFBRSxNQUFNLENBQUMsQ0FBQztRQUVwQyxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7S0FDdEI7QUFDTCxDQUFDIn0=\",\"filename\":\"leech.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"leech.js\",\"url\":\"blob:file:///f7d3b250-7798-4f31-a303-ef0a267c5f14\",\"moduleSequenceNumber\":73400}],\"dependents\":[],\"ramUsage\":8.6,\"server\":\"home\",\"moduleSequenceNumber\":83081,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"stock.buy\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function isScript(filename) {\\r\\n    return filename.indexOf(\\\".js\\\") !== -1 && filename.indexOf(\\\"/lib\\\") === -1;\\r\\n}\\r\\nfunction isProgram(filename) {\\r\\n    return filename.indexOf(\\\".exe\\\") !== -1;\\r\\n}\\r\\nfunction isOther(filename) {\\r\\n    return !isScript(filename) && !isProgram(filename) && !isLib(filename);\\r\\n}\\r\\nfunction isLib(filename) {\\r\\n    return filename.indexOf(\\\".js\\\") !== -1 && filename.indexOf(\\\"/lib\\\") !== -1;\\r\\n}\\r\\nexport async function main(ns) {\\r\\n    let hostname = ns.getHostname();\\r\\n    if (ns.args[0] && ns.serverExists(ns.args[0].toString())) {\\r\\n        hostname = ns.args[0].toString();\\r\\n    }\\r\\n    const filenames = ns.ls(hostname);\\r\\n    const scriptnames = filenames.filter(isScript);\\r\\n    const libnames = filenames.filter(isLib);\\r\\n    const programnames = filenames.filter(isProgram);\\r\\n    const othernames = filenames.filter(isOther);\\r\\n    let maxScriptFileLength = 0;\\r\\n    libnames.map(function (name) {\\r\\n        const len = name.length + 2;\\r\\n        if (len > maxScriptFileLength)\\r\\n            maxScriptFileLength = len;\\r\\n    });\\r\\n    if (scriptnames.length) {\\r\\n        ns.tprintf(\\\"======== SCRIPTS ========\\\");\\r\\n        for (const filename of scriptnames)\\r\\n            ns.tprintf(`  %-${maxScriptFileLength}s %7.2fGB %s`, filename, ns.getScriptRam(filename, hostname), ns.scriptRunning(filename, hostname) ? \\\"RUNNING\\\" : \\\"\\\");\\r\\n    }\\r\\n    if (libnames.length) {\\r\\n        ns.tprintf(\\\"========= LIBS ==========\\\");\\r\\n        for (const filename of libnames)\\r\\n            ns.tprintf(`  %-${maxScriptFileLength}s %7.2fGB %s`, filename, ns.getScriptRam(filename, hostname), ns.scriptRunning(filename, hostname) ? \\\"RUNNING\\\" : \\\"\\\");\\r\\n    }\\r\\n    if (programnames.length) {\\r\\n        ns.tprintf(\\\"======== PROGRAMS =======\\\");\\r\\n        for (const filename of programnames)\\r\\n            ns.tprintf(`  %-${maxScriptFileLength}s`, filename);\\r\\n    }\\r\\n    if (othernames.length) {\\r\\n        ns.tprintf(\\\"========= OTHER =========\\\");\\r\\n        for (const filename of othernames)\\r\\n            ns.tprintf(`  %-${maxScriptFileLength}s`, filename);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGwuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxTQUFTLFFBQVEsQ0FBQyxRQUFnQjtJQUM5QixPQUFPLFFBQVEsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksUUFBUSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztBQUM3RSxDQUFDO0FBRUQsU0FBUyxTQUFTLENBQUMsUUFBZ0I7SUFDL0IsT0FBTyxRQUFRLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO0FBQzNDLENBQUM7QUFFRCxTQUFTLE9BQU8sQ0FBQyxRQUFnQjtJQUM3QixPQUFPLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQzNFLENBQUM7QUFFRCxTQUFTLEtBQUssQ0FBQyxRQUFnQjtJQUM5QixPQUFPLFFBQVEsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksUUFBUSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztBQUMxRSxDQUFDO0FBRUQsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUM5QixJQUFJLFFBQVEsR0FBRyxFQUFFLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDaEMsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxZQUFZLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxFQUFFO1FBQ3RELFFBQVEsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO0tBQ3BDO0lBRUQsTUFBTSxTQUFTLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUNsQyxNQUFNLFdBQVcsR0FBRyxTQUFTLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ2xELE1BQU0sUUFBUSxHQUFHLFNBQVMsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDdEMsTUFBTSxZQUFZLEdBQUcsU0FBUyxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUNqRCxNQUFNLFVBQVUsR0FBRyxTQUFTLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBRTdDLElBQUksbUJBQW1CLEdBQUcsQ0FBQyxDQUFDO0lBQzVCLFFBQVEsQ0FBQyxHQUFHLENBQUMsVUFBVSxJQUFJO1FBQ3ZCLE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFBO1FBQzNCLElBQUksR0FBRyxHQUFHLG1CQUFtQjtZQUFFLG1CQUFtQixHQUFHLEdBQUcsQ0FBQztJQUM3RCxDQUFDLENBQUMsQ0FBQztJQUVILElBQUksV0FBVyxDQUFDLE1BQU0sRUFBRTtRQUNwQixFQUFFLENBQUMsT0FBTyxDQUFDLDJCQUEyQixDQUFDLENBQUM7UUFDeEMsS0FBSyxNQUFNLFFBQVEsSUFBSSxXQUFXO1lBQzlCLEVBQUUsQ0FBQyxPQUFPLENBQ04sT0FBTyxtQkFBbUIsY0FBYyxFQUN4QyxRQUFRLEVBQ1IsRUFBRSxDQUFDLFlBQVksQ0FBQyxRQUFRLEVBQUUsUUFBUSxDQUFDLEVBQ25DLEVBQUUsQ0FBQyxhQUFhLENBQUMsUUFBUSxFQUFFLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FDeEQsQ0FBQztLQUNUO0lBRUosSUFBSSxRQUFRLENBQUMsTUFBTSxFQUFFO1FBQ3BCLEVBQUUsQ0FBQyxPQUFPLENBQUMsMkJBQTJCLENBQUMsQ0FBQztRQUNsQyxLQUFLLE1BQU0sUUFBUSxJQUFJLFFBQVE7WUFDM0IsRUFBRSxDQUFDLE9BQU8sQ0FDTixPQUFPLG1CQUFtQixjQUFjLEVBQ3hDLFFBQVEsRUFDUixFQUFFLENBQUMsWUFBWSxDQUFDLFFBQVEsRUFBRSxRQUFRLENBQUMsRUFDbkMsRUFBRSxDQUFDLGFBQWEsQ0FBQyxRQUFRLEVBQUUsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUN4RCxDQUFDO0tBQ1Q7SUFFRCxJQUFJLFlBQVksQ0FBQyxNQUFNLEVBQUU7UUFDckIsRUFBRSxDQUFDLE9BQU8sQ0FBQywyQkFBMkIsQ0FBQyxDQUFDO1FBQ3hDLEtBQUssTUFBTSxRQUFRLElBQUksWUFBWTtZQUFFLEVBQUUsQ0FBQyxPQUFPLENBQUMsT0FBTyxtQkFBbUIsR0FBRyxFQUFFLFFBQVEsQ0FBQyxDQUFDO0tBQzVGO0lBRUQsSUFBSSxVQUFVLENBQUMsTUFBTSxFQUFFO1FBQ25CLEVBQUUsQ0FBQyxPQUFPLENBQUMsMkJBQTJCLENBQUMsQ0FBQztRQUN4QyxLQUFLLE1BQU0sUUFBUSxJQUFJLFVBQVU7WUFBRSxFQUFFLENBQUMsT0FBTyxDQUFDLE9BQU8sbUJBQW1CLEdBQUcsRUFBRSxRQUFRLENBQUMsQ0FBQztLQUMxRjtBQUNMLENBQUMifQ==\",\"filename\":\"ll.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"ll.js\",\"url\":\"blob:file:///10bd0ff2-4be1-4330-a261-4c38ae1e330e\",\"moduleSequenceNumber\":1491}],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"home\",\"moduleSequenceNumber\":83082,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"serverExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\nimport { doBuyAndSoftenAll, doBackdoors } from \\\"lib/util\\\";\\r\\nimport { Augmentation } from \\\"lib/augmentation/augmentation\\\";\\r\\nexport async function main(ns) {\\r\\n    doBuyAndSoftenAll(ns);\\r\\n    await doBackdoors(ns);\\r\\n    const player = ns.getPlayer();\\r\\n    const checkFactions = player.factions.concat(ns.checkFactionInvitations());\\r\\n    const sortedFactions = checkFactions.sort((a, b) => (ns.getPlayer().currentWorkFactionName === b ? ns.getPlayer().workRepGained : 0) +\\r\\n        ns.getFactionRep(b) -\\r\\n        ((ns.getPlayer().currentWorkFactionName === a ? ns.getPlayer().workRepGained : 0) + ns.getFactionRep(a)));\\r\\n    //let sortedFactions = ALL_FACTIONS.sort((a, b) => ns.getFactionRep(b) - ns.getFactionRep(a));\\r\\n    let allPurchaseableAugs = [];\\r\\n    let topFaction = true;\\r\\n    for (const faction of sortedFactions) {\\r\\n        const augs = ns\\r\\n            .getAugmentationsFromFaction(faction)\\r\\n            .map((name) => {\\r\\n            return new Augmentation(ns, name, faction);\\r\\n        })\\r\\n            .sort((a, b) => a.rep - b.rep);\\r\\n        const augsToBuy = [];\\r\\n        for (const aug of augs) {\\r\\n            if (aug.isHackUseful() && !aug.owned) {\\r\\n                augsToBuy.push(aug);\\r\\n            }\\r\\n            if (aug.isHackUseful() && aug.purchaseable && !aug.owned && !aug.installed) {\\r\\n                allPurchaseableAugs.push(aug);\\r\\n            }\\r\\n        }\\r\\n        if (augsToBuy.length === 0 && !topFaction)\\r\\n            continue;\\r\\n        ns.tprintf(\\\"%s (rep: %d):\\\", faction, (ns.getPlayer().currentWorkFactionName === faction ? ns.getPlayer().workRepGained : 0) +\\r\\n            ns.getFactionRep(faction));\\r\\n        for (const aug of augsToBuy) {\\r\\n            ns.tprintf(\\\"  %s\\\", aug);\\r\\n            // printAugStats(aug.stats);\\r\\n        }\\r\\n        topFaction = false;\\r\\n    }\\r\\n    for (let i = 0; i < allPurchaseableAugs.length; i++) {\\r\\n        const checkName = allPurchaseableAugs[i].name;\\r\\n        let j = i + 1;\\r\\n        while (j < allPurchaseableAugs.length) {\\r\\n            if (allPurchaseableAugs[j].name === checkName) {\\r\\n                allPurchaseableAugs.splice(j, 1);\\r\\n            }\\r\\n            else {\\r\\n                j++;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n    allPurchaseableAugs = allPurchaseableAugs.sort((a, b) => b.price - a.price);\\r\\n    // reorder array to buy dependent augs first and purge augs that cant be bought\\r\\n    // because of a missing dependency, need to loop multiple times until no more dependencies are found\\r\\n    while (true) {\\r\\n        let didDepMove = false;\\r\\n        for (let i = 0; i < allPurchaseableAugs.length; i++) {\\r\\n            const augName = allPurchaseableAugs[i].name;\\r\\n            const depName = allPurchaseableAugs[i].dep;\\r\\n            if (depName === \\\"\\\")\\r\\n                continue;\\r\\n            let foundDep = false;\\r\\n            // check to see if we've already re-organized this dep and it is placed higher in the queue\\r\\n            for (let k = 0; k < i; k++) {\\r\\n                if (allPurchaseableAugs[k].name === depName) {\\r\\n                    foundDep = true;\\r\\n                }\\r\\n            }\\r\\n            if (foundDep)\\r\\n                continue;\\r\\n            const depLoc = allPurchaseableAugs.findIndex((a) => a.name === depName);\\r\\n            if (depLoc >= 0) {\\r\\n                const tmp = allPurchaseableAugs[depLoc];\\r\\n                // remove aug from current place\\r\\n                allPurchaseableAugs.splice(depLoc, 1);\\r\\n                // place it before the main aug\\r\\n                const curLoc = allPurchaseableAugs.findIndex((a) => a.name === augName);\\r\\n                allPurchaseableAugs.splice(curLoc, 0, tmp);\\r\\n                foundDep = true;\\r\\n                didDepMove = true;\\r\\n            }\\r\\n            // if we dont have the dependency queued, remove this aug from the buy list\\r\\n            if (!foundDep) {\\r\\n                ns.tprintf(\\\"WARNING: Unable to find dependency %s:%s in the queue\\\", allPurchaseableAugs[i].name, allPurchaseableAugs[i].dep);\\r\\n                allPurchaseableAugs.splice(i, 1);\\r\\n            }\\r\\n        }\\r\\n        if (!didDepMove)\\r\\n            break;\\r\\n    }\\r\\n    // if (allPurchaseableAugs.length > 0) {\\r\\n    //     ns.tprintf(\\\"============================\\\");\\r\\n    //     let mult = 1;\\r\\n    //     let total = 0;\\r\\n    //     for (let aug of allPurchaseableAugs) {\\r\\n    //         //if (ns.args[0]) ns.purchaseAugmentation(aug.faction, aug.name);\\r\\n    //         ns.tprintf(\\r\\n    //             \\\"%40s - %9s %s\\\",\\r\\n    //             aug.name,\\r\\n    //             ns.nFormat(aug.price * mult, \\\"$0.000a\\\"),\\r\\n    //             aug.dep !== undefined ? aug.dep : \\\"\\\"\\r\\n    //         );\\r\\n    //         total += aug.price * mult;\\r\\n    //         mult *= 1.9;\\r\\n    //     }\\r\\n    //     ns.tprintf(\\\"\\\\n%40s - %9s\\\", \\\"Total\\\", ns.nFormat(total, \\\"$0.000a\\\"));\\r\\n    // }\\r\\n    const buysafe = ns.getPlayer().currentWorkFactionName !== sortedFactions[0];\\r\\n    if (!buysafe && ns.args[0]) {\\r\\n        ns.tprintf(\\\"WARNING: Unable to buy augmentations when actively working for the top faction\\\");\\r\\n    }\\r\\n    let mult = 1;\\r\\n    const srcFile11 = ns.getOwnedSourceFiles().find((x) => x.n === 11);\\r\\n    const srcFile11Lvl = srcFile11 ? srcFile11.lvl : 0;\\r\\n    const multmult = 1.9 * [1, 0.96, 0.94, 0.93][srcFile11Lvl];\\r\\n    let total = Number.MAX_SAFE_INTEGER;\\r\\n    let startAug = 0;\\r\\n    const purchaseableAugs = allPurchaseableAugs.filter((a) => a.name !== \\\"The Red Pill\\\");\\r\\n    while (startAug < purchaseableAugs.length) {\\r\\n        total = 0;\\r\\n        mult = 1;\\r\\n        for (let augIdx = startAug; augIdx < purchaseableAugs.length; augIdx++) {\\r\\n            total += purchaseableAugs[augIdx].price * mult;\\r\\n            mult *= multmult;\\r\\n        }\\r\\n        if (total < ns.getPlayer().money)\\r\\n            break;\\r\\n        startAug++;\\r\\n    }\\r\\n    let affordableAugs = purchaseableAugs.slice(startAug);\\r\\n    // check if affordableAugs includes deps if they're not already installed\\r\\n    let redoUpdate = false;\\r\\n    for (const aug of affordableAugs) {\\r\\n        const depName = aug.dep;\\r\\n        if (depName === \\\"\\\")\\r\\n            continue;\\r\\n        if (ns.getOwnedAugmentations(true).includes(depName))\\r\\n            continue;\\r\\n        let depAug = affordableAugs.find((a) => a.name === depName);\\r\\n        if (depAug === undefined) {\\r\\n            // dependency is not installed, and not in the list to be installed, pull it from purchaseableAugs\\r\\n            depAug = purchaseableAugs.find((a) => a.name === depName);\\r\\n            if (depAug === undefined) {\\r\\n                ns.tprintf(\\\"ERROR: Unable to find dependency aug in the purchaseableAugs \\\" +\\r\\n                    \\\"array even though it should be there %s | %s\\\");\\r\\n                return;\\r\\n            }\\r\\n            const thisAugIdx = affordableAugs.findIndex((a) => a.name === aug.name);\\r\\n            affordableAugs.splice(thisAugIdx, 0, depAug);\\r\\n            redoUpdate = true;\\r\\n        }\\r\\n    }\\r\\n    if (redoUpdate) {\\r\\n        startAug = 0;\\r\\n        while (startAug < affordableAugs.length) {\\r\\n            total = 0;\\r\\n            mult = 1;\\r\\n            for (let augIdx = startAug; augIdx < affordableAugs.length; augIdx++) {\\r\\n                total += affordableAugs[augIdx].price * mult;\\r\\n                mult *= multmult;\\r\\n            }\\r\\n            if (total < ns.getPlayer().money)\\r\\n                break;\\r\\n            startAug++;\\r\\n        }\\r\\n        affordableAugs = affordableAugs.slice(startAug);\\r\\n    }\\r\\n    //if (affordableAugs.length === 0) return;\\r\\n    ns.tprintf(\\\"============================\\\");\\r\\n    total = 0;\\r\\n    mult = 1;\\r\\n    const startmoney = ns.getPlayer().money;\\r\\n    for (const aug of affordableAugs) {\\r\\n        if (ns.args[0] && buysafe)\\r\\n            ns.purchaseAugmentation(aug.faction, aug.name);\\r\\n        ns.tprintf(\\\"%50s - %9s %s\\\", aug.name, ns.nFormat(aug.price * mult, \\\"$0.000a\\\"), aug.dep);\\r\\n        total += aug.price * mult;\\r\\n        mult *= multmult;\\r\\n    }\\r\\n    // see how many Neuroflux Governors we can buy\\r\\n    let neurofluxFactionIdx = 0;\\r\\n    while (neurofluxFactionIdx < sortedFactions.length) {\\r\\n        if (ns.gang.inGang() && ns.gang.getGangInformation().faction === sortedFactions[neurofluxFactionIdx]) {\\r\\n            neurofluxFactionIdx++;\\r\\n        }\\r\\n        else if (sortedFactions[neurofluxFactionIdx] === \\\"Bladeburners\\\") {\\r\\n            neurofluxFactionIdx++;\\r\\n        }\\r\\n        else if (sortedFactions[neurofluxFactionIdx] === \\\"Church of the Machine God\\\") {\\r\\n            neurofluxFactionIdx++;\\r\\n        }\\r\\n        else {\\r\\n            break;\\r\\n        }\\r\\n    }\\r\\n    const topFactionForNeuroflux = neurofluxFactionIdx >= sortedFactions.length ? \\\"\\\" : sortedFactions[neurofluxFactionIdx];\\r\\n    const topFactionRep = topFactionForNeuroflux !== \\\"\\\"\\r\\n        ? (ns.getPlayer().currentWorkFactionName === topFactionForNeuroflux ? ns.getPlayer().workRepGained : 0) +\\r\\n            ns.getFactionRep(topFactionForNeuroflux)\\r\\n        : 0;\\r\\n    let ngPrice = ns.getAugmentationPrice(\\\"NeuroFlux Governor\\\") * (ns.args[0] && buysafe ? 1 : mult);\\r\\n    let ngRepReq = ns.getAugmentationRepReq(\\\"NeuroFlux Governor\\\");\\r\\n    let nfCount = 1;\\r\\n    let neuroError = false;\\r\\n    while (true) {\\r\\n        if (total + ngPrice < startmoney && ngRepReq <= topFactionRep) {\\r\\n            if (ns.args[0] && buysafe) {\\r\\n                const result = ns.purchaseAugmentation(topFactionForNeuroflux, \\\"NeuroFlux Governor\\\");\\r\\n                if (!result) {\\r\\n                    ns.tprintf(\\\"ERROR, could not buy Neuroflux governor\\\");\\r\\n                    neuroError = true;\\r\\n                }\\r\\n            }\\r\\n            ns.tprintf(\\\"%50s - %9s %s\\\", \\\"NeuroFlux Governor +\\\" + nfCount.toString(), ns.nFormat(ngPrice, \\\"$0.000a\\\"), ns.nFormat(ngRepReq, \\\"0.000a\\\"));\\r\\n            nfCount++;\\r\\n            total += ngPrice;\\r\\n            ngPrice = ngPrice * 1.14 * multmult;\\r\\n            ngRepReq *= 1.14;\\r\\n        }\\r\\n        else {\\r\\n            ns.tprintf(\\\"%50s - %9s %s)\\\", \\\"(NeuroFlux Governor +\\\" + nfCount.toString(), ns.nFormat(ngPrice, \\\"$0.000a\\\"), ns.nFormat(ngRepReq, \\\"0.000a\\\"));\\r\\n            break;\\r\\n        }\\r\\n    }\\r\\n    const redPillAug = allPurchaseableAugs.find((a) => a.name === \\\"The Red Pill\\\");\\r\\n    if (!neuroError && redPillAug) {\\r\\n        if (ns.args[0] && buysafe)\\r\\n            ns.purchaseAugmentation(redPillAug.faction, redPillAug.name);\\r\\n        ns.tprintf(\\\"%50s - %9s %s\\\", \\\"The Red Pill\\\", ns.nFormat(0, \\\"$0.000a\\\"), ns.nFormat(redPillAug.rep, \\\"0.000a\\\"));\\r\\n    }\\r\\n    ns.tprintf(\\\"\\\\n%50s - %9s (%s)\\\", \\\"Total\\\", ns.nFormat(total, \\\"$0.000a\\\"), ns.nFormat(total + ngPrice, \\\"$0.000a\\\"));\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWNwLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibWNwLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLDZEQUE2RDtBQUM3RCxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsV0FBVyxFQUEwQixNQUFNLFVBQVUsQ0FBQztBQUNsRixPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sK0JBQStCLENBQUM7QUFFN0QsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixpQkFBaUIsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUN0QixNQUFNLFdBQVcsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUV0QixNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsU0FBUyxFQUFFLENBQUM7SUFFOUIsTUFBTSxhQUFhLEdBQUcsTUFBTSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLHVCQUF1QixFQUFFLENBQUMsQ0FBQztJQUMzRSxNQUFNLGNBQWMsR0FBRyxhQUFhLENBQUMsSUFBSSxDQUNyQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUNMLENBQUMsRUFBRSxDQUFDLFNBQVMsRUFBRSxDQUFDLHNCQUFzQixLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLFNBQVMsRUFBRSxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2hGLEVBQUUsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDO1FBQ25CLENBQUMsQ0FBQyxFQUFFLENBQUMsU0FBUyxFQUFFLENBQUMsc0JBQXNCLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsU0FBUyxFQUFFLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQy9HLENBQUM7SUFDRiw4RkFBOEY7SUFFOUYsSUFBSSxtQkFBbUIsR0FBRyxFQUFFLENBQUM7SUFDN0IsSUFBSSxVQUFVLEdBQUcsSUFBSSxDQUFDO0lBQ3RCLEtBQUssTUFBTSxPQUFPLElBQUksY0FBYyxFQUFFO1FBQ2xDLE1BQU0sSUFBSSxHQUFHLEVBQUU7YUFDViwyQkFBMkIsQ0FBQyxPQUFPLENBQUM7YUFDcEMsR0FBRyxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUU7WUFDVixPQUFPLElBQUksWUFBWSxDQUFDLEVBQUUsRUFBRSxJQUFJLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFDL0MsQ0FBQyxDQUFDO2FBQ0QsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDbkMsTUFBTSxTQUFTLEdBQUcsRUFBRSxDQUFDO1FBQ3JCLEtBQUssTUFBTSxHQUFHLElBQUksSUFBSSxFQUFFO1lBQ3BCLElBQUksR0FBRyxDQUFDLFlBQVksRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssRUFBRTtnQkFDbEMsU0FBUyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQzthQUN2QjtZQUNELElBQUksR0FBRyxDQUFDLFlBQVksRUFBRSxJQUFJLEdBQUcsQ0FBQyxZQUFZLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLFNBQVMsRUFBRTtnQkFDeEUsbUJBQW1CLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO2FBQ2pDO1NBQ0o7UUFFRCxJQUFJLFNBQVMsQ0FBQyxNQUFNLEtBQUssQ0FBQyxJQUFJLENBQUMsVUFBVTtZQUFFLFNBQVM7UUFFcEQsRUFBRSxDQUFDLE9BQU8sQ0FDTixlQUFlLEVBQ2YsT0FBTyxFQUNQLENBQUMsRUFBRSxDQUFDLFNBQVMsRUFBRSxDQUFDLHNCQUFzQixLQUFLLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLFNBQVMsRUFBRSxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ2xGLEVBQUUsQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLENBQ2hDLENBQUM7UUFDRixLQUFLLE1BQU0sR0FBRyxJQUFJLFNBQVMsRUFBRTtZQUN6QixFQUFFLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxHQUFHLENBQUMsQ0FBQztZQUN4Qiw0QkFBNEI7U0FDL0I7UUFFRCxVQUFVLEdBQUcsS0FBSyxDQUFDO0tBQ3RCO0lBRUQsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLG1CQUFtQixDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtRQUNqRCxNQUFNLFNBQVMsR0FBRyxtQkFBbUIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7UUFDOUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNkLE9BQU8sQ0FBQyxHQUFHLG1CQUFtQixDQUFDLE1BQU0sRUFBRTtZQUNuQyxJQUFJLG1CQUFtQixDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksS0FBSyxTQUFTLEVBQUU7Z0JBQzNDLG1CQUFtQixDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7YUFDcEM7aUJBQU07Z0JBQ0gsQ0FBQyxFQUFFLENBQUM7YUFDUDtTQUNKO0tBQ0o7SUFFRCxtQkFBbUIsR0FBRyxtQkFBbUIsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUU1RSwrRUFBK0U7SUFDL0Usb0dBQW9HO0lBQ3BHLE9BQU8sSUFBSSxFQUFFO1FBQ1QsSUFBSSxVQUFVLEdBQUcsS0FBSyxDQUFDO1FBQ3ZCLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxtQkFBbUIsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDakQsTUFBTSxPQUFPLEdBQUcsbUJBQW1CLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO1lBQzVDLE1BQU0sT0FBTyxHQUFHLG1CQUFtQixDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQztZQUMzQyxJQUFJLE9BQU8sS0FBSyxFQUFFO2dCQUFFLFNBQVM7WUFFN0IsSUFBSSxRQUFRLEdBQUcsS0FBSyxDQUFDO1lBQ3JCLDJGQUEyRjtZQUMzRixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFO2dCQUN4QixJQUFJLG1CQUFtQixDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksS0FBSyxPQUFPLEVBQUU7b0JBQ3pDLFFBQVEsR0FBRyxJQUFJLENBQUM7aUJBQ25CO2FBQ0o7WUFDRCxJQUFJLFFBQVE7Z0JBQUUsU0FBUztZQUV2QixNQUFNLE1BQU0sR0FBRyxtQkFBbUIsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLEtBQUssT0FBTyxDQUFDLENBQUM7WUFDeEUsSUFBSSxNQUFNLElBQUksQ0FBQyxFQUFFO2dCQUNiLE1BQU0sR0FBRyxHQUFHLG1CQUFtQixDQUFDLE1BQU0sQ0FBQyxDQUFDO2dCQUN4QyxnQ0FBZ0M7Z0JBQ2hDLG1CQUFtQixDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLENBQUM7Z0JBQ3RDLCtCQUErQjtnQkFDL0IsTUFBTSxNQUFNLEdBQUcsbUJBQW1CLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxLQUFLLE9BQU8sQ0FBQyxDQUFDO2dCQUN4RSxtQkFBbUIsQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQztnQkFDM0MsUUFBUSxHQUFHLElBQUksQ0FBQztnQkFDaEIsVUFBVSxHQUFHLElBQUksQ0FBQzthQUNyQjtZQUVELDJFQUEyRTtZQUMzRSxJQUFJLENBQUMsUUFBUSxFQUFFO2dCQUNYLEVBQUUsQ0FBQyxPQUFPLENBQ04sdURBQXVELEVBQ3ZELG1CQUFtQixDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksRUFDM0IsbUJBQW1CLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUM3QixDQUFDO2dCQUNGLG1CQUFtQixDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7YUFDcEM7U0FDSjtRQUVELElBQUksQ0FBQyxVQUFVO1lBQUUsTUFBTTtLQUMxQjtJQUVELHdDQUF3QztJQUN4QyxrREFBa0Q7SUFDbEQsb0JBQW9CO0lBQ3BCLHFCQUFxQjtJQUNyQiw2Q0FBNkM7SUFDN0MsNEVBQTRFO0lBQzVFLHNCQUFzQjtJQUN0QiwrQkFBK0I7SUFDL0Isd0JBQXdCO0lBQ3hCLHVEQUF1RDtJQUN2RCxtREFBbUQ7SUFDbkQsYUFBYTtJQUNiLHFDQUFxQztJQUNyQyx1QkFBdUI7SUFDdkIsUUFBUTtJQUNSLHlFQUF5RTtJQUN6RSxJQUFJO0lBRUosTUFBTSxPQUFPLEdBQUcsRUFBRSxDQUFDLFNBQVMsRUFBRSxDQUFDLHNCQUFzQixLQUFLLGNBQWMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUM1RSxJQUFJLENBQUMsT0FBTyxJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUU7UUFDeEIsRUFBRSxDQUFDLE9BQU8sQ0FBQyxnRkFBZ0YsQ0FBQyxDQUFDO0tBQ2hHO0lBRUQsSUFBSSxJQUFJLEdBQUcsQ0FBQyxDQUFDO0lBQ2IsTUFBTSxTQUFTLEdBQUcsRUFBRSxDQUFDLG1CQUFtQixFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDO0lBQ25FLE1BQU0sWUFBWSxHQUFHLFNBQVMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ25ELE1BQU0sUUFBUSxHQUFHLEdBQUcsR0FBRyxDQUFDLENBQUMsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDLFlBQVksQ0FBQyxDQUFDO0lBQzNELElBQUksS0FBSyxHQUFHLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQztJQUNwQyxJQUFJLFFBQVEsR0FBRyxDQUFDLENBQUM7SUFDakIsTUFBTSxnQkFBZ0IsR0FBRyxtQkFBbUIsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLEtBQUssY0FBYyxDQUFDLENBQUM7SUFDdEYsT0FBTyxRQUFRLEdBQUcsZ0JBQWdCLENBQUMsTUFBTSxFQUFFO1FBQ3ZDLEtBQUssR0FBRyxDQUFDLENBQUM7UUFDVixJQUFJLEdBQUcsQ0FBQyxDQUFDO1FBQ1QsS0FBSyxJQUFJLE1BQU0sR0FBRyxRQUFRLEVBQUUsTUFBTSxHQUFHLGdCQUFnQixDQUFDLE1BQU0sRUFBRSxNQUFNLEVBQUUsRUFBRTtZQUNwRSxLQUFLLElBQUksZ0JBQWdCLENBQUMsTUFBTSxDQUFDLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQztZQUMvQyxJQUFJLElBQUksUUFBUSxDQUFDO1NBQ3BCO1FBRUQsSUFBSSxLQUFLLEdBQUcsRUFBRSxDQUFDLFNBQVMsRUFBRSxDQUFDLEtBQUs7WUFBRSxNQUFNO1FBRXhDLFFBQVEsRUFBRSxDQUFDO0tBQ2Q7SUFFRCxJQUFJLGNBQWMsR0FBRyxnQkFBZ0IsQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUM7SUFFdEQseUVBQXlFO0lBQ3pFLElBQUksVUFBVSxHQUFHLEtBQUssQ0FBQztJQUN2QixLQUFLLE1BQU0sR0FBRyxJQUFJLGNBQWMsRUFBRTtRQUM5QixNQUFNLE9BQU8sR0FBRyxHQUFHLENBQUMsR0FBRyxDQUFDO1FBQ3hCLElBQUksT0FBTyxLQUFLLEVBQUU7WUFBRSxTQUFTO1FBQzdCLElBQUksRUFBRSxDQUFDLHFCQUFxQixDQUFDLElBQUksQ0FBQyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUM7WUFBRSxTQUFTO1FBRS9ELElBQUksTUFBTSxHQUFHLGNBQWMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLEtBQUssT0FBTyxDQUFDLENBQUM7UUFDNUQsSUFBSSxNQUFNLEtBQUssU0FBUyxFQUFFO1lBQ3RCLGtHQUFrRztZQUNsRyxNQUFNLEdBQUcsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxLQUFLLE9BQU8sQ0FBQyxDQUFDO1lBQzFELElBQUksTUFBTSxLQUFLLFNBQVMsRUFBRTtnQkFDdEIsRUFBRSxDQUFDLE9BQU8sQ0FDTiwrREFBK0Q7b0JBQzNELDhDQUE4QyxDQUNyRCxDQUFDO2dCQUNGLE9BQU87YUFDVjtZQUNELE1BQU0sVUFBVSxHQUFHLGNBQWMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLEtBQUssR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ3hFLGNBQWMsQ0FBQyxNQUFNLENBQUMsVUFBVSxFQUFFLENBQUMsRUFBRSxNQUFNLENBQUMsQ0FBQztZQUM3QyxVQUFVLEdBQUcsSUFBSSxDQUFDO1NBQ3JCO0tBQ0o7SUFFRCxJQUFJLFVBQVUsRUFBRTtRQUNaLFFBQVEsR0FBRyxDQUFDLENBQUM7UUFDYixPQUFPLFFBQVEsR0FBRyxjQUFjLENBQUMsTUFBTSxFQUFFO1lBQ3JDLEtBQUssR0FBRyxDQUFDLENBQUM7WUFDVixJQUFJLEdBQUcsQ0FBQyxDQUFDO1lBQ1QsS0FBSyxJQUFJLE1BQU0sR0FBRyxRQUFRLEVBQUUsTUFBTSxHQUFHLGNBQWMsQ0FBQyxNQUFNLEVBQUUsTUFBTSxFQUFFLEVBQUU7Z0JBQ2xFLEtBQUssSUFBSSxjQUFjLENBQUMsTUFBTSxDQUFDLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQztnQkFDN0MsSUFBSSxJQUFJLFFBQVEsQ0FBQzthQUNwQjtZQUVELElBQUksS0FBSyxHQUFHLEVBQUUsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxLQUFLO2dCQUFFLE1BQU07WUFFeEMsUUFBUSxFQUFFLENBQUM7U0FDZDtRQUVELGNBQWMsR0FBRyxjQUFjLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0tBQ25EO0lBRUQsMENBQTBDO0lBRTFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsOEJBQThCLENBQUMsQ0FBQztJQUUzQyxLQUFLLEdBQUcsQ0FBQyxDQUFDO0lBQ1YsSUFBSSxHQUFHLENBQUMsQ0FBQztJQUNULE1BQU0sVUFBVSxHQUFHLEVBQUUsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxLQUFLLENBQUM7SUFDeEMsS0FBSyxNQUFNLEdBQUcsSUFBSSxjQUFjLEVBQUU7UUFDOUIsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLE9BQU87WUFBRSxFQUFFLENBQUMsb0JBQW9CLENBQUMsR0FBRyxDQUFDLE9BQU8sRUFBRSxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDMUUsRUFBRSxDQUFDLE9BQU8sQ0FBQyxlQUFlLEVBQUUsR0FBRyxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLEdBQUcsSUFBSSxFQUFFLFNBQVMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUN4RixLQUFLLElBQUksR0FBRyxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUM7UUFDMUIsSUFBSSxJQUFJLFFBQVEsQ0FBQztLQUNwQjtJQUVELDhDQUE4QztJQUM5QyxJQUFJLG1CQUFtQixHQUFHLENBQUMsQ0FBQztJQUM1QixPQUFPLG1CQUFtQixHQUFHLGNBQWMsQ0FBQyxNQUFNLEVBQUU7UUFDaEQsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsa0JBQWtCLEVBQUUsQ0FBQyxPQUFPLEtBQUssY0FBYyxDQUFDLG1CQUFtQixDQUFDLEVBQUU7WUFDbEcsbUJBQW1CLEVBQUUsQ0FBQztTQUN6QjthQUFNLElBQUksY0FBYyxDQUFDLG1CQUFtQixDQUFDLEtBQUssY0FBYyxFQUFFO1lBQy9ELG1CQUFtQixFQUFFLENBQUM7U0FDekI7YUFBTSxJQUFHLGNBQWMsQ0FBQyxtQkFBbUIsQ0FBQyxLQUFLLDJCQUEyQixFQUFFO1lBQ3BGLG1CQUFtQixFQUFFLENBQUE7U0FDckI7YUFBTTtZQUNHLE1BQU07U0FDVDtLQUNKO0lBRUQsTUFBTSxzQkFBc0IsR0FDeEIsbUJBQW1CLElBQUksY0FBYyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxjQUFjLENBQUMsbUJBQW1CLENBQUMsQ0FBQztJQUM1RixNQUFNLGFBQWEsR0FDZixzQkFBc0IsS0FBSyxFQUFFO1FBQ3pCLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxzQkFBc0IsS0FBSyxzQkFBc0IsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLFNBQVMsRUFBRSxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3JHLEVBQUUsQ0FBQyxhQUFhLENBQUMsc0JBQXNCLENBQUM7UUFDMUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNaLElBQUksT0FBTyxHQUFHLEVBQUUsQ0FBQyxvQkFBb0IsQ0FBQyxvQkFBb0IsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDakcsSUFBSSxRQUFRLEdBQUcsRUFBRSxDQUFDLHFCQUFxQixDQUFDLG9CQUFvQixDQUFDLENBQUM7SUFDOUQsSUFBSSxPQUFPLEdBQUcsQ0FBQyxDQUFDO0lBQ2hCLElBQUksVUFBVSxHQUFHLEtBQUssQ0FBQztJQUN2QixPQUFPLElBQUksRUFBRTtRQUNULElBQUksS0FBSyxHQUFHLE9BQU8sR0FBRyxVQUFVLElBQUksUUFBUSxJQUFJLGFBQWEsRUFBRTtZQUMzRCxJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksT0FBTyxFQUFFO2dCQUN2QixNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsb0JBQW9CLENBQUMsc0JBQXNCLEVBQUUsb0JBQW9CLENBQUMsQ0FBQztnQkFDckYsSUFBSSxDQUFDLE1BQU0sRUFBRTtvQkFDVCxFQUFFLENBQUMsT0FBTyxDQUFDLHlDQUF5QyxDQUFDLENBQUM7b0JBQ3RELFVBQVUsR0FBRyxJQUFJLENBQUM7aUJBQ3JCO2FBQ0o7WUFDRCxFQUFFLENBQUMsT0FBTyxDQUNOLGVBQWUsRUFDZixzQkFBc0IsR0FBRyxPQUFPLENBQUMsUUFBUSxFQUFFLEVBQzNDLEVBQUUsQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFLFNBQVMsQ0FBQyxFQUM5QixFQUFFLENBQUMsT0FBTyxDQUFDLFFBQVEsRUFBRSxRQUFRLENBQUMsQ0FDakMsQ0FBQztZQUNGLE9BQU8sRUFBRSxDQUFDO1lBQ1YsS0FBSyxJQUFJLE9BQU8sQ0FBQztZQUNqQixPQUFPLEdBQUcsT0FBTyxHQUFHLElBQUksR0FBRyxRQUFRLENBQUM7WUFDcEMsUUFBUSxJQUFJLElBQUksQ0FBQztTQUNwQjthQUFNO1lBQ0gsRUFBRSxDQUFDLE9BQU8sQ0FDTixnQkFBZ0IsRUFDaEIsdUJBQXVCLEdBQUcsT0FBTyxDQUFDLFFBQVEsRUFBRSxFQUM1QyxFQUFFLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRSxTQUFTLENBQUMsRUFDOUIsRUFBRSxDQUFDLE9BQU8sQ0FBQyxRQUFRLEVBQUUsUUFBUSxDQUFDLENBQ2pDLENBQUM7WUFDRixNQUFNO1NBQ1Q7S0FDSjtJQUVELE1BQU0sVUFBVSxHQUFHLG1CQUFtQixDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksS0FBSyxjQUFjLENBQUMsQ0FBQztJQUM5RSxJQUFJLENBQUMsVUFBVSxJQUFJLFVBQVUsRUFBRTtRQUMzQixJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksT0FBTztZQUFFLEVBQUUsQ0FBQyxvQkFBb0IsQ0FBQyxVQUFVLENBQUMsT0FBTyxFQUFFLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUN4RixFQUFFLENBQUMsT0FBTyxDQUFDLGVBQWUsRUFBRSxjQUFjLEVBQUUsRUFBRSxDQUFDLE9BQU8sQ0FBQyxDQUFDLEVBQUUsU0FBUyxDQUFDLEVBQUUsRUFBRSxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsR0FBRyxFQUFFLFFBQVEsQ0FBQyxDQUFDLENBQUM7S0FDL0c7SUFFRCxFQUFFLENBQUMsT0FBTyxDQUFDLG1CQUFtQixFQUFFLE9BQU8sRUFBRSxFQUFFLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxTQUFTLENBQUMsRUFBRSxFQUFFLENBQUMsT0FBTyxDQUFDLEtBQUssR0FBRyxPQUFPLEVBQUUsU0FBUyxDQUFDLENBQUMsQ0FBQztBQUNuSCxDQUFDIn0=\",\"filename\":\"mcp.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/util.js\",\"url\":\"blob:file:///bae50cce-6f03-408c-aaa5-2895185af792\",\"moduleSequenceNumber\":90050},{\"filename\":\"/lib/augmentation/augmentation.js\",\"url\":\"blob:file:///e09b940c-7728-4908-a6af-0c9a2b093c78\",\"moduleSequenceNumber\":83053},{\"filename\":\"/lib/util.js\",\"url\":\"blob:file:///3b44c7a9-2ef6-439a-9ca9-babcb187e260\",\"moduleSequenceNumber\":90050},{\"filename\":\"mcp.js\",\"url\":\"blob:file:///eb52cd8a-8b42-4e34-9495-732d8b06b034\",\"moduleSequenceNumber\":99156}],\"dependents\":[],\"ramUsage\":54.9,\"server\":\"home\",\"moduleSequenceNumber\":99156,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"checkFactionInvitations\",\"cost\":3},{\"type\":\"fn\",\"name\":\"getFactionRep\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getAugmentationsFromFaction\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getOwnedSourceFiles\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getOwnedAugmentations\",\"cost\":5},{\"type\":\"fn\",\"name\":\"purchaseAugmentation\",\"cost\":5},{\"type\":\"fn\",\"name\":\"gang.inGang\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.getGangInformation\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getAugmentationPrice\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"getAugmentationRepReq\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"getAugmentationStats\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getAugmentationPrereq\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"connect\",\"cost\":2},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"purchaseTor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"purchaseProgram\",\"cost\":2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const processInfoArr = ns\\r\\n        .ps()\\r\\n        .filter((a) => a.filename.indexOf(\\\"/lib\\\") === -1 && a.filename.indexOf(\\\"ps.js\\\") === -1);\\r\\n    let maxScriptFileLength = 0;\\r\\n    processInfoArr.map(function (pi) {\\r\\n        const len = pi.filename.length - 2;\\r\\n        if (len > maxScriptFileLength)\\r\\n            maxScriptFileLength = len;\\r\\n    });\\r\\n    for (const pi of processInfoArr) {\\r\\n        const info = ns.getRunningScript(pi.pid);\\r\\n        let incomeStr = \\\"\\\";\\r\\n        if (info.onlineMoneyMade > 0)\\r\\n            incomeStr = ns.sprintf(\\\" %9s/s\\\", ns.nFormat(info.onlineMoneyMade / info.onlineRunningTime, \\\"$0.000a\\\"));\\r\\n        if ((info.filename === \\\"gang.js\\\" || info.filename === \\\"hacking_gang.js\\\") && ns.gang.inGang()) {\\r\\n            // let gangIncome = 0;\\r\\n            // let gangRep = 0;\\r\\n            // const members = ns.gang.getMemberNames().map((name) => ns.gang.getMemberInformation(name));\\r\\n            // for (const member of members) {\\r\\n            //     gangIncome += member.moneyGain;\\r\\n            //     gangRep += member.respectGain;\\r\\n            // }\\r\\n            incomeStr = ns.sprintf(\\\" %9s/s %8s Respect/s\\\", ns.nFormat(ns.gang.getGangInformation().moneyGainRate, \\\"$0.000a\\\"), ns.nFormat(ns.gang.getGangInformation().respectGainRate, \\\"0.000a\\\"));\\r\\n        }\\r\\n        if (info.args.length > 0) {\\r\\n            incomeStr += ns.sprintf(\\\" %s\\\", info.args);\\r\\n        }\\r\\n        ns.tprintf(`  %6d %-${maxScriptFileLength}s %7.2fGB%s`, pi.pid, pi.filename.slice(0, pi.filename.length - 3), info.ramUsage, incomeStr);\\r\\n    }\\r\\n    if (processInfoArr.length > 0) {\\r\\n        const maxRam = ns.getServerMaxRam(ns.getHostname());\\r\\n        const usedRam = ns.getServerUsedRam(ns.getHostname());\\r\\n        ns.tprintf(`\\\\n         %-${maxScriptFileLength}s %7.2fGB / %7.2fGB (%.2fGB Available)`, \\\"Total\\\", usedRam, maxRam, maxRam - usedRam);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(`  %s RAM Available: %dGB`, ns.getHostname(), ns.getServerMaxRam(ns.getHostname()));\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHMuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJwcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE1BQU0sY0FBYyxHQUFHLEVBQUU7U0FDcEIsRUFBRSxFQUFFO1NBQ0osTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRTVGLElBQUksbUJBQW1CLEdBQUcsQ0FBQyxDQUFDO0lBQzVCLGNBQWMsQ0FBQyxHQUFHLENBQUMsVUFBVSxFQUFFO1FBQzNCLE1BQU0sR0FBRyxHQUFHLEVBQUUsQ0FBQyxRQUFRLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQztRQUNuQyxJQUFJLEdBQUcsR0FBRyxtQkFBbUI7WUFBRSxtQkFBbUIsR0FBRyxHQUFHLENBQUM7SUFDN0QsQ0FBQyxDQUFDLENBQUM7SUFFSCxLQUFLLE1BQU0sRUFBRSxJQUFJLGNBQWMsRUFBRTtRQUM3QixNQUFNLElBQUksR0FBRyxFQUFFLENBQUMsZ0JBQWdCLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ3pDLElBQUksU0FBUyxHQUFHLEVBQUUsQ0FBQztRQUVuQixJQUFJLElBQUksQ0FBQyxlQUFlLEdBQUcsQ0FBQztZQUN4QixTQUFTLEdBQUcsRUFBRSxDQUFDLE9BQU8sQ0FBQyxRQUFRLEVBQUUsRUFBRSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsZUFBZSxHQUFHLElBQUksQ0FBQyxpQkFBaUIsRUFBRSxTQUFTLENBQUMsQ0FBQyxDQUFDO1FBRTNHLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxLQUFLLFNBQVMsSUFBSSxJQUFJLENBQUMsUUFBUSxLQUFLLGlCQUFpQixDQUFDLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRTtZQUMxRixzQkFBc0I7WUFDdEIsbUJBQW1CO1lBQ25CLDhGQUE4RjtZQUM5RixrQ0FBa0M7WUFDbEMsc0NBQXNDO1lBQ3RDLHFDQUFxQztZQUNyQyxJQUFJO1lBRUosU0FBUyxHQUFHLEVBQUUsQ0FBQyxPQUFPLENBQ2xCLHNCQUFzQixFQUN0QixFQUFFLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsa0JBQWtCLEVBQUUsQ0FBQyxhQUFhLEVBQUUsU0FBUyxDQUFDLEVBQ2pFLEVBQUUsQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxrQkFBa0IsRUFBRSxDQUFDLGVBQWUsRUFBRSxRQUFRLENBQUMsQ0FDckUsQ0FBQztTQUNMO1FBRUQsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7WUFDdEIsU0FBUyxJQUFJLEVBQUUsQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtTQUM1QztRQUVELEVBQUUsQ0FBQyxPQUFPLENBQ04sV0FBVyxtQkFBbUIsYUFBYSxFQUMzQyxFQUFFLENBQUMsR0FBRyxFQUNOLEVBQUUsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsUUFBUSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsRUFDNUMsSUFBSSxDQUFDLFFBQVEsRUFDYixTQUFTLENBQ1osQ0FBQztLQUNMO0lBRUQsSUFBSSxjQUFjLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtRQUMzQixNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsZUFBZSxDQUFDLEVBQUUsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDO1FBQ3BELE1BQU0sT0FBTyxHQUFHLEVBQUUsQ0FBQyxnQkFBZ0IsQ0FBQyxFQUFFLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQztRQUV0RCxFQUFFLENBQUMsT0FBTyxDQUNOLGdCQUFnQixtQkFBbUIsd0NBQXdDLEVBQzNFLE9BQU8sRUFDUCxPQUFPLEVBQ1AsTUFBTSxFQUNOLE1BQU0sR0FBRyxPQUFPLENBQ25CLENBQUM7S0FDTDtTQUFNO1FBQ0gsRUFBRSxDQUFDLE9BQU8sQ0FBQywwQkFBMEIsRUFBRSxFQUFFLENBQUMsV0FBVyxFQUFFLEVBQUUsRUFBRSxDQUFDLGVBQWUsQ0FBQyxFQUFFLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQyxDQUFDO0tBQ2xHO0FBQ0wsQ0FBQyJ9\",\"filename\":\"ps.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"ps.js\",\"url\":\"blob:file:///8db1ba54-ee4f-4f38-9eb3-62d24bf93f1e\",\"moduleSequenceNumber\":3777}],\"dependents\":[],\"ramUsage\":5.25,\"server\":\"home\",\"moduleSequenceNumber\":83084,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"gang.inGang\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.getGangInformation\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.installAugmentations();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVzZXQuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJyZXNldC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLEVBQUUsQ0FBQyxvQkFBb0IsRUFBRSxDQUFDO0FBQzlCLENBQUMifQ==\",\"filename\":\"reset.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"reset.js\",\"url\":\"blob:file:///bb0fa494-b610-4c8a-8625-45bae954c209\",\"moduleSequenceNumber\":83049}],\"dependents\":[],\"ramUsage\":6.6,\"server\":\"home\",\"moduleSequenceNumber\":83085,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"installAugmentations\",\"cost\":5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function help(ns) {\\r\\n    ns.tprintf(\\\"Sleeve Modes:\\\");\\r\\n    ns.tprintf(\\\"  h     : show help text\\\");\\r\\n    ns.tprintf(\\\"  all   : all stats\\\");\\r\\n    ns.tprintf(\\\"  hack  : all hack\\\");\\r\\n    ns.tprintf(\\\"  str   : all str\\\");\\r\\n    ns.tprintf(\\\"  def   : all def\\\");\\r\\n    ns.tprintf(\\\"  dex   : all dex\\\");\\r\\n    ns.tprintf(\\\"  agi   : all agi\\\");\\r\\n    ns.tprintf(\\\"  cha   : all cha\\\");\\r\\n    ns.tprintf(\\\"  mug   : all mug\\\");\\r\\n    ns.tprintf(\\\"  hom   : all homicide\\\");\\r\\n    ns.tprintf(\\\"  shock : all shock recovery\\\");\\r\\n}\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[0] === \\\"h\\\" || ns.args[0] === undefined) {\\r\\n        help(ns);\\r\\n        return;\\r\\n    }\\r\\n    switch (ns.args[0]) {\\r\\n        case \\\"all\\\":\\r\\n            ns.sleeve.travel(0, \\\"Sector-12\\\");\\r\\n            ns.sleeve.setToGymWorkout(0, \\\"Powerhouse Gym\\\", \\\"str\\\");\\r\\n            ns.sleeve.travel(1, \\\"Sector-12\\\");\\r\\n            ns.sleeve.setToGymWorkout(1, \\\"Powerhouse Gym\\\", \\\"def\\\");\\r\\n            ns.sleeve.travel(2, \\\"Sector-12\\\");\\r\\n            ns.sleeve.setToGymWorkout(2, \\\"Powerhouse Gym\\\", \\\"dex\\\");\\r\\n            ns.sleeve.travel(3, \\\"Sector-12\\\");\\r\\n            ns.sleeve.setToGymWorkout(3, \\\"Powerhouse Gym\\\", \\\"agi\\\");\\r\\n            ns.sleeve.travel(4, \\\"Volhaven\\\");\\r\\n            ns.sleeve.setToUniversityCourse(4, \\\"ZB Institute of Technology\\\", \\\"Algorithms\\\");\\r\\n            ns.sleeve.travel(5, \\\"Volhaven\\\");\\r\\n            ns.sleeve.setToUniversityCourse(5, \\\"ZB Institute of Technology\\\", \\\"Leadership\\\");\\r\\n            break;\\r\\n        case \\\"hack\\\":\\r\\n            for (let i = 0; i < ns.sleeve.getNumSleeves(); i++) {\\r\\n                ns.sleeve.travel(i, \\\"Volhaven\\\");\\r\\n                ns.sleeve.setToUniversityCourse(i, \\\"ZB Institute of Technology\\\", \\\"Algorithms\\\");\\r\\n            }\\r\\n            break;\\r\\n        case \\\"cha\\\":\\r\\n            for (let i = 0; i < ns.sleeve.getNumSleeves(); i++) {\\r\\n                ns.sleeve.travel(i, \\\"Volhaven\\\");\\r\\n                ns.sleeve.setToUniversityCourse(i, \\\"ZB Institute of Technology\\\", \\\"Leadership\\\");\\r\\n            }\\r\\n            break;\\r\\n        case \\\"str\\\":\\r\\n        case \\\"def\\\":\\r\\n        case \\\"dex\\\":\\r\\n        case \\\"agi\\\":\\r\\n            for (let i = 0; i < ns.sleeve.getNumSleeves(); i++) {\\r\\n                ns.sleeve.travel(i, \\\"Sector-12\\\");\\r\\n                ns.sleeve.setToGymWorkout(i, \\\"Powerhouse Gym\\\", ns.args[0]);\\r\\n            }\\r\\n            break;\\r\\n        case \\\"mug\\\":\\r\\n            for (let i = 0; i < ns.sleeve.getNumSleeves(); i++) {\\r\\n                ns.sleeve.setToCommitCrime(i, \\\"Mug\\\");\\r\\n            }\\r\\n            break;\\r\\n        case \\\"hom\\\":\\r\\n            for (let i = 0; i < ns.sleeve.getNumSleeves(); i++) {\\r\\n                ns.sleeve.setToCommitCrime(i, \\\"Homicide\\\");\\r\\n            }\\r\\n            break;\\r\\n        case \\\"shock\\\":\\r\\n            for (let i = 0; i < ns.sleeve.getNumSleeves(); i++) {\\r\\n                ns.sleeve.setToShockRecovery(i);\\r\\n            }\\r\\n            break;\\r\\n        default:\\r\\n            ns.tprintf(`ERROR: Unknown sleeve mode: ${ns.args[0]}`);\\r\\n            help(ns);\\r\\n            break;\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2xlZXZlLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsic2xlZXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLFNBQVMsSUFBSSxDQUFDLEVBQU07SUFDaEIsRUFBRSxDQUFDLE9BQU8sQ0FBQyxlQUFlLENBQUMsQ0FBQztJQUM1QixFQUFFLENBQUMsT0FBTyxDQUFDLDBCQUEwQixDQUFDLENBQUM7SUFDdkMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDO0lBQ2xDLEVBQUUsQ0FBQyxPQUFPLENBQUMsb0JBQW9CLENBQUMsQ0FBQztJQUNqQyxFQUFFLENBQUMsT0FBTyxDQUFDLG1CQUFtQixDQUFDLENBQUM7SUFDaEMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO0lBQ2hDLEVBQUUsQ0FBQyxPQUFPLENBQUMsbUJBQW1CLENBQUMsQ0FBQztJQUNoQyxFQUFFLENBQUMsT0FBTyxDQUFDLG1CQUFtQixDQUFDLENBQUM7SUFDaEMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO0lBQ2hDLEVBQUUsQ0FBQyxPQUFPLENBQUMsbUJBQW1CLENBQUMsQ0FBQztJQUNoQyxFQUFFLENBQUMsT0FBTyxDQUFDLHdCQUF3QixDQUFDLENBQUM7SUFDckMsRUFBRSxDQUFDLE9BQU8sQ0FBQyw4QkFBOEIsQ0FBQyxDQUFDO0FBQy9DLENBQUM7QUFFRCxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFPO0lBQzlCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxHQUFHLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxTQUFTLEVBQUU7UUFDaEQsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ1QsT0FBTztLQUNWO0lBRUQsUUFBUSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FB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\",\"filename\":\"sleeve.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"sleeve.js\",\"url\":\"blob:file:///7c26996f-af1b-43f0-9150-75ba0026ce98\",\"moduleSequenceNumber\":83489}],\"dependents\":[],\"ramUsage\":25.6,\"server\":\"home\",\"moduleSequenceNumber\":83489,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"sleeve.travel\",\"cost\":4},{\"type\":\"fn\",\"name\":\"sleeve.setToGymWorkout\",\"cost\":4},{\"type\":\"fn\",\"name\":\"sleeve.setToUniversityCourse\",\"cost\":4},{\"type\":\"fn\",\"name\":\"sleeve.getNumSleeves\",\"cost\":4},{\"type\":\"fn\",\"name\":\"sleeve.setToCommitCrime\",\"cost\":4},{\"type\":\"fn\",\"name\":\"sleeve.setToShockRecovery\",\"cost\":4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { allHosts, serverIsHackable, canExecuteOnServer, cleanLogs, doBuyAndSoftenAll } from \\\"lib/util\\\";\\r\\nimport { SmartHackEnv } from \\\"lib/hack/smart_hack_env\\\";\\r\\nasync function calcIncome(ns, target, hosts, simMinutes = 2) {\\r\\n    return await new SmartHackEnv(ns, target, hosts).fastSim(ns, 1000 * 60 * simMinutes);\\r\\n}\\r\\nexport async function main(ns) {\\r\\n    cleanLogs(ns);\\r\\n    doBuyAndSoftenAll(ns);\\r\\n    const allHostnames = allHosts(ns);\\r\\n    const executableHosts = allHostnames\\r\\n        .filter(canExecuteOnServer.bind(null, ns))\\r\\n        .filter((x) => x.indexOf(\\\"hacknet-node\\\") === -1);\\r\\n    const targetArr = allHostnames.filter(serverIsHackable.bind(null, ns)).filter((x) => ns.getServerMaxMoney(x) > 1);\\r\\n    let orderedTargetArr = [];\\r\\n    for (const target of targetArr) {\\r\\n        let minutes = 2;\\r\\n        if (ns.args[0] && !isNaN(Number(ns.args[0])))\\r\\n            minutes = Number(ns.args[0]);\\r\\n        const income = await calcIncome(ns, target, executableHosts, minutes);\\r\\n        orderedTargetArr.push({ target: target, income: income });\\r\\n    }\\r\\n    orderedTargetArr = orderedTargetArr.sort((a, b) => b.income - a.income);\\r\\n    for (const ti of orderedTargetArr) {\\r\\n        ns.tprintf(\\\"%15s: %s/s\\\", ti.target, ns.nFormat(ti.income, \\\"($0.000a)\\\"));\\r\\n    }\\r\\n    if (ns.args[1] === \\\"check\\\") {\\r\\n        return;\\r\\n    }\\r\\n    const env = new SmartHackEnv(ns, orderedTargetArr[0].target, executableHosts);\\r\\n    // const env = new SmartHackEnv(ns, orderedTargetArr[0].target, [\\\"pserv-3\\\"]);\\r\\n    // const env = new SmartHackEnv(ns, orderedTargetArr[1].target, [\\\"pserv-4\\\"]);\\r\\n    // const env = new SmartHackEnv(ns, orderedTargetArr[2].target, [\\\"pserv-5\\\"]);\\r\\n    // const env = new SmartHackEnv(ns, orderedTargetArr[3].target, [\\\"pserv-6\\\"]);\\r\\n    // const env = new SmartHackEnv(ns, orderedTargetArr[4].target, [\\\"pserv-7\\\"]);\\r\\n    // const env = new SmartHackEnv(ns, orderedTargetArr[5].target, [\\\"pserv-8\\\"]);\\r\\n    // const env = new SmartHackEnv(ns, orderedTargetArr[6].target, [\\\"pserv-9\\\"]);\\r\\n    await env.init(ns, true);\\r\\n    while (await env.refresh(ns))\\r\\n        ;\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic21hcnRfaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbInNtYXJ0X2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLFFBQVEsRUFBRSxnQkFBZ0IsRUFBRSxrQkFBa0IsRUFBRSxTQUFTLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFDeEcsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBRXZELEtBQUssVUFBVSxVQUFVLENBQUMsRUFBTSxFQUFFLE1BQWMsRUFBRSxLQUFlLEVBQUUsVUFBVSxHQUFHLENBQUM7SUFDN0UsT0FBTyxNQUFNLElBQUksWUFBWSxDQUFDLEVBQUUsRUFBRSxNQUFNLEVBQUUsS0FBSyxDQUFDLENBQUMsT0FBTyxDQUFDLEVBQUUsRUFBRSxJQUFJLEdBQUcsRUFBRSxHQUFHLFVBQVUsQ0FBQyxDQUFDO0FBQ3pGLENBQUM7QUFPRCxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLFNBQVMsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUNkLGlCQUFpQixDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBRXRCLE1BQU0sWUFBWSxHQUFHLFFBQVEsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUNsQyxNQUFNLGVBQWUsR0FBRyxZQUFZO1NBQy9CLE1BQU0sQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1NBQ3pDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxjQUFjLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3JELE1BQU0sU0FBUyxHQUFHLFlBQVksQ0FBQyxNQUFNLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLGlCQUFpQixDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBRWxILElBQUksZ0JBQWdCLEdBQW1CLEVBQUUsQ0FBQztJQUMxQyxLQUFLLE1BQU0sTUFBTSxJQUFJLFNBQVMsRUFBRTtRQUM1QixJQUFJLE9BQU8sR0FBRyxDQUFDLENBQUM7UUFDaEIsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFBRSxPQUFPLEdBQUcsTUFBTSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUUzRSxNQUFNLE1BQU0sR0FBRyxNQUFNLFVBQVUsQ0FBQyxFQUFFLEVBQUUsTUFBTSxFQUFFLGVBQWUsRUFBRSxPQUFPLENBQUMsQ0FBQztRQUN0RSxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsQ0FBQyxDQUFDO0tBQzdEO0lBRUQsZ0JBQWdCLEdBQUcsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUM7SUFFeEUsS0FBSyxNQUFNLEVBQUUsSUFBSSxnQkFBZ0IsRUFBRTtRQUMvQixFQUFFLENBQUMsT0FBTyxDQUFDLFlBQVksRUFBRSxFQUFFLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxXQUFXLENBQUMsQ0FBQyxDQUFDO0tBQzNFO0lBRUQsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLE9BQU8sRUFBRTtRQUN4QixPQUFPO0tBQ1Y7SUFFRCxNQUFNLEdBQUcsR0FBRyxJQUFJLFlBQVksQ0FBQyxFQUFFLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxFQUFFLGVBQWUsQ0FBQyxDQUFDO0lBQzlFLDZFQUE2RTtJQUM3RSw2RUFBNkU7SUFDN0UsNkVBQTZFO0lBQzdFLDZFQUE2RTtJQUM3RSw2RUFBNkU7SUFDN0UsNkVBQTZFO0lBQzdFLDZFQUE2RTtJQUM3RSxNQUFNLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQ3pCLE9BQU8sTUFBTSxHQUFHLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQztRQUFDLENBQUM7QUFDbEMsQ0FBQyJ9\",\"filename\":\"smart_hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/util.js\",\"url\":\"blob:file:///b9c042be-0ccf-4a58-b1bf-8529d3ef2e4e\",\"moduleSequenceNumber\":90050},{\"filename\":\"/lib/hack/host.js\",\"url\":\"blob:file:///82ac42f0-7ba9-4ba3-9e48-0d865e760903\",\"moduleSequenceNumber\":92586},{\"filename\":\"/lib/hack/cycle_production.js\",\"url\":\"blob:file:///c8bb523b-45d3-42e1-8009-26d02c2cf9cc\",\"moduleSequenceNumber\":92582},{\"filename\":\"/lib/util.js\",\"url\":\"blob:file:///bf695cd9-ceb9-47e6-9d25-260c02221061\",\"moduleSequenceNumber\":90050},{\"filename\":\"/lib/hack/smart_hack_env.js\",\"url\":\"blob:file:///d31c5a66-1956-4356-b92d-3a35e9f123f3\",\"moduleSequenceNumber\":93167},{\"filename\":\"/lib/util.js\",\"url\":\"blob:file:///208f1dd2-6e8b-4132-a8d2-6d3096b7a9a2\",\"moduleSequenceNumber\":90050},{\"filename\":\"smart_hack.js\",\"url\":\"blob:file:///c2e91176-b2c0-4617-aa44-e62774c1388f\",\"moduleSequenceNumber\":93169}],\"dependents\":[],\"ramUsage\":21.15,\"server\":\"home\",\"moduleSequenceNumber\":93169,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getBitNodeMultipliers\",\"cost\":4},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getScriptIncome\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"purchaseTor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"purchaseProgram\",\"cost\":2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function isHackUseful(stats) {\\r\\n    return true;\\r\\n    if (stats.company_rep_mult)\\r\\n        return true;\\r\\n    if (stats.faction_rep_mult)\\r\\n        return true;\\r\\n    if (stats.hacking_chance_mult)\\r\\n        return true;\\r\\n    if (stats.hacking_exp_mult)\\r\\n        return true;\\r\\n    if (stats.hacking_grow_mult)\\r\\n        return true;\\r\\n    if (stats.hacking_money_mult)\\r\\n        return true;\\r\\n    if (stats.hacking_mult)\\r\\n        return true;\\r\\n    if (stats.hacking_speed_mult)\\r\\n        return true;\\r\\n    if (stats.crime_money_mult)\\r\\n        return true;\\r\\n    return false;\\r\\n}\\r\\nexport async function main(ns) {\\r\\n    let purchaseableAugs = [];\\r\\n    for (let sleeveId = 0; sleeveId < ns.sleeve.getNumSleeves(); sleeveId++) {\\r\\n        for (const aug of ns.sleeve.getSleevePurchasableAugs(sleeveId)) {\\r\\n            const stats = ns.getAugmentationStats(aug.name);\\r\\n            if (isHackUseful(stats)) {\\r\\n                purchaseableAugs.push({\\r\\n                    sleeveId: sleeveId,\\r\\n                    cost: aug.cost,\\r\\n                    name: aug.name,\\r\\n                    stats: stats,\\r\\n                });\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n    purchaseableAugs = purchaseableAugs.sort((a, b) => a.cost - b.cost);\\r\\n    for (const aug of purchaseableAugs) {\\r\\n        // ns.tprintf(\\\"%d - %s [%s]\\\", aug.sleeveId, aug.name, ns.nFormat(aug.cost, \\\"$0.000a\\\"))\\r\\n        if (aug.cost > ns.getPlayer().money)\\r\\n            break;\\r\\n        ns.sleeve.purchaseSleeveAug(aug.sleeveId, aug.name);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2xlZXZlX2F1Zy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbInNsZWV2ZV9hdWcudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsU0FBUyxZQUFZLENBQUMsS0FBd0I7SUFDMUMsT0FBTyxJQUFJLENBQUM7SUFDWixJQUFJLEtBQUssQ0FBQyxnQkFBZ0I7UUFBRSxPQUFPLElBQUksQ0FBQztJQUN4QyxJQUFJLEtBQUssQ0FBQyxnQkFBZ0I7UUFBRSxPQUFPLElBQUksQ0FBQztJQUN4QyxJQUFJLEtBQUssQ0FBQyxtQkFBbUI7UUFBRSxPQUFPLElBQUksQ0FBQztJQUMzQyxJQUFJLEtBQUssQ0FBQyxnQkFBZ0I7UUFBRSxPQUFPLElBQUksQ0FBQztJQUN4QyxJQUFJLEtBQUssQ0FBQyxpQkFBaUI7UUFBRSxPQUFPLElBQUksQ0FBQztJQUN6QyxJQUFJLEtBQUssQ0FBQyxrQkFBa0I7UUFBRSxPQUFPLElBQUksQ0FBQztJQUMxQyxJQUFJLEtBQUssQ0FBQyxZQUFZO1FBQUUsT0FBTyxJQUFJLENBQUM7SUFDcEMsSUFBSSxLQUFLLENBQUMsa0JBQWtCO1FBQUUsT0FBTyxJQUFJLENBQUM7SUFDN0MsSUFBSSxLQUFLLENBQUMsZ0JBQWdCO1FBQUUsT0FBTyxJQUFJLENBQUM7SUFFckMsT0FBTyxLQUFLLENBQUM7QUFDakIsQ0FBQztBQUVELE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsSUFBSSxnQkFBZ0IsR0FLZCxFQUFFLENBQUM7SUFDVCxLQUFLLElBQUksUUFBUSxHQUFHLENBQUMsRUFBRSxRQUFRLEdBQUcsRUFBRSxDQUFDLE1BQU0sQ0FBQyxhQUFhLEVBQUUsRUFBRSxRQUFRLEVBQUUsRUFBRTtRQUNyRSxLQUFLLE1BQU0sR0FBRyxJQUFJLEVBQUUsQ0FBQyxNQUFNLENBQUMsd0JBQXdCLENBQUMsUUFBUSxDQUFDLEVBQUU7WUFDNUQsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLG9CQUFvQixDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUNoRCxJQUFJLFlBQVksQ0FBQyxLQUFLLENBQUMsRUFBRTtnQkFDckIsZ0JBQWdCLENBQUMsSUFBSSxDQUFDO29CQUNsQixRQUFRLEVBQUUsUUFBUTtvQkFDbEIsSUFBSSxFQUFFLEdBQUcsQ0FBQyxJQUFJO29CQUNkLElBQUksRUFBRSxHQUFHLENBQUMsSUFBSTtvQkFDZCxLQUFLLEVBQUUsS0FBSztpQkFDZixDQUFDLENBQUM7YUFDTjtTQUNKO0tBQ0o7SUFFSixnQkFBZ0IsR0FBRyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQTtJQUVuRSxLQUFLLE1BQU0sR0FBRyxJQUFJLGdCQUFnQixFQUFFO1FBQ25DLHNGQUFzRjtRQUN0RixJQUFJLEdBQUcsQ0FBQyxJQUFJLEdBQUcsRUFBRSxDQUFDLFNBQVMsRUFBRSxDQUFDLEtBQUs7WUFDbEMsTUFBTTtRQUNQLEVBQUUsQ0FBQyxNQUFNLENBQUMsaUJBQWlCLENBQUMsR0FBRyxDQUFDLFFBQVEsRUFBRSxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7S0FDcEQ7QUFDRixDQUFDIn0=\",\"filename\":\"sleeve_aug.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"sleeve_aug.js\",\"url\":\"blob:file:///b80c1a6e-7d21-4aee-af24-fd468c028a22\",\"moduleSequenceNumber\":286640}],\"dependents\":[],\"ramUsage\":19.1,\"server\":\"home\",\"moduleSequenceNumber\":83088,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"sleeve.getNumSleeves\",\"cost\":4},{\"type\":\"fn\",\"name\":\"sleeve.getSleevePurchasableAugs\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getAugmentationStats\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"sleeve.purchaseSleeveAug\",\"cost\":4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { allHosts, doBackdoors, softenServer } from \\\"lib/util\\\";\\r\\nexport async function main(ns) {\\r\\n    for (const hostName of allHosts(ns)) {\\r\\n        softenServer(ns, hostName);\\r\\n    }\\r\\n    await doBackdoors(ns);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic29mdGVuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsic29mdGVuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxRQUFRLEVBQUUsV0FBVyxFQUFFLFlBQVksRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUUvRCxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFPO0lBQzlCLEtBQUssTUFBTSxRQUFRLElBQUksUUFBUSxDQUFDLEVBQUUsQ0FBQyxFQUFFO1FBQ2pDLFlBQVksQ0FBQyxFQUFFLEVBQUUsUUFBUSxDQUFDLENBQUM7S0FDOUI7SUFFRCxNQUFNLFdBQVcsQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUMxQixDQUFDIn0=\",\"filename\":\"soften.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.4,\"server\":\"home\",\"moduleSequenceNumber\":83089,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"connect\",\"cost\":2},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function findProp(propName) {\\r\\n    for (const div of eval(\\\"document\\\").querySelectorAll(\\\"div\\\")) {\\r\\n        const propKey = Object.keys(div)[1];\\r\\n        if (!propKey)\\r\\n            continue;\\r\\n        const props = div[propKey];\\r\\n        if (props.children?.props && props.children.props[propName])\\r\\n            return props.children.props[propName];\\r\\n        if (props.children instanceof Array)\\r\\n            for (const child of props.children)\\r\\n                if (child?.props && child.props[propName])\\r\\n                    return child.props[propName];\\r\\n    }\\r\\n}\\r\\nexport async function main(ns) {\\r\\n    ns.tprintf(\\\"TEST: %s\\\", ns.heart.break());\\r\\n    const playerProp = findProp(\\\"player\\\");\\r\\n    const agDivName = \\\"Tobacco\\\";\\r\\n    if (playerProp?.corporation?.divisions) {\\r\\n        const agDiv = playerProp.corporation.divisions.find((a) => a.type === agDivName);\\r\\n        if (agDiv) {\\r\\n            for (const [city, product] of Object.entries(agDiv.products)) {\\r\\n                if (product)\\r\\n                    product.marketTa2 = false;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdC5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbInRlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsU0FBUyxRQUFRLENBQUMsUUFBZ0I7SUFDOUIsS0FBSyxNQUFNLEdBQUcsSUFBSSxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsZ0JBQWdCLENBQUMsS0FBSyxDQUFDLEVBQUU7UUFDeEQsTUFBTSxPQUFPLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNwQyxJQUFJLENBQUMsT0FBTztZQUFFLFNBQVM7UUFDdkIsTUFBTSxLQUFLLEdBQUcsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQzNCLElBQUksS0FBSyxDQUFDLFFBQVEsRUFBRSxLQUFLLElBQUksS0FBSyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDO1lBQUUsT0FBTyxLQUFLLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUNuRyxJQUFJLEtBQUssQ0FBQyxRQUFRLFlBQVksS0FBSztZQUMvQixLQUFLLE1BQU0sS0FBSyxJQUFJLEtBQUssQ0FBQyxRQUFRO2dCQUFFLElBQUksS0FBSyxFQUFFLEtBQUssSUFBSSxLQUFLLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQztvQkFBRSxPQUFPLEtBQUssQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUM7S0FDbkg7QUFDTCxDQUFDO0FBRUQsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixFQUFFLENBQUMsT0FBTyxDQUFDLFVBQVUsRUFBRSxFQUFFLENBQUMsS0FBSyxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUM7SUFFekMsTUFBTSxVQUFVLEdBQUcsUUFBUSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ3RDLE1BQU0sU0FBUyxHQUFHLFNBQVMsQ0FBQztJQUU1QixJQUFJLFVBQVUsRUFBRSxXQUFXLEVBQUUsU0FBUyxFQUFFO1FBQ3BDLE1BQU0sS0FBSyxHQUFhLFVBQVUsQ0FBQyxXQUFXLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQW1CLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLEtBQUssU0FBUyxDQUFDLENBQUM7UUFFN0csSUFBSSxLQUFLLEVBQUU7WUFDUCxLQUFLLE1BQU0sQ0FBQyxJQUFJLEVBQUUsT0FBTyxDQUFDLElBQUksTUFBTSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7Z0JBQzFELElBQUksT0FBTztvQkFDUCxPQUFPLENBQUMsU0FBUyxHQUFHLEtBQUssQ0FBQzthQUNqQztTQUNKO0tBQ0o7QUFDTCxDQUFDIn0=\",\"filename\":\"test.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"test.js\",\"url\":\"blob:file:///e9f053b6-49c0-4afd-8b83-87ca172ee797\",\"moduleSequenceNumber\":6898}],\"dependents\":[],\"ramUsage\":1024,\"server\":\"home\",\"moduleSequenceNumber\":83090,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"ns\",\"name\":\"corporation\",\"cost\":1022.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\nexport function autocomplete(data, args) {\\r\\n    return [\\\"hack\\\", \\\"terror\\\", \\\"money\\\", \\\"cha\\\"];\\r\\n}\\r\\nexport async function main(ns) {\\r\\n    const members = ns.gang\\r\\n        .getMemberNames()\\r\\n        .map((name) => ns.gang.getMemberInformation(name))\\r\\n        .sort((a, b) => a.hack - b.hack);\\r\\n    if (ns.args[0] === undefined || ns.args[0] === \\\"hack\\\") {\\r\\n        for (const member of members) {\\r\\n            ns.gang.setMemberTask(member.name, \\\"Train Hacking\\\");\\r\\n        }\\r\\n    }\\r\\n    if (ns.args[0] === \\\"cha\\\") {\\r\\n        for (const member of members) {\\r\\n            ns.gang.setMemberTask(member.name, \\\"Train Charisma\\\");\\r\\n        }\\r\\n    }\\r\\n    if (ns.args[0] === \\\"terror\\\") {\\r\\n        let start = 0;\\r\\n        while (true) {\\r\\n            let wantedLevelGain = 0;\\r\\n            for (let memberIdx = 0; memberIdx < members.length; memberIdx++) {\\r\\n                const member = members[memberIdx];\\r\\n                if (member.hack < 10000) {\\r\\n                    ns.gang.setMemberTask(member.name, \\\"Train Hacking\\\");\\r\\n                }\\r\\n                else if (memberIdx <= start) {\\r\\n                    ns.gang.setMemberTask(member.name, \\\"Ethical Hacking\\\");\\r\\n                }\\r\\n                else {\\r\\n                    ns.gang.setMemberTask(member.name, \\\"Cyberterrorism\\\");\\r\\n                }\\r\\n                wantedLevelGain += ns.gang.getMemberInformation(member.name).wantedLevelGain;\\r\\n            }\\r\\n            if (wantedLevelGain <= 0 || start >= members.length)\\r\\n                break;\\r\\n            start++;\\r\\n        }\\r\\n    }\\r\\n    if (ns.args[0] === \\\"money\\\") {\\r\\n        let start = 0;\\r\\n        while (true) {\\r\\n            let wantedLevelGain = 0;\\r\\n            for (let memberIdx = 0; memberIdx < members.length; memberIdx++) {\\r\\n                const member = members[memberIdx];\\r\\n                if (member.hack < 10000) {\\r\\n                    ns.gang.setMemberTask(member.name, \\\"Train Hacking\\\");\\r\\n                }\\r\\n                else if (memberIdx <= start) {\\r\\n                    ns.gang.setMemberTask(member.name, \\\"Ethical Hacking\\\");\\r\\n                }\\r\\n                else {\\r\\n                    ns.gang.setMemberTask(member.name, \\\"Money Laundering\\\");\\r\\n                }\\r\\n                wantedLevelGain += ns.gang.getMemberInformation(member.name).wantedLevelGain;\\r\\n            }\\r\\n            if (wantedLevelGain <= 0 || start >= members.length)\\r\\n                break;\\r\\n            start++;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2V0X2dhbmcuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJzZXRfZ2FuZy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSw2REFBNkQ7QUFDN0QsTUFBTSxVQUFVLFlBQVksQ0FBQyxJQUFZLEVBQUUsSUFBWTtJQUNuRCxPQUFPLENBQUMsTUFBTSxFQUFFLFFBQVEsRUFBRSxPQUFPLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFDOUMsQ0FBQztBQUVELE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxPQUFPLEdBQUcsRUFBRSxDQUFDLElBQUk7U0FDbEIsY0FBYyxFQUFFO1NBQ2hCLEdBQUcsQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUNqRCxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNyQyxJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssU0FBUyxJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssTUFBTSxFQUFFO1FBQ25ELEtBQUssTUFBTSxNQUFNLElBQUksT0FBTyxFQUFFO1lBQzFCLEVBQUUsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsZUFBZSxDQUFDLENBQUM7U0FDdkQ7S0FDSjtJQUVELElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxLQUFLLEVBQUU7UUFDdEIsS0FBSyxNQUFNLE1BQU0sSUFBSSxPQUFPLEVBQUU7WUFDMUIsRUFBRSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxnQkFBZ0IsQ0FBQyxDQUFDO1NBQ3hEO0tBQ0o7SUFFRCxJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssUUFBUSxFQUFFO1FBQ3pCLElBQUksS0FBSyxHQUFHLENBQUMsQ0FBQztRQUNkLE9BQU8sSUFBSSxFQUFFO1lBQ1QsSUFBSSxlQUFlLEdBQUcsQ0FBQyxDQUFDO1lBQ3hCLEtBQUssSUFBSSxTQUFTLEdBQUcsQ0FBQyxFQUFFLFNBQVMsR0FBRyxPQUFPLENBQUMsTUFBTSxFQUFFLFNBQVMsRUFBRSxFQUFFO2dCQUM3RCxNQUFNLE1BQU0sR0FBRyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUM7Z0JBQ2xDLElBQUksTUFBTSxDQUFDLElBQUksR0FBRyxLQUFLLEVBQUU7b0JBQ3JCLEVBQUUsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsZUFBZSxDQUFDLENBQUM7aUJBQ3ZEO3FCQUFNLElBQUksU0FBUyxJQUFJLEtBQUssRUFBRTtvQkFDM0IsRUFBRSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxpQkFBaUIsQ0FBQyxDQUFDO2lCQUN6RDtxQkFBTTtvQkFDSCxFQUFFLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLGdCQUFnQixDQUFDLENBQUM7aUJBQ3hEO2dCQUVELGVBQWUsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLG9CQUFvQixDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxlQUFlLENBQUE7YUFDL0U7WUFFRCxJQUFJLGVBQWUsSUFBSSxDQUFDLElBQUksS0FBSyxJQUFJLE9BQU8sQ0FBQyxNQUFNO2dCQUFFLE1BQU07WUFFM0QsS0FBSyxFQUFFLENBQUM7U0FDWDtLQUNKO0lBRUQsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLE9BQU8sRUFBRTtRQUN4QixJQUFJLEtBQUssR0FBRyxDQUFDLENBQUM7UUFDZCxPQUFPLElBQUksRUFBRTtZQUNULElBQUksZUFBZSxHQUFHLENBQUMsQ0FBQztZQUN4QixLQUFLLElBQUksU0FBUyxHQUFHLENBQUMsRUFBRSxTQUFTLEdBQUcsT0FBTyxDQUFDLE1BQU0sRUFBRSxTQUFTLEVBQUUsRUFBRTtnQkFDN0QsTUFBTSxNQUFNLEdBQUcsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDO2dCQUNsQyxJQUFJLE1BQU0sQ0FBQyxJQUFJLEdBQUcsS0FBSyxFQUFFO29CQUNyQixFQUFFLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLGVBQWUsQ0FBQyxDQUFDO2lCQUN2RDtxQkFBTSxJQUFJLFNBQVMsSUFBSSxLQUFLLEVBQUU7b0JBQzNCLEVBQUUsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsaUJBQWlCLENBQUMsQ0FBQztpQkFDekQ7cUJBQU07b0JBQ0gsRUFBRSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxrQkFBa0IsQ0FBQyxDQUFDO2lCQUMxRDtnQkFFRCxlQUFlLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsZUFBZSxDQUFBO2FBQy9FO1lBRUQsSUFBSSxlQUFlLElBQUksQ0FBQyxJQUFJLEtBQUssSUFBSSxPQUFPLENBQUMsTUFBTTtnQkFBRSxNQUFNO1lBRTNELEtBQUssRUFBRSxDQUFDO1NBQ1g7S0FDSjtBQUNMLENBQUMifQ==\",\"filename\":\"set_gang.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"set_gang.js\",\"url\":\"blob:file:///0ad2a34c-fd04-4656-84a3-a2935e6c5e2c\",\"moduleSequenceNumber\":3068}],\"dependents\":[],\"ramUsage\":6.7,\"server\":\"home\",\"moduleSequenceNumber\":83091,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gang.getMemberNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.getMemberInformation\",\"cost\":2},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"gang.setMemberTask\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { ReservedPorts } from \\\"/lib/util\\\";\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        const data = ns.readPort(ReservedPorts.HACK_WRITE_INFO);\\r\\n        if (data !== \\\"NULL PORT DATA\\\") {\\r\\n            await ns.write(data[0], data[1]);\\r\\n        }\\r\\n        await ns.sleep(10);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVhZHBvcnQuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJyZWFkcG9ydC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBRTFDLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsT0FBTyxJQUFJLEVBQUU7UUFDVCxNQUFNLElBQUksR0FBd0MsRUFBRSxDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQUMsZUFBZSxDQUFDLENBQUM7UUFDN0YsSUFBSSxJQUFJLEtBQUssZ0JBQWdCLEVBQUU7WUFDM0IsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUNwQztRQUVELE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQztLQUN0QjtBQUNMLENBQUMifQ==\",\"filename\":\"readport.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/util.js\",\"url\":\"blob:file:///4568431c-5c49-470b-862f-cefc2dc52cf7\",\"moduleSequenceNumber\":348},{\"filename\":\"readport.js\",\"url\":\"blob:file:///7bfccf0b-bf87-4771-bd03-c765c4b07a8a\",\"moduleSequenceNumber\":568}],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":83092,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function findProp(propName) {\\r\\n    for (const div of eval(\\\"document\\\").querySelectorAll(\\\"div\\\")) {\\r\\n        const propKey = Object.keys(div)[1];\\r\\n        if (!propKey)\\r\\n            continue;\\r\\n        const props = div[propKey];\\r\\n        if (props.children?.props && props.children.props[propName])\\r\\n            return props.children.props[propName];\\r\\n        if (props.children instanceof Array)\\r\\n            for (const child of props.children)\\r\\n                if (child?.props && child.props[propName])\\r\\n                    return child.props[propName];\\r\\n    }\\r\\n}\\r\\nexport function getMaterialPrice(divisionName, city, matName) {\\r\\n    const playerProp = findProp(\\\"player\\\");\\r\\n    if (playerProp?.corporation?.divisions) {\\r\\n        const corporation = playerProp.corporation;\\r\\n        const agDiv = playerProp.corporation.divisions.find((a) => a.type === divisionName);\\r\\n        if (agDiv) {\\r\\n            const warehouse = agDiv.warehouses[city];\\r\\n            const office = agDiv.offices[city];\\r\\n            if (warehouse && office) {\\r\\n                if (Object.prototype.hasOwnProperty.call(warehouse.materials, matName)) {\\r\\n                    const mat = warehouse.materials[matName];\\r\\n                    const businessFactor = agDiv.getBusinessFactor(office); //Business employee productivity\\r\\n                    const advertisingFactor = agDiv.getAdvertisingFactors()[0]; //Awareness + popularity\\r\\n                    const marketFactor = agDiv.getMarketFactor(mat); //Competition + demand\\r\\n                    return ((mat.qlt + 0.001) *\\r\\n                        marketFactor *\\r\\n                        businessFactor *\\r\\n                        corporation.getSalesMultiplier() *\\r\\n                        advertisingFactor *\\r\\n                        agDiv.getSalesMultiplier() *\\r\\n                        10 *\\r\\n                        (mat.bCost / mat.qty));\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2FsZS5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9jb3JwL3NhbGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBdU9BLFNBQVMsUUFBUSxDQUFDLFFBQWdCO0lBQzlCLEtBQUssTUFBTSxHQUFHLElBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLGdCQUFnQixDQUFDLEtBQUssQ0FBQyxFQUFFO1FBQ3hELE1BQU0sT0FBTyxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDcEMsSUFBSSxDQUFDLE9BQU87WUFBRSxTQUFTO1FBQ3ZCLE1BQU0sS0FBSyxHQUFHLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUMzQixJQUFJLEtBQUssQ0FBQyxRQUFRLEVBQUUsS0FBSyxJQUFJLEtBQUssQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQztZQUFFLE9BQU8sS0FBSyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDbkcsSUFBSSxLQUFLLENBQUMsUUFBUSxZQUFZLEtBQUs7WUFDL0IsS0FBSyxNQUFNLEtBQUssSUFBSSxLQUFLLENBQUMsUUFBUTtnQkFBRSxJQUFJLEtBQUssRUFBRSxLQUFLLElBQUksS0FBSyxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUM7b0JBQUUsT0FBTyxLQUFLLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0tBQ25IO0FBQ0wsQ0FBQztBQUVELE1BQU0sVUFBVSxnQkFBZ0IsQ0FBQyxZQUFvQixFQUFFLElBQVksRUFBRSxPQUFlO0lBQ2hGLE1BQU0sVUFBVSxHQUFHLFFBQVEsQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUV0QyxJQUFJLFVBQVUsRUFBRSxXQUFXLEVBQUUsU0FBUyxFQUFFO1FBQ3BDLE1BQU0sV0FBVyxHQUFpQixVQUFVLENBQUMsV0FBVyxDQUFDO1FBQ3pELE1BQU0sS0FBSyxHQUFhLFVBQVUsQ0FBQyxXQUFXLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQW1CLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLEtBQUssWUFBWSxDQUFDLENBQUM7UUFFaEgsSUFBSSxLQUFLLEVBQUU7WUFDUCxNQUFNLFNBQVMsR0FBRyxLQUFLLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ3pDLE1BQU0sTUFBTSxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDbkMsSUFBSSxTQUFTLElBQUksTUFBTSxFQUFFO2dCQUNyQixJQUFJLE1BQU0sQ0FBQyxTQUFTLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsU0FBUyxFQUFFLE9BQU8sQ0FBQyxFQUFFO29CQUNwRSxNQUFNLEdBQUcsR0FBRyxTQUFTLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDO29CQUN6QyxNQUFNLGNBQWMsR0FBRyxLQUFLLENBQUMsaUJBQWlCLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxnQ0FBZ0M7b0JBQ3hGLE1BQU0saUJBQWlCLEdBQUcsS0FBSyxDQUFDLHFCQUFxQixFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyx3QkFBd0I7b0JBQ3BGLE1BQU0sWUFBWSxHQUFHLEtBQUssQ0FBQyxlQUFlLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxzQkFBc0I7b0JBRXZFLE9BQU8sQ0FDSCxDQUFDLEdBQUcsQ0FBQyxHQUFHLEdBQUcsS0FBSyxDQUFDO3dCQUNqQixZQUFZO3dCQUNaLGNBQWM7d0JBQ2QsV0FBVyxDQUFDLGtCQUFrQixFQUFFO3dCQUNoQyxpQkFBaUI7d0JBQ2pCLEtBQUssQ0FBQyxrQkFBa0IsRUFBRTt3QkFDMUIsRUFBRTt3QkFDRixDQUFDLEdBQUcsQ0FBQyxLQUFLLEdBQUcsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUN4QixDQUFDO2lCQUNMO2FBQ0o7U0FDSjtLQUNKO0lBRUQsT0FBTyxDQUFDLENBQUM7QUFDYixDQUFDIn0=\",\"filename\":\"/lib/corp/sale.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1024,\"server\":\"home\",\"moduleSequenceNumber\":83093,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"ns\",\"name\":\"corporation\",\"cost\":1022.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { stFormat, CITIES, llog, cleanLogs } from \\\"lib/util\\\";\\r\\nfunction lerp(start, end, dist) {\\r\\n    return start + (end - start) * dist;\\r\\n}\\r\\nfunction checkLevel(obj, level) {\\r\\n    return Object.prototype.hasOwnProperty.call(obj, level);\\r\\n}\\r\\nfunction findProp(propName) {\\r\\n    for (const div of eval(\\\"document\\\").querySelectorAll(\\\"div\\\")) {\\r\\n        const propKey = Object.keys(div)[1];\\r\\n        if (!propKey)\\r\\n            continue;\\r\\n        const props = div[propKey];\\r\\n        if (props.children?.props && props.children.props[propName])\\r\\n            return props.children.props[propName];\\r\\n        if (props.children instanceof Array)\\r\\n            for (const child of props.children)\\r\\n                if (child?.props && child.props[propName])\\r\\n                    return child.props[propName];\\r\\n    }\\r\\n}\\r\\nfunction joinBladeburner() {\\r\\n    const p = findProp(\\\"player\\\");\\r\\n    if (!p.inBladeburner()) {\\r\\n        // Apply for Bladeburner division\\r\\n        if (p.strength >= 100 && p.defense >= 100 && p.dexterity >= 100 && p.agility >= 100) {\\r\\n            p.startBladeburner({ new: true });\\r\\n            return true;\\r\\n        }\\r\\n    }\\r\\n    else {\\r\\n        return true;\\r\\n    }\\r\\n    return false;\\r\\n}\\r\\nexport class City {\\r\\n    name = \\\"\\\";\\r\\n    pop = 0;\\r\\n    popEst = 0;\\r\\n    comms = 0;\\r\\n    chaos = 0;\\r\\n}\\r\\nclass Action {\\r\\n    type;\\r\\n    name;\\r\\n    city;\\r\\n    autoLevel = false;\\r\\n    countRemaining = 0;\\r\\n    successChanceMin = {};\\r\\n    successChanceMax = {};\\r\\n    successChance = {};\\r\\n    maxLevel = 1;\\r\\n    rankGain = {};\\r\\n    actionTime = {};\\r\\n    best = { rankPerMs: 0, level: 1, chance: 0 };\\r\\n    boRank = -1;\\r\\n    rawAction = null;\\r\\n    constructor(ns, type, name, city) {\\r\\n        this.type = type;\\r\\n        this.name = name;\\r\\n        this.city = city;\\r\\n        const bb = findProp(\\\"player\\\").bladeburner;\\r\\n        const rawActionId = bb.getActionIdFromTypeAndName(this.type, this.name);\\r\\n        if (rawActionId)\\r\\n            this.rawAction = bb.getActionObject(rawActionId);\\r\\n        this.refresh(ns);\\r\\n    }\\r\\n    refresh(ns) {\\r\\n        ns.bladeburner.switchCity(this.city);\\r\\n        ns.bladeburner.setActionAutolevel(this.type, this.name, false);\\r\\n        this.autoLevel = ns.bladeburner.getActionAutolevel(this.type, this.name);\\r\\n        this.countRemaining = ns.bladeburner.getActionCountRemaining(this.type, this.name);\\r\\n        this.maxLevel = ns.bladeburner.getActionMaxLevel(this.type, this.name);\\r\\n        if (this.type === \\\"BlackOps\\\")\\r\\n            this.boRank = ns.bladeburner.getBlackOpRank(this.name);\\r\\n        for (let level = 1; level <= this.maxLevel; level++) {\\r\\n            ns.bladeburner.setActionLevel(this.type, this.name, level);\\r\\n            const [successChanceMin, successChanceMax] = ns.bladeburner.getActionEstimatedSuccessChance(this.type, this.name);\\r\\n            this.successChanceMin[level] = successChanceMin;\\r\\n            this.successChanceMax[level] = successChanceMax;\\r\\n            this.actionTime[level] = ns.bladeburner.getActionTime(this.type, this.name);\\r\\n            // rank gain\\r\\n            this.rankGain[level] = 0;\\r\\n            if (this.rawAction && this.rawAction.rankGain) {\\r\\n                const rewardMultiplier = Math.pow(this.rawAction.rewardFac, level - 1);\\r\\n                this.rankGain[level] =\\r\\n                    this.rawAction.rankGain * rewardMultiplier * ns.getBitNodeMultipliers().BladeburnerRank;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n    avgChance(level) {\\r\\n        if (!checkLevel(this.successChanceMin, level) || !checkLevel(this.successChanceMax, level))\\r\\n            return 0;\\r\\n        return lerp(this.successChanceMin[level], this.successChanceMax[level], 0.25);\\r\\n    }\\r\\n    chance(level) {\\r\\n        if (this.rawAction) {\\r\\n            this.rawAction.level = level;\\r\\n            return this.rawAction.getSuccessChance(findProp(\\\"player\\\").bladeburner, { est: false });\\r\\n        }\\r\\n        return this.avgChance(level);\\r\\n    }\\r\\n    rankPerMs(level) {\\r\\n        if (!checkLevel(this.rankGain, level) || !checkLevel(this.actionTime, level))\\r\\n            return 0;\\r\\n        if (this.actionTime[level] === 0)\\r\\n            return 0;\\r\\n        return this.rankGain[level] / this.actionTime[level];\\r\\n    }\\r\\n    calcBestRankPerMs(ns, successThreshold) {\\r\\n        this.refresh(ns);\\r\\n        this.best = {\\r\\n            rankPerMs: 0,\\r\\n            level: 1,\\r\\n            chance: 0,\\r\\n        };\\r\\n        if (this.countRemaining <= 0)\\r\\n            return this.best;\\r\\n        if (ns.bladeburner.getRank() < this.boRank)\\r\\n            return this.best;\\r\\n        for (let level = 1; level <= this.maxLevel; level++) {\\r\\n            const rankPerMs = this.rankPerMs(level);\\r\\n            const chance = this.chance(level);\\r\\n            if (rankPerMs > this.best.rankPerMs && chance > successThreshold) {\\r\\n                this.best = {\\r\\n                    rankPerMs: rankPerMs,\\r\\n                    level: level,\\r\\n                    chance: chance,\\r\\n                };\\r\\n            }\\r\\n        }\\r\\n        return this.best;\\r\\n    }\\r\\n    runBest(ns) {\\r\\n        const time = this.bestTime();\\r\\n        llog(ns, \\\"Running %s:%s:%s:%d for %s (%s Rank/s)\\\", this.city, this.type, this.name, this.best.level, stFormat(ns, time, false, false), ns.nFormat(this.best.rankPerMs * 1000, \\\"0.000a\\\"));\\r\\n        ns.bladeburner.switchCity(this.city);\\r\\n        ns.bladeburner.setActionLevel(this.type, this.name, this.best.level);\\r\\n        ns.bladeburner.startAction(this.type, this.name);\\r\\n        return time;\\r\\n    }\\r\\n    bestTime() {\\r\\n        if (!checkLevel(this.actionTime, this.best.level))\\r\\n            return 0;\\r\\n        return this.actionTime[this.best.level];\\r\\n    }\\r\\n    toString(ns) {\\r\\n        let str = \\\"\\\";\\r\\n        str += ns.sprintf(\\\"%s:%s:%s:\\\\n\\\", this.city, this.type, this.name);\\r\\n        if (this.boRank !== -1)\\r\\n            str += ns.sprintf(\\\"  Required Rank: %d\\\\n\\\", this.boRank);\\r\\n        if (this.countRemaining < Number.MAX_SAFE_INTEGER)\\r\\n            str += ns.sprintf(\\\"  Count Remaining: %d\\\\n\\\", this.countRemaining);\\r\\n        str += ns.sprintf(\\\"  Autolevel: %s\\\\n\\\", this.autoLevel ? \\\"ON\\\" : \\\"OFF\\\");\\r\\n        for (let level = 1; level <= this.maxLevel; level++) {\\r\\n            const ranksStr = ns.nFormat(this.rankPerMs(level) * 1000, \\\"0.000a\\\");\\r\\n            str += ns.sprintf(\\\"  Level %d: %d - %d (%d), rank +%.3f, time %s, rank/s %s %s\\\\n\\\", level, this.successChanceMin[level] * 100, this.successChanceMax[level] * 100, this.chance(level) * 100, this.rankGain[level], stFormat(ns, this.actionTime[level], false, false), ranksStr, this.best.level === level ? `(BEST ${ranksStr} Rank/s)` : \\\"\\\");\\r\\n        }\\r\\n        return str;\\r\\n    }\\r\\n}\\r\\nfunction getRecoveryAction(ns) {\\r\\n    const bb = findProp(\\\"player\\\").bladeburner;\\r\\n    let bestCity = \\\"Sector-12\\\";\\r\\n    let bestDiffRatio = 0;\\r\\n    for (const [city, data] of Object.entries(bb.cities)) {\\r\\n        llog(ns, \\\"%10s: %8s / %8s diff: %8s (%.2f)\\\", city, ns.nFormat(data.pop, \\\"0.000a\\\"), ns.nFormat(data.popEst, \\\"0.000a\\\"), ns.nFormat(Math.abs(data.pop - data.popEst), \\\"0.000a\\\"), Math.abs((data.pop - data.popEst) / data.pop));\\r\\n        const diffRatio = Math.abs((data.pop - data.popEst) / data.pop);\\r\\n        if (diffRatio > bestDiffRatio) {\\r\\n            bestDiffRatio = diffRatio;\\r\\n            bestCity = city;\\r\\n        }\\r\\n    }\\r\\n    if (bestDiffRatio < 0.001)\\r\\n        return [new Action(ns, \\\"General\\\", \\\"Training\\\", \\\"Sector-12\\\"), 0];\\r\\n    return [new Action(ns, \\\"General\\\", \\\"Field Analysis\\\", bestCity), bestDiffRatio];\\r\\n}\\r\\nexport async function main(ns) {\\r\\n    cleanLogs(ns);\\r\\n    if (!joinBladeburner())\\r\\n        return;\\r\\n    const allActions = [];\\r\\n    for (const city of CITIES) {\\r\\n        for (const actionName of ns.bladeburner.getBlackOpNames()) {\\r\\n            allActions.push(new Action(ns, \\\"BlackOps\\\", actionName, city));\\r\\n        }\\r\\n        for (const actionName of ns.bladeburner.getContractNames()) {\\r\\n            allActions.push(new Action(ns, \\\"Contract\\\", actionName, city));\\r\\n        }\\r\\n        for (const actionName of ns.bladeburner.getGeneralActionNames()) {\\r\\n            allActions.push(new Action(ns, \\\"General\\\", actionName, city));\\r\\n        }\\r\\n        for (const actionName of ns.bladeburner.getOperationNames()) {\\r\\n            allActions.push(new Action(ns, \\\"Operation\\\", actionName, city));\\r\\n        }\\r\\n    }\\r\\n    let actionEndTime = 0;\\r\\n    while (true) {\\r\\n        const currentTime = new Date().getTime();\\r\\n        if (currentTime > actionEndTime) {\\r\\n            // prettier-ignore\\r\\n            const [recoveryAction, /*diffRatio*/] = getRecoveryAction(ns);\\r\\n            const [curStam, maxStam] = ns.bladeburner.getStamina();\\r\\n            if (curStam < maxStam / 2) {\\r\\n                actionEndTime = currentTime + recoveryAction.runBest(ns) + 50;\\r\\n            }\\r\\n            else {\\r\\n                let threshold = 0.85;\\r\\n                let runnableActions = [];\\r\\n                while (runnableActions.length === 0) {\\r\\n                    threshold -= 0.05;\\r\\n                    for (const action of allActions)\\r\\n                        action.calcBestRankPerMs(ns, threshold);\\r\\n                    runnableActions = allActions\\r\\n                        .filter((a) => a.best.rankPerMs > 0)\\r\\n                        .sort((a, b) => b.best.rankPerMs === a.best.rankPerMs\\r\\n                        ? b.best.chance - a.best.chance\\r\\n                        : b.best.rankPerMs - a.best.rankPerMs);\\r\\n                }\\r\\n                //for (const action of runnableActions) llog(ns,action.toString(ns));\\r\\n                actionEndTime = currentTime + runnableActions[0].runBest(ns) + 50;\\r\\n            }\\r\\n            // do skill check\\r\\n            const skillNames = [\\r\\n                \\\"Overclock\\\",\\r\\n                \\\"Blade's Intuition\\\",\\r\\n                \\\"Cloak\\\",\\r\\n                \\\"Short-Circuit\\\",\\r\\n                \\\"Digital Observer\\\",\\r\\n                \\\"Tracer\\\",\\r\\n                \\\"Reaper\\\",\\r\\n            ];\\r\\n            for (const skillName of skillNames) {\\r\\n                if (skillName === \\\"Overclock\\\" && ns.bladeburner.getSkillLevel(skillName) >= 90)\\r\\n                    continue;\\r\\n                const skillPoints = ns.bladeburner.getSkillPoints();\\r\\n                const skillCost = ns.bladeburner.getSkillUpgradeCost(skillName);\\r\\n                if (skillCost <= skillPoints) {\\r\\n                    llog(ns, \\\"Upgrading %s for %d skill points\\\", skillName, skillCost);\\r\\n                    ns.bladeburner.upgradeSkill(skillName);\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        await ns.sleep(100);\\r\\n        // for (const skillName of ns.bladeburner.getSkillNames()) {\\r\\n        //     //\\r\\n        // }\\r\\n    }\\r\\n    while (true) {\\r\\n        break;\\r\\n        await ns.sleep(100);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmxhZGVidXJuZXIuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJibGFkZWJ1cm5lci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLE1BQU0sVUFBVSxDQUFDO0FBRTdELFNBQVMsSUFBSSxDQUFDLEtBQWEsRUFBRSxHQUFXLEVBQUUsSUFBWTtJQUNsRCxPQUFPLEtBQUssR0FBRyxDQUFDLEdBQUcsR0FBRyxLQUFLLENBQUMsR0FBRyxJQUFJLENBQUM7QUFDeEMsQ0FBQztBQUVELFNBQVMsVUFBVSxDQUFDLEdBQW9CLEVBQUUsS0FBYTtJQUNuRCxPQUFPLE1BQU0sQ0FBQyxTQUFTLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFDNUQsQ0FBQztBQUVELFNBQVMsUUFBUSxDQUFDLFFBQWdCO0lBQzlCLEtBQUssTUFBTSxHQUFHLElBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLGdCQUFnQixDQUFDLEtBQUssQ0FBQyxFQUFFO1FBQ3hELE1BQU0sT0FBTyxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDcEMsSUFBSSxDQUFDLE9BQU87WUFBRSxTQUFTO1FBQ3ZCLE1BQU0sS0FBSyxHQUFHLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUMzQixJQUFJLEtBQUssQ0FBQyxRQUFRLEVBQUUsS0FBSyxJQUFJLEtBQUssQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQztZQUFFLE9BQU8sS0FBSyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDbkcsSUFBSSxLQUFLLENBQUMsUUFBUSxZQUFZLEtBQUs7WUFDL0IsS0FBSyxNQUFNLEtBQUssSUFBSSxLQUFL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\",\"filename\":\"bladeburner.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/util.js\",\"url\":\"blob:file:///049d58bc-f182-4355-aba0-942a5d899e1f\",\"moduleSequenceNumber\":201590},{\"filename\":\"bladeburner.js\",\"url\":\"blob:file:///1ebf83a9-f524-45e5-8c02-f8fd49bf45be\",\"moduleSequenceNumber\":201962}],\"dependents\":[],\"ramUsage\":69.2,\"server\":\"home\",\"moduleSequenceNumber\":83094,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"bladeburner.switchCity\",\"cost\":4},{\"type\":\"fn\",\"name\":\"bladeburner.setActionAutolevel\",\"cost\":4},{\"type\":\"fn\",\"name\":\"bladeburner.getActionAutolevel\",\"cost\":4},{\"type\":\"fn\",\"name\":\"bladeburner.getActionCountRemaining\",\"cost\":4},{\"type\":\"fn\",\"name\":\"bladeburner.getActionMaxLevel\",\"cost\":4},{\"type\":\"fn\",\"name\":\"bladeburner.getBlackOpRank\",\"cost\":2},{\"type\":\"fn\",\"name\":\"bladeburner.setActionLevel\",\"cost\":4},{\"type\":\"fn\",\"name\":\"bladeburner.getActionEstimatedSuccessChance\",\"cost\":4},{\"type\":\"fn\",\"name\":\"bladeburner.getActionTime\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getBitNodeMultipliers\",\"cost\":4},{\"type\":\"fn\",\"name\":\"bladeburner.getRank\",\"cost\":4},{\"type\":\"fn\",\"name\":\"bladeburner.startAction\",\"cost\":4},{\"type\":\"fn\",\"name\":\"bladeburner.getBlackOpNames\",\"cost\":0.4},{\"type\":\"fn\",\"name\":\"bladeburner.getContractNames\",\"cost\":0.4},{\"type\":\"fn\",\"name\":\"bladeburner.getGeneralActionNames\",\"cost\":0.4},{\"type\":\"fn\",\"name\":\"bladeburner.getOperationNames\",\"cost\":0.4},{\"type\":\"fn\",\"name\":\"bladeburner.getStamina\",\"cost\":4},{\"type\":\"fn\",\"name\":\"bladeburner.getSkillLevel\",\"cost\":4},{\"type\":\"fn\",\"name\":\"bladeburner.getSkillPoints\",\"cost\":4},{\"type\":\"fn\",\"name\":\"bladeburner.getSkillUpgradeCost\",\"cost\":4},{\"type\":\"fn\",\"name\":\"bladeburner.upgradeSkill\",\"cost\":4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { stFormat, stdFormat, WEAKENJS, GROWJS, HACKJS, llog } from \\\"lib/util\\\";\\r\\nimport { getCycleProductionLookup } from \\\"lib/hack/cycle_production\\\";\\r\\nimport { generateHosts, getMaxThreads, clearOperationsByBatchId, mockPrimaryBatch, mockBatch, clearAllBatches, cleanPrimaryBatch, sloppyPrimaryBatch, cleanBatch, sloppyBatch } from \\\"lib/hack/host\\\";\\r\\nexport const TSPACER = 400;\\r\\nexport class ModHackEnv {\\r\\n    targetname;\\r\\n    highMoney;\\r\\n    lowMoney;\\r\\n    tspacer;\\r\\n    weakenRam;\\r\\n    growRam;\\r\\n    hackRam;\\r\\n    threadSize;\\r\\n    cores;\\r\\n    hosts;\\r\\n    maxThreads;\\r\\n    waitPID;\\r\\n    security;\\r\\n    lowSecurity;\\r\\n    money;\\r\\n    // Weaken Info\\r\\n    weakenStartSec;\\r\\n    weakenAmountPerThread;\\r\\n    weakenThreads;\\r\\n    weakenGrowThreads;\\r\\n    weakenHackThreads;\\r\\n    weakenTime;\\r\\n    weakenTimeFullCycle;\\r\\n    // Grow Info\\r\\n    growStartMoney;\\r\\n    growMult;\\r\\n    growThreads;\\r\\n    growSecIncrease;\\r\\n    growTime;\\r\\n    // Hack Info\\r\\n    hackStartMoney;\\r\\n    hackTotal;\\r\\n    hackThreads;\\r\\n    hackSecIncrease;\\r\\n    hackTime;\\r\\n    hackPercentPerThread;\\r\\n    // Batch Cycle Info\\r\\n    threadsPerCycle;\\r\\n    cycleSpacer;\\r\\n    fullBatchTime;\\r\\n    cycleMax;\\r\\n    cycleTotal;\\r\\n    fullCycleTime;\\r\\n    primaryStats;\\r\\n    // Simulator Info\\r\\n    simEnabled;\\r\\n    simTarget;\\r\\n    simPlayer;\\r\\n    writeFile = \\\"\\\";\\r\\n    constructor(ns, targetname, hostnames) {\\r\\n        this.targetname = targetname;\\r\\n        this.highMoney = ns.getServerMaxMoney(this.targetname);\\r\\n        this.lowMoney = ns.getServerMaxMoney(this.targetname) * 0.5;\\r\\n        this.tspacer = TSPACER; // CONST\\r\\n        this.weakenRam = ns.getScriptRam(WEAKENJS);\\r\\n        this.growRam = ns.getScriptRam(GROWJS);\\r\\n        this.hackRam = ns.getScriptRam(HACKJS);\\r\\n        this.threadSize = Math.max(this.weakenRam, this.growRam, this.hackRam);\\r\\n        this.cores = 1; // Simplify\\r\\n        [this.hosts, this.maxThreads] = generateHosts(ns, hostnames, this.threadSize);\\r\\n        this.waitPID = 0;\\r\\n        // Target Info\\r\\n        this.security = 0;\\r\\n        this.lowSecurity = 0;\\r\\n        this.money = 0;\\r\\n        // Weaken Info\\r\\n        this.weakenStartSec = 0;\\r\\n        this.weakenAmountPerThread = 0;\\r\\n        this.weakenThreads = 0;\\r\\n        this.weakenGrowThreads = 0;\\r\\n        this.weakenHackThreads = 0;\\r\\n        this.weakenTime = 0;\\r\\n        this.weakenTimeFullCycle = 0;\\r\\n        // Grow Info\\r\\n        this.growStartMoney = 0;\\r\\n        this.growMult = 0;\\r\\n        this.growThreads = 0;\\r\\n        this.growSecIncrease = 0;\\r\\n        this.growTime = 0;\\r\\n        // Hack Info\\r\\n        this.hackStartMoney = 0;\\r\\n        this.hackTotal = 0;\\r\\n        this.hackThreads = 0;\\r\\n        this.hackSecIncrease = 0;\\r\\n        this.hackTime = 0;\\r\\n        this.hackPercentPerThread = 0;\\r\\n        // Batch Cycle Info\\r\\n        this.threadsPerCycle = 0;\\r\\n        this.cycleSpacer = this.tspacer * 4;\\r\\n        this.fullBatchTime = 0; // this.weakenTime + this.tspacer * 2;\\r\\n        this.cycleMax = 0; // Math.floor(this.cycleFitTime / this.cycleSpacer)\\r\\n        this.cycleTotal = 0;\\r\\n        this.fullCycleTime = 0; // this.cycleFullTime + this.cycleSpacer * this.cycleTotal\\r\\n        this.primaryStats = {\\r\\n            primaryThreadsTotal: 0,\\r\\n            primaryGrowThreads: 0,\\r\\n            primaryWeakenThreads: 0,\\r\\n        };\\r\\n        // Simulator Info\\r\\n        this.simEnabled = false;\\r\\n        this.simTarget = ns.getServer(this.targetname);\\r\\n        this.simPlayer = ns.getPlayer();\\r\\n        //this.writeFile = ns.sprintf(\\\"%s-%d.txt\\\", this.targetname, new Date().getTime());\\r\\n    }\\r\\n    async init(ns, force = false) {\\r\\n        for (const host of this.hosts) {\\r\\n            await host.prep(ns, force);\\r\\n        }\\r\\n        if (this.writeFile !== \\\"\\\") {\\r\\n            await ns.write(this.writeFile, ns.sprintf(\\\"%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\", \\\"Target Name\\\", \\\"UID\\\", \\\"Batch ID\\\", \\\"Start Time\\\", \\\"End Time\\\", \\\"Operation Time\\\", \\\"Real Start Time\\\", \\\"Real End Time\\\", \\\"Real Operation Time\\\", \\\"Start Time Diff\\\", \\\"End Time Diff\\\", \\\"Operation Time Diff\\\", \\\"Result\\\", \\\"Security Before\\\", \\\"Security After\\\", \\\"Cash Before\\\", \\\"Cash After\\\"), \\\"w\\\");\\r\\n        }\\r\\n    }\\r\\n    getServerSecurityLevel(ns) {\\r\\n        if (this.simEnabled)\\r\\n            return this.simTarget.hackDifficulty;\\r\\n        return ns.getServerSecurityLevel(this.targetname);\\r\\n    }\\r\\n    getServerMoneyAvailable(ns) {\\r\\n        if (this.simEnabled)\\r\\n            return Math.max(this.simTarget.moneyAvailable, 1);\\r\\n        return Math.max(ns.getServerMoneyAvailable(this.targetname), 1);\\r\\n    }\\r\\n    getWeakenTime(ns, hackOverride) {\\r\\n        if (this.simEnabled)\\r\\n            return Math.ceil(ns.formulas.hacking.weakenTime(this.simTarget, this.simPlayer, hackOverride));\\r\\n        return Math.ceil(ns.getWeakenTime(this.targetname, hackOverride));\\r\\n    }\\r\\n    getWeakenLevelForTime(ns, ms) {\\r\\n        if (this.simEnabled)\\r\\n            return ns.formulas.hacking.weakenLevelForTime(this.simTarget, ns.getPlayer(), ms);\\r\\n        return ns.formulas.hacking.weakenLevelForTime(ns.getServer(this.targetname), ns.getPlayer(), ms);\\r\\n    }\\r\\n    getGrowTime(ns, hackOverride) {\\r\\n        if (this.simEnabled)\\r\\n            return Math.ceil(ns.formulas.hacking.growTime(this.simTarget, this.simPlayer, hackOverride));\\r\\n        return Math.ceil(ns.getGrowTime(this.targetname, hackOverride));\\r\\n    }\\r\\n    getHackTime(ns, hackOverride) {\\r\\n        if (this.simEnabled)\\r\\n            return Math.ceil(ns.formulas.hacking.hackTime(this.simTarget, this.simPlayer, hackOverride));\\r\\n        return Math.ceil(ns.getHackTime(this.targetname, hackOverride));\\r\\n    }\\r\\n    hackAnalyze(ns, assumeMinSec = false, hackOverride) {\\r\\n        if (this.simEnabled) {\\r\\n            if (assumeMinSec) {\\r\\n                const simTarget = Object.assign({}, this.simTarget);\\r\\n                simTarget.hackDifficulty = simTarget.minDifficulty;\\r\\n                return ns.formulas.hacking.hackPercent(simTarget, this.simPlayer, hackOverride);\\r\\n            }\\r\\n            return ns.formulas.hacking.hackPercent(this.simTarget, this.simPlayer, hackOverride);\\r\\n        }\\r\\n        if (assumeMinSec) {\\r\\n            const simTarget = ns.getServer(this.targetname);\\r\\n            simTarget.hackDifficulty = simTarget.minDifficulty;\\r\\n            return ns.formulas.hacking.hackPercent(simTarget, ns.getPlayer(), hackOverride);\\r\\n        }\\r\\n        return ns.hackAnalyze(this.targetname, hackOverride);\\r\\n    }\\r\\n    numCycleForGrowth(ns, server, growth, player, cores = 1) {\\r\\n        let ajdGrowthRate = 1 + (1.03 - 1) / server.hackDifficulty;\\r\\n        if (ajdGrowthRate > 1.0035) {\\r\\n            ajdGrowthRate = 1.0035;\\r\\n        }\\r\\n        const serverGrowthPercentage = server.serverGrowth / 100;\\r\\n        const coreBonus = 1 + (cores - 1) / 16;\\r\\n        const cycles = Math.log(growth) /\\r\\n            (Math.log(ajdGrowthRate) *\\r\\n                player.hacking_grow_mult *\\r\\n                serverGrowthPercentage *\\r\\n                ns.getBitNodeMultipliers().ServerGrowthRate *\\r\\n                coreBonus);\\r\\n        return cycles;\\r\\n    }\\r\\n    calcGrowThreads(ns, _growMult, assumeMinSec = false) {\\r\\n        const growMult = _growMult === undefined ? this.growMult : _growMult;\\r\\n        let threads = 0;\\r\\n        if (growMult >= 1) {\\r\\n            if (this.simEnabled) {\\r\\n                if (assumeMinSec) {\\r\\n                    const simTarget = Object.assign({}, this.simTarget);\\r\\n                    simTarget.hackDifficulty = simTarget.minDifficulty;\\r\\n                    threads = this.numCycleForGrowth(ns, simTarget, growMult, this.simPlayer);\\r\\n                }\\r\\n                else {\\r\\n                    threads = this.numCycleForGrowth(ns, this.simTarget, growMult, this.simPlayer);\\r\\n                }\\r\\n            }\\r\\n            else {\\r\\n                if (assumeMinSec) {\\r\\n                    const simTarget = ns.getServer(this.targetname);\\r\\n                    simTarget.hackDifficulty = simTarget.minDifficulty;\\r\\n                    threads = this.numCycleForGrowth(ns, simTarget, growMult, ns.getPlayer());\\r\\n                }\\r\\n                else {\\r\\n                    threads = ns.growthAnalyze(this.targetname, growMult, this.cores);\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        return Math.ceil(threads);\\r\\n    }\\r\\n    hackLevelForHackTime(ns, ms) {\\r\\n        if (this.simEnabled)\\r\\n            return ns.formulas.hacking.hackLevelForTime(this.simTarget, this.simPlayer, ms);\\r\\n        return ns.formulas.hacking.hackLevelForTime(ns.getServer(this.targetname), ns.getPlayer(), ms);\\r\\n    }\\r\\n    hackLevelForGrowTime(ns, ms) {\\r\\n        if (this.simEnabled)\\r\\n            return ns.formulas.hacking.growLevelForTime(this.simTarget, this.simPlayer, ms);\\r\\n        return ns.formulas.hacking.growLevelForTime(ns.getServer(this.targetname), ns.getPlayer(), ms);\\r\\n    }\\r\\n    hackLevelForWeakenTime(ns, ms) {\\r\\n        if (this.simEnabled)\\r\\n            return ns.formulas.hacking.weakenLevelForTime(this.simTarget, this.simPlayer, ms);\\r\\n        return ns.formulas.hacking.weakenLevelForTime(ns.getServer(this.targetname), ns.getPlayer(), ms);\\r\\n    }\\r\\n    async refresh(ns, targetMs = Number.MAX_SAFE_INTEGER, fastCheck = false) {\\r\\n        if (this.isWRunning(ns)) {\\r\\n            // process in progress, wait for next refresh to update\\r\\n            await ns.sleep(1000);\\r\\n            return true;\\r\\n        }\\r\\n        // Player State\\r\\n        const playerHackLvlEffect = ns.getPlayer().hacking;\\r\\n        // Host state\\r\\n        this.maxThreads = getMaxThreads(ns, this.hosts);\\r\\n        // Target Info\\r\\n        this.highMoney = ns.getServerMaxMoney(this.targetname);\\r\\n        this.lowMoney = ns.getServerMaxMoney(this.targetname) * 0.5;\\r\\n        this.money = this.getServerMoneyAvailable(ns);\\r\\n        this.lowSecurity = ns.getServerMinSecurityLevel(this.targetname);\\r\\n        this.security = this.getServerSecurityLevel(ns);\\r\\n        // Hack Info\\r\\n        this.hackPercentPerThread = this.hackAnalyze(ns, true, playerHackLvlEffect);\\r\\n        this.hackThreads = 1 / this.hackPercentPerThread - 1;\\r\\n        this.hackTotal = this.hackPercentPerThread * this.hackThreads * this.money;\\r\\n        this.hackSecIncrease = ns.hackAnalyzeSecurity(this.hackThreads);\\r\\n        // Weaken Info\\r\\n        this.weakenAmountPerThread = ns.weakenAnalyze(1, this.cores);\\r\\n        // Cycle Info\\r\\n        this.cycleMax = Math.max(Math.floor((this.hackTime - this.tspacer) / this.cycleSpacer), 1);\\r\\n        this.threadsPerCycle = this.hackThreads + this.weakenHackThreads + this.growThreads + this.weakenGrowThreads;\\r\\n        /////////////////////////////////////\\r\\n        // space HWGW operations out such that they start 400ms apart and they finish 400ms apart\\r\\n        // stretch Hack time to the longest possbible time\\r\\n        // batch starts take spacer * 4 time, how many batch starts can fit in the length of maxHackTime\\r\\n        //\\r\\n        // create an array of hack levels for each cycle count\\r\\n        /////////////////////////////////////\\r\\n        // what is the hack level required to achieve 1 cycle?\\r\\n        // timing would be such that hack would finish 400ms after grow-weaken started\\r\\n        // each hack level timing implies first hack finishes <spacer> ms after last grow-weaken starts\\r\\n        // batch time = spacer * 4\\r\\n        // cycle 1: hack time = batch time\\r\\n        // cycle 2: hack time = batch time * 2\\r\\n        // if the result of hackLevelForTime is > player.hacking, limit it to player.hacking (these will be low cycle counts)\\r\\n        // if the result of hackLevelForTime is <= 0, discard this result and cycleMax is one less than this iteration.\\r\\n        const cycleLevels = {};\\r\\n        let cycleCount = 0;\\r\\n        const fastWeakenTime = this.getWeakenTime(ns);\\r\\n        while (true) {\\r\\n            cycleCount++;\\r\\n            const targetHackTime = Math.max(this.cycleSpacer * cycleCount, fastWeakenTime);\\r\\n            const hackLevel = Math.min(this.hackLevelForHackTime(ns, targetHackTime), ns.getPlayer().hacking);\\r\\n            if (hackLevel <= 0) {\\r\\n                break;\\r\\n            }\\r\\n            const actualHackTime = this.getHackTime(ns, hackLevel);\\r\\n            const fullBatchTime = actualHackTime + this.cycleSpacer * 3;\\r\\n            const fullCycleTime = fullBatchTime + this.cycleSpacer * (cycleCount - 1);\\r\\n            if (fullCycleTime > targetMs || targetHackTime > fastWeakenTime)\\r\\n                break;\\r\\n            cycleLevels[cycleCount] = {\\r\\n                hackLevel: hackLevel,\\r\\n                fullBatchTime: fullBatchTime,\\r\\n                fullCycleTime: fullCycleTime,\\r\\n            };\\r\\n        }\\r\\n        // for (const [_cycleTotal, data] of Object.entries(cycleLevels)) {\\r\\n        //     const cycleTotal = Number(_cycleTotal);\\r\\n        //     ns.tprintf(\\\"%d: %.2f - %s %s\\\", _cycleTotal, data.hackLevel, stFormat(ns, data.fullBatchTime, true), stFormat(ns, data.fullCycleTime, true));\\r\\n        // }\\r\\n        this.cycleMax = Object.keys(cycleLevels).length;\\r\\n        // Primary Cycle Info\\r\\n        const primaryGrowMult = Math.max(this.highMoney / this.money, 1);\\r\\n        let primaryGrowThreads = this.calcGrowThreads(ns, primaryGrowMult);\\r\\n        let primaryGrowSecIncrease = ns.growthAnalyzeSecurity(primaryGrowThreads);\\r\\n        let primarySecDiff = this.security - this.lowSecurity;\\r\\n        let primaryWeakenThreads = Math.ceil((primaryGrowSecIncrease + primarySecDiff) / this.weakenAmountPerThread);\\r\\n        let primaryThreadsTotal = primaryGrowThreads + primaryWeakenThreads;\\r\\n        if (primarySecDiff < 1 && primaryGrowMult < 1.05)\\r\\n            primaryThreadsTotal = 0; // dont bother with the grow/weaken cycle if we're already very close to optimal\\r\\n        while (primaryThreadsTotal > this.maxThreads) {\\r\\n            primaryGrowThreads--;\\r\\n            primaryGrowSecIncrease = ns.growthAnalyzeSecurity(primaryGrowThreads);\\r\\n            primarySecDiff = this.security - this.lowSecurity;\\r\\n            primaryWeakenThreads = Math.ceil((primaryGrowSecIncrease + primarySecDiff) / this.weakenAmountPerThread);\\r\\n            primaryThreadsTotal = primaryGrowThreads + primaryWeakenThreads;\\r\\n        }\\r\\n        // memoize cycle production statistics indexed by cycleThreadAllowance\\r\\n        const cycleProductionLookup = getCycleProductionLookup(ns, this, playerHackLvlEffect);\\r\\n        // Get all cycle combination production statistics\\r\\n        let allCycles = [];\\r\\n        for (const [_cycleTotal, data] of Object.entries(cycleLevels)) {\\r\\n            const cycleTotal = Number(_cycleTotal);\\r\\n            const usableThreads = this.maxThreads - primaryThreadsTotal;\\r\\n            const usableCycles = primaryThreadsTotal > 0 ? cycleTotal - 1 : cycleTotal;\\r\\n            const fullCycleTime = data.fullCycleTime;\\r\\n            const cycleThreadAllowance = Math.floor(usableThreads / usableCycles);\\r\\n            const cycleStats = cycleProductionLookup[cycleThreadAllowance];\\r\\n            if (cycleTotal === 1 && primaryThreadsTotal > 0) {\\r\\n                allCycles.push({\\r\\n                    cycleTotal: cycleTotal,\\r\\n                    hackTotal: 1,\\r\\n                    production: 1,\\r\\n                    fullCycleTime: fullCycleTime,\\r\\n                    hackThreads: 0,\\r\\n                    growThreads: 0,\\r\\n                    weakenHackThreads: 0,\\r\\n                    weakenGrowThreads: 0,\\r\\n                    percentPerCycle: 0,\\r\\n                });\\r\\n                continue;\\r\\n            }\\r\\n            if (cycleStats === undefined) {\\r\\n                ns.print(ns.sprintf(\\\"WARNING: Thread Total %s is undefined\\\", cycleThreadAllowance));\\r\\n                continue;\\r\\n            }\\r\\n            let actualBatches = 0;\\r\\n            if (fastCheck) {\\r\\n                actualBatches = usableCycles;\\r\\n            }\\r\\n            else {\\r\\n                const doPrimary = primaryThreadsTotal > 0;\\r\\n                if (doPrimary)\\r\\n                    mockPrimaryBatch(ns, this.hosts, primaryGrowThreads, primaryWeakenThreads);\\r\\n                for (let batchID = doPrimary ? 1 : 0; batchID < cycleTotal; batchID++) {\\r\\n                    const result = mockBatch(ns, this.hosts, batchID, cycleStats.hackThreads, cycleStats.growThreads, cycleStats.weakenHackThreads, cycleStats.weakenGrowThreads);\\r\\n                    if (result)\\r\\n                        actualBatches++;\\r\\n                    else\\r\\n                        break;\\r\\n                }\\r\\n                clearAllBatches(this.hosts);\\r\\n            }\\r\\n            allCycles.push({\\r\\n                cycleTotal: cycleTotal,\\r\\n                hackTotal: cycleStats.hackTotal,\\r\\n                production: (actualBatches * cycleStats.hackTotal) / (fullCycleTime / 1000),\\r\\n                fullCycleTime: fullCycleTime,\\r\\n                hackThreads: cycleStats.hackThreads,\\r\\n                growThreads: cycleStats.growThreads,\\r\\n                weakenHackThreads: cycleStats.weakenHackThreads,\\r\\n                weakenGrowThreads: cycleStats.weakenGrowThreads,\\r\\n                percentPerCycle: (cycleStats.hackTotal / ns.getServerMaxMoney(this.targetname)) * 100,\\r\\n            });\\r\\n        }\\r\\n        allCycles = allCycles.sort((a, b) => b.production - a.production);\\r\\n        //this.debugPrintCycleStats(ns, primaryThreadsTotal, allCycles);\\r\\n        const cycleTarget = allCycles[0];\\r\\n        if (!cycleTarget) {\\r\\n            this.hackTotal = 0;\\r\\n            this.hackThreads = 0;\\r\\n            this.growThreads = 0;\\r\\n            this.weakenHackThreads = 0;\\r\\n            this.weakenGrowThreads = 0;\\r\\n            this.cycleTotal = 1;\\r\\n            this.fullCycleTime = Number.MAX_SAFE_INTEGER;\\r\\n            this.primaryStats = {\\r\\n                primaryThreadsTotal: primaryThreadsTotal,\\r\\n                primaryGrowThreads: primaryGrowThreads,\\r\\n                primaryWeakenThreads: primaryWeakenThreads,\\r\\n            };\\r\\n            return false;\\r\\n        }\\r\\n        this.hackTotal = cycleTarget.hackTotal;\\r\\n        this.hackThreads = cycleTarget.hackThreads;\\r\\n        this.growThreads = cycleTarget.growThreads;\\r\\n        this.weakenHackThreads = cycleTarget.weakenHackThreads;\\r\\n        this.weakenGrowThreads = cycleTarget.weakenGrowThreads;\\r\\n        this.cycleTotal = cycleTarget.cycleTotal;\\r\\n        this.fullCycleTime = cycleTarget.fullCycleTime;\\r\\n        this.primaryStats = {\\r\\n            primaryThreadsTotal: primaryThreadsTotal,\\r\\n            primaryGrowThreads: primaryGrowThreads,\\r\\n            primaryWeakenThreads: primaryWeakenThreads,\\r\\n        };\\r\\n        this.fullBatchTime = cycleLevels[this.cycleTotal].fullBatchTime;\\r\\n        const playerHackLvlHackTiming = cycleLevels[this.cycleTotal].hackLevel;\\r\\n        this.hackTime = this.getHackTime(ns, playerHackLvlHackTiming);\\r\\n        const playerHackLvlGrowTiming = this.hackLevelForGrowTime(ns, this.hackTime);\\r\\n        this.growTime = this.getGrowTime(ns, playerHackLvlGrowTiming);\\r\\n        const playerHackLvlWeakenTiming = this.hackLevelForWeakenTime(ns, this.hackTime);\\r\\n        this.weakenTime = this.getGrowTime(ns, playerHackLvlWeakenTiming);\\r\\n        // dont do thread reservation and execution if this is a simulation\\r\\n        if (this.simEnabled)\\r\\n            return true;\\r\\n        const hackOffsetTime = 0;\\r\\n        const weakenHackOffsetTime = this.tspacer * 1;\\r\\n        const growOffsetTime = this.tspacer * 2;\\r\\n        const weakenGrowOffsetTime = this.tspacer * 3;\\r\\n        if (primaryThreadsTotal > 0) {\\r\\n            const threadsReserved = cleanPrimaryBatch(ns, this, playerHackLvlGrowTiming, playerHackLvlWeakenTiming, playerHackLvlEffect, growOffsetTime, weakenGrowOffsetTime, primaryGrowThreads, primaryWeakenThreads);\\r\\n            if (!threadsReserved) {\\r\\n                llog(ns, \\\"WARNING: Unable to reserve primary threads cleanly\\\");\\r\\n                clearOperationsByBatchId(this.hosts, 0);\\r\\n                sloppyPrimaryBatch(ns, this, playerHackLvlGrowTiming, playerHackLvlWeakenTiming, playerHackLvlEffect, growOffsetTime, weakenGrowOffsetTime, primaryGrowThreads, primaryWeakenThreads);\\r\\n            }\\r\\n        }\\r\\n        const allCycleTotal = this.cycleTotal;\\r\\n        for (let i = 0; i < allCycleTotal; i++) {\\r\\n            if (primaryThreadsTotal > 0 && i === 0)\\r\\n                continue;\\r\\n            const threadsReserved = cleanBatch(ns, this, i, playerHackLvlHackTiming, playerHackLvlGrowTiming, playerHackLvlWeakenTiming, playerHackLvlEffect, hackOffsetTime, growOffsetTime, weakenHackOffsetTime, weakenGrowOffsetTime);\\r\\n            if (!threadsReserved) {\\r\\n                if (this.cycleTotal > 1) {\\r\\n                    llog(ns, \\\"WARNING: Unable to Reserve batch %d\\\", i);\\r\\n                    this.cycleTotal--;\\r\\n                    clearOperationsByBatchId(this.hosts, i);\\r\\n                }\\r\\n                else {\\r\\n                    llog(ns, \\\"WARNING: Only reserving one bad batch\\\");\\r\\n                    sloppyBatch(ns, this, 0, playerHackLvlHackTiming, playerHackLvlGrowTiming, playerHackLvlWeakenTiming, playerHackLvlEffect, hackOffsetTime, growOffsetTime, weakenHackOffsetTime, weakenGrowOffsetTime);\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        const port = ns.getPortHandle(1);\\r\\n        port.clear();\\r\\n        port.write(JSON.stringify([\\r\\n            new Date(),\\r\\n            this.fullCycleTime,\\r\\n            this.targetname,\\r\\n            ns.getScriptIncome(ns.getScriptName(), ns.getHostname(), ...ns.args).toString(),\\r\\n            \\\"SMART\\\",\\r\\n        ]));\\r\\n        this.logStats(ns);\\r\\n        await this.execute(ns);\\r\\n        this.resetThreads();\\r\\n        return true;\\r\\n    }\\r\\n    debugPrintCycleStats(ns, primaryThreadsTotal, allCycles) {\\r\\n        let counter = 0;\\r\\n        for (const cycle of allCycles) {\\r\\n            if (++counter > 400)\\r\\n                return;\\r\\n            let batchThreads = cycle.hackThreads + cycle.growThreads + cycle.weakenHackThreads + cycle.weakenGrowThreads;\\r\\n            if (cycle.hackThreads === undefined)\\r\\n                batchThreads = 0;\\r\\n            let cycleThreads = primaryThreadsTotal + batchThreads * (cycle.cycleTotal - 1);\\r\\n            if (primaryThreadsTotal === 0) {\\r\\n                cycleThreads = batchThreads * cycle.cycleTotal;\\r\\n            }\\r\\n            const cycleMem = cycleThreads * this.threadSize;\\r\\n            ns.tprintf(\\\"%3d;%s  %9s/s %5.2f %d/%4d/%5d %6dGB, %s|%s|%s|%s %s\\\", cycle.cycleTotal, this.targetname, ns.nFormat(cycle.production, \\\"($0.000a)\\\"), cycle.percentPerCycle ? cycle.percentPerCycle : 0, primaryThreadsTotal, batchThreads, cycleThreads, cycleMem, cycle.hackThreads, cycle.growThreads, cycle.weakenHackThreads, cycle.weakenGrowThreads, stFormat(ns, cycle.fullCycleTime));\\r\\n        }\\r\\n    }\\r\\n    logStats(ns) {\\r\\n        if (this.primaryStats.primaryThreadsTotal > 0) {\\r\\n            llog(ns, \\\"SMART-PRIMARY: %s => Grow %d; Weaken %d; Total Threads %d\\\", this.targetname, this.primaryStats.primaryGrowThreads, this.primaryStats.primaryWeakenThreads, this.primaryStats.primaryThreadsTotal);\\r\\n        }\\r\\n        const percentPerCycle = (this.hackTotal / ns.getServerMaxMoney(this.targetname)) * 100;\\r\\n        llog(ns, \\\"SMART: %s => H %d|%d; G %d|%d; T %d|%d(%d)/%d; Cycles %s/%s\\\", this.targetname, this.hackThreads, this.weakenHackThreads, this.growThreads, this.weakenGrowThreads, this.threadsPerCycle, this.threadsPerCycle * this.cycleTotal, this.threadsPerCycle * this.cycleTotal + this.primaryStats.primaryThreadsTotal, this.maxThreads, this.cycleTotal, this.cycleMax);\\r\\n        llog(ns, \\\"SMART: %s => Income %s|%s (%.2f%%|%.2f%%) %s/s\\\", this.targetname, ns.nFormat(this.hackTotal, \\\"($0.000a)\\\"), ns.nFormat(this.hackTotal * this.cycleTotal, \\\"($0.000a)\\\"), percentPerCycle, percentPerCycle * this.cycleTotal, ns.nFormat(((this.hackTotal * this.cycleTotal) / this.fullCycleTime) * 1000, \\\"($0.000a)\\\"));\\r\\n        llog(ns, \\\"SMART: %s => Complete %s; Total %s; Active -%s\\\", this.targetname, stdFormat(ns, this.fullCycleTime, true), stFormat(ns, this.fullCycleTime, true), stFormat(ns, this.fullCycleTime - this.weakenTime, true));\\r\\n    }\\r\\n    async execute(ns) {\\r\\n        let execs = [];\\r\\n        this.hosts.map((host) => host.reservedScriptCalls.map((sc) => execs.push(sc)));\\r\\n        execs = execs.sort((a, b) => b.offset - a.offset);\\r\\n        this.waitPID = 0;\\r\\n        let waitPIDFinishTime = 0;\\r\\n        const startTime = new Date().getTime();\\r\\n        execs.map((exec) => (exec.realTimeStart = startTime));\\r\\n        while (execs.length > 0) {\\r\\n            const exec = execs.pop();\\r\\n            if (exec === undefined)\\r\\n                break;\\r\\n            while (new Date().getTime() - startTime < exec.offset)\\r\\n                await ns.sleep(5);\\r\\n            // script call has come up, make sure it is starting and finishing within +- tspacer / 2\\r\\n            const curTOffset = new Date().getTime() - startTime;\\r\\n            const offsetDiff = Math.abs(curTOffset - exec.offset);\\r\\n            if (offsetDiff > this.tspacer / 2) {\\r\\n                execs = execs.filter((a) => a.batchId !== exec.batchId);\\r\\n                ns.print(ns.sprintf(\\\"WARNING: %s:%s #%d start time was off by %dms (limit is +- %d) and the batch was canceled s: %s c: %s\\\", exec.target, exec.script, exec.batchId, curTOffset - exec.offset, this.tspacer / 2, stFormat(ns, exec.offset, true), stFormat(ns, curTOffset, true)));\\r\\n                continue;\\r\\n            }\\r\\n            const pid = ns.exec(exec.script, exec.host, exec.numThreads, JSON.stringify(exec));\\r\\n            if (waitPIDFinishTime <= exec.finish) {\\r\\n                this.waitPID = pid;\\r\\n                waitPIDFinishTime = exec.finish;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n    resetThreads() {\\r\\n        for (const host of this.hosts) {\\r\\n            host.reset();\\r\\n        }\\r\\n    }\\r\\n    isWRunning(ns) {\\r\\n        if (this.simEnabled)\\r\\n            return false;\\r\\n        if (this.waitPID === 0)\\r\\n            return false;\\r\\n        if (ns.getRunningScript(this.waitPID)) {\\r\\n            return true;\\r\\n        }\\r\\n        this.waitPID = 0;\\r\\n        return false;\\r\\n    }\\r\\n    resetSim(ns) {\\r\\n        this.simTarget = ns.getServer(this.targetname);\\r\\n        this.simPlayer = ns.getPlayer();\\r\\n    }\\r\\n    async fastSim(ns, time) {\\r\\n        this.resetSim(ns);\\r\\n        this.simEnabled = true;\\r\\n        let simIncome = 0;\\r\\n        let simTime = 0;\\r\\n        let simState = 0; // 0: primary, 1: no-primary\\r\\n        while (true) {\\r\\n            if (simState === 0) {\\r\\n                const result = await this.refresh(ns, time - simTime, true);\\r\\n                if (!result)\\r\\n                    break;\\r\\n                if (this.primaryStats.primaryThreadsTotal === 0)\\r\\n                    simState = 1;\\r\\n                this.simTarget.moneyAvailable *= ns.formulas.hacking.growPercent(this.simTarget, this.primaryStats.primaryGrowThreads, this.simPlayer);\\r\\n                this.simTarget.moneyAvailable = Math.min(this.simTarget.moneyAvailable, this.simTarget.moneyMax);\\r\\n                this.simTarget.hackDifficulty += ns.growthAnalyzeSecurity(this.primaryStats.primaryGrowThreads);\\r\\n                this.simTarget.hackDifficulty -= ns.weakenAnalyze(this.primaryStats.primaryWeakenThreads);\\r\\n                this.simTarget.hackDifficulty = Math.max(this.simTarget.minDifficulty, this.simTarget.hackDifficulty);\\r\\n                simIncome += this.hackTotal * (this.cycleTotal - 1);\\r\\n                simTime += this.fullCycleTime;\\r\\n            }\\r\\n            else {\\r\\n                const timeRemaining = time - simTime;\\r\\n                const cyclesRemaining = Math.floor(timeRemaining / this.fullCycleTime);\\r\\n                simIncome += this.hackTotal * this.cycleTotal * cyclesRemaining;\\r\\n                simTime += this.fullCycleTime * cyclesRemaining;\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n        this.simEnabled = false;\\r\\n        if (simIncome === 0) {\\r\\n            ns.tprintf(\\\"%s - %s (%s / %s)\\\", this.targetname, stFormat(ns, this.fullCycleTime), this.simTarget.hackDifficulty, this.simTarget.minDifficulty);\\r\\n            return 0;\\r\\n        }\\r\\n        return simIncome / (simTime / 1000);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9kX2hhY2tfZW52LmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2hhY2svbW9kX2hhY2tfZW52LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxRQUFRLEVBQUUsU0FBUyxFQUFFLFFBQVEsRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUMvRSxPQUFPLEVBQUUsd0JBQXdCLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUNyRSxPQUFPLEVBRUgsYUFBYSxFQUNiLGFBQWEsRUFFYix3QkFBd0IsRUFDeEIsZ0JBQWdCLEVBQ2hCLFNBQVMsRUFDVCxlQUFlLEVBQ2YsaUJBQWlCLEVBQ2pCLGtCQUFrQixFQUNsQixVQUFVLEVBQ1YsV0FBVyxFQUNkLE1BQU0sZUFBZSxDQUFDO0FBRXZCLE1BQU0sQ0FBQyxNQUFNLE9BQU8sR0FBRyxHQUFHLENBQUM7QUFjM0IsTUFBTSxPQUFPLFVBQVU7SUFDbkIsVUFBVSxDQUFTO0lBQ25CLFNBQVMsQ0FBUztJQUNsQixRQUFRLENBQVM7SUFDakIsT0FBTyxDQUFTO0lBRWhCLFNBQVMsQ0FBUztJQUNsQixPQUFPLENBQVM7SUFDaEIsT0FBTyxDQUFTO0lBQ2hCLFVBQVUsQ0FBUztJQUVuQixLQUFLLENBQVM7SUFDZCxLQUFLLENBQVM7SUFDZCxVQUFVLENBQVM7SUFFbkIsT0FBTyxDQUFTO0lBRWhCLFFBQVEsQ0FBUztJQUNqQixXQUFXLENBQVM7SUFDcEIsS0FBSyxDQUFTO0lBRWQsY0FBYztJQUNkLGNBQWMsQ0FBUztJQUN2QixxQkFBcUIsQ0FBUztJQUM5QixhQUFhLENBQVM7SUFDdEIsaUJBQWlCLENBQVM7SUFDMUIsaUJBQWlCLENBQVM7SUFDMUIsVUFBVSxDQUFTO0lBQ25CLG1CQUFtQixDQUFTO0lBRTVCLFlBQVk7SUFDWixjQUFjLENBQVM7SUFDdkIsUUFBUSxDQUFTO0lBQ2pCLFdBQVcsQ0FBUztJQUNwQixlQUFlLENBQVM7SUFDeEIsUUFBUSxDQUFTO0lBRWpCLFlBQVk7SUFDWixjQUFjLENBQVM7SUFDdkIsU0FBUyxDQUFTO0lBQ2xCLFdBQVcsQ0FBUztJQUNwQixlQUFlLENBQVM7SUFDeEIsUUFBUSxDQUFTO0lBQ2pCLG9CQUFvQixDQUFTO0lBRTdCLG1CQUFtQjtJQUNuQixlQUFlLENBQVM7SUFDeEIsV0FBVyxDQUFTO0lBQ3BCLGFBQWEsQ0FBUztJQUN0QixRQUFRLENBQVM7SUFDakIsVUFBVSxDQUFTO0lBQ25CLGFBQWEsQ0FBUztJQUV0QixZQUFZLENBSVY7SUFFRixpQkFBaUI7SUFDakIsVUFBVSxDQUFVO0lBQ3BCLFNBQVMsQ0FBUztJQUNsQixTQUFTLENBQVM7SUFFbEIsU0FBUyxHQUFHLEVBQUUsQ0FBQztJQUVmLFlBQVksRUFBTSxFQUFFLFVBQWtCLEVBQUUsU0FBbUI7UUFDdkQsSUFBSSxDQUFDLFVBQVUsR0FBRyxVQUFVLENBQUM7UUFDN0IsSUFBSSxDQUFDLFNBQVMsR0FBRyxFQUFFLENBQUMsaUJBQWlCLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQ3ZELElBQUksQ0FBQyxRQUFRLEdBQUcsRUFBRSxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxHQUFHLENBQUM7UUFDNUQsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUMsQ0FBQyxRQUFRO1FBRWhDLElBQUksQ0FBQyxTQUFTLEdBQUcsRUFBRSxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUMzQyxJQUFJLENBQUMsT0FBTyxHQUFHLEVBQUUsQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDdkMsSUFBSSxDQUFDLE9BQU8sR0FBRyxFQUFFLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3ZDLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBRXZFLElBQUksQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLENBQUMsV0FBVztRQUMzQixDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLGFBQWEsQ0FBQyxFQUFFLEVBQUUsU0FBUyxFQUFFLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUU5RSxJQUFJLENBQUMsT0FBTyxHQUFHLENBQUMsQ0FBQztRQUVqQixjQUFjO1FBQ2QsSUFBSSxDQUFDLFFBQVEsR0FBRyxDQUFDLENBQUM7UUFDbEIsSUFBSSxDQUFDLFdBQVcsR0FBRyxDQUFDLENBQUM7UUFDckIsSUFBSSxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUM7UUFFZixjQUFjO1FBQ2QsSUFBSSxDQUFDLGNBQWMsR0FBRyxDQUFDLENBQUM7UUFDeEIsSUFBSSxDQUFDLHFCQUFxQixHQUFHLENBQUMsQ0FBQztRQUMvQixJQUFJLENBQUMsYUFBYSxHQUFHLENBQUMsQ0FBQztRQUN2QixJQUFJLENBQUMsaUJBQWlCLEdBQUcsQ0FBQyxDQUFDO1FBQzNCLElBQUksQ0FBQyxpQkFBaUIsR0FBRyxDQUFDLENBQUM7UUFDM0IsSUFBSSxDQUFDLFVBQVUsR0FBRyxDQUFDLENBQUM7UUFDcEIsSUFBSSxDQUFDLG1CQUFtQixHQUFHLENBQUMsQ0FBQztRQUU3QixZQUFZO1FBQ1osSUFBSSxDQUFDLGNBQWMsR0FBRyxDQUFDLENBQUM7UUFDeEIsSUFBSSxDQUFDLFFBQVEsR0FBRyxDQUFDLENBQUM7UUFDbEIsSUFBSSxDQUFDLFdBQVcsR0FBRyxDQUFDLENBQUM7UUFDckIsSUFBSSxDQUFDLGVBQWUsR0FBRyxDQUFDLENBQUM7UUFDekIsSUFBSSxDQUFDLFFBQVEsR0FBRyxDQUFDLENBQUM7UUFFbEIsWUFBWTtRQUNaLElBQUksQ0FBQyxjQUFjLEdBQUcsQ0FBQyxDQUFDO1FBQ3hCLElBQUksQ0FBQyxTQUFTLEdBQUcsQ0FBQyxDQUFDO1FBQ25CLElBQUksQ0FBQyxXQUFXLEdBQUcsQ0FBQyxDQUFDO1FBQ3JCLElBQUksQ0FBQyxlQUFlLEdBQUcsQ0FBQyxDQUFDO1FBQ3pCLElBQUksQ0FBQyxRQUFRLEdBQUcsQ0FBQyxDQUFDO1FBQ2xCLElBQUksQ0FBQyxvQkFBb0IsR0FBRyxDQUFDLENBQUM7UUFFOUIsbUJBQW1CO1FBQ25CLElBQUksQ0FBQyxlQUFlLEdBQUcsQ0FBQyxDQUFDO1FBQ3pCLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLE9BQU8sR0FBRyxDQUFDLENBQUM7UUFDcEMsSUFBSSxDQUFDLGFBQWEsR0FBRyxDQUFDLENBQUMsQ0FBQyxzQ0FBc0M7UUFDOUQsSUFBSSxDQUFDLFFBQVEsR0FBRyxDQUFDLENBQUMsQ0FBQyxtREFBbUQ7UUFDdEUsSUFBSSxDQUFDLFVBQVUsR0FBRyxDQUFDLENBQUM7UUFDcEIsSUFBSSxDQUFDLGFBQWEsR0FBRyxDQUFDLENBQUMsQ0FBQywwREFBMEQ7UUFFbEYsSUFBSSxDQUFDLFlBQVksR0FBRztZQUNoQixtQkFBbUIsRUFBRSxDQUFDO1lBQ3RCLGtCQUFrQixFQUFFLENBQUM7WUFDckIsb0JBQW9CLEVBQUUsQ0FBQztTQUMxQixDQUFDO1FBRUYsaUJBQWlCO1FBQ2pCLElBQUksQ0FBQyxVQUFVLEdBQUcsS0FBSyxDQUFDO1FBQ3hCLElBQUksQ0FBQyxTQUFTLEdBQUcsRUFBRSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDL0MsSUFBSSxDQUFDLFNBQVMsR0FBRyxFQUFFLENBQUMsU0FBUyxFQUFFLENBQUM7UUFFaEMsa0ZBQWtGO0lBQ3RGLENBQUM7SUFFRCxLQUFLLENBQUMsSUFBSSxDQUFDLEVBQU0sRUFBRSxLQUFLLEdBQUcsS0FBSztRQUM1QixLQUFLLE1BQU0sSUFBSSxJQUFJLElBQUksQ0FBQyxLQUFLLEVBQUU7WUFDM0IsTUFBTSxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRSxLQUFLLENBQUMsQ0FBQztTQUM5QjtRQUVELElBQUksSUFBSSxDQUFDLFNBQVMsS0FBSyxFQUFFLEVBQUU7WUFDdkIsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUNWLElBQUksQ0FBQyxTQUFTLEVBQ2QsRUFBRSxDQUFDLE9BQU8sQ0FDTixzREFBc0QsRUFDdEQsYUFBYSxFQUNiLEtBQUssRUFDTCxVQUFVLEVBQ1YsWUFBWSxFQUNaLFVBQVUsRUFDVixnQkFBZ0IsRUFDaEIsaUJBQWlCLEVBQ2pCLGVBQWUsRUFDZixxQkFBcUIsRUFDckIsaUJBQWlCLEVBQ2pCLGVBQWUsRUFDZixxQkFBcUIsRUFDckIsUUFBUSxFQUNSLGlCQUFpQixFQUNqQixnQkFBZ0IsRUFDaEIsYUFBYSxFQUNiLFlBQVksQ0FDZixFQUNELEdBQUcsQ0FDTixDQUFDO1NBQ0w7SUFDTCxDQUFDO0lBRUQsc0JBQXNCLENBQUMsRUFBTTtRQUN6QixJQUFJLElBQUksQ0FBQyxVQUFVO1lBQUUsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLGNBQWMsQ0FBQztRQUUxRCxPQUFPLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDdEQsQ0FBQztJQUVELHVCQUF1QixDQUFDLEVBQU07UUFDMUIsSUFBSSxJQUFJLENBQUMsVUFBVTtZQUFFLE9BQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLGNBQWMsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUV2RSxPQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLHVCQUF1QixDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUNwRSxDQUFDO0lBRUQsYUFBYSxDQUFDLEVBQU0sRUFBRSxZQUFxQjtRQUN2QyxJQUFJLElBQUksQ0FBQyxVQUFVO1lBQ2YsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQyxTQUFTLEVBQUUsWUFBWSxDQUFDLENBQUMsQ0FBQztRQUVuRyxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLFlBQVksQ0FBQyxDQUFDLENBQUM7SUFDdEUsQ0FBQztJQUVELHFCQUFxQixDQUFDLEVBQU0sRUFBRSxFQUFVO1FBQ3BDLElBQUksSUFBSSxDQUFDLFVBQVU7WUFBRSxPQUFPLEVBQUUsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsRUFBRSxDQUFDLFNBQVMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQ3ZHLE9BQU8sRUFBRSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsa0JBQWtCLENBQUMsRUFBRSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLEVBQUUsRUFBRSxDQUFDLFNBQVMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQ3JHLENBQUM7SUFFRCxXQUFXLENBQUMsRUFBTSxFQUFFLFlBQXFCO1FBQ3JDLElBQUksSUFBSSxDQUFDLFVBQVU7WUFDZixPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDLFNBQVMsRUFBRSxZQUFZLENBQUMsQ0FBQyxDQUFDO1FBRWpHLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUsWUFBWSxDQUFDLENBQUMsQ0FBQztJQUNwRSxDQUFDO0lBRUQsV0FBVyxDQUFDLEVBQU0sRUFBRSxZQUFxQjtRQUNyQyxJQUFJLElBQUksQ0FBQyxVQUFVO1lBQ2YsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQyxTQUFTLEVBQUUsWUFBWSxDQUFDLENBQUMsQ0FBQztRQUVqRyxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLFlBQVksQ0FBQyxDQUFDLENBQUM7SUFDcEUsQ0FBQztJQUVELFdBQVcsQ0FBQyxFQUFNLEVBQUUsWUFBWSxHQUFHLEtBQUssRUFBRSxZQUFxQjtRQUMzRCxJQUFJLElBQUksQ0FBQyxVQUFVLEVBQUU7WUFDakIsSUFBSSxZQUFZLEVBQUU7Z0JBQ2QsTUFBTSxTQUFTLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO2dCQUNwRCxTQUFTLENBQUMsY0FBYyxHQUFHLFNBQVMsQ0FBQyxhQUFhLENBQUM7Z0JBQ25ELE9BQU8sRUFBRSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLFNBQVMsRUFBRSxJQUFJLENBQUMsU0FBUyxFQUFFLFlBQVksQ0FBQyxDQUFDO2FBQ25GO1lBQ0QsT0FBTyxFQUFFLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxJQUFJLENBQUMsU0FBUyxFQUFFLFlBQVksQ0FBQyxDQUFDO1NBQ3hGO1FBRUQsSUFBSSxZQUFZLEVBQUU7WUFDZCxNQUFNLFNBQVMsR0FBRyxFQUFFLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztZQUNoRCxTQUFTLENBQUMsY0FBYyxHQUFHLFNBQVMsQ0FBQyxhQUFhLENBQUM7WUFDbkQsT0FBTyxFQUFFLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsU0FBUyxFQUFFLEVBQUUsQ0FBQyxTQUFTLEVBQUUsRUFBRSxZQUFZLENBQUMsQ0FBQztTQUNuRjtRQUVELE9BQU8sRUFBRSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLFlBQVksQ0FBQyxDQUFDO0lBQ3pELENBQUM7SUFFRCxpQkFBaUIsQ0FBQyxFQUFNLEVBQUUsTUFBYyxFQUFFLE1BQWMsRUFBRSxNQUFjLEVBQUUsS0FBSyxHQUFHLENBQUM7UUFDL0UsSUFBSSxhQUFhLEdBQUcsQ0FBQyxHQUFHLENBQUMsSUFBSSxHQUFHLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxjQUFjLENBQUM7UUFDM0QsSUFBSSxhQUFhLEdBQUcsTUFBTSxFQUFFO1lBQ3hCLGFBQWEsR0FBRyxNQUFNLENBQUM7U0FDMUI7UUFFRCxNQUFNLHNCQUFzQixHQUFHLE1BQU0sQ0FBQyxZQUFZLEdBQUcsR0FBRyxDQUFDO1FBRXpELE1BQU0sU0FBUyxHQUFHLENBQUMsR0FBRyxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUM7UUFDdkMsTUFBTSxNQUFNLEdBQ1IsSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUM7WUFDaEIsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQztnQkFDcEIsTUFBTSxDQUFDLGlCQUFpQjtnQkFDeEIsc0JBQXNCO2dCQUN0QixFQUFFLENBQUMscUJBQXFCLEVBQUUsQ0FBQyxnQkFBZ0I7Z0JBQzNDLFNBQVMsQ0FBQyxDQUFDO1FBRW5CLE9BQU8sTUFBTSxDQUFDO0lBQ2xCLENBQUM7SUFFRCxlQUFlLENBQUMsRUFBTSxFQUFFLFNBQWlCLEVBQUUsWUFBWSxHQUFHLEtBQUs7UUFDM0QsTUFBTSxRQUFRLEdBQUcsU0FBUyxLQUFLLFNBQVMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDO1FBQ3JFLElBQUksT0FBTyxHQUFHLENBQUMsQ0FBQztRQUNoQixJQUFJLFFBQVEsSUFBSSxDQUFDLEVBQUU7WUFDZixJQUFJLElBQUksQ0FBQyxVQUFVLEVBQUU7Z0JBQ2pCLElBQUksWUFBWSxFQUFFO29CQUNkLE1BQU0sU0FBUyxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztvQkFDcEQsU0FBUyxDQUFDLGNBQWMsR0FBRyxTQUFTLENBQUMsYUFBYSxDQUFDO29CQUNuRCxPQUFPLEdBQUcsSUFBSSxDQUFDLGlCQUFpQixDQUFDLEVBQUUsRUFBRSxTQUFTLEVBQUUsUUFBUSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztpQkFDN0U7cUJBQU07b0JBQ0gsT0FBTyxHQUFHLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxFQUFFLEVBQUUsSUFBSSxDQUFDLFNBQVMsRUFBRSxRQUFRLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO2lCQUNsRjthQUNKO2lCQUFNO2dCQUNILElBQUksWUFBWSxFQUFFO29CQUNkLE1BQU0sU0FBUyxHQUFHLEVBQUUsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO29CQUNoRCxTQUFTLENBQUMsY0FBYyxHQUFHLFNBQVMsQ0FBQyxhQUFhLENBQUM7b0JBQ25ELE9BQU8sR0FBRyxJQUFJLENBQUMsaUJBQWlCLENBQUMsRUFBRSxFQUFFLFNBQVMsRUFBRSxRQUFRLEVBQUUsRUFBRSxDQUFDLFNBQVMsRUFBRSxDQUFDLENBQUM7aUJBQzdFO3FCQUFNO29CQUNILE9BQU8sR0FBRyxFQUFFLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUsUUFBUSxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztpQkFDckU7YUFDSjtTQUNKO1FBQ0QsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQzlCLENBQUM7SUFFRCxvQkFBb0IsQ0FBQyxFQUFNLEVBQUUsRUFBVTtRQUNuQyxJQUFJLElBQUksQ0FBQyxVQUFVO1lBQUUsT0FBTyxFQUFFLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQyxTQUFTLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFFckcsT0FBTyxFQUFFLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxFQUFFLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsRUFBRSxFQUFFLENBQUMsU0FBUyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDbkcsQ0FBQztJQUVELG9CQUFvQixDQUFDLEVBQU0sRUFBRSxFQUFVO1FBQ25DLElBQUksSUFBSSxDQUFDLFVBQVU7WUFBRSxPQUFPLEVBQUUsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDLFNBQVMsRUFBRSxFQUFFLENBQUMsQ0FBQztRQUVyRyxPQUFPLEVBQUUsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLGdCQUFnQixDQUFDLEVBQUUsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxTQUFTLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztJQUNuRyxDQUFDO0lBRUQsc0JBQXNCLENBQUMsRUFBTSxFQUFFLEVBQVU7UUFDckMsSUFBSSxJQUFJLENBQUMsVUFBVTtZQUFFLE9BQU8sRUFBRSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxJQUFJLENBQUMsU0FBUyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBRXZHLE9BQU8sRUFBRSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsa0JBQWtCLENBQUMsRUFBRSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLEVBQUUsRUFBRSxDQUFDLFNBQVMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQ3JHLENBQUM7SUFFRCxLQUFLLENBQUMsT0FBTyxDQUFDLEVBQU0sRUFBRSxRQUFRLEdBQUcsTUFBTSxDQUFDLGdCQUFnQixFQUFFLFNBQVMsR0FBRyxLQUFLO1FBQ3ZFLElBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUMsRUFBRTtZQUNyQix1REFBdUQ7WUFDdkQsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ3JCLE9BQU8sSUFBSSxDQUFDO1NBQ2Y7UUFFRCxlQUFlO1FBQ2YsTUFBTSxtQkFBbUIsR0FBRyxFQUFFLENBQUMsU0FBUyxFQUFFLENBQUMsT0FBTyxDQUFDO1FBRW5ELGFBQWE7UUFDYixJQUFJLENBQUMsVUFBVSxHQUFHLGFBQWEsQ0FBQyxFQUFFLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBRWhELGNBQWM7UUFDZCxJQUFJLENBQUMsU0FBUyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDdkQsSUFBSSxDQUFDLFFBQVEsR0FBRyxFQUFFLENBQUMsaUJBQWlCLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLEdBQUcsQ0FBQztRQUM1RCxJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUM5QyxJQUFJLENBQUMsV0FBVyxHQUFHLEVBQUUsQ0FBQyx5QkFBeUIsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDakUsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsc0JBQXNCLENBQUMsRUFBRSxDQUFDLENBQUM7UUFFaEQsWUFBWTtRQUNaLElBQUksQ0FBQyxvQkFBb0IsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLEVBQUUsRUFBRSxJQUFJLEVBQUUsbUJBQW1CLENBQUMsQ0FBQztRQUU1RSxJQUFJLENBQUMsV0FBVyxHQUFHLENBQUMsR0FBRyxJQUFJLENBQUMsb0JBQW9CLEdBQUcsQ0FBQyxDQUFDO1FBQ3JELElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLG9CQUFvQixHQUFHLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQztRQUMzRSxJQUFJLENBQUMsZUFBZSxHQUFHLEVBQUUsQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7UUFFaEUsY0FBYztRQUNkLElBQUksQ0FBQyxxQkFBcUIsR0FBRyxFQUFFLENBQUMsYUFBYSxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7UUFFN0QsYUFBYTtRQUNiLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBRTNGLElBQUksQ0FBQyxlQUFlLEdBQUcsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsaUJBQWlCLEdBQUcsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsaUJBQWlCLENBQUM7UUFFN0cscUNBQXFDO1FBQ3JDLHlGQUF5RjtRQUN6RixrREFBa0Q7UUFDbEQsZ0dBQWdHO1FBQ2hHLEVBQUU7UUFDRixzREFBc0Q7UUFDdEQscUNBQXFDO1FBRXJDLHNEQUFzRDtRQUN0RCw4RUFBOEU7UUFDOUUsK0ZBQStGO1FBRS9GLDBCQUEwQjtRQUMxQixrQ0FBa0M7UUFDbEMsc0NBQXNDO1FBRXRDLHFIQUFxSDtRQUNySCwrR0FBK0c7UUFFL0csTUFBTSxXQUFXLEdBQTJGLEVBQUUsQ0FBQztRQUUvRyxJQUFJLFVBQVUsR0FBRyxDQUFDLENBQUM7UUFDbkIsTUFBTSxjQUFjLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUM5QyxPQUFPLElBQUksRUFBRTtZQUNULFVBQVUsRUFBRSxDQUFDO1lBQ2IsTUFBTSxjQUFjLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsV0FBVyxHQUFHLFVBQVUsRUFBRSxjQUFjLENBQUMsQ0FBQztZQUMvRSxNQUFNLFNBQVMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxFQUFFLEVBQUUsY0FBYyxDQUFDLEVBQUUsRUFBRSxDQUFDLFNBQVMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBRWxHLElBQUksU0FBUyxJQUFJLENBQUMsRUFBRTtnQkFDaEIsTUFBTTthQUNUO1lBRUQsTUFBTSxjQUFjLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxFQUFFLEVBQUUsU0FBUyxDQUFDLENBQUM7WUFDdkQsTUFBTSxhQUFhLEdBQUcsY0FBYyxHQUFHLElBQUksQ0FBQyxXQUFXLEdBQUcsQ0FBQyxDQUFDO1lBQzVELE1BQU0sYUFBYSxHQUFHLGFBQWEsR0FBRyxJQUFJLENBQUMsV0FBVyxHQUFHLENBQUMsVUFBVSxHQUFHLENBQUMsQ0FBQyxDQUFDO1lBRTFFLElBQUksYUFBYSxHQUFHLFFBQVEsSUFBSSxjQUFjLEdBQUcsY0FBYztnQkFBRSxNQUFNO1lBRXZFLFdBQVcsQ0FBQyxVQUFVLENBQUMsR0FBRztnQkFDdEIsU0FBUyxFQUFFLFNBQVM7Z0JBQ3BCLGFBQWEsRUFBRSxhQUFhO2dCQUM1QixhQUFhLEVBQUUsYUFBYTthQUMvQixDQUFDO1NBQ0w7UUFFRCxtRUFBbUU7UUFDbkUsOENBQThDO1FBQzlDLG1KQUFtSjtRQUNuSixJQUFJO1FBRUosSUFBSSxDQUFDLFFBQVEsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLE1BQU0sQ0FBQztRQUVoRCxxQkFBcUI7UUFDckIsTUFBTSxlQUFlLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDakUsSUFBSSxrQkFBa0IsR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDLEVBQUUsRUFBRSxlQUFlLENBQUMsQ0FBQztRQUNuRSxJQUFJLHNCQUFzQixHQUFHLEVBQUUsQ0FBQyxxQkFBcUIsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO1FBQzFFLElBQUksY0FBYyxHQUFHLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQztRQUN0RCxJQUFJLG9CQUFvQixHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxzQkFBc0IsR0FBRyxjQUFjLENBQUMsR0FBRyxJQUFJLENBQUMscUJBQXFCLENBQUMsQ0FBQztRQUM3RyxJQUFJLG1CQUFtQixHQUFHLGtCQUFrQixHQUFHLG9CQUFvQixDQUFDO1FBQ3BFLElBQUksY0FBYyxHQUFHLENBQUMsSUFBSSxlQUFlLEdBQUcsSUFBSTtZQUFFLG1CQUFtQixHQUFHLENBQUMsQ0FBQyxDQUFDLGdGQUFnRjtRQUUzSixPQUFPLG1CQUFtQixHQUFHLElBQUksQ0FBQyxVQUFVLEVBQUU7WUFDMUMsa0JBQWtCLEVBQUUsQ0FBQztZQUNyQixzQkFBc0IsR0FBRyxFQUFFLENBQUMscUJBQXFCLENBQUMsa0JBQWtCLENBQUMsQ0FBQztZQUN0RSxjQUFjLEdBQUcsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDO1lBQ2xELG9CQUFvQixHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxzQkFBc0IsR0FBRyxjQUFjLENBQUMsR0FBRyxJQUFJLENBQUMscUJBQXFCLENBQUMsQ0FBQztZQUN6RyxtQkFBbUIsR0FBRyxrQkFBa0IsR0FBRyxvQkFBb0IsQ0FBQztTQUNuRTtRQUVELHNFQUFzRTtRQUN0RSxNQUFNLHFCQUFxQixHQUFHLHdCQUF3QixDQUFDLEVBQUUsRUFBRSxJQUFJLEVBQUUsbUJBQW1CLENBQUMsQ0FBQztRQUV0RixrREFBa0Q7UUFDbEQsSUFBSSxTQUFTLEdBQVksRUFBRSxDQUFDO1FBQzVCLEtBQUssTUFBTSxDQUFDLFdBQVcsRUFBRSxJQUFJLENBQUMsSUFBSSxNQUFNLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxFQUFFO1lBQzNELE1BQU0sVUFBVSxHQUFHLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQztZQUN2QyxNQUFNLGFBQWEsR0FBRyxJQUFJLENBQUMsVUFBVSxHQUFHLG1CQUFtQixDQUFDO1lBQzVELE1BQU0sWUFBWSxHQUFHLG1CQUFtQixHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDO1lBQzNFLE1BQU0sYUFBYSxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUM7WUFFekMsTUFBTSxvQkFBb0IsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLGFBQWEsR0FBRyxZQUFZLENBQUMsQ0FBQztZQUV0RSxNQUFNLFVBQVUsR0FBRyxxQkFBcUIsQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDO1lBRS9ELElBQUksVUFBVSxLQUFLLENBQUMsSUFBSSxtQkFBbUIsR0FBRyxDQUFDLEVBQUU7Z0JBQzdDLFNBQVMsQ0FBQyxJQUFJLENBQUM7b0JBQ1gsVUFBVSxFQUFFLFVBQVU7b0JBQ3RCLFNBQVMsRUFBRSxDQUFDO29CQUNaLFVBQVUsRUFBRSxDQUFDO29CQUNiLGFBQWEsRUFBRSxhQUFhO29CQUM1QixXQUFXLEVBQUUsQ0FBQztvQkFDZCxXQUFXLEVBQUUsQ0FBQztvQkFDZCxpQkFBaUIsRUFBRSxDQUFDO29CQUNwQixpQkFBaUIsRUFBRSxDQUFDO29CQUNwQixlQUFlLEVBQUUsQ0FBQztpQkFDckIsQ0FBQyxDQUFDO2dCQUNILFNBQVM7YUFDWjtZQUVELElBQUksVUFBVSxLQUFLLFNBQVMsRUFBRTtnQkFDMUIsRUFBRSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLHVDQUF1QyxFQUFFLG9CQUFvQixDQUFDLENBQUMsQ0FBQztnQkFDcEYsU0FBUzthQUNaO1lBRUQsSUFBSSxhQUFhLEdBQUcsQ0FBQyxDQUFDO1lBQ3RCLElBQUksU0FBUyxFQUFFO2dCQUNYLGFBQWEsR0FBRyxZQUFZLENBQUM7YUFDaEM7aUJBQU07Z0JBQ0gsTUFBTSxTQUFTLEdBQUcsbUJBQW1CLEdBQUcsQ0FBQyxDQUFDO2dCQUN0QyxJQUFJLFNBQVM7b0JBQUUsZ0JBQWdCLENBQUMsRUFBRSxFQUFFLElBQUksQ0FBQyxLQUFLLEVBQUUsa0JBQWtCLEVBQUUsb0JBQW9CLENBQUMsQ0FBQztnQkFFOUYsS0FBSyxJQUFJLE9BQU8sR0FBRyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLE9BQU8sR0FBRyxVQUFVLEVBQUUsT0FBTyxFQUFFLEVBQUU7b0JBQ25FLE1BQU0sTUFBTSxHQUFHLFNBQVMsQ0FDcEIsRUFBRSxFQUNGLElBQUksQ0FBQyxLQUFLLEVBQ1YsT0FBTyxFQUNQLFVBQVUsQ0FBQyxXQUFXLEVBQ3RCLFVBQVUsQ0FBQyxXQUFXLEVBQ3RCLFVBQVUsQ0FBQyxpQkFBaUIsRUFDNUIsVUFBVSxDQUFDLGlCQUFpQixDQUMvQixDQUFDO29CQUVGLElBQUksTUFBTTt3QkFBRSxhQUFhLEVBQUUsQ0FBQzs7d0JBQ3ZCLE1BQU07aUJBQ2Q7Z0JBRUQsZUFBZSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQzthQUMvQjtZQUVELFNBQVMsQ0FBQyxJQUFJLENBQUM7Z0JBQ1gsVUFBVSxFQUFFLFVBQVU7Z0JBQ3RCLFNBQVMsRUFBRSxVQUFVLENBQUMsU0FBUztnQkFDL0IsVUFBVSxFQUFFLENBQUMsYUFBYSxHQUFHLFVBQVUsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUM7Z0JBQzNFLGFBQWEsRUFBRSxhQUFhO2dCQUM1QixXQUFXLEVBQUUsVUFBVSxDQUFDLFdBQVc7Z0JBQ25DLFdBQVcsRUFBRSxVQUFVLENBQUMsV0FBVztnQkFDbkMsaUJBQWlCLEVBQUUsVUFBVSxDQUFDLGlCQUFpQjtnQkFDL0MsaUJBQWlCLEVBQUUsVUFBVSxDQUFDLGlCQUFpQjtnQkFDL0MsZUFBZSxFQUFFLENBQUMsVUFBVSxDQUFDLFNBQVMsR0FBRyxFQUFFLENBQUMsaUJBQWlCLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLEdBQUcsR0FBRzthQUN4RixDQUFDLENBQUM7U0FDTjtRQUVELFNBQVMsR0FBRyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLFVBQVUsR0FBRyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUM7UUFFbEUsZ0VBQWdFO1FBRWhFLE1BQU0sV0FBVyxHQUFHLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUVqQyxJQUFJLENBQUMsV0FBVyxFQUFFO1lBQ2QsSUFBSSxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUM7WUFDbkIsSUFBSSxDQUFDLFdBQVcsR0FBRyxDQUFDLENBQUM7WUFDckIsSUFBSSxDQUFDLFdBQVcsR0FBRyxDQUFDLENBQUM7WUFDckIsSUFBSSxDQUFDLGlCQUFpQixHQUFHLENBQUMsQ0FBQztZQUMzQixJQUFJLENBQUMsaUJBQWlCLEdBQUcsQ0FBQyxDQUFDO1lBQzNCLElBQUksQ0FBQyxVQUFVLEdBQUcsQ0FBQyxDQUFDO1lBQ3BCLElBQUksQ0FBQyxhQUFhLEdBQUcsTUFBTSxDQUFDLGdCQUFnQixDQUFDO1lBQzdDLElBQUksQ0FBQyxZQUFZLEdBQUc7Z0JBQ2hCLG1CQUFtQixFQUFFLG1CQUFtQjtnQkFDeEMsa0JBQWtCLEVBQUUsa0JBQWtCO2dCQUN0QyxvQkFBb0IsRUFBRSxvQkFBb0I7YUFDN0MsQ0FBQztZQUVGLE9BQU8sS0FBSyxDQUFDO1NBQ2hCO1FBRUQsSUFBSSxDQUFDLFNBQVMsR0FBRyxXQUFXLENBQUMsU0FBUyxDQUFDO1FBQ3ZDLElBQUksQ0FBQyxXQUFXLEdBQUcsV0FBVyxDQUFDLFdBQVcsQ0FBQztRQUMzQyxJQUFJLENBQUMsV0FBVyxHQUFHLFdBQVcsQ0FBQyxXQUFXLENBQUM7UUFDM0MsSUFBSSxDQUFDLGlCQUFpQixHQUFHLFdBQVcsQ0FBQyxpQkFBaUIsQ0FBQztRQUN2RCxJQUFJLENBQUMsaUJBQWlCLEdBQUcsV0FBVyxDQUFDLGlCQUFpQixDQUFDO1FBQ3ZELElBQUksQ0FBQyxVQUFVLEdBQUcsV0FBVyxDQUFDLFVBQVUsQ0FBQztRQUN6QyxJQUFJLENBQUMsYUFBYSxHQUFHLFdBQVcsQ0FBQyxhQUFhLENBQUM7UUFDL0MsSUFBSSxDQUFDLFlBQVksR0FBRztZQUNoQixtQkFBbUIsRUFBRSxtQkFBbUI7WUFDeEMsa0JBQWtCLEVBQUUsa0JBQWtCO1lBQ3RDLG9CQUFvQixFQUFFLG9CQUFvQjtTQUM3QyxDQUFDO1FBRUYsSUFBSSxDQUFDLGFBQWEsR0FBRyxXQUFXLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLGFBQWEsQ0FBQztRQUNoRSxNQUFNLHVCQUF1QixHQUFHLFdBQVcsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsU0FBUyxDQUFDO1FBQ3ZFLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxFQUFFLEVBQUUsdUJBQXVCLENBQUMsQ0FBQztRQUM5RCxNQUFNLHVCQUF1QixHQUFHLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxFQUFFLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQzdFLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxFQUFFLEVBQUUsdUJBQXVCLENBQUMsQ0FBQztRQUM5RCxNQUFNLHlCQUF5QixHQUFHLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxFQUFFLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ2pGLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxFQUFFLEVBQUUseUJBQXlCLENBQUMsQ0FBQztRQUVsRSxtRUFBbUU7UUFDbkUsSUFBSSxJQUFJLENBQUMsVUFBVTtZQUFFLE9BQU8sSUFBSSxDQUFDO1FBRWpDLE1BQU0sY0FBYyxHQUFHLENBQUMsQ0FBQztRQUN6QixNQUFNLG9CQUFvQixHQUFHLElBQUksQ0FBQyxPQUFPLEdBQUcsQ0FBQyxDQUFDO1FBQzlDLE1BQU0sY0FBYyxHQUFHLElBQUksQ0FBQyxPQUFPLEdBQUcsQ0FBQyxDQUFDO1FBQ3hDLE1BQU0sb0JBQW9CLEdBQUcsSUFBSSxDQUFDLE9BQU8sR0FBRyxDQUFDLENBQUM7UUFFOUMsSUFBSSxtQkFBbUIsR0FBRyxDQUFDLEVBQUU7WUFDekIsTUFBTSxlQUFlLEdBQUcsaUJBQWlCLENBQ3JDLEVBQUUsRUFDRixJQUFJLEVBQ0osdUJBQXVCLEVBQ3ZCLHlCQUF5QixFQUN6QixtQkFBbUIsRUFDbkIsY0FBYyxFQUNkLG9CQUFvQixFQUNwQixrQkFBa0IsRUFDbEIsb0JBQW9CLENBQ3ZCLENBQUM7WUFFRixJQUFJLENBQUMsZUFBZSxFQUFFO2dCQUNsQixJQUFJLENBQUMsRUFBRSxFQUFFLG9EQUFvRCxDQUFDLENBQUM7Z0JBQy9ELHdCQUF3QixDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUM7Z0JBRXhDLGtCQUFrQixDQUNkLEVBQUUsRUFDRixJQUFJLEVBQ0osdUJBQXVCLEVBQ3ZCLHlCQUF5QixFQUN6QixtQkFBbUIsRUFDbkIsY0FBYyxFQUNkLG9CQUFvQixFQUNwQixrQkFBa0IsRUFDbEIsb0JBQW9CLENBQ3ZCLENBQUM7YUFDTDtTQUNKO1FBRUQsTUFBTSxhQUFhLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQztRQUN0QyxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsYUFBYSxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQ3BDLElBQUksbUJBQW1CLEdBQUcsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDO2dCQUFFLFNBQVM7WUFDakQsTUFBTSxlQUFlLEdBQUcsVUFBVSxDQUM5QixFQUFFLEVBQ0YsSUFBSSxFQUNKLENBQUMsRUFDRCx1QkFBdUIsRUFDdkIsdUJBQXVCLEVBQ3ZCLHlCQUF5QixFQUN6QixtQkFBbUIsRUFDbkIsY0FBYyxFQUNkLGNBQWMsRUFDZCxvQkFBb0IsRUFDcEIsb0JBQW9CLENBQ3ZCLENBQUM7WUFFRixJQUFJLENBQUMsZUFBZSxFQUFFO2dCQUNsQixJQUFJLElBQUksQ0FBQyxVQUFVLEdBQUcsQ0FBQyxFQUFFO29CQUNyQixJQUFJLENBQUMsRUFBRSxFQUFFLHFDQUFxQyxFQUFFLENBQUMsQ0FBQyxDQUFDO29CQUNuRCxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUM7b0JBQ2xCLHdCQUF3QixDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUM7aUJBQzNDO3FCQUFNO29CQUNILElBQUksQ0FBQyxFQUFFLEVBQUUsdUNBQXVDLENBQUMsQ0FBQztvQkFDbEQsV0FBVyxDQUNQLEVBQUUsRUFDRixJQUFJLEVBQ0osQ0FBQyxFQUNELHVCQUF1QixFQUN2Qix1QkFBdUIsRUFDdkIseUJBQXlCLEVBQ3pCLG1CQUFtQixFQUNuQixjQUFjLEVBQ2QsY0FBYyxFQUNkLG9CQUFvQixFQUNwQixvQkFBb0IsQ0FDdkIsQ0FBQztpQkFDTDthQUNKO1NBQ0o7UUFFRCxNQUFNLElBQUksR0FBRyxFQUFFLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2pDLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUNiLElBQUksQ0FBQyxLQUFLLENBQ04sSUFBSSxDQUFDLFNBQVMsQ0FBQztZQUNYLElBQUksSUFBSSxFQUFFO1lBQ1YsSUFBSSxDQUFDLGFBQWE7WUFDbEIsSUFBSSxDQUFDLFVBQVU7WUFDZixFQUFFLENBQUMsZUFBZSxDQUFDLEVBQUUsQ0FBQyxhQUFhLEVBQUUsRUFBRSxFQUFFLENBQUMsV0FBVyxFQUFFLEVBQUUsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsUUFBUSxFQUFFO1lBQy9FLE9BQU87U0FDVixDQUFDLENBQ0wsQ0FBQztRQUVGLElBQUksQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUM7UUFFbEIsTUFBTSxJQUFJLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ3ZCLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQztRQUVwQixPQUFPLElBQUksQ0FBQztJQUNoQixDQUFDO0lBRUQsb0JBQW9CLENBQUMsRUFBTSxFQUFFLG1CQUEyQixFQUFFLFNBQWtCO1FBQ3hFLElBQUksT0FBTyxHQUFHLENBQUMsQ0FBQztRQUNoQixLQUFLLE1BQU0sS0FBSyxJQUFJLFNBQVMsRUFBRTtZQUMzQixJQUFJLEVBQUUsT0FBTyxHQUFHLEdBQUc7Z0JBQUUsT0FBTztZQUM1QixJQUFJLFlBQVksR0FDWixLQUFLLENBQUMsV0FBVyxHQUFHLEtBQUssQ0FBQyxXQUFXLEdBQUcsS0FBSyxDQUFDLGlCQUFpQixHQUFHLEtBQUssQ0FBQyxpQkFBaUIsQ0FBQztZQUM5RixJQUFJLEtBQUssQ0FBQyxXQUFXLEtBQUssU0FBUztnQkFBRSxZQUFZLEdBQUcsQ0FBQyxDQUFDO1lBQ3RELElBQUksWUFBWSxHQUFHLG1CQUFtQixHQUFHLFlBQVksR0FBRyxDQUFDLEtBQUssQ0FBQyxVQUFVLEdBQUcsQ0FBQyxDQUFDLENBQUM7WUFDL0UsSUFBSSxtQkFBbUIsS0FBSyxDQUFDLEVBQUU7Z0JBQzNCLFlBQVksR0FBRyxZQUFZLEdBQUcsS0FBSyxDQUFDLFVBQVUsQ0FBQzthQUNsRDtZQUNELE1BQU0sUUFBUSxHQUFHLFlBQVksR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDO1lBQ2hELEVBQUUsQ0FBQyxPQUFPLENBQ04sc0RBQXNELEVBQ3RELEtBQUssQ0FBQyxVQUFVLEVBQ2hCLElBQUksQ0FBQyxVQUFVLEVBQ2YsRUFBRSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsVUFBVSxFQUFFLFdBQVcsQ0FBQyxFQUN6QyxLQUFLLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQ2pELG1CQUFtQixFQUNuQixZQUFZLEVBQ1osWUFBWSxFQUNaLFFBQVEsRUFDUixLQUFLLENBQUMsV0FBVyxFQUNqQixLQUFLLENBQUMsV0FBVyxFQUNqQixLQUFLLENBQUMsaUJBQWlCLEVBQ3ZCLEtBQUssQ0FBQyxpQkFBaUIsRUFDdkIsUUFBUSxDQUFDLEVBQUUsRUFBRSxLQUFLLENBQUMsYUFBYSxDQUFDLENBQ3BDLENBQUM7U0FDTDtJQUNMLENBQUM7SUFFRCxRQUFRLENBQUMsRUFBTTtRQUNYLElBQUksSUFBSSxDQUFDLFlBQVksQ0FBQyxtQkFBbUIsR0FBRyxDQUFDLEVBQUU7WUFDM0MsSUFBSSxDQUNBLEVBQUUsRUFDRiwyREFBMkQsRUFDM0QsSUFBSSxDQUFDLFVBQVUsRUFDZixJQUFJLENBQUMsWUFBWSxDQUFDLGtCQUFrQixFQUNwQyxJQUFJLENBQUMsWUFBWSxDQUFDLG9CQUFvQixFQUN0QyxJQUFJLENBQUMsWUFBWSxDQUFDLG1CQUFtQixDQUN4QyxDQUFDO1NBQ0w7UUFFRCxNQUFNLGVBQWUsR0FBRyxDQUFDLElBQUksQ0FBQyxTQUFTLEdBQUcsRUFBRSxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQztRQUV2RixJQUFJLENBQ0EsRUFBRSxFQUNGLDZEQUE2RCxFQUM3RCxJQUFJLENBQUMsVUFBVSxFQUNmLElBQUksQ0FBQyxXQUFXLEVBQ2hCLElBQUksQ0FBQyxpQkFBaUIsRUFDdEIsSUFBSSxDQUFDLFdBQVcsRUFDaEIsSUFBSSxDQUFDLGlCQUFpQixFQUN0QixJQUFJLENBQUMsZUFBZSxFQUNwQixJQUFJLENBQUMsZUFBZSxHQUFHLElBQUksQ0FBQyxVQUFVLEVBQ3RDLElBQUksQ0FBQyxlQUFlLEdBQUcsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLG1CQUFtQixFQUM5RSxJQUFJLENBQUMsVUFBVSxFQUNmLElBQUksQ0FBQyxVQUFVLEVBQ2YsSUFBSSxDQUFDLFFBQVEsQ0FDaEIsQ0FBQztRQUVGLElBQUksQ0FDQSxFQUFFLEVBQ0YsZ0RBQWdELEVBQ2hELElBQUksQ0FBQyxVQUFVLEVBQ2YsRUFBRSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLFdBQVcsQ0FBQyxFQUN2QyxFQUFFLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLFVBQVUsRUFBRSxXQUFXLENBQUMsRUFDekQsZUFBZSxFQUNmLGVBQWUsR0FBRyxJQUFJLENBQUMsVUFBVSxFQUNqQyxFQUFFLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLEdBQUcsSUFBSSxFQUFFLFdBQVcsQ0FBQyxDQUM1RixDQUFDO1FBRUYsSUFBSSxDQUNBLEVBQUUsRUFDRixnREFBZ0QsRUFDaEQsSUFBSSxDQUFDLFVBQVUsRUFDZixTQUFTLENBQUMsRUFBRSxFQUFFLElBQUksQ0FBQyxhQUFhLEVBQUUsSUFBSSxDQUFDLEVBQ3ZDLFFBQVEsQ0FBQyxFQUFFLEVBQUUsSUFBSSxDQUFDLGFBQWEsRUFBRSxJQUFJLENBQUMsRUFDdEMsUUFBUSxDQUFDLEVBQUUsRUFBRSxJQUFJLENBQUMsYUFBYSxHQUFHLElBQUksQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDLENBQzNELENBQUM7SUFDTixDQUFDO0lBRUQsS0FBSyxDQUFDLE9BQU8sQ0FBQyxFQUFNO1FBQ2hCLElBQUksS0FBSyxHQUF5QixFQUFFLENBQUM7UUFDckMsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQy9FLEtBQUssR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUM7UUFFbEQsSUFBSSxDQUFDLE9BQU8sR0FBRyxDQUFDLENBQUM7UUFDakIsSUFBSSxpQkFBaUIsR0FBRyxDQUFDLENBQUM7UUFDMUIsTUFBTSxTQUFTLEdBQUcsSUFBSSxJQUFJLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUN2QyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxhQUFhLEdBQUcsU0FBUyxDQUFDLENBQUMsQ0FBQztRQUN0RCxPQUFPLEtBQUssQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1lBQ3JCLE1BQU0sSUFBSSxHQUFHLEtBQUssQ0FBQyxHQUFHLEVBQUUsQ0FBQztZQUV6QixJQUFJLElBQUksS0FBSyxTQUFTO2dCQUFFLE1BQU07WUFFOUIsT0FBTyxJQUFJLElBQUksRUFBRSxDQUFDLE9BQU8sRUFBRSxHQUFHLFNBQVMsR0FBRyxJQUFJLENBQUMsTUFBTTtnQkFBRSxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFFekUsd0ZBQXdGO1lBQ3hGLE1BQU0sVUFBVSxHQUFHLElBQUksSUFBSSxFQUFFLENBQUMsT0FBTyxFQUFFLEdBQUcsU0FBUyxDQUFDO1lBQ3BELE1BQU0sVUFBVSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUN0RCxJQUFJLFVBQVUsR0FBRyxJQUFJLENBQUMsT0FBTyxHQUFHLENBQUMsRUFBRTtnQkFDL0IsS0FBSyxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxPQUFPLEtBQUssSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO2dCQUN4RCxFQUFFLENBQUMsS0FBSyxDQUNKLEVBQUUsQ0FBQyxPQUFPLENBQ04sdUdBQXVHLEVBQ3ZHLElBQUksQ0FBQyxNQUFNLEVBQ1gsSUFBSSxDQUFDLE1BQU0sRUFDWCxJQUFJLENBQUMsT0FBTyxFQUNaLFVBQVUsR0FBRyxJQUFJLENBQUMsTUFBTSxFQUN4QixJQUFJLENBQUMsT0FBTyxHQUFHLENBQUMsRUFDaEIsUUFBUSxDQUFDLEVBQUUsRUFBRSxJQUFJLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxFQUMvQixRQUFRLENBQUMsRUFBRSxFQUFFLFVBQVUsRUFBRSxJQUFJLENBQUMsQ0FDakMsQ0FDSixDQUFDO2dCQUNGLFNBQVM7YUFDWjtZQUVELE1BQU0sR0FBRyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1lBQ25GLElBQUksaUJBQWlCLElBQUksSUFBSSxDQUFDLE1BQU0sRUFBRTtnQkFDbEMsSUFBSSxDQUFDLE9BQU8sR0FBRyxHQUFHLENBQUM7Z0JBQ25CLGlCQUFpQixHQUFHLElBQUksQ0FBQyxNQUFNLENBQUM7YUFDbkM7U0FDSjtJQUNMLENBQUM7SUFFRCxZQUFZO1FBQ1IsS0FBSyxNQUFNLElBQUksSUFBSSxJQUFJLENBQUMsS0FBSyxFQUFFO1lBQzNCLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztTQUNoQjtJQUNMLENBQUM7SUFFRCxVQUFVLENBQUMsRUFBTTtRQUNiLElBQUksSUFBSSxDQUFDLFVBQVU7WUFBRSxPQUFPLEtBQUssQ0FBQztRQUNsQyxJQUFJLElBQUksQ0FBQyxPQUFPLEtBQUssQ0FBQztZQUFFLE9BQU8sS0FBSyxDQUFDO1FBRXJDLElBQUksRUFBRSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBRTtZQUNuQyxPQUFPLElBQUksQ0FBQztTQUNmO1FBRUQsSUFBSSxDQUFDLE9BQU8sR0FBRyxDQUFDLENBQUM7UUFDakIsT0FBTyxLQUFLLENBQUM7SUFDakIsQ0FBQztJQUVELFFBQVEsQ0FBQyxFQUFNO1FBQ1gsSUFBSSxDQUFDLFNBQVMsR0FBRyxFQUFFLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUMvQyxJQUFJLENBQUMsU0FBUyxHQUFHLEVBQUUsQ0FBQyxTQUFTLEVBQUUsQ0FBQztJQUNwQyxDQUFDO0lBRUQsS0FBSyxDQUFDLE9BQU8sQ0FBQyxFQUFNLEVBQUUsSUFBWTtRQUM5QixJQUFJLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ2xCLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDO1FBRXZCLElBQUksU0FBUyxHQUFHLENBQUMsQ0FBQztRQUNsQixJQUFJLE9BQU8sR0FBRyxDQUFDLENBQUM7UUFDaEIsSUFBSSxRQUFRLEdBQUcsQ0FBQyxDQUFDLENBQUMsNEJBQTRCO1FBRTlDLE9BQU8sSUFBSSxFQUFFO1lBQ1QsSUFBSSxRQUFRLEtBQUssQ0FBQyxFQUFFO2dCQUNoQixNQUFNLE1BQU0sR0FBRyxNQUFNLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBRSxFQUFFLElBQUksR0FBRyxPQUFPLEVBQUUsSUFBSSxDQUFDLENBQUM7Z0JBQzVELElBQUksQ0FBQyxNQUFNO29CQUFFLE1BQU07Z0JBRW5CLElBQUksSUFBSSxDQUFDLFlBQVksQ0FBQyxtQkFBbUIsS0FBSyxDQUFDO29CQUFFLFFBQVEsR0FBRyxDQUFDLENBQUM7Z0JBQzlELElBQUksQ0FBQyxTQUFTLENBQUMsY0FBYyxJQUFJLEVBQUUsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FDNUQsSUFBSSxDQUFDLFNBQVMsRUFDZCxJQUFJLENBQUMsWUFBWSxDQUFDLGtCQUFrQixFQUNwQyxJQUFJLENBQUMsU0FBUyxDQUNqQixDQUFDO2dCQUNGLElBQUksQ0FBQyxTQUFTLENBQUMsY0FBYyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxjQUFjLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsQ0FBQztnQkFDakcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxjQUFjLElBQUksRUFBRSxDQUFDLHFCQUFxQixDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsa0JBQWtCLENBQUMsQ0FBQztnQkFDaEcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxjQUFjLElBQUksRUFBRSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLG9CQUFvQixDQUFDLENBQUM7Z0JBQzFGLElBQUksQ0FBQyxTQUFTLENBQUMsY0FBYyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxhQUFhLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxjQUFjLENBQUMsQ0FBQztnQkFFdEcsU0FBUyxJQUFJLElBQUksQ0FBQyxTQUFTLEdBQUcsQ0FBQyxJQUFJLENBQUMsVUFBVSxHQUFHLENBQUMsQ0FBQyxDQUFDO2dCQUNwRCxPQUFPLElBQUksSUFBSSxDQUFDLGFBQWEsQ0FBQzthQUNqQztpQkFBTTtnQkFDSCxNQUFNLGFBQWEsR0FBRyxJQUFJLEdBQUcsT0FBTyxDQUFDO2dCQUNyQyxNQUFNLGVBQWUsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7Z0JBRXZFLFNBQVMsSUFBSSxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxVQUFVLEdBQUcsZUFBZSxDQUFDO2dCQUNoRSxPQUFPLElBQUksSUFBSSxDQUFDLGFBQWEsR0FBRyxlQUFlLENBQUM7Z0JBRWhELE1BQU07YUFDVDtTQUNKO1FBRUQsSUFBSSxDQUFDLFVBQVUsR0FBRyxLQUFLLENBQUM7UUFFeEIsSUFBSSxTQUFTLEtBQUssQ0FBQyxFQUFFO1lBQ2pCLEVBQUUsQ0FBQyxPQUFPLENBQ04sbUJBQW1CLEVBQ25CLElBQUksQ0FBQyxVQUFVLEVBQ2YsUUFBUSxDQUFDLEVBQUUsRUFBRSxJQUFJLENBQUMsYUFBYSxDQUFDLEVBQ2hDLElBQUksQ0FBQyxTQUFTLENBQUMsY0FBYyxFQUM3QixJQUFJLENBQUMsU0FBUyxDQUFDLGFBQWEsQ0FDL0IsQ0FBQztZQUNGLE9BQU8sQ0FBQyxDQUFDO1NBQ1o7UUFFRCxPQUFPLFNBQVMsR0FBRyxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsQ0FBQztJQUN4QyxDQUFDO0NBQ0oifQ==\",\"filename\":\"/lib/hack/mod_hack_env.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":16.35,\"server\":\"home\",\"moduleSequenceNumber\":92588,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getBitNodeMultipliers\",\"cost\":4},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getScriptIncome\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { allHosts, serverIsHackable, canExecuteOnServer, cleanLogs, doBuyAndSoftenAll } from \\\"lib/util\\\";\\r\\nimport { ModHackEnv } from \\\"lib/hack/mod_hack_env\\\";\\r\\nasync function calcIncome(ns, target, hosts, simMinutes = 2) {\\r\\n    return await new ModHackEnv(ns, target, hosts).fastSim(ns, 1000 * 60 * simMinutes);\\r\\n}\\r\\nexport async function main(ns) {\\r\\n    cleanLogs(ns);\\r\\n    doBuyAndSoftenAll(ns);\\r\\n    const allHostnames = allHosts(ns);\\r\\n    const executableHosts = allHostnames\\r\\n        .filter(canExecuteOnServer.bind(null, ns))\\r\\n        .filter((x) => x.indexOf(\\\"hacknet-node\\\") === -1);\\r\\n    const targetArr = allHostnames.filter(serverIsHackable.bind(null, ns)).filter((x) => ns.getServerMaxMoney(x) > 1);\\r\\n    let minutes = Number.MAX_SAFE_INTEGER / 60 / 1000;\\r\\n    if (ns.args[0] && !isNaN(Number(ns.args[0])))\\r\\n        minutes = Number(ns.args[0]);\\r\\n    let orderedTargetArr = [];\\r\\n    for (const target of targetArr) {\\r\\n        const income = await calcIncome(ns, target, executableHosts, minutes);\\r\\n        orderedTargetArr.push({ target: target, income: income });\\r\\n    }\\r\\n    orderedTargetArr = orderedTargetArr.sort((a, b) => b.income - a.income);\\r\\n    for (const ti of orderedTargetArr) {\\r\\n        ns.tprintf(\\\"%15s: %s/s\\\", ti.target, ns.nFormat(ti.income, \\\"($0.000a)\\\"));\\r\\n    }\\r\\n    if (ns.args[1] === \\\"check\\\") {\\r\\n        return;\\r\\n    }\\r\\n    const env = new ModHackEnv(ns, orderedTargetArr[0].target, executableHosts);\\r\\n    await ns.sleep(2000);\\r\\n    await env.init(ns, true);\\r\\n    while (await env.refresh(ns, minutes * 60 * 1000))\\r\\n        ;\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9kX2hhY2suanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJtb2RfaGFjay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsUUFBUSxFQUFFLGdCQUFnQixFQUFFLGtCQUFrQixFQUFFLFNBQVMsRUFBRSxpQkFBaUIsRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUN4RyxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFFbkQsS0FBSyxVQUFVLFVBQVUsQ0FBQyxFQUFNLEVBQUUsTUFBYyxFQUFFLEtBQWUsRUFBRSxVQUFVLEdBQUcsQ0FBQztJQUM3RSxPQUFPLE1BQU0sSUFBSSxVQUFVLENBQUMsRUFBRSxFQUFFLE1BQU0sRUFBRSxLQUFLLENBQUMsQ0FBQyxPQUFPLENBQUMsRUFBRSxFQUFFLElBQUksR0FBRyxFQUFFLEdBQUcsVUFBVSxDQUFDLENBQUM7QUFDdkYsQ0FBQztBQU9ELE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsU0FBUyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ2QsaUJBQWlCLENBQUMsRUFBRSxDQUFDLENBQUM7SUFFdEIsTUFBTSxZQUFZLEdBQUcsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ2xDLE1BQU0sZUFBZSxHQUFHLFlBQVk7U0FDL0IsTUFBTSxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLENBQUM7U0FDekMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLGNBQWMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDckQsTUFBTSxTQUFTLEdBQUcsWUFBWSxDQUFDLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFFbEgsSUFBSSxPQUFPLEdBQUcsTUFBTSxDQUFDLGdCQUFnQixHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUM7SUFDbEQsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFBRSxPQUFPLEdBQUcsTUFBTSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUUzRSxJQUFJLGdCQUFnQixHQUFtQixFQUFFLENBQUM7SUFDMUMsS0FBSyxNQUFNLE1BQU0sSUFBSSxTQUFTLEVBQUU7UUFDNUIsTUFBTSxNQUFNLEdBQUcsTUFBTSxVQUFVLENBQUMsRUFBRSxFQUFFLE1BQU0sRUFBRSxlQUFlLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFDdEUsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLENBQUMsQ0FBQztLQUM3RDtJQUVELGdCQUFnQixHQUFHLGdCQUFnQixDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBRXhFLEtBQUssTUFBTSxFQUFFLElBQUksZ0JBQWdCLEVBQUU7UUFDL0IsRUFBRSxDQUFDLE9BQU8sQ0FBQyxZQUFZLEVBQUUsRUFBRSxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsV0FBVyxDQUFDLENBQUMsQ0FBQztLQUMzRTtJQUVELElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxPQUFPLEVBQUU7UUFDeEIsT0FBTztLQUNWO0lBRUQsTUFBTSxHQUFHLEdBQUcsSUFBSSxVQUFVLENBQUMsRUFBRSxFQUFFLGdCQUFnQixDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sRUFBRSxlQUFlLENBQUMsQ0FBQztJQUM1RSxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFckIsTUFBTSxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUN6QixPQUFPLE1BQU0sR0FBRyxDQUFDLE9BQU8sQ0FBQyxFQUFFLEVBQUUsT0FBTyxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUM7UUFBQyxDQUFDO0FBQ3ZELENBQUMifQ==\",\"filename\":\"mod_hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/util.js\",\"url\":\"blob:file:///1e8f195b-591c-41ee-a73f-abec197e6225\",\"moduleSequenceNumber\":90050},{\"filename\":\"/lib/hack/host.js\",\"url\":\"blob:file:///8fd1c835-d97e-4b43-82dc-00bd1ebd2149\",\"moduleSequenceNumber\":92586},{\"filename\":\"/lib/hack/cycle_production.js\",\"url\":\"blob:file:///bd06ad29-d5db-4a76-b782-48122ddbfe91\",\"moduleSequenceNumber\":92582},{\"filename\":\"/lib/util.js\",\"url\":\"blob:file:///9866f60d-b9b4-41e1-b9e7-52ae31438f8a\",\"moduleSequenceNumber\":90050},{\"filename\":\"/lib/hack/mod_hack_env.js\",\"url\":\"blob:file:///76dfd461-9c63-47fd-95f9-66ef384b184d\",\"moduleSequenceNumber\":92588},{\"filename\":\"/lib/util.js\",\"url\":\"blob:file:///28de9303-9579-446a-8d9c-d2c455aad1cb\",\"moduleSequenceNumber\":90050},{\"filename\":\"mod_hack.js\",\"url\":\"blob:file:///7266c441-5109-40e5-b840-85ac9a2ec399\",\"moduleSequenceNumber\":93962}],\"dependents\":[],\"ramUsage\":21.15,\"server\":\"home\",\"moduleSequenceNumber\":93962,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getBitNodeMultipliers\",\"cost\":4},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getScriptIncome\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"purchaseTor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"purchaseProgram\",\"cost\":2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    await ns.suppress(ns.args[0].toString());\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3VwcHJlc3MuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9zdXBwcmVzcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFPO0lBQzlCLE1BQU0sRUFBRSxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7QUFDN0MsQ0FBQyJ9\",\"filename\":\"/lib/exec/suppress.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/exec/suppress.js\",\"url\":\"blob:file:///f8602c98-49d5-44b2-b9e1-e68570c71783\",\"moduleSequenceNumber\":13971}],\"dependents\":[],\"ramUsage\":3.5,\"server\":\"home\",\"moduleSequenceNumber\":83097,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"suppress\",\"cost\":1.9}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { writeOut } from \\\"lib/util\\\";\\r\\nexport async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    const startTime = new Date().getTime();\\r\\n    const startSec = ns.getServerSecurityLevel(data.target);\\r\\n    const startCash = ns.getServerMoneyAvailable(data.target);\\r\\n    const result = await ns.grow(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n    const endTime = new Date().getTime();\\r\\n    await writeOut(ns, data, startTime, endTime, result.toFixed(2), startSec, startCash);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjIGNvcHkvZ3Jvdy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sVUFBVSxDQUFDO0FBR3BDLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxJQUFJLEdBQXVCLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO0lBRW5FLE1BQU0sU0FBUyxHQUFHLElBQUksSUFBSSxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUM7SUFDdkMsTUFBTSxRQUFRLEdBQUcsRUFBRSxDQUFDLHNCQUFzQixDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUN4RCxNQUFNLFNBQVMsR0FBRyxFQUFFLENBQUMsdUJBQXVCLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQzFELE1BQU0sTUFBTSxHQUFHLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFO1FBQ3RDLGtCQUFrQixFQUFFLElBQUksQ0FBQyxlQUFlO1FBQ3hDLGtCQUFrQixFQUFFLElBQUksQ0FBQyxlQUFlO0tBQzNDLENBQUMsQ0FBQztJQUNILE1BQU0sT0FBTyxHQUFHLElBQUksSUFBSSxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUM7SUFFckMsTUFBTSxRQUFRLENBQUMsRUFBRSxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsT0FBTyxFQUFFLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsUUFBUSxFQUFFLFNBQVMsQ0FBQyxDQUFDO0FBQ3pGLENBQUMifQ==\",\"filename\":\"/lib/exec-copy/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.95,\"server\":\"home\",\"moduleSequenceNumber\":83098,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { writeOut } from \\\"lib/util\\\";\\r\\nexport async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    const startTime = new Date().getTime();\\r\\n    const startSec = ns.getServerSecurityLevel(data.target);\\r\\n    const startCash = ns.getServerMoneyAvailable(data.target);\\r\\n    const result = ns.nFormat(await ns.hack(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    }), \\\"($0.000a)\\\");\\r\\n    const endTime = new Date().getTime();\\r\\n    await writeOut(ns, data, startTime, endTime, result, startSec, startCash);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjIGNvcHkvaGFjay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sVUFBVSxDQUFDO0FBR3BDLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxJQUFJLEdBQXVCLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO0lBRW5FLE1BQU0sU0FBUyxHQUFHLElBQUksSUFBSSxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUM7SUFDdkMsTUFBTSxRQUFRLEdBQUcsRUFBRSxDQUFDLHNCQUFzQixDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUN4RCxNQUFNLFNBQVMsR0FBRyxFQUFFLENBQUMsdUJBQXVCLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQzFELE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxPQUFPLENBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFO1FBQ3ZCLGtCQUFrQixFQUFFLElBQUksQ0FBQyxlQUFlO1FBQ3hDLGtCQUFrQixFQUFFLElBQUksQ0FBQyxlQUFlO0tBQzNDLENBQUMsRUFDRixXQUFXLENBQ2QsQ0FBQztJQUNGLE1BQU0sT0FBTyxHQUFHLElBQUksSUFBSSxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUM7SUFFckMsTUFBTSxRQUFRLENBQUMsRUFBRSxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsT0FBTyxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUUsU0FBUyxDQUFDLENBQUM7QUFDOUUsQ0FBQyJ9\",\"filename\":\"/lib/exec-copy/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.9,\"server\":\"home\",\"moduleSequenceNumber\":83099,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    await ns.suppress(ns.args[0].toString());\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3VwcHJlc3MuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYyBjb3B5L3N1cHByZXNzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU87SUFDOUIsTUFBTSxFQUFFLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztBQUM3QyxDQUFDIn0=\",\"filename\":\"/lib/exec-copy/suppress.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.5,\"server\":\"home\",\"moduleSequenceNumber\":83100,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"suppress\",\"cost\":1.9}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { writeOut } from \\\"lib/util\\\";\\r\\nexport async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    const startTime = new Date().getTime();\\r\\n    const startSec = ns.getServerSecurityLevel(data.target);\\r\\n    const startCash = ns.getServerMoneyAvailable(data.target);\\r\\n    const result = await ns.weaken(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n    const endTime = new Date().getTime();\\r\\n    await writeOut(ns, data, startTime, endTime, result.toFixed(2), startSec, startCash);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMgY29weS93ZWFrZW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUdwQyxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE1BQU0sSUFBSSxHQUF1QixJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztJQUVuRSxNQUFNLFNBQVMsR0FBRyxJQUFJLElBQUksRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDO0lBQ3ZDLE1BQU0sUUFBUSxHQUFHLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDeEQsTUFBTSxTQUFTLEdBQUcsRUFBRSxDQUFDLHVCQUF1QixDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUMxRCxNQUFNLE1BQU0sR0FBRyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRTtRQUN4QyxrQkFBa0IsRUFBRSxJQUFJLENBQUMsZUFBZTtRQUN4QyxrQkFBa0IsRUFBRSxJQUFJLENBQUMsZUFBZTtLQUMzQyxDQUFDLENBQUM7SUFDSCxNQUFNLE9BQU8sR0FBRyxJQUFJLElBQUksRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDO0lBRXJDLE1BQU0sUUFBUSxDQUFDLEVBQUUsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLE9BQU8sRUFBRSxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLFFBQVEsRUFBRSxTQUFTLENBQUMsQ0FBQztBQUN6RixDQUFDIn0=\",\"filename\":\"/lib/exec-copy/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.95,\"server\":\"home\",\"moduleSequenceNumber\":83101,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { writeOut } from \\\"lib/util\\\";\\r\\nexport async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    const startTime = new Date().getTime();\\r\\n    const startSec = ns.getServerSecurityLevel(data.target);\\r\\n    const startCash = ns.getServerMoneyAvailable(data.target);\\r\\n    const result = await ns.grow(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n    const endTime = new Date().getTime();\\r\\n    await writeOut(ns, data, startTime, endTime, result.toFixed(2), startSec, startCash);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjX2RlYnVnL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUdwQyxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE1BQU0sSUFBSSxHQUF1QixJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztJQUVuRSxNQUFNLFNBQVMsR0FBRyxJQUFJLElBQUksRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDO0lBQ3ZDLE1BQU0sUUFBUSxHQUFHLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDeEQsTUFBTSxTQUFTLEdBQUcsRUFBRSxDQUFDLHVCQUF1QixDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUMxRCxNQUFNLE1BQU0sR0FBRyxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRTtRQUN0QyxrQkFBa0IsRUFBRSxJQUFJLENBQUMsZUFBZTtRQUN4QyxrQkFBa0IsRUFBRSxJQUFJLENBQUMsZUFBZTtLQUMzQyxDQUFDLENBQUM7SUFDSCxNQUFNLE9BQU8sR0FBRyxJQUFJLElBQUksRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDO0lBRXJDLE1BQU0sUUFBUSxDQUFDLEVBQUUsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLE9BQU8sRUFBRSxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLFFBQVEsRUFBRSxTQUFTLENBQUMsQ0FBQztBQUN6RixDQUFDIn0=\",\"filename\":\"/lib/exec_debug/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.95,\"server\":\"home\",\"moduleSequenceNumber\":90032,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { writeOut } from \\\"lib/util\\\";\\r\\nexport async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    const startTime = new Date().getTime();\\r\\n    const startSec = ns.getServerSecurityLevel(data.target);\\r\\n    const startCash = ns.getServerMoneyAvailable(data.target);\\r\\n    const result = ns.nFormat(await ns.hack(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    }), \\\"($0.000a)\\\");\\r\\n    const endTime = new Date().getTime();\\r\\n    await writeOut(ns, data, startTime, endTime, result, startSec, startCash);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjX2RlYnVnL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUdwQyxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE1BQU0sSUFBSSxHQUF1QixJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztJQUVuRSxNQUFNLFNBQVMsR0FBRyxJQUFJLElBQUksRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDO0lBQ3ZDLE1BQU0sUUFBUSxHQUFHLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDeEQsTUFBTSxTQUFTLEdBQUcsRUFBRSxDQUFDLHVCQUF1QixDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUMxRCxNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsT0FBTyxDQUNyQixNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRTtRQUN2QixrQkFBa0IsRUFBRSxJQUFJLENBQUMsZUFBZTtRQUN4QyxrQkFBa0IsRUFBRSxJQUFJLENBQUMsZUFBZTtLQUMzQyxDQUFDLEVBQ0YsV0FBVyxDQUNkLENBQUM7SUFDRixNQUFNLE9BQU8sR0FBRyxJQUFJLElBQUksRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDO0lBRXJDLE1BQU0sUUFBUSxDQUFDLEVBQUUsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLE9BQU8sRUFBRSxNQUFNLEVBQUUsUUFBUSxFQUFFLFNBQVMsQ0FBQyxDQUFDO0FBQzlFLENBQUMifQ==\",\"filename\":\"/lib/exec_debug/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.9,\"server\":\"home\",\"moduleSequenceNumber\":90030,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    await ns.suppress(ns.args[0].toString());\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3VwcHJlc3MuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlY19kZWJ1Zy9zdXBwcmVzcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFPO0lBQzlCLE1BQU0sRUFBRSxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7QUFDN0MsQ0FBQyJ9\",\"filename\":\"/lib/exec_debug/suppress.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/exec_debug/suppress.js\",\"url\":\"blob:file:///f9d423a8-8ed5-436f-9dc8-a0ec4a7255cd\",\"moduleSequenceNumber\":12685}],\"dependents\":[],\"ramUsage\":3.5,\"server\":\"home\",\"moduleSequenceNumber\":83104,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"suppress\",\"cost\":1.9}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { writeOut } from \\\"lib/util\\\";\\r\\nexport async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    const startTime = new Date().getTime();\\r\\n    const startSec = ns.getServerSecurityLevel(data.target);\\r\\n    const startCash = ns.getServerMoneyAvailable(data.target);\\r\\n    const result = await ns.weaken(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n    const endTime = new Date().getTime();\\r\\n    await writeOut(ns, data, startTime, endTime, result.toFixed(2), startSec, startCash);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWNfZGVidWcvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFHcEMsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLElBQUksR0FBdUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFFbkUsTUFBTSxTQUFTLEdBQUcsSUFBSSxJQUFJLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQztJQUN2QyxNQUFNLFFBQVEsR0FBRyxFQUFFLENBQUMsc0JBQXNCLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ3hELE1BQU0sU0FBUyxHQUFHLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDMUQsTUFBTSxNQUFNLEdBQUcsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDeEMsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7UUFDeEMsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7S0FDM0MsQ0FBQyxDQUFDO0lBQ0gsTUFBTSxPQUFPLEdBQUcsSUFBSSxJQUFJLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQztJQUVyQyxNQUFNLFFBQVEsQ0FBQyxFQUFFLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxPQUFPLEVBQUUsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRSxRQUFRLEVBQUUsU0FBUyxDQUFDLENBQUM7QUFDekYsQ0FBQyJ9\",\"filename\":\"/lib/exec_debug/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.95,\"server\":\"home\",\"moduleSequenceNumber\":90044,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    await ns.suppress(\\\"n00dles\\\");\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3VwcHJlc3MuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJzdXBwcmVzcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFPO0lBQzlCLE1BQU0sRUFBRSxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsQ0FBQztBQUNqQyxDQUFDIn0=\",\"filename\":\"suppress.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.5,\"server\":\"home\",\"moduleSequenceNumber\":83106,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"suppress\",\"cost\":1.9}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// returns the actual number of servers to buy that would be better than the ones we already have\\r\\nfunction compareToActualServers(ns, ram, numServers) {\\r\\n    // find the number of servers we own that have ram sizes > ram\\r\\n    ns.tprintf(\\\"comparing %s %s\\\", ram, numServers);\\r\\n    const betterServerCount = ns.getPurchasedServers().filter((x) => ns.getServerMaxRam(x) >= ram).length;\\r\\n    const freeSpots = ns.getPurchasedServerLimit() - betterServerCount;\\r\\n    return Math.min(numServers, freeSpots);\\r\\n}\\r\\nfunction getCurrentRamSize(ns) {\\r\\n    return ns.getPurchasedServers().reduce((tally, serverName) => tally + ns.getServerMaxRam(serverName), 0);\\r\\n}\\r\\nfunction getFinalRamSize(ns, ram, numServers) {\\r\\n    const pservers = ns.getPurchasedServers().sort((a, b) => ns.getServerMaxRam(a) - ns.getServerMaxRam(b));\\r\\n    const numToDelete = Math.max(pservers.length + numServers - ns.getPurchasedServerLimit(), 0);\\r\\n    for (let i = 0; i < numToDelete; i++) {\\r\\n        pservers.shift();\\r\\n    }\\r\\n    return pservers.reduce((tally, serverName) => tally + ns.getServerMaxRam(serverName), 0) + ram * numServers;\\r\\n}\\r\\nfunction buyServers(ns, ram, numServers) {\\r\\n    const pservers = ns.getPurchasedServers().sort((a, b) => ns.getServerMaxRam(a) - ns.getServerMaxRam(b));\\r\\n    const numToDelete = Math.max(pservers.length + numServers - ns.getPurchasedServerLimit(), 0);\\r\\n    const deleteServers = [];\\r\\n    for (let i = 0; i < numToDelete; i++) {\\r\\n        deleteServers.push(pservers.shift());\\r\\n    }\\r\\n    for (const server of deleteServers) {\\r\\n        ns.tprintf(\\\"Deleting %s with %d RAM\\\", server, ns.getServerMaxRam(server));\\r\\n        ns.killall(server);\\r\\n        ns.deleteServer(server);\\r\\n    }\\r\\n    let serverIndex = 0;\\r\\n    function getNextServerName() {\\r\\n        while (true) {\\r\\n            const serverName = \\\"pserv-\\\" + serverIndex;\\r\\n            if (!ns.getPurchasedServers().includes(serverName))\\r\\n                return serverName;\\r\\n            else\\r\\n                serverIndex++;\\r\\n        }\\r\\n        return \\\"\\\";\\r\\n    }\\r\\n    const cost = ns.getPurchasedServerCost(ram);\\r\\n    for (let i = 0; i < numServers; i++) {\\r\\n        const serverName = getNextServerName();\\r\\n        ns.tprintf(\\\"Buying %s with %d RAM for %s\\\", serverName, ram, ns.nFormat(cost, \\\"($0.000a)\\\"));\\r\\n        ns.purchaseServer(serverName, ram);\\r\\n    }\\r\\n    return cost * numServers;\\r\\n}\\r\\nexport async function main(ns) {\\r\\n    let maxPow = 8; // Minimum ram is 256\\r\\n    let sizes = [];\\r\\n    const cash = ns.getPlayer().money;\\r\\n    const currentSize = getCurrentRamSize(ns);\\r\\n    while (true) {\\r\\n        const curRam = Math.pow(2, maxPow);\\r\\n        const cost = ns.getPurchasedServerCost(curRam);\\r\\n        if (cost <= cash) {\\r\\n            const numServers = compareToActualServers(ns, curRam, Math.min(Math.floor(cash / cost), ns.getPurchasedServerLimit()));\\r\\n            if (numServers > 0)\\r\\n                sizes.push([curRam, numServers, getFinalRamSize(ns, curRam, numServers)]);\\r\\n            maxPow++;\\r\\n        }\\r\\n        else {\\r\\n            break;\\r\\n        }\\r\\n    }\\r\\n    if (sizes.length === 0) {\\r\\n        ns.tprintf(\\\"Not enough cash to buy an upgrade\\\");\\r\\n        return;\\r\\n    }\\r\\n    sizes = sizes.sort((a, b) => b[2] - a[2]);\\r\\n    const [ram, numServers, finalSize] = sizes[0];\\r\\n    for (const [ram, numServers, finalSize] of sizes) {\\r\\n        ns.tprintf(\\\"%s %s %s\\\", ram, numServers, finalSize);\\r\\n    }\\r\\n    if (ns.args[0]) {\\r\\n        ns.tprintf(\\\"Check: Buying %d %dGB servers, increasing the size from %d to %d for %s\\\", numServers, ram, currentSize, finalSize, ns.nFormat(numServers * ns.getPurchasedServerCost(ram), \\\"($0.000a)\\\"));\\r\\n        return;\\r\\n    }\\r\\n    const cost = buyServers(ns, ram, numServers);\\r\\n    ns.tprintf(\\\"Increased available server ram from %d to %d for %s\\\", currentSize, finalSize, ns.nFormat(numServers * ns.getPurchasedServerCost(ram), \\\"($0.000a)\\\"));\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnV5X3NlcnZlcl9hbGwuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJidXlfc2VydmVyX2FsbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxpR0FBaUc7QUFDakcsU0FBUyxzQkFBc0IsQ0FBQyxFQUFNLEVBQUUsR0FBVyxFQUFFLFVBQWtCO0lBQ25FLDhEQUE4RDtJQUM5RCxFQUFFLENBQUMsT0FBTyxDQUFDLGlCQUFpQixFQUFFLEdBQUcsRUFBRSxVQUFVLENBQUMsQ0FBQztJQUMvQyxNQUFNLGlCQUFpQixHQUFHLEVBQUUsQ0FBQyxtQkFBbUIsRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUMsSUFBSSxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUM7SUFDdEcsTUFBTSxTQUFTLEdBQUcsRUFBRSxDQUFDLHVCQUF1QixFQUFFLEdBQUcsaUJBQWlCLENBQUM7SUFDbkUsT0FBTyxJQUFJLENBQUMsR0FBRyxDQUFDLFVBQVUsRUFBRSxTQUFTLENBQUMsQ0FBQztBQUMzQyxDQUFDO0FBRUQsU0FBUyxpQkFBaUIsQ0FBQyxFQUFNO0lBQzdCLE9BQU8sRUFBRSxDQUFDLG1CQUFtQixFQUFFLENBQUMsTUFBTSxDQUFDLENBQUMsS0FBSyxFQUFFLFVBQVUsRUFBRSxFQUFFLENBQUMsS0FBSyxHQUFHLEVBQUUsQ0FBQyxlQUFlLENBQUMsVUFBVSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFDN0csQ0FBQztBQUVELFNBQVMsZUFBZSxDQUFDLEVBQU0sRUFBRSxHQUFXLEVBQUUsVUFBa0I7SUFDNUQsTUFBTSxRQUFRLEdBQUcsRUFBRSxDQUFDLG1CQUFtQixFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUMs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\",\"filename\":\"buy_server_all.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"buy_server_all.js\",\"url\":\"blob:file:///f0148ed4-3773-4a3a-af3d-ed7f3fc747e2\",\"moduleSequenceNumber\":93961}],\"dependents\":[],\"ramUsage\":9.7,\"server\":\"home\",\"moduleSequenceNumber\":93961,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var FragmentType;\\r\\n(function (FragmentType) {\\r\\n    // Special fragments for the UI\\r\\n    FragmentType[FragmentType[\\\"None\\\"] = 0] = \\\"None\\\";\\r\\n    FragmentType[FragmentType[\\\"Delete\\\"] = 1] = \\\"Delete\\\";\\r\\n    // Stats boosting fragments\\r\\n    FragmentType[FragmentType[\\\"HackingChance\\\"] = 2] = \\\"HackingChance\\\";\\r\\n    FragmentType[FragmentType[\\\"HackingSpeed\\\"] = 3] = \\\"HackingSpeed\\\";\\r\\n    FragmentType[FragmentType[\\\"HackingMoney\\\"] = 4] = \\\"HackingMoney\\\";\\r\\n    FragmentType[FragmentType[\\\"HackingGrow\\\"] = 5] = \\\"HackingGrow\\\";\\r\\n    FragmentType[FragmentType[\\\"Hacking\\\"] = 6] = \\\"Hacking\\\";\\r\\n    FragmentType[FragmentType[\\\"Strength\\\"] = 7] = \\\"Strength\\\";\\r\\n    FragmentType[FragmentType[\\\"Defense\\\"] = 8] = \\\"Defense\\\";\\r\\n    FragmentType[FragmentType[\\\"Dexterity\\\"] = 9] = \\\"Dexterity\\\";\\r\\n    FragmentType[FragmentType[\\\"Agility\\\"] = 10] = \\\"Agility\\\";\\r\\n    FragmentType[FragmentType[\\\"Charisma\\\"] = 11] = \\\"Charisma\\\";\\r\\n    FragmentType[FragmentType[\\\"HacknetMoney\\\"] = 12] = \\\"HacknetMoney\\\";\\r\\n    FragmentType[FragmentType[\\\"HacknetCost\\\"] = 13] = \\\"HacknetCost\\\";\\r\\n    FragmentType[FragmentType[\\\"Rep\\\"] = 14] = \\\"Rep\\\";\\r\\n    FragmentType[FragmentType[\\\"WorkMoney\\\"] = 15] = \\\"WorkMoney\\\";\\r\\n    FragmentType[FragmentType[\\\"Crime\\\"] = 16] = \\\"Crime\\\";\\r\\n    FragmentType[FragmentType[\\\"Bladeburner\\\"] = 17] = \\\"Bladeburner\\\";\\r\\n    // utility fragments.\\r\\n    FragmentType[FragmentType[\\\"Booster\\\"] = 18] = \\\"Booster\\\";\\r\\n})(FragmentType || (FragmentType = {}));\\r\\nfunction fragmentTypeEffect(tpe) {\\r\\n    switch (tpe) {\\r\\n        case FragmentType.HackingChance: {\\r\\n            return \\\"+x% hack() success chance\\\";\\r\\n            break;\\r\\n        }\\r\\n        case FragmentType.HackingSpeed: {\\r\\n            return \\\"+x% faster hack(), grow(), and weaken()\\\";\\r\\n            break;\\r\\n        }\\r\\n        case FragmentType.HackingMoney: {\\r\\n            return \\\"+x% hack() power\\\";\\r\\n            break;\\r\\n        }\\r\\n        case FragmentType.HackingGrow: {\\r\\n            return \\\"+x% grow() power\\\";\\r\\n            break;\\r\\n        }\\r\\n        case FragmentType.Hacking: {\\r\\n            return \\\"+x% hacking skill\\\";\\r\\n            break;\\r\\n        }\\r\\n        case FragmentType.Strength: {\\r\\n            return \\\"+x% strength skill\\\";\\r\\n            break;\\r\\n        }\\r\\n        case FragmentType.Defense: {\\r\\n            return \\\"+x% defense skill\\\";\\r\\n            break;\\r\\n        }\\r\\n        case FragmentType.Dexterity: {\\r\\n            return \\\"+x% dexterity skill\\\";\\r\\n            break;\\r\\n        }\\r\\n        case FragmentType.Agility: {\\r\\n            return \\\"+x% agility skill\\\";\\r\\n            break;\\r\\n        }\\r\\n        case FragmentType.Charisma: {\\r\\n            return \\\"+x% charisma skill\\\";\\r\\n            break;\\r\\n        }\\r\\n        case FragmentType.HacknetMoney: {\\r\\n            return \\\"+x% hacknet production\\\";\\r\\n            break;\\r\\n        }\\r\\n        case FragmentType.HacknetCost: {\\r\\n            return \\\"x% cheaper hacknet cost\\\";\\r\\n            break;\\r\\n        }\\r\\n        case FragmentType.Rep: {\\r\\n            return \\\"+x% reputation from factions and companies\\\";\\r\\n            break;\\r\\n        }\\r\\n        case FragmentType.WorkMoney: {\\r\\n            return \\\"+x% work money\\\";\\r\\n            break;\\r\\n        }\\r\\n        case FragmentType.Crime: {\\r\\n            return \\\"+x% crime money\\\";\\r\\n            break;\\r\\n        }\\r\\n        case FragmentType.Bladeburner: {\\r\\n            return \\\"+x% all bladeburner stats\\\";\\r\\n            break;\\r\\n        }\\r\\n        case FragmentType.Booster: {\\r\\n            return \\\"Booster\\\";\\r\\n            break;\\r\\n        }\\r\\n    }\\r\\n    throw new Error(\\\"Calling effect for fragment type that doesn't have an effect \\\" + tpe);\\r\\n}\\r\\nexport async function main(ns) {\\r\\n    const fragmentDefs = ns.stanek.fragmentDefinitions();\\r\\n    for (const fragmentDef of fragmentDefs) {\\r\\n        ns.tprintf(\\\"%s %s %s %s %s\\\", fragmentDef.id, fragmentDef.limit, fragmentDef.power, fragmentDef.shape, fragmentTypeEffect(fragmentDef.type));\\r\\n    }\\r\\n    // useful hack fragment id's are\\r\\n    // 0 1    S  +x% hacking skill  0,1\\r\\n    // 1 1    Z  +x% hacking skill  0,1\\r\\n    // 5 1.3  T  +x% faster HGW     0,1,2,3\\r\\n    // 6 2    I  +x% hack() power   0,1\\r\\n    // 7 0.5  J  +x% grow() power   0,1,2,3\\r\\n    // array of fragments, each fragment is an ID and an array of valid rotations\\r\\n    const fragmentIDs = [\\r\\n        [0, [0, 1]],\\r\\n        [1, [0, 1]],\\r\\n        [5, [0, 1, 2, 3]],\\r\\n        [6, [0, 1]],\\r\\n        [7, [0, 1, 2, 3]],\\r\\n        [25, [0, 1, 2, 3]],\\r\\n        [100, [0, 1, 2, 3]],\\r\\n        [101, [0, 1, 2, 3]],\\r\\n        [102, [0, 1, 2, 3]],\\r\\n        [103, [0, 1, 2, 3]],\\r\\n        [104, [0, 1, 2, 3]], // 4\\r\\n        // [105, [0, 1, 2, 3]], // 4\\r\\n        // [106, [0, 1, 2, 3]], // 4\\r\\n        // [107, [0, 1, 2, 3]], // 4\\r\\n    ];\\r\\n    // a valid configuration is if all pieces can be placed\\r\\n    // try to place each piece\\r\\n    // if we hit a piece that cant be placed, iterate over all rotations\\r\\n    // if all rotations cant be placed, move to next cell and iterate over all rotations\\r\\n    // if all cells have been checked, roll back to earlier piece and rotate it.\\r\\n    ns.stanek.clear();\\r\\n    async function doPlacement(frag, x, y, rot) {\\r\\n        //ns.tprintf(\\\"Attempting to place %d at %d,%d,%d\\\", fragmentIDs[frag][0], x, y, rot);\\r\\n        if (ns.stanek.place(x, y, rot, fragmentIDs[frag][0])) {\\r\\n            if (frag === fragmentIDs.length - 1)\\r\\n                return true;\\r\\n            //ns.tprintf(\\\"Placed %d at %d,%d,%d\\\", fragmentIDs[frag][0], x, y, rot);\\r\\n            if (!(await doPlacement(frag + 1, 0, 0, 0))) {\\r\\n                // ns.tprintf(\\r\\n                //     \\\"Failed to place %d in current board, rolling back %d at %d,%d,%d\\\",\\r\\n                //     fragmentIDs[frag + 1][0],\\r\\n                //     fragmentIDs[frag][0],\\r\\n                //     x,\\r\\n                //     y,\\r\\n                //     rot\\r\\n                // );\\r\\n                ns.stanek.remove(x, y);\\r\\n            }\\r\\n            else {\\r\\n                return true;\\r\\n            }\\r\\n        }\\r\\n        if (rot + 1 < fragmentIDs[frag][1].length)\\r\\n            return await doPlacement(frag, x, y, rot + 1);\\r\\n        if (x + 1 < ns.stanek.width())\\r\\n            return await doPlacement(frag, x + 1, y, 0);\\r\\n        if (y + 1 < ns.stanek.height())\\r\\n            return await doPlacement(frag, 0, y + 1, 0);\\r\\n        return false;\\r\\n    }\\r\\n    await doPlacement(0, 0, 0, 0);\\r\\n    for (const fragment of ns.stanek.activeFragments()) {\\r\\n        ns.tprintf(\\\"%s %s %s %s\\\", fragment.id, fragment.x, fragment.y, fragment.rotation);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RhbmVrLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsic3RhbmVrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLElBQUssWUF5Qko7QUF6QkQsV0FBSyxZQUFZO0lBQ2IsK0JBQStCO0lBQy9CLCtDQUFJLENBQUE7SUFDSixtREFBTSxDQUFBO0lBRU4sMkJBQTJCO0lBQzNCLGlFQUFhLENBQUE7SUFDYiwrREFBWSxDQUFBO0lBQ1osK0RBQVksQ0FBQTtJQUNaLDZEQUFXLENBQUE7SUFDWCxxREFBTyxDQUFBO0lBQ1AsdURBQVEsQ0FBQTtJQUNSLHFEQUFPLENBQUE7SUFDUCx5REFBUyxDQUFBO0lBQ1Qsc0RBQU8sQ0FBQTtJQUNQLHdEQUFRLENBQUE7SUFDUixnRUFBWSxDQUFBO0lBQ1osOERBQVcsQ0FBQTtJQUNYLDhDQUFHLENBQUE7SUFDSCwwREFBUyxDQUFBO0lBQ1Qsa0RBQUssQ0FBQTtJQUNMLDhEQUFXLENBQUE7SUFFWCxxQkFBcUI7SUFDckIsc0RBQU8sQ0FBQTtBQUNYLENBQUMsRUF6QkksWUFBWSxLQUFaLFlBQVksUUF5QmhCO0FBRUQsU0FBUyxrQkFBa0IsQ0FBQyxHQUFpQjtJQUN6QyxRQUFRLEdBQUcsRUFBRTtRQUNULEtBQUssWUFBWSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1lBQzdCLE9BQU8sMkJBQTJCLENBQUM7WUFDbkMsTUFBTTtTQUNUO1FBQ0QsS0FBSyxZQUFZLENBQUMsWUFBWSxDQUFDLENBQUM7WUFDNUIsT0FBTyx5Q0FBeUMsQ0FBQztZQUNqRCxNQUFNO1NBQ1Q7UUFDRCxLQUFLLFlBQVksQ0FBQyxZQUFZLENBQUMsQ0FBQztZQUM1QixPQUFPLGtCQUFrQixDQUFDO1lBQzFCLE1BQU07U0FDVDtRQUNELEtBQUssWUFBWSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1lBQzNCLE9BQU8sa0JBQWtCLENBQUM7WUFDMUIsTUFBTTtTQUNUO1FBQ0QsS0FBSyxZQUFZLENB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\",\"filename\":\"stanek.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"stanek.js\",\"url\":\"blob:file:///55ebb19e-306f-4ca9-b3c9-c622503b5aa6\",\"moduleSequenceNumber\":407203}],\"dependents\":[],\"ramUsage\":11.75,\"server\":\"home\",\"moduleSequenceNumber\":83108,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.place\",\"cost\":5},{\"type\":\"fn\",\"name\":\"stanek.remove\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"stanek.activeFragments\",\"cost\":5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.stanek.charge(ns.args[0], ns.args[1]);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hhcmdlLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL3N0YW5lay9jaGFyZ2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUM5QixPQUFPLElBQUksRUFBRTtRQUNULE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7S0FDakQ7QUFDTCxDQUFDIn0=\",\"filename\":\"/lib/stanek/charge.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/stanek/charge.js\",\"url\":\"blob:file:///cc80ae5c-d5fc-42c0-989a-7b5c98858067\",\"moduleSequenceNumber\":83116}],\"dependents\":[],\"ramUsage\":2,\"server\":\"home\",\"moduleSequenceNumber\":83116,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.charge\",\"cost\":0.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { allHosts, canExecuteOnServer } from \\\"/lib/util\\\";\\r\\nconst CHARGEJS = \\\"/lib/stanek/charge.js\\\";\\r\\nexport async function main(ns) {\\r\\n    const fragments = ns.stanek.activeFragments().filter((x) => x.id < 100);\\r\\n    const allHostnames = allHosts(ns);\\r\\n    const executableHosts = allHostnames\\r\\n        .filter(canExecuteOnServer.bind(null, ns))\\r\\n        .filter((x) => x.indexOf(\\\"hacknet-node\\\") === -1);\\r\\n    const availableRam = executableHosts.reduce((input, hostname) => input + (ns.getServerMaxRam(hostname) - ns.getServerUsedRam(hostname)), 0);\\r\\n    for (const hostname of executableHosts) {\\r\\n        if (hostname === \\\"home\\\")\\r\\n            continue;\\r\\n        await ns.scp(CHARGEJS, \\\"home\\\", hostname);\\r\\n    }\\r\\n    ns.tprintf(\\\"available ram: %d\\\", availableRam);\\r\\n    const fragSplit = availableRam / fragments.length;\\r\\n    const fragThreads = Math.floor(fragSplit / 2);\\r\\n    ns.tprintf(\\\"Frags %d\\\", fragments.length);\\r\\n    ns.tprintf(\\\"Split %f %d\\\", fragSplit, fragThreads);\\r\\n    for (const fragment of fragments) {\\r\\n        let threadsRemaining = fragThreads;\\r\\n        for (const hostname of executableHosts) {\\r\\n            const availableThreads = Math.floor((ns.getServerMaxRam(hostname) - ns.getServerUsedRam(hostname)) / 2);\\r\\n            const usingThreads = Math.min(threadsRemaining, availableThreads);\\r\\n            if (usingThreads <= 0)\\r\\n                continue;\\r\\n            ns.exec(CHARGEJS, hostname, usingThreads, fragment.x, fragment.y);\\r\\n            threadsRemaining -= usingThreads;\\r\\n            if (threadsRemaining <= 0)\\r\\n                break;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hhcmdlLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsiY2hhcmdlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxRQUFRLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFFekQsTUFBTSxRQUFRLEdBQUcsdUJBQXVCLENBQUM7QUFFekMsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLFNBQVMsR0FBRyxFQUFFLENBQUMsTUFBTSxDQUFDLGVBQWUsRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsR0FBRyxHQUFHLENBQUMsQ0FBQztJQUV4RSxNQUFNLFlBQVksR0FBRyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDbEMsTUFBTSxlQUFlLEdBQUcsWUFBWTtTQUMvQixNQUFNLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsQ0FBQztTQUN6QyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsY0FBYyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUVyRCxNQUFNLFlBQVksR0FBRyxlQUFlLENBQUMsTUFBTSxDQUN2QyxDQUFDLEtBQUssRUFBRSxRQUFRLEVBQUUsRUFBRSxDQUFDLEtBQUssR0FBRyxDQUFDLEVBQUUsQ0FBQyxlQUFlLENBQUMsUUFBUSxDQUFDLEdBQUcsRUFBRSxDQUFDLGdCQUFnQixDQUFDLFFBQVEsQ0FBQyxDQUFDLEVBQzNGLENBQUMsQ0FDSixDQUFDO0lBRUYsS0FBSyxNQUFNLFFBQVEsSUFBSSxlQUFlLEVBQUU7UUFDcEMsSUFBSSxRQUFRLEtBQUssTUFBTTtZQUFFLFNBQVM7UUFDbEMsTUFBTSxFQUFFLENBQUMsR0FBRyxDQUFDLFFBQVEsRUFBRSxNQUFNLEVBQUUsUUFBUSxDQUFDLENBQUM7S0FDNUM7SUFFRCxFQUFFLENBQUMsT0FBTyxDQUFDLG1CQUFtQixFQUFFLFlBQVksQ0FBQyxDQUFDO0lBQzlDLE1BQU0sU0FBUyxHQUFHLFlBQVksR0FBRyxTQUFTLENBQUMsTUFBTSxDQUFDO0lBQ2xELE1BQU0sV0FBVyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsU0FBUyxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBRTlDLEVBQUUsQ0FBQyxPQUFPLENBQUMsVUFBVSxFQUFFLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUN6QyxFQUFFLENBQUMsT0FBTyxDQUFDLGFBQWEsRUFBRSxTQUFTLEVBQUUsV0FBVyxDQUFDLENBQUM7SUFFbEQsS0FBSyxNQUFNLFFBQVEsSUFBSSxTQUFTLEVBQUU7UUFDOUIsSUFBSSxnQkFBZ0IsR0FBRyxXQUFXLENBQUM7UUFDbkMsS0FBSyxNQUFNLFFBQVEsSUFBSSxlQUFlLEVBQUU7WUFDcEMsTUFBTSxnQkFBZ0IsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLGVBQWUsQ0FBQyxRQUFRLENBQUMsR0FBRyxFQUFFLENBQUMsZ0JBQWdCLENBQUMsUUFBUSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztZQUN4RyxNQUFNLFlBQVksR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLGdCQUFnQixFQUFFLGdCQUFnQixDQUFDLENBQUM7WUFFbEUsSUFBSSxZQUFZLElBQUksQ0FBQztnQkFBRSxTQUFTO1lBRWhDLEVBQUUsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLFFBQVEsRUFBRSxZQUFZLEVBQUUsUUFBUSxDQUFDLENBQUMsRUFBRSxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFFbEUsZ0JBQWdCLElBQUksWUFBWSxDQUFDO1lBRWpDLElBQUksZ0JBQWdCLElBQUksQ0FBQztnQkFDckIsTUFBTTtTQUNiO0tBQ0o7QUFDTCxDQUFDIn0=\",\"filename\":\"charge.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/util.js\",\"url\":\"blob:file:///65662e00-c2b2-4cc0-9f9b-6661c383ff1d\",\"moduleSequenceNumber\":90050},{\"filename\":\"charge.js\",\"url\":\"blob:file:///08aa6baf-7060-4238-ae55-cbf06a17cd10\",\"moduleSequenceNumber\":99719}],\"dependents\":[],\"ramUsage\":8.85,\"server\":\"home\",\"moduleSequenceNumber\":99719,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.activeFragments\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}}],\"serversOnNetwork\":[\"n00dles\",\"foodnstuff\",\"sigma-cosmetics\",\"joesguns\",\"hong-fang-tea\",\"harakiri-sushi\",\"iron-gym\",\"darkweb\",\"pserv-0\",\"pserv-1\",\"pserv-2\",\"pserv-3\",\"pserv-4\",\"pserv-5\",\"pserv-6\",\"pserv-7\",\"pserv-8\",\"pserv-9\",\"pserv-10\",\"pserv-11\",\"pserv-12\",\"pserv-13\",\"pserv-14\",\"pserv-15\",\"pserv-16\",\"pserv-17\",\"pserv-18\",\"pserv-19\",\"pserv-20\",\"pserv-21\",\"pserv-22\",\"pserv-23\",\"hacknet-node-0\",\"hacknet-node-1\",\"hacknet-node-2\",\"hacknet-node-3\",\"hacknet-node-4\",\"hacknet-node-5\",\"hacknet-node-6\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":1,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"suppression\":0,\"activeSuppressionThreads\":[],\"suppressionIntervalID\":null,\"suppressionLastUpdateTime\":0}},\"ecorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"ecorp\",\"httpPortOpen\":true,\"ip\":\"60.3.4.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"blade\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":297,\"hackDifficulty\":297,\"minDifficulty\":99,\"moneyAvailable\":24865101438,\"moneyMax\":279732391177.5,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1347,\"serverGrowth\":99,\"suppression\":0,\"activeSuppressionThreads\":[],\"suppressionIntervalID\":null,\"suppressionLastUpdateTime\":0}},\"megacorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"megacorp\",\"httpPortOpen\":true,\"ip\":\"44.4.6.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"nwo\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":297,\"hackDifficulty\":297,\"minDifficulty\":99,\"moneyAvailable\":41845785300,\"moneyMax\":470765084625,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1113,\"serverGrowth\":99,\"suppression\":0,\"activeSuppressionThreads\":[],\"suppressionIntervalID\":null,\"suppressionLastUpdateTime\":0}},\"b-and-a\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"b-and-a\",\"httpPortOpen\":true,\"ip\":\"95.6.0.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\".\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":243,\"hackDifficulty\":243,\"minDifficulty\":81,\"moneyAvailable\":21822771720,\"moneyMax\":245506181850,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":946,\"serverGrowth\":79,\"suppression\":0,\"activeSuppressionThreads\":[],\"suppressionIntervalID\":null,\"suppressionLastUpdateTime\":0}},\"blade\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"blade\",\"httpPortOpen\":true,\"ip\":\"68.0.0.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.grow(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLElBQUksR0FBdUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFFbkUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDdkIsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7UUFDeEMsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7S0FDM0MsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyJ9\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"blade\",\"moduleSequenceNumber\":93211,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.weaken(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxJQUFJLEdBQXVCLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO0lBRW5FLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFO1FBQ3pCLGtCQUFrQixFQUFFLElBQUksQ0FBQyxlQUFlO1FBQ3hDLGtCQUFrQixFQUFFLElBQUksQ0FBQyxlQUFlO0tBQzNDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///08f271d4-1713-4dd8-8004-1ef298b83845\",\"moduleSequenceNumber\":94075}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"blade\",\"moduleSequenceNumber\":94075,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.hack(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLElBQUksR0FBdUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFFbkUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDdkIsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7UUFDeEMsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7S0FDM0MsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyJ9\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"blade\",\"moduleSequenceNumber\":93215,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export var ReservedPorts;\\r\\n(function (ReservedPorts) {\\r\\n    ReservedPorts[ReservedPorts[\\\"HACKING_INFO\\\"] = 1] = \\\"HACKING_INFO\\\";\\r\\n    ReservedPorts[ReservedPorts[\\\"HACKNET_INFO\\\"] = 2] = \\\"HACKNET_INFO\\\";\\r\\n    ReservedPorts[ReservedPorts[\\\"HACK_WRITE_INFO\\\"] = 3] = \\\"HACK_WRITE_INFO\\\";\\r\\n})(ReservedPorts || (ReservedPorts = {}));\\r\\nexport const WEAKENJS = \\\"/lib/exec/weaken.js\\\";\\r\\nexport const GROWJS = \\\"/lib/exec/grow.js\\\";\\r\\nexport const HACKJS = \\\"/lib/exec/hack.js\\\";\\r\\nexport const UTILJS = \\\"/lib/util.js\\\";\\r\\nexport const CITIES = [\\\"Aevum\\\", \\\"Chongqing\\\", \\\"Sector-12\\\", \\\"New Tokyo\\\", \\\"Ishima\\\", \\\"Volhaven\\\"];\\r\\nexport function llog(ns, str, ...args) {\\r\\n    ns.print(ns.sprintf(\\\"%8s \\\" + str, new Date().toLocaleTimeString(\\\"it-IT\\\"), ...args));\\r\\n}\\r\\nexport function softenServer(ns, hostname) {\\r\\n    if (ns.hasRootAccess(hostname)) {\\r\\n        return;\\r\\n    }\\r\\n    let ports = 0;\\r\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n        ns.brutessh(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n        ns.ftpcrack(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n        ns.httpworm(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n        ns.relaysmtp(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n        ns.sqlinject(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ports >= ns.getServerNumPortsRequired(hostname)) {\\r\\n        ns.nuke(hostname);\\r\\n    }\\r\\n}\\r\\nexport function serverIsHackable(ns, hostname) {\\r\\n    return ns.hasRootAccess(hostname) && ns.getHackingLevel() >= ns.getServerRequiredHackingLevel(hostname);\\r\\n}\\r\\nexport function canExecuteOnServer(ns, hostname) {\\r\\n    return ns.hasRootAccess(hostname) && ns.getServerMaxRam(hostname) > 0;\\r\\n}\\r\\nexport function mapHosts(ns, hosts = {}, parents = [], current = \\\"home\\\") {\\r\\n    const newParents = parents.concat(current);\\r\\n    hosts[current] = newParents;\\r\\n    const children = ns.scan(current).filter((element) => !parents.includes(element));\\r\\n    for (const child of children) {\\r\\n        mapHosts(ns, hosts, newParents, child);\\r\\n    }\\r\\n    return hosts;\\r\\n}\\r\\nexport function allHosts(ns) {\\r\\n    return Object.keys(mapHosts(ns));\\r\\n}\\r\\nexport function doProgramBuys(ns) {\\r\\n    const player = ns.getPlayer();\\r\\n    if (!player.tor && player.money > 200e3)\\r\\n        ns.purchaseTor();\\r\\n    if (!ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\") && player.money > 500e3)\\r\\n        ns.purchaseProgram(\\\"BruteSSH.exe\\\");\\r\\n    if (!ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\") && player.money > 1500e3)\\r\\n        ns.purchaseProgram(\\\"FTPCrack.exe\\\");\\r\\n    if (!ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\") && player.money > 5e6)\\r\\n        ns.purchaseProgram(\\\"relaySMTP.exe\\\");\\r\\n    if (!ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\") && player.money > 30e6)\\r\\n        ns.purchaseProgram(\\\"HTTPWorm.exe\\\");\\r\\n    if (!ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\") && player.money > 250e6)\\r\\n        ns.purchaseProgram(\\\"SQLInject.exe\\\");\\r\\n}\\r\\nexport function doBuyAndSoftenAll(ns) {\\r\\n    doProgramBuys(ns);\\r\\n    for (const hostname of allHosts(ns)) {\\r\\n        softenServer(ns, hostname);\\r\\n    }\\r\\n}\\r\\nexport function stFormat(ns, ms, showms = false, showfull = false) {\\r\\n    let timeLeft = ms;\\r\\n    const hours = Math.floor(ms / (1000 * 60 * 60));\\r\\n    timeLeft -= hours * (1000 * 60 * 60);\\r\\n    const minutes = Math.floor(timeLeft / (1000 * 60));\\r\\n    timeLeft -= minutes * (1000 * 60);\\r\\n    const seconds = Math.floor(timeLeft / 1000);\\r\\n    timeLeft -= seconds * 1000;\\r\\n    const milliseconds = timeLeft;\\r\\n    if (showms) {\\r\\n        if (hours > 0 || showfull)\\r\\n            return ns.sprintf(\\\"%02d:%02d:%02d.%03d\\\", hours, minutes, seconds, milliseconds);\\r\\n        if (minutes > 0)\\r\\n            return ns.sprintf(\\\"%02d:%02d.%03d\\\", minutes, seconds, milliseconds);\\r\\n        return ns.sprintf(\\\"%02d.%03d\\\", seconds, milliseconds);\\r\\n    }\\r\\n    else {\\r\\n        if (hours > 0 || showfull)\\r\\n            return ns.sprintf(\\\"%02d:%02d:%02d\\\", hours, minutes, seconds);\\r\\n        if (minutes > 0)\\r\\n            return ns.sprintf(\\\"%02d:%02d\\\", minutes, seconds);\\r\\n        return ns.sprintf(\\\"%02d\\\", seconds);\\r\\n    }\\r\\n}\\r\\nexport function stdFormat(ns, offset = 0, showms = false) {\\r\\n    const date = new Date(new Date().getTime() + offset);\\r\\n    if (showms) {\\r\\n        const ms = ns.sprintf(\\\"%03d\\\", date.getUTCMilliseconds());\\r\\n        return date.toLocaleTimeString(\\\"it-IT\\\") + \\\".\\\" + ms;\\r\\n    }\\r\\n    else {\\r\\n        return date.toLocaleTimeString(\\\"it-IT\\\");\\r\\n    }\\r\\n}\\r\\nexport async function doBackdoors(ns) {\\r\\n    //const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"w0r1d_d43m0n\\\", \\\"b-and-a\\\", \\\"ecorp\\\", \\\"fulcrumassets\\\", \\\"fulcrumtech\\\"];\\r\\n    //const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"omnitek\\\", \\\"kuai-gong\\\", \\\"megacorp\\\"];\\r\\n    const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"w0r1d_d43m0n\\\"];\\r\\n    const hosts = mapHosts(ns);\\r\\n    for (const [hostName, trail] of Object.entries(hosts)) {\\r\\n        const server = ns.getServer(hostName);\\r\\n        if (!targetHosts.includes(hostName) ||\\r\\n            server.backdoorInstalled ||\\r\\n            server.requiredHackingSkill > ns.getHackingLevel() ||\\r\\n            !server.hasAdminRights)\\r\\n            continue;\\r\\n        ns.print(hostName);\\r\\n        for (const hostHopName of trail) {\\r\\n            ns.connect(hostHopName);\\r\\n        }\\r\\n        await ns.installBackdoor();\\r\\n        ns.connect(\\\"home\\\");\\r\\n    }\\r\\n}\\r\\nexport function cleanLogs(ns) {\\r\\n    ns.disableLog(\\\"disableLog\\\");\\r\\n    ns.disableLog(\\\"ALL\\\");\\r\\n    // ns.disableLog(\\\"sleep\\\")\\r\\n    // ns.disableLog(\\\"exec\\\")\\r\\n    // ns.disableLog(\\\"getServerMaxRam\\\")\\r\\n    // ns.disableLog(\\\"getServerSecurityLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerMinSecurityLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerMaxMoney\\\")\\r\\n    // ns.disableLog(\\\"getHackingLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerRequiredHackingLevel\\\")\\r\\n    // ns.disableLog(\\\"scan\\\")\\r\\n    // ns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n    // ns.disableLog(\\\"getServerUsedRam\\\")\\r\\n}\\r\\nexport const ALL_FACTIONS = [\\r\\n    \\\"Illuminati\\\",\\r\\n    \\\"Daedalus\\\",\\r\\n    \\\"The Covenant\\\",\\r\\n    \\\"ECorp\\\",\\r\\n    \\\"MegaCorp\\\",\\r\\n    \\\"Bachman & Associates\\\",\\r\\n    \\\"Blade Industries\\\",\\r\\n    \\\"NWO\\\",\\r\\n    \\\"Clarke Incorporated\\\",\\r\\n    \\\"OmniTek Incorporated\\\",\\r\\n    \\\"Four Sigma\\\",\\r\\n    \\\"KuaiGong International\\\",\\r\\n    \\\"Fulcrum Secret Technologies\\\",\\r\\n    \\\"BitRunners\\\",\\r\\n    \\\"The Black Hand\\\",\\r\\n    \\\"NiteSec\\\",\\r\\n    \\\"Aevum\\\",\\r\\n    \\\"Chongqing\\\",\\r\\n    \\\"Ishima\\\",\\r\\n    \\\"New Tokyo\\\",\\r\\n    \\\"Sector-12\\\",\\r\\n    \\\"Volhaven\\\",\\r\\n    \\\"Speakers for the Dead\\\",\\r\\n    \\\"The Dark Army\\\",\\r\\n    \\\"The Syndicate\\\",\\r\\n    \\\"Silhouette\\\",\\r\\n    \\\"Tetrads\\\",\\r\\n    \\\"Slum Snakes\\\",\\r\\n    \\\"Netburners\\\",\\r\\n    \\\"Tian Di Hui\\\",\\r\\n    \\\"CyberSec\\\",\\r\\n    \\\"Bladeburners\\\",\\r\\n    \\\"Church of the Machine God\\\",\\r\\n];\\r\\nexport async function writeOut(ns, data, startTime, endTime, result, startSec, startCash) {\\r\\n    if (data.writeFile !== \\\"\\\") {\\r\\n        const outstr = ns.sprintf(\\\"%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\", data.target, data.uid, data.batchId, data.realTimeStart + data.offset, data.realTimeStart + data.finish, data.operationTime, startTime, endTime, endTime - startTime, startTime - (data.realTimeStart + data.offset), endTime - (data.realTimeStart + data.finish), endTime - startTime - data.operationTime, result, startSec.toFixed(2), ns.getServerSecurityLevel(data.target).toFixed(2), ns.nFormat(startCash, \\\"($0.000a)\\\"), ns.nFormat(ns.getServerMoneyAvailable(data.target), \\\"($0.000a)\\\"));\\r\\n        while (!await ns.tryWritePort(ReservedPorts.HACK_WRITE_INFO, [data.writeFile, outstr]))\\r\\n            ;\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi91dGlsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLE1BQU0sQ0FBTixJQUFZLGFBSVg7QUFKRCxXQUFZLGFBQWE7SUFDckIsaUVBQWdCLENBQUE7SUFDaEIsaUVBQVksQ0FBQTtJQUNaLHVFQUFlLENBQUE7QUFDbkIsQ0FBQyxFQUpXLGFBQWEsS0FBYixhQUFhLFFBSXhCO0FBRUQsTUFBTSxDQUFDLE1BQU0sUUFBUSxHQUFHLHFCQUFxQixDQUFDO0FBQzlDLE1BQU0sQ0FBQyxNQUFNLE1BQU0sR0FBRyxtQkFBbUIsQ0FBQztBQUMxQyxNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUcsbUJBQW1CLENBQUM7QUFDMUMsTUFBTSxDQUFDLE1BQU0sTUFBTSxHQUFHLGNBQWMsQ0FBQztBQUVyQyxNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUcsQ0FBQyxPQUFPLEVBQUUsV0FBVyxFQUFFLFdBQVcsRUFBRSxXQUFXLEVBQUUsUUFBUSxFQUFFLFVBQVUsQ0FBQyxDQUFDO0FBRTdGLE1BQU0sVUFBVSxJQUFJLENBQUMsRUFBTSxFQUFFLEdBQVcsRUFBRSxHQUFHLElBQXlCO0lBQ2xFLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEdBQUcsR0FBRyxFQUFFLElBQUksSUFBSSxFQUFFLENBQUMsa0JBQWtCLENBQUMsT0FBTyxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDO0FBQ3hGLENBQUM7QUFFRCxNQUFNLFVBQVUsWUFBWSxDQUFDLEVBQU0sRUFBRSxRQUFnQjtJQUNqRCxJQUFJLEVBQUUsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDNUIsT0FBTztLQUNWO0lBRUQsSUFBSSxLQUFLLEdBQUcsQ0FBQyxDQUFDO0lBQ2QsSUFBSSxFQUFFLENBQUMsVUFBVSxDQUFDLGNBQWMsRUFB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\",\"filename\":\"/lib/util.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":13.25,\"server\":\"blade\",\"moduleSequenceNumber\":93217,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"purchaseTor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"purchaseProgram\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"connect\",\"cost\":2},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.stanek.charge(ns.args[0], ns.args[1]);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hhcmdlLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL3N0YW5lay9jaGFyZ2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUM5QixPQUFPLElBQUksRUFBRTtRQUNULE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7S0FDakQ7QUFDTCxDQUFDIn0=\",\"filename\":\"/lib/stanek/charge.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/stanek/charge.js\",\"url\":\"blob:file:///cb31ac7b-239b-47b5-94cc-6795a3aa7bf3\",\"moduleSequenceNumber\":99868}],\"dependents\":[],\"ramUsage\":2,\"server\":\"blade\",\"moduleSequenceNumber\":99868,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.charge\",\"cost\":0.4}]}}],\"serversOnNetwork\":[\"omnitek\",\"ecorp\",\"fulcrumassets\",\"The-Cave\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":270,\"hackDifficulty\":270,\"minDifficulty\":90,\"moneyAvailable\":18021011268.75,\"moneyMax\":202736376773.4375,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1183,\"serverGrowth\":65,\"suppression\":0,\"activeSuppressionThreads\":[],\"suppressionIntervalID\":null,\"suppressionLastUpdateTime\":0}},\"nwo\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-563657.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[31,139,74,186,172,198,141],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nwo\",\"httpPortOpen\":true,\"ip\":\"5.4.7.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"NWO\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\".\",\"megacorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":297,\"hackDifficulty\":297,\"minDifficulty\":99,\"moneyAvailable\":17223568163.25,\"moneyMax\":193765141836.5625,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1086,\"serverGrowth\":88,\"suppression\":0,\"activeSuppressionThreads\":[],\"suppressionIntervalID\":null,\"suppressionLastUpdateTime\":0}},\"clarkinc\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"clarkinc\",\"httpPortOpen\":true,\"ip\":\"79.8.0.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\".\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":153,\"hackDifficulty\":153,\"minDifficulty\":51,\"moneyAvailable\":14731192563.75,\"moneyMax\":165725916342.1875,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1249,\"serverGrowth\":50,\"suppression\":0,\"activeSuppressionThreads\":[],\"suppressionIntervalID\":null,\"suppressionLastUpdateTime\":0}},\"omnitek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omnitek\",\"httpPortOpen\":true,\"ip\":\"82.9.0.0\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.grow(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLElBQUksR0FBdUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFFbkUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDdkIsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7UUFDeEMsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7S0FDM0MsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyJ9\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omnitek\",\"moduleSequenceNumber\":93187,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.weaken(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxJQUFJLEdBQXVCLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO0lBRW5FLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFO1FBQ3pCLGtCQUFrQixFQUFFLElBQUksQ0FBQyxlQUFlO1FBQ3hDLGtCQUFrQixFQUFFLElBQUksQ0FBQyxlQUFlO0tBQzNDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///60df1380-2cb2-4c42-94a0-42961f180849\",\"moduleSequenceNumber\":94078}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omnitek\",\"moduleSequenceNumber\":94078,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.hack(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLElBQUksR0FBdUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFFbkUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDdkIsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7UUFDeEMsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7S0FDM0MsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyJ9\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"omnitek\",\"moduleSequenceNumber\":93191,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export var ReservedPorts;\\r\\n(function (ReservedPorts) {\\r\\n    ReservedPorts[ReservedPorts[\\\"HACKING_INFO\\\"] = 1] = \\\"HACKING_INFO\\\";\\r\\n    ReservedPorts[ReservedPorts[\\\"HACKNET_INFO\\\"] = 2] = \\\"HACKNET_INFO\\\";\\r\\n    ReservedPorts[ReservedPorts[\\\"HACK_WRITE_INFO\\\"] = 3] = \\\"HACK_WRITE_INFO\\\";\\r\\n})(ReservedPorts || (ReservedPorts = {}));\\r\\nexport const WEAKENJS = \\\"/lib/exec/weaken.js\\\";\\r\\nexport const GROWJS = \\\"/lib/exec/grow.js\\\";\\r\\nexport const HACKJS = \\\"/lib/exec/hack.js\\\";\\r\\nexport const UTILJS = \\\"/lib/util.js\\\";\\r\\nexport const CITIES = [\\\"Aevum\\\", \\\"Chongqing\\\", \\\"Sector-12\\\", \\\"New Tokyo\\\", \\\"Ishima\\\", \\\"Volhaven\\\"];\\r\\nexport function llog(ns, str, ...args) {\\r\\n    ns.print(ns.sprintf(\\\"%8s \\\" + str, new Date().toLocaleTimeString(\\\"it-IT\\\"), ...args));\\r\\n}\\r\\nexport function softenServer(ns, hostname) {\\r\\n    if (ns.hasRootAccess(hostname)) {\\r\\n        return;\\r\\n    }\\r\\n    let ports = 0;\\r\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n        ns.brutessh(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n        ns.ftpcrack(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n        ns.httpworm(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n        ns.relaysmtp(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n        ns.sqlinject(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ports >= ns.getServerNumPortsRequired(hostname)) {\\r\\n        ns.nuke(hostname);\\r\\n    }\\r\\n}\\r\\nexport function serverIsHackable(ns, hostname) {\\r\\n    return ns.hasRootAccess(hostname) && ns.getHackingLevel() >= ns.getServerRequiredHackingLevel(hostname);\\r\\n}\\r\\nexport function canExecuteOnServer(ns, hostname) {\\r\\n    return ns.hasRootAccess(hostname) && ns.getServerMaxRam(hostname) > 0;\\r\\n}\\r\\nexport function mapHosts(ns, hosts = {}, parents = [], current = \\\"home\\\") {\\r\\n    const newParents = parents.concat(current);\\r\\n    hosts[current] = newParents;\\r\\n    const children = ns.scan(current).filter((element) => !parents.includes(element));\\r\\n    for (const child of children) {\\r\\n        mapHosts(ns, hosts, newParents, child);\\r\\n    }\\r\\n    return hosts;\\r\\n}\\r\\nexport function allHosts(ns) {\\r\\n    return Object.keys(mapHosts(ns));\\r\\n}\\r\\nexport function doProgramBuys(ns) {\\r\\n    const player = ns.getPlayer();\\r\\n    if (!player.tor && player.money > 200e3)\\r\\n        ns.purchaseTor();\\r\\n    if (!ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\") && player.money > 500e3)\\r\\n        ns.purchaseProgram(\\\"BruteSSH.exe\\\");\\r\\n    if (!ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\") && player.money > 1500e3)\\r\\n        ns.purchaseProgram(\\\"FTPCrack.exe\\\");\\r\\n    if (!ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\") && player.money > 5e6)\\r\\n        ns.purchaseProgram(\\\"relaySMTP.exe\\\");\\r\\n    if (!ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\") && player.money > 30e6)\\r\\n        ns.purchaseProgram(\\\"HTTPWorm.exe\\\");\\r\\n    if (!ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\") && player.money > 250e6)\\r\\n        ns.purchaseProgram(\\\"SQLInject.exe\\\");\\r\\n}\\r\\nexport function doBuyAndSoftenAll(ns) {\\r\\n    doProgramBuys(ns);\\r\\n    for (const hostname of allHosts(ns)) {\\r\\n        softenServer(ns, hostname);\\r\\n    }\\r\\n}\\r\\nexport function stFormat(ns, ms, showms = false, showfull = false) {\\r\\n    let timeLeft = ms;\\r\\n    const hours = Math.floor(ms / (1000 * 60 * 60));\\r\\n    timeLeft -= hours * (1000 * 60 * 60);\\r\\n    const minutes = Math.floor(timeLeft / (1000 * 60));\\r\\n    timeLeft -= minutes * (1000 * 60);\\r\\n    const seconds = Math.floor(timeLeft / 1000);\\r\\n    timeLeft -= seconds * 1000;\\r\\n    const milliseconds = timeLeft;\\r\\n    if (showms) {\\r\\n        if (hours > 0 || showfull)\\r\\n            return ns.sprintf(\\\"%02d:%02d:%02d.%03d\\\", hours, minutes, seconds, milliseconds);\\r\\n        if (minutes > 0)\\r\\n            return ns.sprintf(\\\"%02d:%02d.%03d\\\", minutes, seconds, milliseconds);\\r\\n        return ns.sprintf(\\\"%02d.%03d\\\", seconds, milliseconds);\\r\\n    }\\r\\n    else {\\r\\n        if (hours > 0 || showfull)\\r\\n            return ns.sprintf(\\\"%02d:%02d:%02d\\\", hours, minutes, seconds);\\r\\n        if (minutes > 0)\\r\\n            return ns.sprintf(\\\"%02d:%02d\\\", minutes, seconds);\\r\\n        return ns.sprintf(\\\"%02d\\\", seconds);\\r\\n    }\\r\\n}\\r\\nexport function stdFormat(ns, offset = 0, showms = false) {\\r\\n    const date = new Date(new Date().getTime() + offset);\\r\\n    if (showms) {\\r\\n        const ms = ns.sprintf(\\\"%03d\\\", date.getUTCMilliseconds());\\r\\n        return date.toLocaleTimeString(\\\"it-IT\\\") + \\\".\\\" + ms;\\r\\n    }\\r\\n    else {\\r\\n        return date.toLocaleTimeString(\\\"it-IT\\\");\\r\\n    }\\r\\n}\\r\\nexport async function doBackdoors(ns) {\\r\\n    //const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"w0r1d_d43m0n\\\", \\\"b-and-a\\\", \\\"ecorp\\\", \\\"fulcrumassets\\\", \\\"fulcrumtech\\\"];\\r\\n    //const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"omnitek\\\", \\\"kuai-gong\\\", \\\"megacorp\\\"];\\r\\n    const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"w0r1d_d43m0n\\\"];\\r\\n    const hosts = mapHosts(ns);\\r\\n    for (const [hostName, trail] of Object.entries(hosts)) {\\r\\n        const server = ns.getServer(hostName);\\r\\n        if (!targetHosts.includes(hostName) ||\\r\\n            server.backdoorInstalled ||\\r\\n            server.requiredHackingSkill > ns.getHackingLevel() ||\\r\\n            !server.hasAdminRights)\\r\\n            continue;\\r\\n        ns.print(hostName);\\r\\n        for (const hostHopName of trail) {\\r\\n            ns.connect(hostHopName);\\r\\n        }\\r\\n        await ns.installBackdoor();\\r\\n        ns.connect(\\\"home\\\");\\r\\n    }\\r\\n}\\r\\nexport function cleanLogs(ns) {\\r\\n    ns.disableLog(\\\"disableLog\\\");\\r\\n    ns.disableLog(\\\"ALL\\\");\\r\\n    // ns.disableLog(\\\"sleep\\\")\\r\\n    // ns.disableLog(\\\"exec\\\")\\r\\n    // ns.disableLog(\\\"getServerMaxRam\\\")\\r\\n    // ns.disableLog(\\\"getServerSecurityLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerMinSecurityLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerMaxMoney\\\")\\r\\n    // ns.disableLog(\\\"getHackingLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerRequiredHackingLevel\\\")\\r\\n    // ns.disableLog(\\\"scan\\\")\\r\\n    // ns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n    // ns.disableLog(\\\"getServerUsedRam\\\")\\r\\n}\\r\\nexport const ALL_FACTIONS = [\\r\\n    \\\"Illuminati\\\",\\r\\n    \\\"Daedalus\\\",\\r\\n    \\\"The Covenant\\\",\\r\\n    \\\"ECorp\\\",\\r\\n    \\\"MegaCorp\\\",\\r\\n    \\\"Bachman & Associates\\\",\\r\\n    \\\"Blade Industries\\\",\\r\\n    \\\"NWO\\\",\\r\\n    \\\"Clarke Incorporated\\\",\\r\\n    \\\"OmniTek Incorporated\\\",\\r\\n    \\\"Four Sigma\\\",\\r\\n    \\\"KuaiGong International\\\",\\r\\n    \\\"Fulcrum Secret Technologies\\\",\\r\\n    \\\"BitRunners\\\",\\r\\n    \\\"The Black Hand\\\",\\r\\n    \\\"NiteSec\\\",\\r\\n    \\\"Aevum\\\",\\r\\n    \\\"Chongqing\\\",\\r\\n    \\\"Ishima\\\",\\r\\n    \\\"New Tokyo\\\",\\r\\n    \\\"Sector-12\\\",\\r\\n    \\\"Volhaven\\\",\\r\\n    \\\"Speakers for the Dead\\\",\\r\\n    \\\"The Dark Army\\\",\\r\\n    \\\"The Syndicate\\\",\\r\\n    \\\"Silhouette\\\",\\r\\n    \\\"Tetrads\\\",\\r\\n    \\\"Slum Snakes\\\",\\r\\n    \\\"Netburners\\\",\\r\\n    \\\"Tian Di Hui\\\",\\r\\n    \\\"CyberSec\\\",\\r\\n    \\\"Bladeburners\\\",\\r\\n    \\\"Church of the Machine God\\\",\\r\\n];\\r\\nexport async function writeOut(ns, data, startTime, endTime, result, startSec, startCash) {\\r\\n    if (data.writeFile !== \\\"\\\") {\\r\\n        const outstr = ns.sprintf(\\\"%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\", data.target, data.uid, data.batchId, data.realTimeStart + data.offset, data.realTimeStart + data.finish, data.operationTime, startTime, endTime, endTime - startTime, startTime - (data.realTimeStart + data.offset), endTime - (data.realTimeStart + data.finish), endTime - startTime - data.operationTime, result, startSec.toFixed(2), ns.getServerSecurityLevel(data.target).toFixed(2), ns.nFormat(startCash, \\\"($0.000a)\\\"), ns.nFormat(ns.getServerMoneyAvailable(data.target), \\\"($0.000a)\\\"));\\r\\n        while (!await ns.tryWritePort(ReservedPorts.HACK_WRITE_INFO, [data.writeFile, outstr]))\\r\\n            ;\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi91dGlsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLE1BQU0sQ0FBTixJQUFZLGFBSVg7QUFKRCxXQUFZLGFBQWE7SUFDckIsaUVBQWdCLENBQUE7SUFDaEIsaUVBQVksQ0FBQTtJQUNaLHVFQUFlLENBQUE7QUFDbkIsQ0FBQyxFQUpXLGFBQWEsS0FBYixhQUFhLFFBSXhCO0FBRUQsTUFBTSxDQUFDLE1BQU0sUUFBUSxHQUFHLHFCQUFxQixDQUFDO0FBQzlDLE1BQU0sQ0FBQyxNQUFNLE1BQU0sR0FBRyxtQkFBbUIsQ0FBQztBQUMxQyxNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUcsbUJBQW1CLENBQUM7QUFDMUMsTUFBTSxDQUFDLE1BQU0sTUFBTSxHQUFHLGNBQWMsQ0FBQztBQUVyQyxNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUcsQ0FBQyxPQUFPLEVBQUUsV0FBVyxFQUFFLFdBQVcsRUFBRSxXQUFXLEVBQUUsUUFBUSxFQUFFLFVBQVUsQ0FBQyxDQUFDO0FBRTdGLE1BQU0sVUFBVSxJQUFJLENBQUMsRUFBTSxFQUFFLEdBQVcsRUFBRSxHQUFHLElBQXlCO0lBQ2xFLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEdBQUcsR0FBRyxFQUFFLElBQUksSUFBSSxFQUFFLENBQUMsa0JBQWtCLENBQUMsT0FBTyxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDO0FBQ3hGLENBQUM7QUFFRCxNQUFNLFVBQVUsWUFBWSxDQUFDLEVBQU0sRUFBRSxRQUFnQjtJQUNqRCxJQUFJLEVBQUUsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDNUIsT0FBTztLQUNWO0lBRUQsSUFBSSxLQUFLLEdBQUcsQ0FBQyxDQUFDO0lBQ2QsSUFBSSxFQUFFLENBQUMsVUFBVSxDQUFDLGNBQWMsRUFB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\",\"filename\":\"/lib/util.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":13.25,\"server\":\"omnitek\",\"moduleSequenceNumber\":93193,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"purchaseTor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"purchaseProgram\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"connect\",\"cost\":2},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.stanek.charge(ns.args[0], ns.args[1]);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hhcmdlLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL3N0YW5lay9jaGFyZ2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUM5QixPQUFPLElBQUksRUFBRTtRQUNULE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7S0FDakQ7QUFDTCxDQUFDIn0=\",\"filename\":\"/lib/stanek/charge.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/stanek/charge.js\",\"url\":\"blob:file:///f2ee5e9f-7c4d-411b-98ba-856d66c99d2a\",\"moduleSequenceNumber\":99867}],\"dependents\":[],\"ramUsage\":2,\"server\":\"omnitek\",\"moduleSequenceNumber\":99867,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.charge\",\"cost\":0.4}]}}],\"serversOnNetwork\":[\"vitalife\",\"blade\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":282,\"hackDifficulty\":282,\"minDifficulty\":94,\"moneyAvailable\":14580515634,\"moneyMax\":164030800882.5,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":963,\"serverGrowth\":96,\"suppression\":0,\"activeSuppressionThreads\":[],\"suppressionIntervalID\":null,\"suppressionLastUpdateTime\":0}},\"4sigma\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"4sigma\",\"httpPortOpen\":true,\"ip\":\"94.0.3.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"helios\",\"powerhouse-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":165,\"hackDifficulty\":165,\"minDifficulty\":55,\"moneyAvailable\":12416952661.5,\"moneyMax\":139690717441.875,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1237,\"serverGrowth\":82,\"suppression\":0,\"activeSuppressionThreads\":[],\"suppressionIntervalID\":null,\"suppressionLastUpdateTime\":0}},\"kuai-gong\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"kuai-gong\",\"httpPortOpen\":true,\"ip\":\"70.3.3.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"vitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":291,\"hackDifficulty\":291,\"minDifficulty\":97,\"moneyAvailable\":22057639314,\"moneyMax\":248148442282.5,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1132,\"serverGrowth\":94,\"suppression\":0,\"activeSuppressionThreads\":[],\"suppressionIntervalID\":null,\"suppressionLastUpdateTime\":0}},\"fulcrumtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":true,\"ip\":\"34.2.5.1\",\"isConnectedTo\":false,\"maxRam\":2048,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":2023.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"script\\\":\\\"/lib/exec/grow.js\\\",\\\"host\\\":\\\"fulcrumtech\\\",\\\"numThreads\\\":112,\\\"target\\\":\\\"phantasy\\\",\\\"hackLevelTiming\\\":153.19873646097005,\\\"hackLevelEffect\\\":204,\\\"batchId\\\":0,\\\"offset\\\":800,\\\"operationTime\\\":142114,\\\"finish\\\":142914,\\\"realTimeStart\\\":1647907321842,\\\"uid\\\":\\\"000-0PG-fulcrumtech\\\",\\\"writeFile\\\":\\\"\\\"}\"],\"dataMap\":{},\"filename\":\"/lib/exec/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":70.01000000000045,\"pid\":1251,\"ramUsage\":1.75,\"server\":\"fulcrumtech\",\"threads\":112,\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///aaa405bf-ce04-4b0f-991d-e3984c54bdae\",\"moduleSequenceNumber\":93492}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"script\\\":\\\"/lib/exec/weaken.js\\\",\\\"host\\\":\\\"fulcrumtech\\\",\\\"numThreads\\\":9,\\\"target\\\":\\\"phantasy\\\",\\\"hackLevelTiming\\\":203.99842057621257,\\\"hackLevelEffect\\\":204,\\\"batchId\\\":0,\\\"offset\\\":1200,\\\"operationTime\\\":113691,\\\"finish\\\":114891,\\\"realTimeStart\\\":1647907321842,\\\"uid\\\":\\\"000-1PW-fulcrumtech\\\",\\\"writeFile\\\":\\\"\\\"}\"],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":69.61000000000044,\"pid\":1252,\"ramUsage\":1.75,\"server\":\"fulcrumtech\",\"threads\":9,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///ad3b7b73-75a3-40e6-97c2-b61001328a81\",\"moduleSequenceNumber\":93258}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"script\\\":\\\"/lib/exec/hack.js\\\",\\\"host\\\":\\\"fulcrumtech\\\",\\\"numThreads\\\":120,\\\"target\\\":\\\"phantasy\\\",\\\"hackLevelTiming\\\":13.499605144053142,\\\"hackLevelEffect\\\":204,\\\"batchId\\\":1,\\\"offset\\\":1600,\\\"operationTime\\\":142113,\\\"finish\\\":143713,\\\"realTimeStart\\\":1647907321842,\\\"uid\\\":\\\"001-0H-fulcrumtech\\\",\\\"writeFile\\\":\\\"\\\"}\"],\"dataMap\":{},\"filename\":\"/lib/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":69.21000000000043,\"pid\":1253,\"ramUsage\":1.7,\"server\":\"fulcrumtech\",\"threads\":120,\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///23b7e2e2-07f8-4ae9-bdd8-9681558f9f89\",\"moduleSequenceNumber\":93726}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"script\\\":\\\"/lib/exec/weaken.js\\\",\\\"host\\\":\\\"fulcrumtech\\\",\\\"numThreads\\\":5,\\\"target\\\":\\\"phantasy\\\",\\\"hackLevelTiming\\\":203.99842057621257,\\\"hackLevelEffect\\\":204,\\\"batchId\\\":1,\\\"offset\\\":2000,\\\"operationTime\\\":113691,\\\"finish\\\":115691,\\\"realTimeStart\\\":1647907321842,\\\"uid\\\":\\\"001-1WH-fulcrumtech\\\",\\\"writeFile\\\":\\\"\\\"}\"],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":68.81000000000043,\"pid\":1254,\"ramUsage\":1.75,\"server\":\"fulcrumtech\",\"threads\":5,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///ad3b7b73-75a3-40e6-97c2-b61001328a81\",\"moduleSequenceNumber\":93258}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"script\\\":\\\"/lib/exec/grow.js\\\",\\\"host\\\":\\\"fulcrumtech\\\",\\\"numThreads\\\":144,\\\"target\\\":\\\"phantasy\\\",\\\"hackLevelTiming\\\":153.19873646097005,\\\"hackLevelEffect\\\":204,\\\"batchId\\\":1,\\\"offset\\\":2400,\\\"operationTime\\\":142114,\\\"finish\\\":144514,\\\"realTimeStart\\\":1647907321842,\\\"uid\\\":\\\"001-2G-fulcrumtech\\\",\\\"writeFile\\\":\\\"\\\"}\"],\"dataMap\":{},\"filename\":\"/lib/exec/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":68.41000000000042,\"pid\":1255,\"ramUsage\":1.75,\"server\":\"fulcrumtech\",\"threads\":144,\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///aaa405bf-ce04-4b0f-991d-e3984c54bdae\",\"moduleSequenceNumber\":93492}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"script\\\":\\\"/lib/exec/weaken.js\\\",\\\"host\\\":\\\"fulcrumtech\\\",\\\"numThreads\\\":12,\\\"target\\\":\\\"phantasy\\\",\\\"hackLevelTiming\\\":203.99842057621257,\\\"hackLevelEffect\\\":204,\\\"batchId\\\":1,\\\"offset\\\":2800,\\\"operationTime\\\":113691,\\\"finish\\\":116491,\\\"realTimeStart\\\":1647907321842,\\\"uid\\\":\\\"001-3WG-fulcrumtech\\\",\\\"writeFile\\\":\\\"\\\"}\"],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":68.01000000000042,\"pid\":1256,\"ramUsage\":1.75,\"server\":\"fulcrumtech\",\"threads\":12,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///ad3b7b73-75a3-40e6-97c2-b61001328a81\",\"moduleSequenceNumber\":93258}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"script\\\":\\\"/lib/exec/hack.js\\\",\\\"host\\\":\\\"fulcrumtech\\\",\\\"numThreads\\\":120,\\\"target\\\":\\\"phantasy\\\",\\\"hackLevelTiming\\\":13.499605144053142,\\\"hackLevelEffect\\\":204,\\\"batchId\\\":2,\\\"offset\\\":3200,\\\"operationTime\\\":142113,\\\"finish\\\":145313,\\\"realTimeStart\\\":1647907321842,\\\"uid\\\":\\\"002-0H-fulcrumtech\\\",\\\"writeFile\\\":\\\"\\\"}\"],\"dataMap\":{},\"filename\":\"/lib/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":67.61000000000041,\"pid\":1257,\"ramUsage\":1.7,\"server\":\"fulcrumtech\",\"threads\":120,\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///23b7e2e2-07f8-4ae9-bdd8-9681558f9f89\",\"moduleSequenceNumber\":93726}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"script\\\":\\\"/lib/exec/weaken.js\\\",\\\"host\\\":\\\"fulcrumtech\\\",\\\"numThreads\\\":5,\\\"target\\\":\\\"phantasy\\\",\\\"hackLevelTiming\\\":203.99842057621257,\\\"hackLevelEffect\\\":204,\\\"batchId\\\":2,\\\"offset\\\":3600,\\\"operationTime\\\":113691,\\\"finish\\\":117291,\\\"realTimeStart\\\":1647907321842,\\\"uid\\\":\\\"002-1WH-fulcrumtech\\\",\\\"writeFile\\\":\\\"\\\"}\"],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":67.2100000000004,\"pid\":1258,\"ramUsage\":1.75,\"server\":\"fulcrumtech\",\"threads\":5,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///ad3b7b73-75a3-40e6-97c2-b61001328a81\",\"moduleSequenceNumber\":93258}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"script\\\":\\\"/lib/exec/grow.js\\\",\\\"host\\\":\\\"fulcrumtech\\\",\\\"numThreads\\\":144,\\\"target\\\":\\\"phantasy\\\",\\\"hackLevelTiming\\\":153.19873646097005,\\\"hackLevelEffect\\\":204,\\\"batchId\\\":2,\\\"offset\\\":4000,\\\"operationTime\\\":142114,\\\"finish\\\":146114,\\\"realTimeStart\\\":1647907321842,\\\"uid\\\":\\\"002-2G-fulcrumtech\\\",\\\"writeFile\\\":\\\"\\\"}\"],\"dataMap\":{},\"filename\":\"/lib/exec/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":66.8100000000004,\"pid\":1259,\"ramUsage\":1.75,\"server\":\"fulcrumtech\",\"threads\":144,\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///aaa405bf-ce04-4b0f-991d-e3984c54bdae\",\"moduleSequenceNumber\":93492}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"script\\\":\\\"/lib/exec/weaken.js\\\",\\\"host\\\":\\\"fulcrumtech\\\",\\\"numThreads\\\":12,\\\"target\\\":\\\"phantasy\\\",\\\"hackLevelTiming\\\":203.99842057621257,\\\"hackLevelEffect\\\":204,\\\"batchId\\\":2,\\\"offset\\\":4400,\\\"operationTime\\\":113691,\\\"finish\\\":118091,\\\"realTimeStart\\\":1647907321842,\\\"uid\\\":\\\"002-3WG-fulcrumtech\\\",\\\"writeFile\\\":\\\"\\\"}\"],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":66.4100000000004,\"pid\":1260,\"ramUsage\":1.75,\"server\":\"fulcrumtech\",\"threads\":12,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///ad3b7b73-75a3-40e6-97c2-b61001328a81\",\"moduleSequenceNumber\":93258}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"script\\\":\\\"/lib/exec/hack.js\\\",\\\"host\\\":\\\"fulcrumtech\\\",\\\"numThreads\\\":120,\\\"target\\\":\\\"phantasy\\\",\\\"hackLevelTiming\\\":13.499605144053142,\\\"hackLevelEffect\\\":204,\\\"batchId\\\":3,\\\"offset\\\":4800,\\\"operationTime\\\":142113,\\\"finish\\\":146913,\\\"realTimeStart\\\":1647907321842,\\\"uid\\\":\\\"003-0H-fulcrumtech\\\",\\\"writeFile\\\":\\\"\\\"}\"],\"dataMap\":{},\"filename\":\"/lib/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":66.01000000000039,\"pid\":1261,\"ramUsage\":1.7,\"server\":\"fulcrumtech\",\"threads\":120,\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///23b7e2e2-07f8-4ae9-bdd8-9681558f9f89\",\"moduleSequenceNumber\":93726}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"script\\\":\\\"/lib/exec/weaken.js\\\",\\\"host\\\":\\\"fulcrumtech\\\",\\\"numThreads\\\":5,\\\"target\\\":\\\"phantasy\\\",\\\"hackLevelTiming\\\":203.99842057621257,\\\"hackLevelEffect\\\":204,\\\"batchId\\\":3,\\\"offset\\\":5200,\\\"operationTime\\\":113691,\\\"finish\\\":118891,\\\"realTimeStart\\\":1647907321842,\\\"uid\\\":\\\"003-1WH-fulcrumtech\\\",\\\"writeFile\\\":\\\"\\\"}\"],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":65.61000000000038,\"pid\":1262,\"ramUsage\":1.75,\"server\":\"fulcrumtech\",\"threads\":5,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///ad3b7b73-75a3-40e6-97c2-b61001328a81\",\"moduleSequenceNumber\":93258}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"script\\\":\\\"/lib/exec/grow.js\\\",\\\"host\\\":\\\"fulcrumtech\\\",\\\"numThreads\\\":144,\\\"target\\\":\\\"phantasy\\\",\\\"hackLevelTiming\\\":153.19873646097005,\\\"hackLevelEffect\\\":204,\\\"batchId\\\":3,\\\"offset\\\":5600,\\\"operationTime\\\":142114,\\\"finish\\\":147714,\\\"realTimeStart\\\":1647907321842,\\\"uid\\\":\\\"003-2G-fulcrumtech\\\",\\\"writeFile\\\":\\\"\\\"}\"],\"dataMap\":{},\"filename\":\"/lib/exec/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":65.21000000000038,\"pid\":1263,\"ramUsage\":1.75,\"server\":\"fulcrumtech\",\"threads\":144,\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///aaa405bf-ce04-4b0f-991d-e3984c54bdae\",\"moduleSequenceNumber\":93492}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"script\\\":\\\"/lib/exec/weaken.js\\\",\\\"host\\\":\\\"fulcrumtech\\\",\\\"numThreads\\\":12,\\\"target\\\":\\\"phantasy\\\",\\\"hackLevelTiming\\\":203.99842057621257,\\\"hackLevelEffect\\\":204,\\\"batchId\\\":3,\\\"offset\\\":6000,\\\"operationTime\\\":113691,\\\"finish\\\":119691,\\\"realTimeStart\\\":1647907321842,\\\"uid\\\":\\\"003-3WG-fulcrumtech\\\",\\\"writeFile\\\":\\\"\\\"}\"],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":64.81000000000037,\"pid\":1264,\"ramUsage\":1.75,\"server\":\"fulcrumtech\",\"threads\":12,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///ad3b7b73-75a3-40e6-97c2-b61001328a81\",\"moduleSequenceNumber\":93258}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"script\\\":\\\"/lib/exec/hack.js\\\",\\\"host\\\":\\\"fulcrumtech\\\",\\\"numThreads\\\":120,\\\"target\\\":\\\"phantasy\\\",\\\"hackLevelTiming\\\":13.499605144053142,\\\"hackLevelEffect\\\":204,\\\"batchId\\\":4,\\\"offset\\\":6400,\\\"operationTime\\\":142113,\\\"finish\\\":148513,\\\"realTimeStart\\\":1647907321842,\\\"uid\\\":\\\"004-0H-fulcrumtech\\\",\\\"writeFile\\\":\\\"\\\"}\"],\"dataMap\":{},\"filename\":\"/lib/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":64.41000000000037,\"pid\":1265,\"ramUsage\":1.7,\"server\":\"fulcrumtech\",\"threads\":120,\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///23b7e2e2-07f8-4ae9-bdd8-9681558f9f89\",\"moduleSequenceNumber\":93726}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"script\\\":\\\"/lib/exec/weaken.js\\\",\\\"host\\\":\\\"fulcrumtech\\\",\\\"numThreads\\\":5,\\\"target\\\":\\\"phantasy\\\",\\\"hackLevelTiming\\\":203.99842057621257,\\\"hackLevelEffect\\\":204,\\\"batchId\\\":4,\\\"offset\\\":6800,\\\"operationTime\\\":113691,\\\"finish\\\":120491,\\\"realTimeStart\\\":1647907321842,\\\"uid\\\":\\\"004-1WH-fulcrumtech\\\",\\\"writeFile\\\":\\\"\\\"}\"],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":64.01000000000036,\"pid\":1266,\"ramUsage\":1.75,\"server\":\"fulcrumtech\",\"threads\":5,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///ad3b7b73-75a3-40e6-97c2-b61001328a81\",\"moduleSequenceNumber\":93258}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"script\\\":\\\"/lib/exec/weaken.js\\\",\\\"host\\\":\\\"fulcrumtech\\\",\\\"numThreads\\\":12,\\\"target\\\":\\\"phantasy\\\",\\\"hackLevelTiming\\\":203.99842057621257,\\\"hackLevelEffect\\\":204,\\\"batchId\\\":4,\\\"offset\\\":7600,\\\"operationTime\\\":113691,\\\"finish\\\":121291,\\\"realTimeStart\\\":1647907321842,\\\"uid\\\":\\\"004-3WG-fulcrumtech\\\",\\\"writeFile\\\":\\\"\\\"}\"],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":63.210000000000356,\"pid\":1268,\"ramUsage\":1.75,\"server\":\"fulcrumtech\",\"threads\":12,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///ad3b7b73-75a3-40e6-97c2-b61001328a81\",\"moduleSequenceNumber\":93258}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"script\\\":\\\"/lib/exec/weaken.js\\\",\\\"host\\\":\\\"fulcrumtech\\\",\\\"numThreads\\\":5,\\\"target\\\":\\\"phantasy\\\",\\\"hackLevelTiming\\\":203.99842057621257,\\\"hackLevelEffect\\\":204,\\\"batchId\\\":5,\\\"offset\\\":8400,\\\"operationTime\\\":113691,\\\"finish\\\":122091,\\\"realTimeStart\\\":1647907321842,\\\"uid\\\":\\\"005-1WH-fulcrumtech\\\",\\\"writeFile\\\":\\\"\\\"}\"],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":62.410000000000345,\"pid\":1270,\"ramUsage\":1.75,\"server\":\"fulcrumtech\",\"threads\":5,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///ad3b7b73-75a3-40e6-97c2-b61001328a81\",\"moduleSequenceNumber\":93258}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"script\\\":\\\"/lib/exec/weaken.js\\\",\\\"host\\\":\\\"fulcrumtech\\\",\\\"numThreads\\\":12,\\\"target\\\":\\\"phantasy\\\",\\\"hackLevelTiming\\\":203.99842057621257,\\\"hackLevelEffect\\\":204,\\\"batchId\\\":5,\\\"offset\\\":9200,\\\"operationTime\\\":113691,\\\"finish\\\":122891,\\\"realTimeStart\\\":1647907321842,\\\"uid\\\":\\\"005-3WG-fulcrumtech\\\",\\\"writeFile\\\":\\\"\\\"}\"],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":61.61000000000033,\"pid\":1272,\"ramUsage\":1.75,\"server\":\"fulcrumtech\",\"threads\":12,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///ad3b7b73-75a3-40e6-97c2-b61001328a81\",\"moduleSequenceNumber\":93258}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"script\\\":\\\"/lib/exec/weaken.js\\\",\\\"host\\\":\\\"fulcrumtech\\\",\\\"numThreads\\\":5,\\\"target\\\":\\\"phantasy\\\",\\\"hackLevelTiming\\\":203.99842057621257,\\\"hackLevelEffect\\\":204,\\\"batchId\\\":6,\\\"offset\\\":10000,\\\"operationTime\\\":113691,\\\"finish\\\":123691,\\\"realTimeStart\\\":1647907321842,\\\"uid\\\":\\\"006-1WH-fulcrumtech\\\",\\\"writeFile\\\":\\\"\\\"}\"],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":60.81000000000032,\"pid\":1274,\"ramUsage\":1.75,\"server\":\"fulcrumtech\",\"threads\":5,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///ad3b7b73-75a3-40e6-97c2-b61001328a81\",\"moduleSequenceNumber\":93258}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"script\\\":\\\"/lib/exec/weaken.js\\\",\\\"host\\\":\\\"fulcrumtech\\\",\\\"numThreads\\\":12,\\\"target\\\":\\\"phantasy\\\",\\\"hackLevelTiming\\\":203.99842057621257,\\\"hackLevelEffect\\\":204,\\\"batchId\\\":6,\\\"offset\\\":10800,\\\"operationTime\\\":113691,\\\"finish\\\":124491,\\\"realTimeStart\\\":1647907321842,\\\"uid\\\":\\\"006-3WG-fulcrumtech\\\",\\\"writeFile\\\":\\\"\\\"}\"],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":60.01000000000031,\"pid\":1276,\"ramUsage\":1.75,\"server\":\"fulcrumtech\",\"threads\":12,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///ad3b7b73-75a3-40e6-97c2-b61001328a81\",\"moduleSequenceNumber\":93258}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"script\\\":\\\"/lib/exec/weaken.js\\\",\\\"host\\\":\\\"fulcrumtech\\\",\\\"numThreads\\\":5,\\\"target\\\":\\\"phantasy\\\",\\\"hackLevelTiming\\\":203.99842057621257,\\\"hackLevelEffect\\\":204,\\\"batchId\\\":7,\\\"offset\\\":11600,\\\"operationTime\\\":113691,\\\"finish\\\":125291,\\\"realTimeStart\\\":1647907321842,\\\"uid\\\":\\\"007-1WH-fulcrumtech\\\",\\\"writeFile\\\":\\\"\\\"}\"],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":59.2100000000003,\"pid\":1278,\"ramUsage\":1.75,\"server\":\"fulcrumtech\",\"threads\":5,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///ad3b7b73-75a3-40e6-97c2-b61001328a81\",\"moduleSequenceNumber\":93258}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"script\\\":\\\"/lib/exec/weaken.js\\\",\\\"host\\\":\\\"fulcrumtech\\\",\\\"numThreads\\\":12,\\\"target\\\":\\\"phantasy\\\",\\\"hackLevelTiming\\\":203.99842057621257,\\\"hackLevelEffect\\\":204,\\\"batchId\\\":7,\\\"offset\\\":12400,\\\"operationTime\\\":113691,\\\"finish\\\":126091,\\\"realTimeStart\\\":1647907321842,\\\"uid\\\":\\\"007-3WG-fulcrumtech\\\",\\\"writeFile\\\":\\\"\\\"}\"],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":58.41000000000029,\"pid\":1280,\"ramUsage\":1.75,\"server\":\"fulcrumtech\",\"threads\":12,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///ad3b7b73-75a3-40e6-97c2-b61001328a81\",\"moduleSequenceNumber\":93258}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"script\\\":\\\"/lib/exec/weaken.js\\\",\\\"host\\\":\\\"fulcrumtech\\\",\\\"numThreads\\\":5,\\\"target\\\":\\\"phantasy\\\",\\\"hackLevelTiming\\\":203.99842057621257,\\\"hackLevelEffect\\\":204,\\\"batchId\\\":8,\\\"offset\\\":13200,\\\"operationTime\\\":113691,\\\"finish\\\":126891,\\\"realTimeStart\\\":1647907321842,\\\"uid\\\":\\\"008-1WH-fulcrumtech\\\",\\\"writeFile\\\":\\\"\\\"}\"],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":57.61000000000028,\"pid\":1282,\"ramUsage\":1.75,\"server\":\"fulcrumtech\",\"threads\":5,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///ad3b7b73-75a3-40e6-97c2-b61001328a81\",\"moduleSequenceNumber\":93258}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"script\\\":\\\"/lib/exec/weaken.js\\\",\\\"host\\\":\\\"fulcrumtech\\\",\\\"numThreads\\\":12,\\\"target\\\":\\\"phantasy\\\",\\\"hackLevelTiming\\\":203.99842057621257,\\\"hackLevelEffect\\\":204,\\\"batchId\\\":8,\\\"offset\\\":14000,\\\"operationTime\\\":113691,\\\"finish\\\":127691,\\\"realTimeStart\\\":1647907321842,\\\"uid\\\":\\\"008-3WG-fulcrumtech\\\",\\\"writeFile\\\":\\\"\\\"}\"],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":56.810000000000265,\"pid\":1284,\"ramUsage\":1.75,\"server\":\"fulcrumtech\",\"threads\":12,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///ad3b7b73-75a3-40e6-97c2-b61001328a81\",\"moduleSequenceNumber\":93258}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"script\\\":\\\"/lib/exec/weaken.js\\\",\\\"host\\\":\\\"fulcrumtech\\\",\\\"numThreads\\\":1,\\\"target\\\":\\\"phantasy\\\",\\\"hackLevelTiming\\\":203.99842057621257,\\\"hackLevelEffect\\\":204,\\\"batchId\\\":9,\\\"offset\\\":14800,\\\"operationTime\\\":113691,\\\"finish\\\":128491,\\\"realTimeStart\\\":1647907321842,\\\"uid\\\":\\\"009-1WH-fulcrumtech\\\",\\\"writeFile\\\":\\\"\\\"}\"],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":56.010000000000254,\"pid\":1287,\"ramUsage\":1.75,\"server\":\"fulcrumtech\",\"threads\":1,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///ad3b7b73-75a3-40e6-97c2-b61001328a81\",\"moduleSequenceNumber\":93258}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.grow(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLElBQUksR0FBdUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFFbkUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDdkIsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7UUFDeEMsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7S0FDM0MsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyJ9\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///aaa405bf-ce04-4b0f-991d-e3984c54bdae\",\"moduleSequenceNumber\":93492}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":93492,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.weaken(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxJQUFJLEdBQXVCLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO0lBRW5FLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFO1FBQ3pCLGtCQUFrQixFQUFFLElBQUksQ0FBQyxlQUFlO1FBQ3hDLGtCQUFrQixFQUFFLElBQUksQ0FBQyxlQUFlO0tBQzNDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///ad3b7b73-75a3-40e6-97c2-b61001328a81\",\"moduleSequenceNumber\":93258}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":93258,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.hack(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLElBQUksR0FBdUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFFbkUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDdkIsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7UUFDeEMsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7S0FDM0MsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyJ9\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///23b7e2e2-07f8-4ae9-bdd8-9681558f9f89\",\"moduleSequenceNumber\":93726}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":93726,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export var ReservedPorts;\\r\\n(function (ReservedPorts) {\\r\\n    ReservedPorts[ReservedPorts[\\\"HACKING_INFO\\\"] = 1] = \\\"HACKING_INFO\\\";\\r\\n    ReservedPorts[ReservedPorts[\\\"HACKNET_INFO\\\"] = 2] = \\\"HACKNET_INFO\\\";\\r\\n    ReservedPorts[ReservedPorts[\\\"HACK_WRITE_INFO\\\"] = 3] = \\\"HACK_WRITE_INFO\\\";\\r\\n})(ReservedPorts || (ReservedPorts = {}));\\r\\nexport const WEAKENJS = \\\"/lib/exec/weaken.js\\\";\\r\\nexport const GROWJS = \\\"/lib/exec/grow.js\\\";\\r\\nexport const HACKJS = \\\"/lib/exec/hack.js\\\";\\r\\nexport const UTILJS = \\\"/lib/util.js\\\";\\r\\nexport const CITIES = [\\\"Aevum\\\", \\\"Chongqing\\\", \\\"Sector-12\\\", \\\"New Tokyo\\\", \\\"Ishima\\\", \\\"Volhaven\\\"];\\r\\nexport function llog(ns, str, ...args) {\\r\\n    ns.print(ns.sprintf(\\\"%8s \\\" + str, new Date().toLocaleTimeString(\\\"it-IT\\\"), ...args));\\r\\n}\\r\\nexport function softenServer(ns, hostname) {\\r\\n    if (ns.hasRootAccess(hostname)) {\\r\\n        return;\\r\\n    }\\r\\n    let ports = 0;\\r\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n        ns.brutessh(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n        ns.ftpcrack(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n        ns.httpworm(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n        ns.relaysmtp(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n        ns.sqlinject(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ports >= ns.getServerNumPortsRequired(hostname)) {\\r\\n        ns.nuke(hostname);\\r\\n    }\\r\\n}\\r\\nexport function serverIsHackable(ns, hostname) {\\r\\n    return ns.hasRootAccess(hostname) && ns.getHackingLevel() >= ns.getServerRequiredHackingLevel(hostname);\\r\\n}\\r\\nexport function canExecuteOnServer(ns, hostname) {\\r\\n    return ns.hasRootAccess(hostname) && ns.getServerMaxRam(hostname) > 0;\\r\\n}\\r\\nexport function mapHosts(ns, hosts = {}, parents = [], current = \\\"home\\\") {\\r\\n    const newParents = parents.concat(current);\\r\\n    hosts[current] = newParents;\\r\\n    const children = ns.scan(current).filter((element) => !parents.includes(element));\\r\\n    for (const child of children) {\\r\\n        mapHosts(ns, hosts, newParents, child);\\r\\n    }\\r\\n    return hosts;\\r\\n}\\r\\nexport function allHosts(ns) {\\r\\n    return Object.keys(mapHosts(ns));\\r\\n}\\r\\nexport function doProgramBuys(ns) {\\r\\n    const player = ns.getPlayer();\\r\\n    if (!player.tor && player.money > 200e3)\\r\\n        ns.purchaseTor();\\r\\n    if (!ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\") && player.money > 500e3)\\r\\n        ns.purchaseProgram(\\\"BruteSSH.exe\\\");\\r\\n    if (!ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\") && player.money > 1500e3)\\r\\n        ns.purchaseProgram(\\\"FTPCrack.exe\\\");\\r\\n    if (!ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\") && player.money > 5e6)\\r\\n        ns.purchaseProgram(\\\"relaySMTP.exe\\\");\\r\\n    if (!ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\") && player.money > 30e6)\\r\\n        ns.purchaseProgram(\\\"HTTPWorm.exe\\\");\\r\\n    if (!ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\") && player.money > 250e6)\\r\\n        ns.purchaseProgram(\\\"SQLInject.exe\\\");\\r\\n}\\r\\nexport function doBuyAndSoftenAll(ns) {\\r\\n    doProgramBuys(ns);\\r\\n    for (const hostname of allHosts(ns)) {\\r\\n        softenServer(ns, hostname);\\r\\n    }\\r\\n}\\r\\nexport function stFormat(ns, ms, showms = false, showfull = false) {\\r\\n    let timeLeft = ms;\\r\\n    const hours = Math.floor(ms / (1000 * 60 * 60));\\r\\n    timeLeft -= hours * (1000 * 60 * 60);\\r\\n    const minutes = Math.floor(timeLeft / (1000 * 60));\\r\\n    timeLeft -= minutes * (1000 * 60);\\r\\n    const seconds = Math.floor(timeLeft / 1000);\\r\\n    timeLeft -= seconds * 1000;\\r\\n    const milliseconds = timeLeft;\\r\\n    if (showms) {\\r\\n        if (hours > 0 || showfull)\\r\\n            return ns.sprintf(\\\"%02d:%02d:%02d.%03d\\\", hours, minutes, seconds, milliseconds);\\r\\n        if (minutes > 0)\\r\\n            return ns.sprintf(\\\"%02d:%02d.%03d\\\", minutes, seconds, milliseconds);\\r\\n        return ns.sprintf(\\\"%02d.%03d\\\", seconds, milliseconds);\\r\\n    }\\r\\n    else {\\r\\n        if (hours > 0 || showfull)\\r\\n            return ns.sprintf(\\\"%02d:%02d:%02d\\\", hours, minutes, seconds);\\r\\n        if (minutes > 0)\\r\\n            return ns.sprintf(\\\"%02d:%02d\\\", minutes, seconds);\\r\\n        return ns.sprintf(\\\"%02d\\\", seconds);\\r\\n    }\\r\\n}\\r\\nexport function stdFormat(ns, offset = 0, showms = false) {\\r\\n    const date = new Date(new Date().getTime() + offset);\\r\\n    if (showms) {\\r\\n        const ms = ns.sprintf(\\\"%03d\\\", date.getUTCMilliseconds());\\r\\n        return date.toLocaleTimeString(\\\"it-IT\\\") + \\\".\\\" + ms;\\r\\n    }\\r\\n    else {\\r\\n        return date.toLocaleTimeString(\\\"it-IT\\\");\\r\\n    }\\r\\n}\\r\\nexport async function doBackdoors(ns) {\\r\\n    //const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"w0r1d_d43m0n\\\", \\\"b-and-a\\\", \\\"ecorp\\\", \\\"fulcrumassets\\\", \\\"fulcrumtech\\\"];\\r\\n    //const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"omnitek\\\", \\\"kuai-gong\\\", \\\"megacorp\\\"];\\r\\n    const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"w0r1d_d43m0n\\\"];\\r\\n    const hosts = mapHosts(ns);\\r\\n    for (const [hostName, trail] of Object.entries(hosts)) {\\r\\n        const server = ns.getServer(hostName);\\r\\n        if (!targetHosts.includes(hostName) ||\\r\\n            server.backdoorInstalled ||\\r\\n            server.requiredHackingSkill > ns.getHackingLevel() ||\\r\\n            !server.hasAdminRights)\\r\\n            continue;\\r\\n        ns.print(hostName);\\r\\n        for (const hostHopName of trail) {\\r\\n            ns.connect(hostHopName);\\r\\n        }\\r\\n        await ns.installBackdoor();\\r\\n        ns.connect(\\\"home\\\");\\r\\n    }\\r\\n}\\r\\nexport function cleanLogs(ns) {\\r\\n    ns.disableLog(\\\"disableLog\\\");\\r\\n    ns.disableLog(\\\"ALL\\\");\\r\\n    // ns.disableLog(\\\"sleep\\\")\\r\\n    // ns.disableLog(\\\"exec\\\")\\r\\n    // ns.disableLog(\\\"getServerMaxRam\\\")\\r\\n    // ns.disableLog(\\\"getServerSecurityLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerMinSecurityLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerMaxMoney\\\")\\r\\n    // ns.disableLog(\\\"getHackingLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerRequiredHackingLevel\\\")\\r\\n    // ns.disableLog(\\\"scan\\\")\\r\\n    // ns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n    // ns.disableLog(\\\"getServerUsedRam\\\")\\r\\n}\\r\\nexport const ALL_FACTIONS = [\\r\\n    \\\"Illuminati\\\",\\r\\n    \\\"Daedalus\\\",\\r\\n    \\\"The Covenant\\\",\\r\\n    \\\"ECorp\\\",\\r\\n    \\\"MegaCorp\\\",\\r\\n    \\\"Bachman & Associates\\\",\\r\\n    \\\"Blade Industries\\\",\\r\\n    \\\"NWO\\\",\\r\\n    \\\"Clarke Incorporated\\\",\\r\\n    \\\"OmniTek Incorporated\\\",\\r\\n    \\\"Four Sigma\\\",\\r\\n    \\\"KuaiGong International\\\",\\r\\n    \\\"Fulcrum Secret Technologies\\\",\\r\\n    \\\"BitRunners\\\",\\r\\n    \\\"The Black Hand\\\",\\r\\n    \\\"NiteSec\\\",\\r\\n    \\\"Aevum\\\",\\r\\n    \\\"Chongqing\\\",\\r\\n    \\\"Ishima\\\",\\r\\n    \\\"New Tokyo\\\",\\r\\n    \\\"Sector-12\\\",\\r\\n    \\\"Volhaven\\\",\\r\\n    \\\"Speakers for the Dead\\\",\\r\\n    \\\"The Dark Army\\\",\\r\\n    \\\"The Syndicate\\\",\\r\\n    \\\"Silhouette\\\",\\r\\n    \\\"Tetrads\\\",\\r\\n    \\\"Slum Snakes\\\",\\r\\n    \\\"Netburners\\\",\\r\\n    \\\"Tian Di Hui\\\",\\r\\n    \\\"CyberSec\\\",\\r\\n    \\\"Bladeburners\\\",\\r\\n    \\\"Church of the Machine God\\\",\\r\\n];\\r\\nexport async function writeOut(ns, data, startTime, endTime, result, startSec, startCash) {\\r\\n    if (data.writeFile !== \\\"\\\") {\\r\\n        const outstr = ns.sprintf(\\\"%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\", data.target, data.uid, data.batchId, data.realTimeStart + data.offset, data.realTimeStart + data.finish, data.operationTime, startTime, endTime, endTime - startTime, startTime - (data.realTimeStart + data.offset), endTime - (data.realTimeStart + data.finish), endTime - startTime - data.operationTime, result, startSec.toFixed(2), ns.getServerSecurityLevel(data.target).toFixed(2), ns.nFormat(startCash, \\\"($0.000a)\\\"), ns.nFormat(ns.getServerMoneyAvailable(data.target), \\\"($0.000a)\\\"));\\r\\n        while (!await ns.tryWritePort(ReservedPorts.HACK_WRITE_INFO, [data.writeFile, outstr]))\\r\\n            ;\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi91dGlsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLE1BQU0sQ0FBTixJQUFZLGFBSVg7QUFKRCxXQUFZLGFBQWE7SUFDckIsaUVBQWdCLENBQUE7SUFDaEIsaUVBQVksQ0FBQTtJQUNaLHVFQUFlLENBQUE7QUFDbkIsQ0FBQyxFQUpXLGFBQWEsS0FBYixhQUFhLFFBSXhCO0FBRUQsTUFBTSxDQUFDLE1BQU0sUUFBUSxHQUFHLHFCQUFxQixDQUFDO0FBQzlDLE1BQU0sQ0FBQyxNQUFNLE1BQU0sR0FBRyxtQkFBbUIsQ0FBQztBQUMxQyxNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUcsbUJBQW1CLENBQUM7QUFDMUMsTUFBTSxDQUFDLE1BQU0sTUFBTSxHQUFHLGNBQWMsQ0FBQztBQUVyQyxNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUcsQ0FBQyxPQUFPLEVBQUUsV0FBVyxFQUFFLFdBQVcsRUFBRSxXQUFXLEVBQUUsUUFBUSxFQUFFLFVBQVUsQ0FBQyxDQUFDO0FBRTdGLE1BQU0sVUFBVSxJQUFJLENBQUMsRUFBTSxFQUFFLEdBQVcsRUFBRSxHQUFHLElBQXlCO0lBQ2xFLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEdBQUcsR0FBRyxFQUFFLElBQUksSUFBSSxFQUFFLENBQUMsa0JBQWtCLENBQUMsT0FBTyxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDO0FBQ3hGLENBQUM7QUFFRCxNQUFNLFVBQVUsWUFBWSxDQUFDLEVBQU0sRUFBRSxRQUFnQjtJQUNqRCxJQUFJLEVBQUUsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDNUIsT0FBTztLQUNWO0lBRUQsSUFBSSxLQUFLLEdBQUcsQ0FBQyxDQUFDO0lBQ2QsSUFBSSxFQUFFLENBQUMsVUFBVSxDQUFDLGNBQWMsRUFB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\",\"filename\":\"/lib/util.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":13.25,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":93177,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"purchaseTor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"purchaseProgram\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"connect\",\"cost\":2},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.stanek.charge(ns.args[0], ns.args[1]);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hhcmdlLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL3N0YW5lay9jaGFyZ2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUM5QixPQUFPLElBQUksRUFBRTtRQUNULE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7S0FDakQ7QUFDTCxDQUFDIn0=\",\"filename\":\"/lib/stanek/charge.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/stanek/charge.js\",\"url\":\"blob:file:///990ad119-ccaa-49b5-a2ab-f42744c7917e\",\"moduleSequenceNumber\":99870}],\"dependents\":[],\"ramUsage\":2,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":99870,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.charge\",\"cost\":0.4}]}}],\"serversOnNetwork\":[\"run4theh111z\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":282,\"hackDifficulty\":282,\"minDifficulty\":94,\"moneyAvailable\":1198651608.75,\"moneyMax\":13484830598.4375,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1039,\"serverGrowth\":94,\"suppression\":0,\"activeSuppressionThreads\":[],\"suppressionIntervalID\":null,\"suppressionLastUpdateTime\":0}},\"fulcrumassets\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":true,\"ip\":\"14.7.2.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"blade\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":297,\"hackDifficulty\":297,\"minDifficulty\":99,\"moneyAvailable\":750000,\"moneyMax\":8437500,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1452,\"serverGrowth\":1,\"suppression\":0,\"activeSuppressionThreads\":[],\"suppressionIntervalID\":null,\"suppressionLastUpdateTime\":0}},\"stormtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"stormtech\",\"httpPortOpen\":true,\"ip\":\"67.9.8.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"titan-labs\",\".\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":264,\"hackDifficulty\":264,\"minDifficulty\":88,\"moneyAvailable\":853129007.25,\"moneyMax\":9597701331.5625,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":944,\"serverGrowth\":88,\"suppression\":0,\"activeSuppressionThreads\":[],\"suppressionIntervalID\":null,\"suppressionLastUpdateTime\":0}},\"defcomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"defcomm\",\"httpPortOpen\":true,\"ip\":\"77.1.1.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"deltaone\",\"infocomm\",\"taiyang-digital\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":267,\"hackDifficulty\":267,\"minDifficulty\":89,\"moneyAvailable\":690898269,\"moneyMax\":7772605526.25,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":999,\"serverGrowth\":51,\"suppression\":0,\"activeSuppressionThreads\":[],\"suppressionIntervalID\":null,\"suppressionLastUpdateTime\":0}},\"infocomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"infocomm\",\"httpPortOpen\":true,\"ip\":\"89.5.7.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"defcomm\",\"titan-labs\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":210,\"hackDifficulty\":210,\"minDifficulty\":70,\"moneyAvailable\":453355282.5,\"moneyMax\":5100246928.125,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":934,\"serverGrowth\":60,\"suppression\":0,\"activeSuppressionThreads\":[],\"suppressionIntervalID\":null,\"suppressionLastUpdateTime\":0}},\"helios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"helios\",\"httpPortOpen\":true,\"ip\":\"91.5.9.4\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.grow(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLElBQUksR0FBdUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFFbkUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDdkIsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7UUFDeEMsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7S0FDM0MsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyJ9\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"helios\",\"moduleSequenceNumber\":93195,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.weaken(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxJQUFJLEdBQXVCLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO0lBRW5FLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFO1FBQ3pCLGtCQUFrQixFQUFFLElBQUksQ0FBQyxlQUFlO1FBQ3hDLGtCQUFrQixFQUFFLElBQUksQ0FBQyxlQUFlO0tBQzNDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///41d2f877-d9e2-4ed9-a821-c42cf2d562ea\",\"moduleSequenceNumber\":94077}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"helios\",\"moduleSequenceNumber\":94077,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.hack(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLElBQUksR0FBdUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFFbkUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDdkIsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7UUFDeEMsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7S0FDM0MsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyJ9\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"helios\",\"moduleSequenceNumber\":93199,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export var ReservedPorts;\\r\\n(function (ReservedPorts) {\\r\\n    ReservedPorts[ReservedPorts[\\\"HACKING_INFO\\\"] = 1] = \\\"HACKING_INFO\\\";\\r\\n    ReservedPorts[ReservedPorts[\\\"HACKNET_INFO\\\"] = 2] = \\\"HACKNET_INFO\\\";\\r\\n    ReservedPorts[ReservedPorts[\\\"HACK_WRITE_INFO\\\"] = 3] = \\\"HACK_WRITE_INFO\\\";\\r\\n})(ReservedPorts || (ReservedPorts = {}));\\r\\nexport const WEAKENJS = \\\"/lib/exec/weaken.js\\\";\\r\\nexport const GROWJS = \\\"/lib/exec/grow.js\\\";\\r\\nexport const HACKJS = \\\"/lib/exec/hack.js\\\";\\r\\nexport const UTILJS = \\\"/lib/util.js\\\";\\r\\nexport const CITIES = [\\\"Aevum\\\", \\\"Chongqing\\\", \\\"Sector-12\\\", \\\"New Tokyo\\\", \\\"Ishima\\\", \\\"Volhaven\\\"];\\r\\nexport function llog(ns, str, ...args) {\\r\\n    ns.print(ns.sprintf(\\\"%8s \\\" + str, new Date().toLocaleTimeString(\\\"it-IT\\\"), ...args));\\r\\n}\\r\\nexport function softenServer(ns, hostname) {\\r\\n    if (ns.hasRootAccess(hostname)) {\\r\\n        return;\\r\\n    }\\r\\n    let ports = 0;\\r\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n        ns.brutessh(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n        ns.ftpcrack(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n        ns.httpworm(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n        ns.relaysmtp(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n        ns.sqlinject(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ports >= ns.getServerNumPortsRequired(hostname)) {\\r\\n        ns.nuke(hostname);\\r\\n    }\\r\\n}\\r\\nexport function serverIsHackable(ns, hostname) {\\r\\n    return ns.hasRootAccess(hostname) && ns.getHackingLevel() >= ns.getServerRequiredHackingLevel(hostname);\\r\\n}\\r\\nexport function canExecuteOnServer(ns, hostname) {\\r\\n    return ns.hasRootAccess(hostname) && ns.getServerMaxRam(hostname) > 0;\\r\\n}\\r\\nexport function mapHosts(ns, hosts = {}, parents = [], current = \\\"home\\\") {\\r\\n    const newParents = parents.concat(current);\\r\\n    hosts[current] = newParents;\\r\\n    const children = ns.scan(current).filter((element) => !parents.includes(element));\\r\\n    for (const child of children) {\\r\\n        mapHosts(ns, hosts, newParents, child);\\r\\n    }\\r\\n    return hosts;\\r\\n}\\r\\nexport function allHosts(ns) {\\r\\n    return Object.keys(mapHosts(ns));\\r\\n}\\r\\nexport function doProgramBuys(ns) {\\r\\n    const player = ns.getPlayer();\\r\\n    if (!player.tor && player.money > 200e3)\\r\\n        ns.purchaseTor();\\r\\n    if (!ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\") && player.money > 500e3)\\r\\n        ns.purchaseProgram(\\\"BruteSSH.exe\\\");\\r\\n    if (!ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\") && player.money > 1500e3)\\r\\n        ns.purchaseProgram(\\\"FTPCrack.exe\\\");\\r\\n    if (!ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\") && player.money > 5e6)\\r\\n        ns.purchaseProgram(\\\"relaySMTP.exe\\\");\\r\\n    if (!ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\") && player.money > 30e6)\\r\\n        ns.purchaseProgram(\\\"HTTPWorm.exe\\\");\\r\\n    if (!ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\") && player.money > 250e6)\\r\\n        ns.purchaseProgram(\\\"SQLInject.exe\\\");\\r\\n}\\r\\nexport function doBuyAndSoftenAll(ns) {\\r\\n    doProgramBuys(ns);\\r\\n    for (const hostname of allHosts(ns)) {\\r\\n        softenServer(ns, hostname);\\r\\n    }\\r\\n}\\r\\nexport function stFormat(ns, ms, showms = false, showfull = false) {\\r\\n    let timeLeft = ms;\\r\\n    const hours = Math.floor(ms / (1000 * 60 * 60));\\r\\n    timeLeft -= hours * (1000 * 60 * 60);\\r\\n    const minutes = Math.floor(timeLeft / (1000 * 60));\\r\\n    timeLeft -= minutes * (1000 * 60);\\r\\n    const seconds = Math.floor(timeLeft / 1000);\\r\\n    timeLeft -= seconds * 1000;\\r\\n    const milliseconds = timeLeft;\\r\\n    if (showms) {\\r\\n        if (hours > 0 || showfull)\\r\\n            return ns.sprintf(\\\"%02d:%02d:%02d.%03d\\\", hours, minutes, seconds, milliseconds);\\r\\n        if (minutes > 0)\\r\\n            return ns.sprintf(\\\"%02d:%02d.%03d\\\", minutes, seconds, milliseconds);\\r\\n        return ns.sprintf(\\\"%02d.%03d\\\", seconds, milliseconds);\\r\\n    }\\r\\n    else {\\r\\n        if (hours > 0 || showfull)\\r\\n            return ns.sprintf(\\\"%02d:%02d:%02d\\\", hours, minutes, seconds);\\r\\n        if (minutes > 0)\\r\\n            return ns.sprintf(\\\"%02d:%02d\\\", minutes, seconds);\\r\\n        return ns.sprintf(\\\"%02d\\\", seconds);\\r\\n    }\\r\\n}\\r\\nexport function stdFormat(ns, offset = 0, showms = false) {\\r\\n    const date = new Date(new Date().getTime() + offset);\\r\\n    if (showms) {\\r\\n        const ms = ns.sprintf(\\\"%03d\\\", date.getUTCMilliseconds());\\r\\n        return date.toLocaleTimeString(\\\"it-IT\\\") + \\\".\\\" + ms;\\r\\n    }\\r\\n    else {\\r\\n        return date.toLocaleTimeString(\\\"it-IT\\\");\\r\\n    }\\r\\n}\\r\\nexport async function doBackdoors(ns) {\\r\\n    //const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"w0r1d_d43m0n\\\", \\\"b-and-a\\\", \\\"ecorp\\\", \\\"fulcrumassets\\\", \\\"fulcrumtech\\\"];\\r\\n    //const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"omnitek\\\", \\\"kuai-gong\\\", \\\"megacorp\\\"];\\r\\n    const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"w0r1d_d43m0n\\\"];\\r\\n    const hosts = mapHosts(ns);\\r\\n    for (const [hostName, trail] of Object.entries(hosts)) {\\r\\n        const server = ns.getServer(hostName);\\r\\n        if (!targetHosts.includes(hostName) ||\\r\\n            server.backdoorInstalled ||\\r\\n            server.requiredHackingSkill > ns.getHackingLevel() ||\\r\\n            !server.hasAdminRights)\\r\\n            continue;\\r\\n        ns.print(hostName);\\r\\n        for (const hostHopName of trail) {\\r\\n            ns.connect(hostHopName);\\r\\n        }\\r\\n        await ns.installBackdoor();\\r\\n        ns.connect(\\\"home\\\");\\r\\n    }\\r\\n}\\r\\nexport function cleanLogs(ns) {\\r\\n    ns.disableLog(\\\"disableLog\\\");\\r\\n    ns.disableLog(\\\"ALL\\\");\\r\\n    // ns.disableLog(\\\"sleep\\\")\\r\\n    // ns.disableLog(\\\"exec\\\")\\r\\n    // ns.disableLog(\\\"getServerMaxRam\\\")\\r\\n    // ns.disableLog(\\\"getServerSecurityLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerMinSecurityLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerMaxMoney\\\")\\r\\n    // ns.disableLog(\\\"getHackingLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerRequiredHackingLevel\\\")\\r\\n    // ns.disableLog(\\\"scan\\\")\\r\\n    // ns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n    // ns.disableLog(\\\"getServerUsedRam\\\")\\r\\n}\\r\\nexport const ALL_FACTIONS = [\\r\\n    \\\"Illuminati\\\",\\r\\n    \\\"Daedalus\\\",\\r\\n    \\\"The Covenant\\\",\\r\\n    \\\"ECorp\\\",\\r\\n    \\\"MegaCorp\\\",\\r\\n    \\\"Bachman & Associates\\\",\\r\\n    \\\"Blade Industries\\\",\\r\\n    \\\"NWO\\\",\\r\\n    \\\"Clarke Incorporated\\\",\\r\\n    \\\"OmniTek Incorporated\\\",\\r\\n    \\\"Four Sigma\\\",\\r\\n    \\\"KuaiGong International\\\",\\r\\n    \\\"Fulcrum Secret Technologies\\\",\\r\\n    \\\"BitRunners\\\",\\r\\n    \\\"The Black Hand\\\",\\r\\n    \\\"NiteSec\\\",\\r\\n    \\\"Aevum\\\",\\r\\n    \\\"Chongqing\\\",\\r\\n    \\\"Ishima\\\",\\r\\n    \\\"New Tokyo\\\",\\r\\n    \\\"Sector-12\\\",\\r\\n    \\\"Volhaven\\\",\\r\\n    \\\"Speakers for the Dead\\\",\\r\\n    \\\"The Dark Army\\\",\\r\\n    \\\"The Syndicate\\\",\\r\\n    \\\"Silhouette\\\",\\r\\n    \\\"Tetrads\\\",\\r\\n    \\\"Slum Snakes\\\",\\r\\n    \\\"Netburners\\\",\\r\\n    \\\"Tian Di Hui\\\",\\r\\n    \\\"CyberSec\\\",\\r\\n    \\\"Bladeburners\\\",\\r\\n    \\\"Church of the Machine God\\\",\\r\\n];\\r\\nexport async function writeOut(ns, data, startTime, endTime, result, startSec, startCash) {\\r\\n    if (data.writeFile !== \\\"\\\") {\\r\\n        const outstr = ns.sprintf(\\\"%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\", data.target, data.uid, data.batchId, data.realTimeStart + data.offset, data.realTimeStart + data.finish, data.operationTime, startTime, endTime, endTime - startTime, startTime - (data.realTimeStart + data.offset), endTime - (data.realTimeStart + data.finish), endTime - startTime - data.operationTime, result, startSec.toFixed(2), ns.getServerSecurityLevel(data.target).toFixed(2), ns.nFormat(startCash, \\\"($0.000a)\\\"), ns.nFormat(ns.getServerMoneyAvailable(data.target), \\\"($0.000a)\\\"));\\r\\n        while (!await ns.tryWritePort(ReservedPorts.HACK_WRITE_INFO, [data.writeFile, outstr]))\\r\\n            ;\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi91dGlsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLE1BQU0sQ0FBTixJQUFZLGFBSVg7QUFKRCxXQUFZLGFBQWE7SUFDckIsaUVBQWdCLENBQUE7SUFDaEIsaUVBQVksQ0FBQTtJQUNaLHVFQUFlLENBQUE7QUFDbkIsQ0FBQyxFQUpXLGFBQWEsS0FBYixhQUFhLFFBSXhCO0FBRUQsTUFBTSxDQUFDLE1BQU0sUUFBUSxHQUFHLHFCQUFxQixDQUFDO0FBQzlDLE1BQU0sQ0FBQyxNQUFNLE1BQU0sR0FBRyxtQkFBbUIsQ0FBQztBQUMxQyxNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUcsbUJBQW1CLENBQUM7QUFDMUMsTUFBTSxDQUFDLE1BQU0sTUFBTSxHQUFHLGNBQWMsQ0FBQztBQUVyQyxNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUcsQ0FBQyxPQUFPLEVBQUUsV0FBVyxFQUFFLFdBQVcsRUFBRSxXQUFXLEVBQUUsUUFBUSxFQUFFLFVBQVUsQ0FBQyxDQUFDO0FBRTdGLE1BQU0sVUFBVSxJQUFJLENBQUMsRUFBTSxFQUFFLEdBQVcsRUFBRSxHQUFHLElBQXlCO0lBQ2xFLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEdBQUcsR0FBRyxFQUFFLElBQUksSUFBSSxFQUFFLENBQUMsa0JBQWtCLENBQUMsT0FBTyxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDO0FBQ3hGLENBQUM7QUFFRCxNQUFNLFVBQVUsWUFBWSxDQUFDLEVBQU0sRUFBRSxRQUFnQjtJQUNqRCxJQUFJLEVBQUUsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDNUIsT0FBTztLQUNWO0lBRUQsSUFBSSxLQUFLLEdBQUcsQ0FBQyxDQUFDO0lBQ2QsSUFBSSxFQUFFLENBQUMsVUFBVSxDQUFDLGNBQWMsRUFB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\",\"filename\":\"/lib/util.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":13.25,\"server\":\"helios\",\"moduleSequenceNumber\":93201,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"purchaseTor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"purchaseProgram\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"connect\",\"cost\":2},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.stanek.charge(ns.args[0], ns.args[1]);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hhcmdlLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL3N0YW5lay9jaGFyZ2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUM5QixPQUFPLElBQUksRUFBRTtRQUNULE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7S0FDakQ7QUFDTCxDQUFDIn0=\",\"filename\":\"/lib/stanek/charge.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/stanek/charge.js\",\"url\":\"blob:file:///9cc22a2b-99b6-4bcd-878a-fd33adae964a\",\"moduleSequenceNumber\":99873}],\"dependents\":[],\"ramUsage\":2,\"server\":\"helios\",\"moduleSequenceNumber\":99873,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.charge\",\"cost\":0.4}]}}],\"serversOnNetwork\":[\"applied-energetics\",\"4sigma\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":264,\"hackDifficulty\":264,\"minDifficulty\":88,\"moneyAvailable\":520849632,\"moneyMax\":5859558360,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":815,\"serverGrowth\":74,\"suppression\":0,\"activeSuppressionThreads\":[],\"suppressionIntervalID\":null,\"suppressionLastUpdateTime\":0}},\"vitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"vitalife\",\"httpPortOpen\":true,\"ip\":\"9.7.7.2\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.grow(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLElBQUksR0FBdUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFFbkUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDdkIsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7UUFDeEMsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7S0FDM0MsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyJ9\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"vitalife\",\"moduleSequenceNumber\":93179,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.weaken(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxJQUFJLEdBQXVCLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO0lBRW5FLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFO1FBQ3pCLGtCQUFrQixFQUFFLElBQUksQ0FBQyxlQUFlO1FBQ3hDLGtCQUFrQixFQUFFLElBQUksQ0FBQyxlQUFlO0tBQzNDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///012f2c4d-651d-4362-9863-955f6131b459\",\"moduleSequenceNumber\":94079}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"vitalife\",\"moduleSequenceNumber\":94079,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.hack(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLElBQUksR0FBdUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFFbkUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDdkIsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7UUFDeEMsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7S0FDM0MsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyJ9\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"vitalife\",\"moduleSequenceNumber\":93183,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export var ReservedPorts;\\r\\n(function (ReservedPorts) {\\r\\n    ReservedPorts[ReservedPorts[\\\"HACKING_INFO\\\"] = 1] = \\\"HACKING_INFO\\\";\\r\\n    ReservedPorts[ReservedPorts[\\\"HACKNET_INFO\\\"] = 2] = \\\"HACKNET_INFO\\\";\\r\\n    ReservedPorts[ReservedPorts[\\\"HACK_WRITE_INFO\\\"] = 3] = \\\"HACK_WRITE_INFO\\\";\\r\\n})(ReservedPorts || (ReservedPorts = {}));\\r\\nexport const WEAKENJS = \\\"/lib/exec/weaken.js\\\";\\r\\nexport const GROWJS = \\\"/lib/exec/grow.js\\\";\\r\\nexport const HACKJS = \\\"/lib/exec/hack.js\\\";\\r\\nexport const UTILJS = \\\"/lib/util.js\\\";\\r\\nexport const CITIES = [\\\"Aevum\\\", \\\"Chongqing\\\", \\\"Sector-12\\\", \\\"New Tokyo\\\", \\\"Ishima\\\", \\\"Volhaven\\\"];\\r\\nexport function llog(ns, str, ...args) {\\r\\n    ns.print(ns.sprintf(\\\"%8s \\\" + str, new Date().toLocaleTimeString(\\\"it-IT\\\"), ...args));\\r\\n}\\r\\nexport function softenServer(ns, hostname) {\\r\\n    if (ns.hasRootAccess(hostname)) {\\r\\n        return;\\r\\n    }\\r\\n    let ports = 0;\\r\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n        ns.brutessh(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n        ns.ftpcrack(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n        ns.httpworm(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n        ns.relaysmtp(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n        ns.sqlinject(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ports >= ns.getServerNumPortsRequired(hostname)) {\\r\\n        ns.nuke(hostname);\\r\\n    }\\r\\n}\\r\\nexport function serverIsHackable(ns, hostname) {\\r\\n    return ns.hasRootAccess(hostname) && ns.getHackingLevel() >= ns.getServerRequiredHackingLevel(hostname);\\r\\n}\\r\\nexport function canExecuteOnServer(ns, hostname) {\\r\\n    return ns.hasRootAccess(hostname) && ns.getServerMaxRam(hostname) > 0;\\r\\n}\\r\\nexport function mapHosts(ns, hosts = {}, parents = [], current = \\\"home\\\") {\\r\\n    const newParents = parents.concat(current);\\r\\n    hosts[current] = newParents;\\r\\n    const children = ns.scan(current).filter((element) => !parents.includes(element));\\r\\n    for (const child of children) {\\r\\n        mapHosts(ns, hosts, newParents, child);\\r\\n    }\\r\\n    return hosts;\\r\\n}\\r\\nexport function allHosts(ns) {\\r\\n    return Object.keys(mapHosts(ns));\\r\\n}\\r\\nexport function doProgramBuys(ns) {\\r\\n    const player = ns.getPlayer();\\r\\n    if (!player.tor && player.money > 200e3)\\r\\n        ns.purchaseTor();\\r\\n    if (!ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\") && player.money > 500e3)\\r\\n        ns.purchaseProgram(\\\"BruteSSH.exe\\\");\\r\\n    if (!ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\") && player.money > 1500e3)\\r\\n        ns.purchaseProgram(\\\"FTPCrack.exe\\\");\\r\\n    if (!ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\") && player.money > 5e6)\\r\\n        ns.purchaseProgram(\\\"relaySMTP.exe\\\");\\r\\n    if (!ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\") && player.money > 30e6)\\r\\n        ns.purchaseProgram(\\\"HTTPWorm.exe\\\");\\r\\n    if (!ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\") && player.money > 250e6)\\r\\n        ns.purchaseProgram(\\\"SQLInject.exe\\\");\\r\\n}\\r\\nexport function doBuyAndSoftenAll(ns) {\\r\\n    doProgramBuys(ns);\\r\\n    for (const hostname of allHosts(ns)) {\\r\\n        softenServer(ns, hostname);\\r\\n    }\\r\\n}\\r\\nexport function stFormat(ns, ms, showms = false, showfull = false) {\\r\\n    let timeLeft = ms;\\r\\n    const hours = Math.floor(ms / (1000 * 60 * 60));\\r\\n    timeLeft -= hours * (1000 * 60 * 60);\\r\\n    const minutes = Math.floor(timeLeft / (1000 * 60));\\r\\n    timeLeft -= minutes * (1000 * 60);\\r\\n    const seconds = Math.floor(timeLeft / 1000);\\r\\n    timeLeft -= seconds * 1000;\\r\\n    const milliseconds = timeLeft;\\r\\n    if (showms) {\\r\\n        if (hours > 0 || showfull)\\r\\n            return ns.sprintf(\\\"%02d:%02d:%02d.%03d\\\", hours, minutes, seconds, milliseconds);\\r\\n        if (minutes > 0)\\r\\n            return ns.sprintf(\\\"%02d:%02d.%03d\\\", minutes, seconds, milliseconds);\\r\\n        return ns.sprintf(\\\"%02d.%03d\\\", seconds, milliseconds);\\r\\n    }\\r\\n    else {\\r\\n        if (hours > 0 || showfull)\\r\\n            return ns.sprintf(\\\"%02d:%02d:%02d\\\", hours, minutes, seconds);\\r\\n        if (minutes > 0)\\r\\n            return ns.sprintf(\\\"%02d:%02d\\\", minutes, seconds);\\r\\n        return ns.sprintf(\\\"%02d\\\", seconds);\\r\\n    }\\r\\n}\\r\\nexport function stdFormat(ns, offset = 0, showms = false) {\\r\\n    const date = new Date(new Date().getTime() + offset);\\r\\n    if (showms) {\\r\\n        const ms = ns.sprintf(\\\"%03d\\\", date.getUTCMilliseconds());\\r\\n        return date.toLocaleTimeString(\\\"it-IT\\\") + \\\".\\\" + ms;\\r\\n    }\\r\\n    else {\\r\\n        return date.toLocaleTimeString(\\\"it-IT\\\");\\r\\n    }\\r\\n}\\r\\nexport async function doBackdoors(ns) {\\r\\n    //const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"w0r1d_d43m0n\\\", \\\"b-and-a\\\", \\\"ecorp\\\", \\\"fulcrumassets\\\", \\\"fulcrumtech\\\"];\\r\\n    //const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"omnitek\\\", \\\"kuai-gong\\\", \\\"megacorp\\\"];\\r\\n    const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"w0r1d_d43m0n\\\"];\\r\\n    const hosts = mapHosts(ns);\\r\\n    for (const [hostName, trail] of Object.entries(hosts)) {\\r\\n        const server = ns.getServer(hostName);\\r\\n        if (!targetHosts.includes(hostName) ||\\r\\n            server.backdoorInstalled ||\\r\\n            server.requiredHackingSkill > ns.getHackingLevel() ||\\r\\n            !server.hasAdminRights)\\r\\n            continue;\\r\\n        ns.print(hostName);\\r\\n        for (const hostHopName of trail) {\\r\\n            ns.connect(hostHopName);\\r\\n        }\\r\\n        await ns.installBackdoor();\\r\\n        ns.connect(\\\"home\\\");\\r\\n    }\\r\\n}\\r\\nexport function cleanLogs(ns) {\\r\\n    ns.disableLog(\\\"disableLog\\\");\\r\\n    ns.disableLog(\\\"ALL\\\");\\r\\n    // ns.disableLog(\\\"sleep\\\")\\r\\n    // ns.disableLog(\\\"exec\\\")\\r\\n    // ns.disableLog(\\\"getServerMaxRam\\\")\\r\\n    // ns.disableLog(\\\"getServerSecurityLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerMinSecurityLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerMaxMoney\\\")\\r\\n    // ns.disableLog(\\\"getHackingLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerRequiredHackingLevel\\\")\\r\\n    // ns.disableLog(\\\"scan\\\")\\r\\n    // ns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n    // ns.disableLog(\\\"getServerUsedRam\\\")\\r\\n}\\r\\nexport const ALL_FACTIONS = [\\r\\n    \\\"Illuminati\\\",\\r\\n    \\\"Daedalus\\\",\\r\\n    \\\"The Covenant\\\",\\r\\n    \\\"ECorp\\\",\\r\\n    \\\"MegaCorp\\\",\\r\\n    \\\"Bachman & Associates\\\",\\r\\n    \\\"Blade Industries\\\",\\r\\n    \\\"NWO\\\",\\r\\n    \\\"Clarke Incorporated\\\",\\r\\n    \\\"OmniTek Incorporated\\\",\\r\\n    \\\"Four Sigma\\\",\\r\\n    \\\"KuaiGong International\\\",\\r\\n    \\\"Fulcrum Secret Technologies\\\",\\r\\n    \\\"BitRunners\\\",\\r\\n    \\\"The Black Hand\\\",\\r\\n    \\\"NiteSec\\\",\\r\\n    \\\"Aevum\\\",\\r\\n    \\\"Chongqing\\\",\\r\\n    \\\"Ishima\\\",\\r\\n    \\\"New Tokyo\\\",\\r\\n    \\\"Sector-12\\\",\\r\\n    \\\"Volhaven\\\",\\r\\n    \\\"Speakers for the Dead\\\",\\r\\n    \\\"The Dark Army\\\",\\r\\n    \\\"The Syndicate\\\",\\r\\n    \\\"Silhouette\\\",\\r\\n    \\\"Tetrads\\\",\\r\\n    \\\"Slum Snakes\\\",\\r\\n    \\\"Netburners\\\",\\r\\n    \\\"Tian Di Hui\\\",\\r\\n    \\\"CyberSec\\\",\\r\\n    \\\"Bladeburners\\\",\\r\\n    \\\"Church of the Machine God\\\",\\r\\n];\\r\\nexport async function writeOut(ns, data, startTime, endTime, result, startSec, startCash) {\\r\\n    if (data.writeFile !== \\\"\\\") {\\r\\n        const outstr = ns.sprintf(\\\"%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\", data.target, data.uid, data.batchId, data.realTimeStart + data.offset, data.realTimeStart + data.finish, data.operationTime, startTime, endTime, endTime - startTime, startTime - (data.realTimeStart + data.offset), endTime - (data.realTimeStart + data.finish), endTime - startTime - data.operationTime, result, startSec.toFixed(2), ns.getServerSecurityLevel(data.target).toFixed(2), ns.nFormat(startCash, \\\"($0.000a)\\\"), ns.nFormat(ns.getServerMoneyAvailable(data.target), \\\"($0.000a)\\\"));\\r\\n        while (!await ns.tryWritePort(ReservedPorts.HACK_WRITE_INFO, [data.writeFile, outstr]))\\r\\n            ;\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi91dGlsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLE1BQU0sQ0FBTixJQUFZLGFBSVg7QUFKRCxXQUFZLGFBQWE7SUFDckIsaUVBQWdCLENBQUE7SUFDaEIsaUVBQVksQ0FBQTtJQUNaLHVFQUFlLENBQUE7QUFDbkIsQ0FBQyxFQUpXLGFBQWEsS0FBYixhQUFhLFFBSXhCO0FBRUQsTUFBTSxDQUFDLE1BQU0sUUFBUSxHQUFHLHFCQUFxQixDQUFDO0FBQzlDLE1BQU0sQ0FBQyxNQUFNLE1BQU0sR0FBRyxtQkFBbUIsQ0FBQztBQUMxQyxNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUcsbUJBQW1CLENBQUM7QUFDMUMsTUFBTSxDQUFDLE1BQU0sTUFBTSxHQUFHLGNBQWMsQ0FBQztBQUVyQyxNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUcsQ0FBQyxPQUFPLEVBQUUsV0FBVyxFQUFFLFdBQVcsRUFBRSxXQUFXLEVBQUUsUUFBUSxFQUFFLFVBQVUsQ0FBQyxDQUFDO0FBRTdGLE1BQU0sVUFBVSxJQUFJLENBQUMsRUFBTSxFQUFFLEdBQVcsRUFBRSxHQUFHLElBQXlCO0lBQ2xFLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEdBQUcsR0FBRyxFQUFFLElBQUksSUFBSSxFQUFFLENBQUMsa0JBQWtCLENBQUMsT0FBTyxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDO0FBQ3hGLENBQUM7QUFFRCxNQUFNLFVBQVUsWUFBWSxDQUFDLEVBQU0sRUFBRSxRQUFnQjtJQUNqRCxJQUFJLEVBQUUsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDNUIsT0FBTztLQUNWO0lBRUQsSUFBSSxLQUFLLEdBQUcsQ0FBQyxDQUFDO0lBQ2QsSUFBSSxFQUFFLENBQUMsVUFBVSxDQUFDLGNBQWMsRUFB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\",\"filename\":\"/lib/util.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":13.25,\"server\":\"vitalife\",\"moduleSequenceNumber\":93185,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"purchaseTor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"purchaseProgram\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"connect\",\"cost\":2},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.stanek.charge(ns.args[0], ns.args[1]);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hhcmdlLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL3N0YW5lay9jaGFyZ2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUM5QixPQUFPLElBQUksRUFBRTtRQUNULE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7S0FDakQ7QUFDTCxDQUFDIn0=\",\"filename\":\"/lib/stanek/charge.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/stanek/charge.js\",\"url\":\"blob:file:///5d263867-2ef2-40db-9520-0b63016b93fa\",\"moduleSequenceNumber\":99866}],\"dependents\":[],\"ramUsage\":2,\"server\":\"vitalife\",\"moduleSequenceNumber\":99866,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.charge\",\"cost\":0.4}]}}],\"serversOnNetwork\":[\"titan-labs\",\"omnitek\",\"kuai-gong\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":246,\"hackDifficulty\":246,\"minDifficulty\":82,\"moneyAvailable\":529118673.75,\"moneyMax\":5952585079.6875,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":799,\"serverGrowth\":60,\"suppression\":0,\"activeSuppressionThreads\":[],\"suppressionIntervalID\":null,\"suppressionLastUpdateTime\":0}},\"icarus\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"icarus\",\"httpPortOpen\":true,\"ip\":\"92.2.4.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnia\",\"nova-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":258,\"hackDifficulty\":258,\"minDifficulty\":86,\"moneyAvailable\":738485940.75,\"moneyMax\":8307966833.4375,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":869,\"serverGrowth\":92,\"suppression\":0,\"activeSuppressionThreads\":[],\"suppressionIntervalID\":null,\"suppressionLastUpdateTime\":0}},\"univ-energy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"univ-energy\",\"httpPortOpen\":true,\"ip\":\"41.6.4.9\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.grow(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLElBQUksR0FBdUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFFbkUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDdkIsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7UUFDeEMsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7S0FDM0MsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyJ9\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///7fdf14e5-549a-408d-986d-7158e4d4cae2\",\"moduleSequenceNumber\":86748}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"univ-energy\",\"moduleSequenceNumber\":86748,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.weaken(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxJQUFJLEdBQXVCLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO0lBRW5FLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFO1FBQ3pCLGtCQUFrQixFQUFFLElBQUksQ0FBQyxlQUFlO1FBQ3hDLGtCQUFrQixFQUFFLElBQUksQ0FBQyxlQUFlO0tBQzNDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///af4dd504-a6bc-49f8-b48d-33261a8be4a4\",\"moduleSequenceNumber\":85601}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"univ-energy\",\"moduleSequenceNumber\":85601,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.hack(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLElBQUksR0FBdUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFFbkUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDdkIsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7UUFDeEMsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7S0FDM0MsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyJ9\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"univ-energy\",\"moduleSequenceNumber\":85541,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export var ReservedPorts;\\r\\n(function (ReservedPorts) {\\r\\n    ReservedPorts[ReservedPorts[\\\"HACKING_INFO\\\"] = 1] = \\\"HACKING_INFO\\\";\\r\\n    ReservedPorts[ReservedPorts[\\\"HACKNET_INFO\\\"] = 2] = \\\"HACKNET_INFO\\\";\\r\\n    ReservedPorts[ReservedPorts[\\\"HACK_WRITE_INFO\\\"] = 3] = \\\"HACK_WRITE_INFO\\\";\\r\\n})(ReservedPorts || (ReservedPorts = {}));\\r\\nexport const WEAKENJS = \\\"/lib/exec/weaken.js\\\";\\r\\nexport const GROWJS = \\\"/lib/exec/grow.js\\\";\\r\\nexport const HACKJS = \\\"/lib/exec/hack.js\\\";\\r\\nexport const UTILJS = \\\"/lib/util.js\\\";\\r\\nexport const CITIES = [\\\"Aevum\\\", \\\"Chongqing\\\", \\\"Sector-12\\\", \\\"New Tokyo\\\", \\\"Ishima\\\", \\\"Volhaven\\\"];\\r\\nexport function llog(ns, str, ...args) {\\r\\n    ns.print(ns.sprintf(\\\"%8s \\\" + str, new Date().toLocaleTimeString(\\\"it-IT\\\"), ...args));\\r\\n}\\r\\nexport function softenServer(ns, hostname) {\\r\\n    if (ns.hasRootAccess(hostname)) {\\r\\n        return;\\r\\n    }\\r\\n    let ports = 0;\\r\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n        ns.brutessh(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n        ns.ftpcrack(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n        ns.httpworm(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n        ns.relaysmtp(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n        ns.sqlinject(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ports >= ns.getServerNumPortsRequired(hostname)) {\\r\\n        ns.nuke(hostname);\\r\\n    }\\r\\n}\\r\\nexport function serverIsHackable(ns, hostname) {\\r\\n    return ns.hasRootAccess(hostname) && ns.getHackingLevel() >= ns.getServerRequiredHackingLevel(hostname);\\r\\n}\\r\\nexport function canExecuteOnServer(ns, hostname) {\\r\\n    return ns.hasRootAccess(hostname) && ns.getServerMaxRam(hostname) > 0;\\r\\n}\\r\\nexport function mapHosts(ns, hosts = {}, parents = [], current = \\\"home\\\") {\\r\\n    const newParents = parents.concat(current);\\r\\n    hosts[current] = newParents;\\r\\n    const children = ns.scan(current).filter((element) => !parents.includes(element));\\r\\n    for (const child of children) {\\r\\n        mapHosts(ns, hosts, newParents, child);\\r\\n    }\\r\\n    return hosts;\\r\\n}\\r\\nexport function allHosts(ns) {\\r\\n    return Object.keys(mapHosts(ns));\\r\\n}\\r\\nexport function doProgramBuys(ns) {\\r\\n    const player = ns.getPlayer();\\r\\n    if (!player.tor && player.money > 200e3)\\r\\n        ns.purchaseTor();\\r\\n    if (!ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\") && player.money > 500e3)\\r\\n        ns.purchaseProgram(\\\"BruteSSH.exe\\\");\\r\\n    if (!ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\") && player.money > 1500e3)\\r\\n        ns.purchaseProgram(\\\"FTPCrack.exe\\\");\\r\\n    if (!ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\") && player.money > 5e6)\\r\\n        ns.purchaseProgram(\\\"relaySMTP.exe\\\");\\r\\n    if (!ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\") && player.money > 30e6)\\r\\n        ns.purchaseProgram(\\\"HTTPWorm.exe\\\");\\r\\n    if (!ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\") && player.money > 250e6)\\r\\n        ns.purchaseProgram(\\\"SQLInject.exe\\\");\\r\\n}\\r\\nexport function doBuyAndSoftenAll(ns) {\\r\\n    doProgramBuys(ns);\\r\\n    for (const hostname of allHosts(ns)) {\\r\\n        softenServer(ns, hostname);\\r\\n    }\\r\\n}\\r\\nexport function stFormat(ns, ms, showms = false, showfull = false) {\\r\\n    let timeLeft = ms;\\r\\n    const hours = Math.floor(ms / (1000 * 60 * 60));\\r\\n    timeLeft -= hours * (1000 * 60 * 60);\\r\\n    const minutes = Math.floor(timeLeft / (1000 * 60));\\r\\n    timeLeft -= minutes * (1000 * 60);\\r\\n    const seconds = Math.floor(timeLeft / 1000);\\r\\n    timeLeft -= seconds * 1000;\\r\\n    const milliseconds = timeLeft;\\r\\n    if (showms) {\\r\\n        if (hours > 0 || showfull)\\r\\n            return ns.sprintf(\\\"%02d:%02d:%02d.%03d\\\", hours, minutes, seconds, milliseconds);\\r\\n        if (minutes > 0)\\r\\n            return ns.sprintf(\\\"%02d:%02d.%03d\\\", minutes, seconds, milliseconds);\\r\\n        return ns.sprintf(\\\"%02d.%03d\\\", seconds, milliseconds);\\r\\n    }\\r\\n    else {\\r\\n        if (hours > 0 || showfull)\\r\\n            return ns.sprintf(\\\"%02d:%02d:%02d\\\", hours, minutes, seconds);\\r\\n        if (minutes > 0)\\r\\n            return ns.sprintf(\\\"%02d:%02d\\\", minutes, seconds);\\r\\n        return ns.sprintf(\\\"%02d\\\", seconds);\\r\\n    }\\r\\n}\\r\\nexport function stdFormat(ns, offset = 0, showms = false) {\\r\\n    const date = new Date(new Date().getTime() + offset);\\r\\n    if (showms) {\\r\\n        const ms = ns.sprintf(\\\"%03d\\\", date.getUTCMilliseconds());\\r\\n        return date.toLocaleTimeString(\\\"it-IT\\\") + \\\".\\\" + ms;\\r\\n    }\\r\\n    else {\\r\\n        return date.toLocaleTimeString(\\\"it-IT\\\");\\r\\n    }\\r\\n}\\r\\nexport async function doBackdoors(ns) {\\r\\n    //const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"w0r1d_d43m0n\\\", \\\"b-and-a\\\", \\\"ecorp\\\", \\\"fulcrumassets\\\", \\\"fulcrumtech\\\"];\\r\\n    //const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"omnitek\\\", \\\"kuai-gong\\\", \\\"megacorp\\\"];\\r\\n    const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"w0r1d_d43m0n\\\"];\\r\\n    const hosts = mapHosts(ns);\\r\\n    for (const [hostName, trail] of Object.entries(hosts)) {\\r\\n        const server = ns.getServer(hostName);\\r\\n        if (!targetHosts.includes(hostName) ||\\r\\n            server.backdoorInstalled ||\\r\\n            server.requiredHackingSkill > ns.getHackingLevel() ||\\r\\n            !server.hasAdminRights)\\r\\n            continue;\\r\\n        ns.print(hostName);\\r\\n        for (const hostHopName of trail) {\\r\\n            ns.connect(hostHopName);\\r\\n        }\\r\\n        await ns.installBackdoor();\\r\\n        ns.connect(\\\"home\\\");\\r\\n    }\\r\\n}\\r\\nexport function cleanLogs(ns) {\\r\\n    ns.disableLog(\\\"disableLog\\\");\\r\\n    ns.disableLog(\\\"ALL\\\");\\r\\n    // ns.disableLog(\\\"sleep\\\")\\r\\n    // ns.disableLog(\\\"exec\\\")\\r\\n    // ns.disableLog(\\\"getServerMaxRam\\\")\\r\\n    // ns.disableLog(\\\"getServerSecurityLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerMinSecurityLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerMaxMoney\\\")\\r\\n    // ns.disableLog(\\\"getHackingLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerRequiredHackingLevel\\\")\\r\\n    // ns.disableLog(\\\"scan\\\")\\r\\n    // ns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n    // ns.disableLog(\\\"getServerUsedRam\\\")\\r\\n}\\r\\nexport const ALL_FACTIONS = [\\r\\n    \\\"Illuminati\\\",\\r\\n    \\\"Daedalus\\\",\\r\\n    \\\"The Covenant\\\",\\r\\n    \\\"ECorp\\\",\\r\\n    \\\"MegaCorp\\\",\\r\\n    \\\"Bachman & Associates\\\",\\r\\n    \\\"Blade Industries\\\",\\r\\n    \\\"NWO\\\",\\r\\n    \\\"Clarke Incorporated\\\",\\r\\n    \\\"OmniTek Incorporated\\\",\\r\\n    \\\"Four Sigma\\\",\\r\\n    \\\"KuaiGong International\\\",\\r\\n    \\\"Fulcrum Secret Technologies\\\",\\r\\n    \\\"BitRunners\\\",\\r\\n    \\\"The Black Hand\\\",\\r\\n    \\\"NiteSec\\\",\\r\\n    \\\"Aevum\\\",\\r\\n    \\\"Chongqing\\\",\\r\\n    \\\"Ishima\\\",\\r\\n    \\\"New Tokyo\\\",\\r\\n    \\\"Sector-12\\\",\\r\\n    \\\"Volhaven\\\",\\r\\n    \\\"Speakers for the Dead\\\",\\r\\n    \\\"The Dark Army\\\",\\r\\n    \\\"The Syndicate\\\",\\r\\n    \\\"Silhouette\\\",\\r\\n    \\\"Tetrads\\\",\\r\\n    \\\"Slum Snakes\\\",\\r\\n    \\\"Netburners\\\",\\r\\n    \\\"Tian Di Hui\\\",\\r\\n    \\\"CyberSec\\\",\\r\\n    \\\"Bladeburners\\\",\\r\\n    \\\"Church of the Machine God\\\",\\r\\n];\\r\\nexport async function writeOut(ns, data, startTime, endTime, result, startSec, startCash) {\\r\\n    if (data.writeFile !== \\\"\\\") {\\r\\n        const outstr = ns.sprintf(\\\"%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\", data.target, data.uid, data.batchId, data.realTimeStart + data.offset, data.realTimeStart + data.finish, data.operationTime, startTime, endTime, endTime - startTime, startTime - (data.realTimeStart + data.offset), endTime - (data.realTimeStart + data.finish), endTime - startTime - data.operationTime, result, startSec.toFixed(2), ns.getServerSecurityLevel(data.target).toFixed(2), ns.nFormat(startCash, \\\"($0.000a)\\\"), ns.nFormat(ns.getServerMoneyAvailable(data.target), \\\"($0.000a)\\\"));\\r\\n        while (!await ns.tryWritePort(ReservedPorts.HACK_WRITE_INFO, [data.writeFile, outstr]))\\r\\n            ;\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi91dGlsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLE1BQU0sQ0FBTixJQUFZLGFBSVg7QUFKRCxXQUFZLGFBQWE7SUFDckIsaUVBQWdCLENBQUE7SUFDaEIsaUVBQVksQ0FBQTtJQUNaLHVFQUFlLENBQUE7QUFDbkIsQ0FBQyxFQUpXLGFBQWEsS0FBYixhQUFhLFFBSXhCO0FBRUQsTUFBTSxDQUFDLE1BQU0sUUFBUSxHQUFHLHFCQUFxQixDQUFDO0FBQzlDLE1BQU0sQ0FBQyxNQUFNLE1BQU0sR0FBRyxtQkFBbUIsQ0FBQztBQUMxQyxNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUcsbUJBQW1CLENBQUM7QUFDMUMsTUFBTSxDQUFDLE1BQU0sTUFBTSxHQUFHLGNBQWMsQ0FBQztBQUVyQyxNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUcsQ0FBQyxPQUFPLEVBQUUsV0FBVyxFQUFFLFdBQVcsRUFBRSxXQUFXLEVBQUUsUUFBUSxFQUFFLFVBQVUsQ0FBQyxDQUFDO0FBRTdGLE1BQU0sVUFBVSxJQUFJLENBQUMsRUFBTSxFQUFFLEdBQVcsRUFBRSxHQUFHLElBQXlCO0lBQ2xFLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEdBQUcsR0FBRyxFQUFFLElBQUksSUFBSSxFQUFFLENBQUMsa0JBQWtCLENBQUMsT0FBTyxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDO0FBQ3hGLENBQUM7QUFFRCxNQUFNLFVBQVUsWUFBWSxDQUFDLEVBQU0sRUFBRSxRQUFnQjtJQUNqRCxJQUFJLEVBQUUsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDNUIsT0FBTztLQUNWO0lBRUQsSUFBSSxLQUFLLEdBQUcsQ0FBQyxDQUFDO0lBQ2QsSUFBSSxFQUFFLENBQUMsVUFBVSxDQUFDLGNBQWMsRUFBRSxNQUFNLENBQUMsRUFBRTtRQUN2QyxFQUFFLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ3RCLEtBQUssRUFBRSxDQUFDO0tBQ1g7SUFFRCxJQUFJLEVBQUUsQ0FBQyxVQUFVLENBQUMsY0FBYyxFQUFFLE1BQU0sQ0FBQyxFQUFFO1FBQ3ZDLEVBQUUsQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDdEIsS0FBSyxFQUFFLENBQUM7S0FDWDtJQUVELElBQUksRUFBRSxDQUFDLFVBQVUsQ0FBQyxjQUFjLEVBQUUsTUFBTSxDQUFDLEVBQUU7UUFDdkMsRUFBRSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUN0QixLQUFLLEVBQUUsQ0FBQztLQUNYO0lBRUQsSUFBSSxFQUFFLENBQUMsVUFBVSxDQUFDLGVBQWUsRUFBRSxNQUFNLENBQUMsRUFBRTtRQUN4QyxFQUFFLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ3ZCLEtBQUssRUFBRSxDQUFDO0tBQ1g7SUFFRCxJQUFJLEVBQUUsQ0FBQyxVQUFVLENBQUMsZUFBZSxFQUFFLE1BQU0sQ0FBQyxFQUFFO1FBQ3hDLEVBQUUsQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDdkIsS0FBSyxFQUFFLENBQUM7S0FDWDtJQUVELElBQUksS0FBSyxJQUFJLEVBQUUsQ0FBQyx5QkFBeUIsQ0FBQyxRQUFRLENBQUMsRUFBRTtRQUNqRCxFQUFFLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0tBQ3JCO0FBQ0wsQ0FBQztBQUVELE1BQU0sVUFBVSxnQkFBZ0IsQ0FBQyxFQUFNLEVBQUUsUUFBZ0I7SUFDckQsT0FBTyxFQUFFLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxlQUFlLEVBQUUsSUFBSSxFQUFFLENBQUMsNkJBQTZCLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDNUcsQ0FBQztBQUVELE1BQU0sVUFBVSxrQkFBa0IsQ0FBQyxFQUFNLEVBQUUsUUFBZ0I7SUFDdkQsT0FBTyxFQUFFLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxlQUFlLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQzFFLENBQUM7QUFFRCxNQUFNLFVBQVUsUUFBUSxDQUNwQixFQUFNLEVBQ04sUUFBa0MsRUFBRSxFQUNwQyxVQUFvQixFQUFFLEVBQ3RCLE9BQU8sR0FBRyxNQUFNO0lBRWhCLE1BQU0sVUFBVSxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDM0MsS0FBSyxDQUFDLE9BQU8sQ0FBQyxHQUFHLFVBQVUsQ0FBQztJQUU1QixNQUFNLFFBQVEsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLE9BQU8sRUFBRSxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7SUFDbEYsS0FBSyxNQUFNLEtBQUssSUFBSSxRQUFRLEVBQUU7UUFDMUIsUUFBUSxDQUFDLEVBQUUsRUFBRSxLQUFLLEVBQUUsVUFBVSxFQUFFLEtBQUssQ0FBQyxDQUFDO0tBQzFDO0lBQ0QsT0FBTyxLQUFLLENBQUM7QUFDakIsQ0FBQztBQUVELE1BQU0sVUFBVSxRQUFRLENBQUMsRUFBTTtJQUMzQixPQUFPLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFDckMsQ0FBQztBQUVELE1BQU0sVUFBVSxhQUFhLENBQUMsRUFBTTtJQUNoQyxNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsU0FBUyxFQUFFLENBQUM7SUFFOUIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLElBQUksTUFBTSxDQUFDLEtBQUssR0FBRyxLQUFLO1FBQUUsRUFBRSxDQUFDLFdBQVcsRUFBRSxDQUFDO0lBRTFELElBQUksQ0FBQyxFQUFFLENBQUMsVUFBVSxDQUFDLGNBQWMsRUFBRSxNQUFNLENBQUMsSUFBSSxNQUFNLENBQUMsS0FBSyxHQUFHLEtBQUs7UUFBRSxFQUFFLENBQUMsZUFBZSxDQUFDLGNBQWMsQ0FBQyxDQUFDO0lBRXZHLElBQUksQ0FBQyxFQUFFLENBQUMsVUFBVSxDQUFDLGNBQWMsRUFBRSxNQUFNLENBQUMsSUFBSSxNQUFNLENBQUMsS0FBSyxHQUFHLE1BQU07UUFBRSxFQUFFLENBQUMsZUFBZSxDQUFDLGNBQWMsQ0FBQyxDQUFDO0lBRXhHLElBQUksQ0FBQyxFQUFFLENBQUMsVUFBVSxDQUFDLGVBQWUsRUFBRSxNQUFNLENBQUMsSUFBSSxNQUFNLENBQUMsS0FBSyxHQUFHLEdBQUc7UUFBRSxFQUFFLENBQUMsZUFBZSxDQUFDLGVBQWUsQ0FBQyxDQUFDO0lBRXZHLElBQUksQ0FBQyxFQUFFLENBQUMsVUFBVSxDQUFDLGNBQWMsRUFBRSxNQUFNLENBQUMsSUFBSSxNQUFNLENBQUMsS0FBSyxHQUFHLElBQUk7UUFBRSxFQUFFLENBQUMsZUFBZSxDQUFDLGNBQWMsQ0FBQyxDQUFDO0lBRXRHLElBQUksQ0FBQyxFQUFFLENBQUMsVUFBVSxDQUFDLGVBQWUsRUFBRSxNQUFNLENBQUMsSUFBSSxNQUFNLENBQUMsS0FBSyxHQUFHLEtBQUs7UUFBRSxFQUFFLENBQUMsZUFBZSxDQUFDLGVBQWUsQ0FBQyxDQUFDO0FBQzdHLENBQUM7QUFFRCxNQUFNLFVBQVUsaUJBQWlCLENBQUMsRUFBTTtJQUNwQyxhQUFhLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDbEIsS0FBSyxNQUFNLFFBQVEsSUFBSSxRQUFRLENBQUMsRUFBRSxDQUFDLEVBQUU7UUFDakMsWUFBWSxDQUFDLEVBQUUsRUFBRSxRQUFRLENBQUMsQ0FBQztLQUM5QjtBQUNMLENBQUM7QUFFRCxNQUFNLFVBQVUsUUFBUSxDQUFDLEVBQU0sRUFBRSxFQUFVLEVBQUUsTUFBTSxHQUFHLEtBQUssRUFBRSxRQUFRLEdBQUcsS0FBSztJQUN6RSxJQUFJLFFBQVEsR0FBRyxFQUFFLENBQUM7SUFDbEIsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLEdBQUcsQ0FBQyxJQUFJLEdBQUcsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDaEQsUUFBUSxJQUFJLEtBQUssR0FBRyxDQUFDLElBQUksR0FBRyxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUM7SUFDckMsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLEdBQUcsQ0FBQyxJQUFJLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUNuRCxRQUFRLElBQUksT0FBTyxHQUFHLENBQUMsSUFBSSxHQUFHLEVBQUUsQ0FBQyxDQUFDO0lBQ2xDLE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxDQUFDO0lBQzVDLFFBQVEsSUFBSSxPQUFPLEdBQUcsSUFBSSxDQUFDO0lBQzNCLE1BQU0sWUFBWSxHQUFHLFFBQVEsQ0FBQztJQUU5QixJQUFJLE1BQU0sRUFBRTtRQUNSLElBQUksS0FBSyxHQUFHLENBQUMsSUFBSSxRQUFRO1lBQUUsT0FBTyxFQUFFLENBQUMsT0FBTyxDQUFDLHFCQUFxQixFQUFFLEtBQUssRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLFlBQVksQ0FBQyxDQUFDO1FBQzNHLElBQUksT0FBTyxHQUFHLENBQUM7WUFBRSxPQUFPLEVBQUUsQ0FBQyxPQUFPLENBQUMsZ0JBQWdCLEVBQUUsT0FBTyxFQUFFLE9BQU8sRUFBRSxZQUFZLENBQUMsQ0FBQztRQUNyRixPQUFPLEVBQUUsQ0FBQyxPQUFPLENBQUMsV0FBVyxFQUFFLE9BQU8sRUFBRSxZQUFZLENBQUMsQ0FBQztLQUN6RDtTQUFNO1FBQ0gsSUFBSSxLQUFLLEdBQUcsQ0FBQyxJQUFJLFFBQVE7WUFBRSxPQUFPLEVBQUUsQ0FBQyxPQUFPLENBQUMsZ0JBQWdCLEVBQUUsS0FBSyxFQUFFLE9BQU8sRUFBRSxPQUFPLENBQUMsQ0FBQztRQUN4RixJQUFJLE9BQU8sR0FBRyxDQUFDO1lBQUUsT0FBTyxFQUFFLENBQUMsT0FBTyxDQUFDLFdBQVcsRUFBRSxPQUFPLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFDbEUsT0FBTyxFQUFFLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxPQUFPLENBQUMsQ0FBQztLQUN0QztBQUNMLENBQUM7QUFFRCxNQUFNLFVBQVUsU0FBUyxDQUFDLEVBQU0sRUFBRSxNQUFNLEdBQUcsQ0FBQyxFQUFFLE1BQU0sR0FBRyxLQUFLO0lBQ3hELE1BQU0sSUFBSSxHQUFHLElBQUksSUFBSSxDQUFDLElBQUksSUFBSSxFQUFFLENBQUMsT0FBTyxFQUFFLEdBQUcsTUFBTSxDQUFDLENBQUM7SUFFckQsSUFBSSxNQUFNLEVBQUU7UUFDUixNQUFNLEVBQUUsR0FBRyxFQUFFLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsa0JBQWtCLEVBQUUsQ0FBQyxDQUFDO1FBQ3pELE9BQU8sSUFBSSxDQUFDLGtCQUFrQixDQUFDLE9BQU8sQ0FBQyxHQUFHLEdBQUcsR0FBRyxFQUFFLENBQUM7S0FDdEQ7U0FBTTtRQUNILE9BQU8sSUFBSSxDQUFDLGtCQUFrQixDQUFDLE9BQU8sQ0FBQyxDQUFDO0tBQzNDO0FBQ0wsQ0FBQztBQUVELE1BQU0sQ0FBQyxLQUFLLFVBQVUsV0FBVyxDQUFDLEVBQU07SUFDcEMsNklBQTZJO0lBQzdJLDZHQUE2RztJQUM3RyxNQUFNLFdBQVcsR0FBRyxDQUFDLE1BQU0sRUFBRSxhQUFhLEVBQUUsU0FBUyxFQUFFLGNBQWMsRUFBRSxjQUFjLENBQUMsQ0FBQztJQUV2RixNQUFNLEtBQUssR0FBRyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUM7SUFFM0IsS0FBSyxNQUFNLENBQUMsUUFBUSxFQUFFLEtBQUssQ0FBQyxJQUFJLE1BQU0sQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEVBQUU7UUFDbkQsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUN0QyxJQUNJLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUM7WUFDL0IsTUFBTSxDQUFDLGlCQUFpQjtZQUN4QixNQUFNLENBQUMsb0JBQW9CLEdBQUcsRUFBRSxDQUFDLGVBQWUsRUFBRTtZQUNsRCxDQUFDLE1BQU0sQ0FBQyxjQUFjO1lBRXRCLFNBQVM7UUFFYixFQUFFLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ25CLEtBQUssTUFBTSxXQUFXLElBQUksS0FBSyxFQUFFO1lBQzdCLEVBQUUsQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLENBQUM7U0FDM0I7UUFFRCxNQUFNLEVBQUUsQ0FBQyxlQUFlLEVBQUUsQ0FBQztRQUMzQixFQUFFLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0tBQ3RCO0FBQ0wsQ0FBQztBQUVELE1BQU0sVUFBVSxTQUFTLENBQUMsRUFBTTtJQUM1QixFQUFFLENBQUMsVUFBVSxDQUFDLFlBQVksQ0FBQyxDQUFDO0lBQzVCLEVBQUUsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDckIseUJBQXlCO0lBQ3pCLHdCQUF3QjtJQUN4QixtQ0FBbUM7SUFDbkMsMENBQTBDO0lBQzFDLDZDQUE2QztJQUM3QyxxQ0FBcUM7SUFDckMsbUNBQW1DO0lBQ25DLGlEQUFpRDtJQUNqRCx3QkFBd0I7SUFDeEIsMkNBQTJDO0lBQzNDLG9DQUFvQztBQUN4QyxDQUFDO0FBRUQsTUFBTSxDQUFDLE1BQU0sWUFBWSxHQUFHO0lBQ3hCLFlBQVk7SUFDWixVQUFVO0lBQ1YsY0FBYztJQUNkLE9BQU87SUFDUCxVQUFVO0lBQ1Ysc0JBQXNCO0lBQ3RCLGtCQUFrQjtJQUNsQixLQUFLO0lBQ0wscUJBQXFCO0lBQ3JCLHNCQUFzQjtJQUN0QixZQUFZO0lBQ1osd0JBQXdCO0lBQ3hCLDZCQUE2QjtJQUM3QixZQUFZO0lBQ1osZ0JBQWdCO0lBQ2hCLFNBQVM7SUFDVCxPQUFPO0lBQ1AsV0FBVztJQUNYLFFBQVE7SUFDUixXQUFXO0lBQ1gsV0FBVztJQUNYLFVBQVU7SUFDVix1QkFBdUI7SUFDdkIsZUFBZTtJQUNmLGVBQWU7SUFDZixZQUFZO0lBQ1osU0FBUztJQUNULGFBQWE7SUFDYixZQUFZO0lBQ1osYUFBYTtJQUNiLFVBQVU7SUFDVixjQUFjO0lBQ2QsMkJBQTJCO0NBQzlCLENBQUM7QUFFRixNQUFNLENBQUMsS0FBSyxVQUFVLFFBQVEsQ0FDMUIsRUFBTSxFQUNOLElBQXdCLEVBQ3hCLFNBQWlCLEVBQ2pCLE9BQWUsRUFDZixNQUFjLEVBQ2QsUUFBZ0IsRUFDaEIsU0FBaUI7SUFFakIsSUFBSSxJQUFJLENBQUMsU0FBUyxLQUFLLEVBQUUsRUFBRTtRQUN2QixNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsT0FBTyxDQUNyQixzREFBc0QsRUFDdEQsSUFBSSxDQUFDLE1BQU0sRUFDWCxJQUFJLENBQUMsR0FBRyxFQUNSLElBQUksQ0FBQyxPQUFPLEVBQ1osSUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUMsTUFBTSxFQUNoQyxJQUFJLENBQUMsYUFBYSxHQUFHLElBQUksQ0FBQyxNQUFNLEVBQ2hDLElBQUksQ0FBQyxhQUFhLEVBQ2xCLFNBQVMsRUFDVCxPQUFPLEVBQ1AsT0FBTyxHQUFHLFNBQVMsRUFDbkIsU0FBUyxHQUFHLENBQUMsSUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQzlDLE9BQU8sR0FBRyxDQUFDLElBQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUM1QyxPQUFPLEdBQUcsU0FBUyxHQUFHLElBQUksQ0FBQyxhQUFhLEVBQ3hDLE1BQU0sRUFDTixRQUFRLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUNuQixFQUFFLENBQUMsc0JBQXNCLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFDakQsRUFBRSxDQUFDLE9BQU8sQ0FBQyxTQUFTLEVBQUUsV0FBVyxDQUFDLEVBQ2xDLEVBQUUsQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLHVCQUF1QixDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRSxXQUFXLENBQUMsQ0FDbkUsQ0FBQztRQUVGLE9BQU8sQ0FBQyxNQUFNLEVBQUUsQ0FBQyxZQUFZLENBQUMsYUFBYSxDQUFDLGVBQWUsRUFBRSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsTUFBTSxDQUFDLENBQUM7WUFBQyxDQUFDO0tBQzNGO0FBQ0wsQ0FBQyJ9\",\"filename\":\"/lib/util.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":13.25,\"server\":\"univ-energy\",\"moduleSequenceNumber\":85543,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"purchaseTor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"purchaseProgram\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"connect\",\"cost\":2},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.stanek.charge(ns.args[0], ns.args[1]);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hhcmdlLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL3N0YW5lay9jaGFyZ2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUM5QixPQUFPLElBQUksRUFBRTtRQUNULE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7S0FDakQ7QUFDTCxDQUFDIn0=\",\"filename\":\"/lib/stanek/charge.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/stanek/charge.js\",\"url\":\"blob:file:///99be3edd-bde2-4d54-a760-ce7fa8a0c5a3\",\"moduleSequenceNumber\":99875}],\"dependents\":[],\"ramUsage\":2,\"server\":\"univ-energy\",\"moduleSequenceNumber\":99875,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.charge\",\"cost\":0.4}]}}],\"serversOnNetwork\":[\"omnia\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":261,\"hackDifficulty\":261,\"minDifficulty\":87,\"moneyAvailable\":898902207,\"moneyMax\":10112649828.75,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":809,\"serverGrowth\":86,\"suppression\":0,\"activeSuppressionThreads\":[],\"suppressionIntervalID\":null,\"suppressionLastUpdateTime\":0}},\"titan-labs\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"titan-labs\",\"httpPortOpen\":true,\"ip\":\"48.8.8.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.grow(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLElBQUksR0FBdUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFFbkUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDdkIsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7UUFDeEMsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7S0FDM0MsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyJ9\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"titan-labs\",\"moduleSequenceNumber\":93219,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.weaken(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxJQUFJLEdBQXVCLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO0lBRW5FLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFO1FBQ3pCLGtCQUFrQixFQUFFLElBQUksQ0FBQyxlQUFlO1FBQ3hDLGtCQUFrQixFQUFFLElBQUksQ0FBQyxlQUFlO0tBQzNDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///a9852c3c-8c1a-401a-9df2-9457721d72b0\",\"moduleSequenceNumber\":94074}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"titan-labs\",\"moduleSequenceNumber\":94074,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.hack(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLElBQUksR0FBdUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFFbkUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDdkIsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7UUFDeEMsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7S0FDM0MsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyJ9\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"titan-labs\",\"moduleSequenceNumber\":93223,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export var ReservedPorts;\\r\\n(function (ReservedPorts) {\\r\\n    ReservedPorts[ReservedPorts[\\\"HACKING_INFO\\\"] = 1] = \\\"HACKING_INFO\\\";\\r\\n    ReservedPorts[ReservedPorts[\\\"HACKNET_INFO\\\"] = 2] = \\\"HACKNET_INFO\\\";\\r\\n    ReservedPorts[ReservedPorts[\\\"HACK_WRITE_INFO\\\"] = 3] = \\\"HACK_WRITE_INFO\\\";\\r\\n})(ReservedPorts || (ReservedPorts = {}));\\r\\nexport const WEAKENJS = \\\"/lib/exec/weaken.js\\\";\\r\\nexport const GROWJS = \\\"/lib/exec/grow.js\\\";\\r\\nexport const HACKJS = \\\"/lib/exec/hack.js\\\";\\r\\nexport const UTILJS = \\\"/lib/util.js\\\";\\r\\nexport const CITIES = [\\\"Aevum\\\", \\\"Chongqing\\\", \\\"Sector-12\\\", \\\"New Tokyo\\\", \\\"Ishima\\\", \\\"Volhaven\\\"];\\r\\nexport function llog(ns, str, ...args) {\\r\\n    ns.print(ns.sprintf(\\\"%8s \\\" + str, new Date().toLocaleTimeString(\\\"it-IT\\\"), ...args));\\r\\n}\\r\\nexport function softenServer(ns, hostname) {\\r\\n    if (ns.hasRootAccess(hostname)) {\\r\\n        return;\\r\\n    }\\r\\n    let ports = 0;\\r\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n        ns.brutessh(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n        ns.ftpcrack(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n        ns.httpworm(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n        ns.relaysmtp(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n        ns.sqlinject(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ports >= ns.getServerNumPortsRequired(hostname)) {\\r\\n        ns.nuke(hostname);\\r\\n    }\\r\\n}\\r\\nexport function serverIsHackable(ns, hostname) {\\r\\n    return ns.hasRootAccess(hostname) && ns.getHackingLevel() >= ns.getServerRequiredHackingLevel(hostname);\\r\\n}\\r\\nexport function canExecuteOnServer(ns, hostname) {\\r\\n    return ns.hasRootAccess(hostname) && ns.getServerMaxRam(hostname) > 0;\\r\\n}\\r\\nexport function mapHosts(ns, hosts = {}, parents = [], current = \\\"home\\\") {\\r\\n    const newParents = parents.concat(current);\\r\\n    hosts[current] = newParents;\\r\\n    const children = ns.scan(current).filter((element) => !parents.includes(element));\\r\\n    for (const child of children) {\\r\\n        mapHosts(ns, hosts, newParents, child);\\r\\n    }\\r\\n    return hosts;\\r\\n}\\r\\nexport function allHosts(ns) {\\r\\n    return Object.keys(mapHosts(ns));\\r\\n}\\r\\nexport function doProgramBuys(ns) {\\r\\n    const player = ns.getPlayer();\\r\\n    if (!player.tor && player.money > 200e3)\\r\\n        ns.purchaseTor();\\r\\n    if (!ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\") && player.money > 500e3)\\r\\n        ns.purchaseProgram(\\\"BruteSSH.exe\\\");\\r\\n    if (!ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\") && player.money > 1500e3)\\r\\n        ns.purchaseProgram(\\\"FTPCrack.exe\\\");\\r\\n    if (!ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\") && player.money > 5e6)\\r\\n        ns.purchaseProgram(\\\"relaySMTP.exe\\\");\\r\\n    if (!ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\") && player.money > 30e6)\\r\\n        ns.purchaseProgram(\\\"HTTPWorm.exe\\\");\\r\\n    if (!ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\") && player.money > 250e6)\\r\\n        ns.purchaseProgram(\\\"SQLInject.exe\\\");\\r\\n}\\r\\nexport function doBuyAndSoftenAll(ns) {\\r\\n    doProgramBuys(ns);\\r\\n    for (const hostname of allHosts(ns)) {\\r\\n        softenServer(ns, hostname);\\r\\n    }\\r\\n}\\r\\nexport function stFormat(ns, ms, showms = false, showfull = false) {\\r\\n    let timeLeft = ms;\\r\\n    const hours = Math.floor(ms / (1000 * 60 * 60));\\r\\n    timeLeft -= hours * (1000 * 60 * 60);\\r\\n    const minutes = Math.floor(timeLeft / (1000 * 60));\\r\\n    timeLeft -= minutes * (1000 * 60);\\r\\n    const seconds = Math.floor(timeLeft / 1000);\\r\\n    timeLeft -= seconds * 1000;\\r\\n    const milliseconds = timeLeft;\\r\\n    if (showms) {\\r\\n        if (hours > 0 || showfull)\\r\\n            return ns.sprintf(\\\"%02d:%02d:%02d.%03d\\\", hours, minutes, seconds, milliseconds);\\r\\n        if (minutes > 0)\\r\\n            return ns.sprintf(\\\"%02d:%02d.%03d\\\", minutes, seconds, milliseconds);\\r\\n        return ns.sprintf(\\\"%02d.%03d\\\", seconds, milliseconds);\\r\\n    }\\r\\n    else {\\r\\n        if (hours > 0 || showfull)\\r\\n            return ns.sprintf(\\\"%02d:%02d:%02d\\\", hours, minutes, seconds);\\r\\n        if (minutes > 0)\\r\\n            return ns.sprintf(\\\"%02d:%02d\\\", minutes, seconds);\\r\\n        return ns.sprintf(\\\"%02d\\\", seconds);\\r\\n    }\\r\\n}\\r\\nexport function stdFormat(ns, offset = 0, showms = false) {\\r\\n    const date = new Date(new Date().getTime() + offset);\\r\\n    if (showms) {\\r\\n        const ms = ns.sprintf(\\\"%03d\\\", date.getUTCMilliseconds());\\r\\n        return date.toLocaleTimeString(\\\"it-IT\\\") + \\\".\\\" + ms;\\r\\n    }\\r\\n    else {\\r\\n        return date.toLocaleTimeString(\\\"it-IT\\\");\\r\\n    }\\r\\n}\\r\\nexport async function doBackdoors(ns) {\\r\\n    //const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"w0r1d_d43m0n\\\", \\\"b-and-a\\\", \\\"ecorp\\\", \\\"fulcrumassets\\\", \\\"fulcrumtech\\\"];\\r\\n    //const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"omnitek\\\", \\\"kuai-gong\\\", \\\"megacorp\\\"];\\r\\n    const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"w0r1d_d43m0n\\\"];\\r\\n    const hosts = mapHosts(ns);\\r\\n    for (const [hostName, trail] of Object.entries(hosts)) {\\r\\n        const server = ns.getServer(hostName);\\r\\n        if (!targetHosts.includes(hostName) ||\\r\\n            server.backdoorInstalled ||\\r\\n            server.requiredHackingSkill > ns.getHackingLevel() ||\\r\\n            !server.hasAdminRights)\\r\\n            continue;\\r\\n        ns.print(hostName);\\r\\n        for (const hostHopName of trail) {\\r\\n            ns.connect(hostHopName);\\r\\n        }\\r\\n        await ns.installBackdoor();\\r\\n        ns.connect(\\\"home\\\");\\r\\n    }\\r\\n}\\r\\nexport function cleanLogs(ns) {\\r\\n    ns.disableLog(\\\"disableLog\\\");\\r\\n    ns.disableLog(\\\"ALL\\\");\\r\\n    // ns.disableLog(\\\"sleep\\\")\\r\\n    // ns.disableLog(\\\"exec\\\")\\r\\n    // ns.disableLog(\\\"getServerMaxRam\\\")\\r\\n    // ns.disableLog(\\\"getServerSecurityLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerMinSecurityLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerMaxMoney\\\")\\r\\n    // ns.disableLog(\\\"getHackingLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerRequiredHackingLevel\\\")\\r\\n    // ns.disableLog(\\\"scan\\\")\\r\\n    // ns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n    // ns.disableLog(\\\"getServerUsedRam\\\")\\r\\n}\\r\\nexport const ALL_FACTIONS = [\\r\\n    \\\"Illuminati\\\",\\r\\n    \\\"Daedalus\\\",\\r\\n    \\\"The Covenant\\\",\\r\\n    \\\"ECorp\\\",\\r\\n    \\\"MegaCorp\\\",\\r\\n    \\\"Bachman & Associates\\\",\\r\\n    \\\"Blade Industries\\\",\\r\\n    \\\"NWO\\\",\\r\\n    \\\"Clarke Incorporated\\\",\\r\\n    \\\"OmniTek Incorporated\\\",\\r\\n    \\\"Four Sigma\\\",\\r\\n    \\\"KuaiGong International\\\",\\r\\n    \\\"Fulcrum Secret Technologies\\\",\\r\\n    \\\"BitRunners\\\",\\r\\n    \\\"The Black Hand\\\",\\r\\n    \\\"NiteSec\\\",\\r\\n    \\\"Aevum\\\",\\r\\n    \\\"Chongqing\\\",\\r\\n    \\\"Ishima\\\",\\r\\n    \\\"New Tokyo\\\",\\r\\n    \\\"Sector-12\\\",\\r\\n    \\\"Volhaven\\\",\\r\\n    \\\"Speakers for the Dead\\\",\\r\\n    \\\"The Dark Army\\\",\\r\\n    \\\"The Syndicate\\\",\\r\\n    \\\"Silhouette\\\",\\r\\n    \\\"Tetrads\\\",\\r\\n    \\\"Slum Snakes\\\",\\r\\n    \\\"Netburners\\\",\\r\\n    \\\"Tian Di Hui\\\",\\r\\n    \\\"CyberSec\\\",\\r\\n    \\\"Bladeburners\\\",\\r\\n    \\\"Church of the Machine God\\\",\\r\\n];\\r\\nexport async function writeOut(ns, data, startTime, endTime, result, startSec, startCash) {\\r\\n    if (data.writeFile !== \\\"\\\") {\\r\\n        const outstr = ns.sprintf(\\\"%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\", data.target, data.uid, data.batchId, data.realTimeStart + data.offset, data.realTimeStart + data.finish, data.operationTime, startTime, endTime, endTime - startTime, startTime - (data.realTimeStart + data.offset), endTime - (data.realTimeStart + data.finish), endTime - startTime - data.operationTime, result, startSec.toFixed(2), ns.getServerSecurityLevel(data.target).toFixed(2), ns.nFormat(startCash, \\\"($0.000a)\\\"), ns.nFormat(ns.getServerMoneyAvailable(data.target), \\\"($0.000a)\\\"));\\r\\n        while (!await ns.tryWritePort(ReservedPorts.HACK_WRITE_INFO, [data.writeFile, outstr]))\\r\\n            ;\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi91dGlsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLE1BQU0sQ0FBTixJQUFZLGFBSVg7QUFKRCxXQUFZLGFBQWE7SUFDckIsaUVBQWdCLENBQUE7SUFDaEIsaUVBQVksQ0FBQTtJQUNaLHVFQUFlLENBQUE7QUFDbkIsQ0FBQyxFQUpXLGFBQWEsS0FBYixhQUFhLFFBSXhCO0FBRUQsTUFBTSxDQUFDLE1BQU0sUUFBUSxHQUFHLHFCQUFxQixDQUFDO0FBQzlDLE1BQU0sQ0FBQyxNQUFNLE1BQU0sR0FBRyxtQkFBbUIsQ0FBQztBQUMxQyxNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUcsbUJBQW1CLENBQUM7QUFDMUMsTUFBTSxDQUFDLE1BQU0sTUFBTSxHQUFHLGNBQWMsQ0FBQztBQUVyQyxNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUcsQ0FBQyxPQUFPLEVBQUUsV0FBVyxFQUFFLFdBQVcsRUFBRSxXQUFXLEVBQUUsUUFBUSxFQUFFLFVBQVUsQ0FBQyxDQUFDO0FBRTdGLE1BQU0sVUFBVSxJQUFJLENBQUMsRUFBTSxFQUFFLEdBQVcsRUFBRSxHQUFHLElBQXlCO0lBQ2xFLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEdBQUcsR0FBRyxFQUFFLElBQUksSUFBSSxFQUFFLENBQUMsa0JBQWtCLENBQUMsT0FBTyxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDO0FBQ3hGLENBQUM7QUFFRCxNQUFNLFVBQVUsWUFBWSxDQUFDLEVBQU0sRUFBRSxRQUFnQjtJQUNqRCxJQUFJLEVBQUUsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDNUIsT0FBTztLQUNWO0lBRUQsSUFBSSxLQUFLLEdBQUcsQ0FBQyxDQUFDO0lBQ2QsSUFBSSxFQUFFLENBQUMsVUFBVSxDQUFDLGNBQWMsRUFB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\",\"filename\":\"/lib/util.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":13.25,\"server\":\"titan-labs\",\"moduleSequenceNumber\":93225,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"purchaseTor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"purchaseProgram\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"connect\",\"cost\":2},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.stanek.charge(ns.args[0], ns.args[1]);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hhcmdlLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL3N0YW5lay9jaGFyZ2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUM5QixPQUFPLElBQUksRUFBRTtRQUNULE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7S0FDakQ7QUFDTCxDQUFDIn0=\",\"filename\":\"/lib/stanek/charge.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/stanek/charge.js\",\"url\":\"blob:file:///6b40b40d-8748-49d4-9e2f-dbf84b2e769f\",\"moduleSequenceNumber\":99863}],\"dependents\":[],\"ramUsage\":2,\"server\":\"titan-labs\",\"moduleSequenceNumber\":99863,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.charge\",\"cost\":0.4}]}}],\"serversOnNetwork\":[\"infocomm\",\"stormtech\",\"vitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":213,\"hackDifficulty\":213,\"minDifficulty\":71,\"moneyAvailable\":595221063,\"moneyMax\":6696236958.75,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":819,\"serverGrowth\":67,\"suppression\":0,\"activeSuppressionThreads\":[],\"suppressionIntervalID\":null,\"suppressionLastUpdateTime\":0}},\"microdyne\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"microdyne\",\"httpPortOpen\":true,\"ip\":\"43.1.3.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.grow(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLElBQUksR0FBdUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFFbkUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDdkIsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7UUFDeEMsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7S0FDM0MsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyJ9\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"microdyne\",\"moduleSequenceNumber\":93243,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.weaken(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxJQUFJLEdBQXVCLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO0lBRW5FLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFO1FBQ3pCLGtCQUFrQixFQUFFLElBQUksQ0FBQyxlQUFlO1FBQ3hDLGtCQUFrQixFQUFFLElBQUksQ0FBQyxlQUFlO0tBQzNDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///c320aa76-3463-486c-bb14-c74d67351f51\",\"moduleSequenceNumber\":94071}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"microdyne\",\"moduleSequenceNumber\":94071,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.hack(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLElBQUksR0FBdUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFFbkUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDdkIsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7UUFDeEMsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7S0FDM0MsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyJ9\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"microdyne\",\"moduleSequenceNumber\":93247,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export var ReservedPorts;\\r\\n(function (ReservedPorts) {\\r\\n    ReservedPorts[ReservedPorts[\\\"HACKING_INFO\\\"] = 1] = \\\"HACKING_INFO\\\";\\r\\n    ReservedPorts[ReservedPorts[\\\"HACKNET_INFO\\\"] = 2] = \\\"HACKNET_INFO\\\";\\r\\n    ReservedPorts[ReservedPorts[\\\"HACK_WRITE_INFO\\\"] = 3] = \\\"HACK_WRITE_INFO\\\";\\r\\n})(ReservedPorts || (ReservedPorts = {}));\\r\\nexport const WEAKENJS = \\\"/lib/exec/weaken.js\\\";\\r\\nexport const GROWJS = \\\"/lib/exec/grow.js\\\";\\r\\nexport const HACKJS = \\\"/lib/exec/hack.js\\\";\\r\\nexport const UTILJS = \\\"/lib/util.js\\\";\\r\\nexport const CITIES = [\\\"Aevum\\\", \\\"Chongqing\\\", \\\"Sector-12\\\", \\\"New Tokyo\\\", \\\"Ishima\\\", \\\"Volhaven\\\"];\\r\\nexport function llog(ns, str, ...args) {\\r\\n    ns.print(ns.sprintf(\\\"%8s \\\" + str, new Date().toLocaleTimeString(\\\"it-IT\\\"), ...args));\\r\\n}\\r\\nexport function softenServer(ns, hostname) {\\r\\n    if (ns.hasRootAccess(hostname)) {\\r\\n        return;\\r\\n    }\\r\\n    let ports = 0;\\r\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n        ns.brutessh(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n        ns.ftpcrack(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n        ns.httpworm(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n        ns.relaysmtp(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n        ns.sqlinject(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ports >= ns.getServerNumPortsRequired(hostname)) {\\r\\n        ns.nuke(hostname);\\r\\n    }\\r\\n}\\r\\nexport function serverIsHackable(ns, hostname) {\\r\\n    return ns.hasRootAccess(hostname) && ns.getHackingLevel() >= ns.getServerRequiredHackingLevel(hostname);\\r\\n}\\r\\nexport function canExecuteOnServer(ns, hostname) {\\r\\n    return ns.hasRootAccess(hostname) && ns.getServerMaxRam(hostname) > 0;\\r\\n}\\r\\nexport function mapHosts(ns, hosts = {}, parents = [], current = \\\"home\\\") {\\r\\n    const newParents = parents.concat(current);\\r\\n    hosts[current] = newParents;\\r\\n    const children = ns.scan(current).filter((element) => !parents.includes(element));\\r\\n    for (const child of children) {\\r\\n        mapHosts(ns, hosts, newParents, child);\\r\\n    }\\r\\n    return hosts;\\r\\n}\\r\\nexport function allHosts(ns) {\\r\\n    return Object.keys(mapHosts(ns));\\r\\n}\\r\\nexport function doProgramBuys(ns) {\\r\\n    const player = ns.getPlayer();\\r\\n    if (!player.tor && player.money > 200e3)\\r\\n        ns.purchaseTor();\\r\\n    if (!ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\") && player.money > 500e3)\\r\\n        ns.purchaseProgram(\\\"BruteSSH.exe\\\");\\r\\n    if (!ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\") && player.money > 1500e3)\\r\\n        ns.purchaseProgram(\\\"FTPCrack.exe\\\");\\r\\n    if (!ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\") && player.money > 5e6)\\r\\n        ns.purchaseProgram(\\\"relaySMTP.exe\\\");\\r\\n    if (!ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\") && player.money > 30e6)\\r\\n        ns.purchaseProgram(\\\"HTTPWorm.exe\\\");\\r\\n    if (!ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\") && player.money > 250e6)\\r\\n        ns.purchaseProgram(\\\"SQLInject.exe\\\");\\r\\n}\\r\\nexport function doBuyAndSoftenAll(ns) {\\r\\n    doProgramBuys(ns);\\r\\n    for (const hostname of allHosts(ns)) {\\r\\n        softenServer(ns, hostname);\\r\\n    }\\r\\n}\\r\\nexport function stFormat(ns, ms, showms = false, showfull = false) {\\r\\n    let timeLeft = ms;\\r\\n    const hours = Math.floor(ms / (1000 * 60 * 60));\\r\\n    timeLeft -= hours * (1000 * 60 * 60);\\r\\n    const minutes = Math.floor(timeLeft / (1000 * 60));\\r\\n    timeLeft -= minutes * (1000 * 60);\\r\\n    const seconds = Math.floor(timeLeft / 1000);\\r\\n    timeLeft -= seconds * 1000;\\r\\n    const milliseconds = timeLeft;\\r\\n    if (showms) {\\r\\n        if (hours > 0 || showfull)\\r\\n            return ns.sprintf(\\\"%02d:%02d:%02d.%03d\\\", hours, minutes, seconds, milliseconds);\\r\\n        if (minutes > 0)\\r\\n            return ns.sprintf(\\\"%02d:%02d.%03d\\\", minutes, seconds, milliseconds);\\r\\n        return ns.sprintf(\\\"%02d.%03d\\\", seconds, milliseconds);\\r\\n    }\\r\\n    else {\\r\\n        if (hours > 0 || showfull)\\r\\n            return ns.sprintf(\\\"%02d:%02d:%02d\\\", hours, minutes, seconds);\\r\\n        if (minutes > 0)\\r\\n            return ns.sprintf(\\\"%02d:%02d\\\", minutes, seconds);\\r\\n        return ns.sprintf(\\\"%02d\\\", seconds);\\r\\n    }\\r\\n}\\r\\nexport function stdFormat(ns, offset = 0, showms = false) {\\r\\n    const date = new Date(new Date().getTime() + offset);\\r\\n    if (showms) {\\r\\n        const ms = ns.sprintf(\\\"%03d\\\", date.getUTCMilliseconds());\\r\\n        return date.toLocaleTimeString(\\\"it-IT\\\") + \\\".\\\" + ms;\\r\\n    }\\r\\n    else {\\r\\n        return date.toLocaleTimeString(\\\"it-IT\\\");\\r\\n    }\\r\\n}\\r\\nexport async function doBackdoors(ns) {\\r\\n    //const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"w0r1d_d43m0n\\\", \\\"b-and-a\\\", \\\"ecorp\\\", \\\"fulcrumassets\\\", \\\"fulcrumtech\\\"];\\r\\n    //const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"omnitek\\\", \\\"kuai-gong\\\", \\\"megacorp\\\"];\\r\\n    const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"w0r1d_d43m0n\\\"];\\r\\n    const hosts = mapHosts(ns);\\r\\n    for (const [hostName, trail] of Object.entries(hosts)) {\\r\\n        const server = ns.getServer(hostName);\\r\\n        if (!targetHosts.includes(hostName) ||\\r\\n            server.backdoorInstalled ||\\r\\n            server.requiredHackingSkill > ns.getHackingLevel() ||\\r\\n            !server.hasAdminRights)\\r\\n            continue;\\r\\n        ns.print(hostName);\\r\\n        for (const hostHopName of trail) {\\r\\n            ns.connect(hostHopName);\\r\\n        }\\r\\n        await ns.installBackdoor();\\r\\n        ns.connect(\\\"home\\\");\\r\\n    }\\r\\n}\\r\\nexport function cleanLogs(ns) {\\r\\n    ns.disableLog(\\\"disableLog\\\");\\r\\n    ns.disableLog(\\\"ALL\\\");\\r\\n    // ns.disableLog(\\\"sleep\\\")\\r\\n    // ns.disableLog(\\\"exec\\\")\\r\\n    // ns.disableLog(\\\"getServerMaxRam\\\")\\r\\n    // ns.disableLog(\\\"getServerSecurityLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerMinSecurityLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerMaxMoney\\\")\\r\\n    // ns.disableLog(\\\"getHackingLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerRequiredHackingLevel\\\")\\r\\n    // ns.disableLog(\\\"scan\\\")\\r\\n    // ns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n    // ns.disableLog(\\\"getServerUsedRam\\\")\\r\\n}\\r\\nexport const ALL_FACTIONS = [\\r\\n    \\\"Illuminati\\\",\\r\\n    \\\"Daedalus\\\",\\r\\n    \\\"The Covenant\\\",\\r\\n    \\\"ECorp\\\",\\r\\n    \\\"MegaCorp\\\",\\r\\n    \\\"Bachman & Associates\\\",\\r\\n    \\\"Blade Industries\\\",\\r\\n    \\\"NWO\\\",\\r\\n    \\\"Clarke Incorporated\\\",\\r\\n    \\\"OmniTek Incorporated\\\",\\r\\n    \\\"Four Sigma\\\",\\r\\n    \\\"KuaiGong International\\\",\\r\\n    \\\"Fulcrum Secret Technologies\\\",\\r\\n    \\\"BitRunners\\\",\\r\\n    \\\"The Black Hand\\\",\\r\\n    \\\"NiteSec\\\",\\r\\n    \\\"Aevum\\\",\\r\\n    \\\"Chongqing\\\",\\r\\n    \\\"Ishima\\\",\\r\\n    \\\"New Tokyo\\\",\\r\\n    \\\"Sector-12\\\",\\r\\n    \\\"Volhaven\\\",\\r\\n    \\\"Speakers for the Dead\\\",\\r\\n    \\\"The Dark Army\\\",\\r\\n    \\\"The Syndicate\\\",\\r\\n    \\\"Silhouette\\\",\\r\\n    \\\"Tetrads\\\",\\r\\n    \\\"Slum Snakes\\\",\\r\\n    \\\"Netburners\\\",\\r\\n    \\\"Tian Di Hui\\\",\\r\\n    \\\"CyberSec\\\",\\r\\n    \\\"Bladeburners\\\",\\r\\n    \\\"Church of the Machine God\\\",\\r\\n];\\r\\nexport async function writeOut(ns, data, startTime, endTime, result, startSec, startCash) {\\r\\n    if (data.writeFile !== \\\"\\\") {\\r\\n        const outstr = ns.sprintf(\\\"%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\", data.target, data.uid, data.batchId, data.realTimeStart + data.offset, data.realTimeStart + data.finish, data.operationTime, startTime, endTime, endTime - startTime, startTime - (data.realTimeStart + data.offset), endTime - (data.realTimeStart + data.finish), endTime - startTime - data.operationTime, result, startSec.toFixed(2), ns.getServerSecurityLevel(data.target).toFixed(2), ns.nFormat(startCash, \\\"($0.000a)\\\"), ns.nFormat(ns.getServerMoneyAvailable(data.target), \\\"($0.000a)\\\"));\\r\\n        while (!await ns.tryWritePort(ReservedPorts.HACK_WRITE_INFO, [data.writeFile, outstr]))\\r\\n            ;\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi91dGlsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLE1BQU0sQ0FBTixJQUFZLGFBSVg7QUFKRCxXQUFZLGFBQWE7SUFDckIsaUVBQWdCLENBQUE7SUFDaEIsaUVBQVksQ0FBQTtJQUNaLHVFQUFlLENBQUE7QUFDbkIsQ0FBQyxFQUpXLGFBQWEsS0FBYixhQUFhLFFBSXhCO0FBRUQsTUFBTSxDQUFDLE1BQU0sUUFBUSxHQUFHLHFCQUFxQixDQUFDO0FBQzlDLE1BQU0sQ0FBQyxNQUFNLE1BQU0sR0FBRyxtQkFBbUIsQ0FBQztBQUMxQyxNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUcsbUJBQW1CLENBQUM7QUFDMUMsTUFBTSxDQUFDLE1BQU0sTUFBTSxHQUFHLGNBQWMsQ0FBQztBQUVyQyxNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUcsQ0FBQyxPQUFPLEVBQUUsV0FBVyxFQUFFLFdBQVcsRUFBRSxXQUFXLEVBQUUsUUFBUSxFQUFFLFVBQVUsQ0FBQyxDQUFDO0FBRTdGLE1BQU0sVUFBVSxJQUFJLENBQUMsRUFBTSxFQUFFLEdBQVcsRUFBRSxHQUFHLElBQXlCO0lBQ2xFLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEdBQUcsR0FBRyxFQUFFLElBQUksSUFBSSxFQUFFLENBQUMsa0JBQWtCLENBQUMsT0FBTyxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDO0FBQ3hGLENBQUM7QUFFRCxNQUFNLFVBQVUsWUFBWSxDQUFDLEVBQU0sRUFBRSxRQUFnQjtJQUNqRCxJQUFJLEVBQUUsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDNUIsT0FBTztLQUNWO0lBRUQsSUFBSSxLQUFLLEdBQUcsQ0FBQyxDQUFDO0lBQ2QsSUFBSSxFQUFFLENBQUMsVUFBVSxDQUFDLGNBQWMsRUFBRSxNQUFNLENBQUMsRUFBRTtRQUN2QyxFQUFFLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ3RCLEtBQUssRUFBRSxDQUFDO0tBQ1g7SUFFRCxJQUFJLEVBQUUsQ0FBQyxVQUFVLENBQUMsY0FBYyxFQUFFLE1BQU0sQ0FBQyxFQUFFO1FBQ3ZDLEVBQUUsQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDdEIsS0FBSyxFQUFFLENBQUM7S0FDWDtJQUVELElBQUksRUFBRSxDQUFDLFVBQVUsQ0FBQyxjQUFjLEVBQUUsTUFBTSxDQUFDLEVBQUU7UUFDdkMsRUFBRSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUN0QixLQUFLLEVBQUUsQ0FBQztLQUNYO0lBRUQsSUFBSSxFQUFFLENBQUMsVUFBVSxDQUFDLGVBQWUsRUFBRSxNQUFNLENBQUMsRUFBRTtRQUN4QyxFQUFFLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ3ZCLEtBQUssRUFBRSxDQUFDO0tBQ1g7SUFFRCxJQUFJLEVBQUUsQ0FBQyxVQUFVLENBQUMsZUFBZSxFQUFFLE1BQU0sQ0FBQyxFQUFFO1FBQ3hDLEVBQUUsQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDdkIsS0FBSyxFQUFFLENBQUM7S0FDWDtJQUVELElBQUksS0FBSyxJQUFJLEVBQUUsQ0FBQyx5QkFBeUIsQ0FBQyxRQUFRLENBQUMsRUFBRTtRQUNqRCxFQUFFLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0tBQ3JCO0FBQ0wsQ0FBQztBQUVELE1BQU0sVUFBVSxnQkFBZ0IsQ0FBQyxFQUFNLEVBQUUsUUFBZ0I7SUFDckQsT0FBTyxFQUFFLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxlQUFlLEVBQUUsSUFBSSxFQUFFLENBQUMsNkJBQTZCLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDNUcsQ0FBQztBQUVELE1BQU0sVUFBVSxrQkFBa0IsQ0FBQyxFQUFNLEVBQUUsUUFBZ0I7SUFDdkQsT0FBTyxFQUFFLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxlQUFlLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQzFFLENBQUM7QUFFRCxNQUFNLFVBQVUsUUFBUSxDQUNwQixFQUFNLEVBQ04sUUFBa0MsRUFBRSxFQUNwQyxVQUFvQixFQUFFLEVBQ3RCLE9BQU8sR0FBRyxNQUFNO0lBRWhCLE1BQU0sVUFBVSxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDM0MsS0FBSyxDQUFDLE9BQU8sQ0FBQyxHQUFHLFVBQVUsQ0FBQztJQUU1QixNQUFNLFFBQVEsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLE9BQU8sRUFBRSxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7SUFDbEYsS0FBSyxNQUFNLEtBQUssSUFBSSxRQUFRLEVBQUU7UUFDMUIsUUFBUSxDQUFDLEVBQUUsRUFBRSxLQUFLLEVBQUUsVUFBVSxFQUFFLEtBQUssQ0FBQyxDQUFDO0tBQzFDO0lBQ0QsT0FBTyxLQUFLLENBQUM7QUFDakIsQ0FBQztBQUVELE1BQU0sVUFBVSxRQUFRLENBQUMsRUFBTTtJQUMzQixPQUFPLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFDckMsQ0FBQztBQUVELE1BQU0sVUFBVSxhQUFhLENBQUMsRUFBTTtJQUNoQyxNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsU0FBUyxFQUFFLENBQUM7SUFFOUIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLElBQUksTUFBTSxDQUFDLEtBQUssR0FBRyxLQUFLO1FBQUUsRUFBRSxDQUFDLFdBQVcsRUFBRSxDQUFDO0lBRTFELElBQUksQ0FBQyxFQUFFLENBQUMsVUFBVSxDQUFDLGNBQWMsRUFBRSxNQUFNLENBQUMsSUFBSSxNQUFNLENBQUMsS0FBSyxHQUFHLEtBQUs7UUFBRSxFQUFFLENBQUMsZUFBZSxDQUFDLGNBQWMsQ0FBQyxDQUFDO0lBRXZHLElBQUksQ0FBQyxFQUFFLENBQUMsVUFBVSxDQUFDLGNBQWMsRUFBRSxNQUFNLENBQUMsSUFBSSxNQUFNLENBQUMsS0FBSyxHQUFHLE1BQU07UUFBRSxFQUFFLENBQUMsZUFBZSxDQUFDLGNBQWMsQ0FBQyxDQUFDO0lBRXhHLElBQUksQ0FBQyxFQUFFLENBQUMsVUFBVSxDQUFDLGVBQWUsRUFBRSxNQUFNLENBQUMsSUFBSSxNQUFNLENBQUMsS0FBSyxHQUFHLEdBQUc7UUFBRSxFQUFFLENBQUMsZUFBZSxDQUFDLGVBQWUsQ0FBQyxDQUFDO0lBRXZHLElBQUksQ0FBQyxFQUFFLENBQUMsVUFBVSxDQUFDLGNBQWMsRUFBRSxNQUFNLENBQUMsSUFBSSxNQUFNLENBQUMsS0FBSyxHQUFHLElBQUk7UUFBRSxFQUFFLENBQUMsZUFBZSxDQUFDLGNBQWMsQ0FBQyxDQUFDO0lBRXRHLElBQUksQ0FBQyxFQUFFLENBQUMsVUFBVSxDQUFDLGVBQWUsRUFBRSxNQUFNLENBQUMsSUFBSSxNQUFNLENBQUMsS0FBSyxHQUFHLEtBQUs7UUFBRSxFQUFFLENBQUMsZUFBZSxDQUFDLGVBQWUsQ0FBQyxDQUFDO0FBQzdHLENBQUM7QUFFRCxNQUFNLFVBQVUsaUJBQWlCLENBQUMsRUFBTTtJQUNwQyxhQUFhLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDbEIsS0FBSyxNQUFNLFFBQVEsSUFBSSxRQUFRLENBQUMsRUFBRSxDQUFDLEVBQUU7UUFDakMsWUFBWSxDQUFDLEVBQUUsRUFBRSxRQUFRLENBQUMsQ0FBQztLQUM5QjtBQUNMLENBQUM7QUFFRCxNQUFNLFVBQVUsUUFBUSxDQUFDLEVBQU0sRUFBRSxFQUFVLEVBQUUsTUFBTSxHQUFHLEtBQUssRUFBRSxRQUFRLEdBQUcsS0FBSztJQUN6RSxJQUFJLFFBQVEsR0FBRyxFQUFFLENBQUM7SUFDbEIsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLEdBQUcsQ0FBQyxJQUFJLEdBQUcsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDaEQsUUFBUSxJQUFJLEtBQUssR0FBRyxDQUFDLElBQUksR0FBRyxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUM7SUFDckMsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLEdBQUcsQ0FBQyxJQUFJLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUNuRCxRQUFRLElBQUksT0FBTyxHQUFHLENBQUMsSUFBSSxHQUFHLEVBQUUsQ0FBQyxDQUFDO0lBQ2xDLE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxDQUFDO0lBQzVDLFFBQVEsSUFBSSxPQUFPLEdBQUcsSUFBSSxDQUFDO0lBQzNCLE1BQU0sWUFBWSxHQUFHLFFBQVEsQ0FBQztJQUU5QixJQUFJLE1BQU0sRUFBRTtRQUNSLElBQUksS0FBSyxHQUFHLENBQUMsSUFBSSxRQUFRO1lBQUUsT0FBTyxFQUFFLENBQUMsT0FBTyxDQUFDLHFCQUFxQixFQUFFLEtBQUssRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLFlBQVksQ0FBQyxDQUFDO1FBQzNHLElBQUksT0FBTyxHQUFHLENBQUM7WUFBRSxPQUFPLEVBQUUsQ0FBQyxPQUFPLENBQUMsZ0JBQWdCLEVBQUUsT0FBTyxFQUFFLE9BQU8sRUFBRSxZQUFZLENBQUMsQ0FBQztRQUNyRixPQUFPLEVBQUUsQ0FBQyxPQUFPLENBQUMsV0FBVyxFQUFFLE9BQU8sRUFBRSxZQUFZLENBQUMsQ0FBQztLQUN6RDtTQUFNO1FBQ0gsSUFBSSxLQUFLLEdBQUcsQ0FBQyxJQUFJLFFBQVE7WUFBRSxPQUFPLEVBQUUsQ0FBQyxPQUFPLENBQUMsZ0JBQWdCLEVBQUUsS0FBSyxFQUFFLE9BQU8sRUFBRSxPQUFPLENBQUMsQ0FBQztRQUN4RixJQUFJLE9BQU8sR0FBRyxDQUFDO1lBQUUsT0FBTyxFQUFFLENBQUMsT0FBTyxDQUFDLFdBQVcsRUFBRSxPQUFPLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFDbEUsT0FBTyxFQUFFLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxPQUFPLENBQUMsQ0FBQztLQUN0QztBQUNMLENBQUM7QUFFRCxNQUFNLFVBQVUsU0FBUyxDQUFDLEVBQU0sRUFBRSxNQUFNLEdBQUcsQ0FBQyxFQUFFLE1BQU0sR0FBRyxLQUFLO0lBQ3hELE1BQU0sSUFBSSxHQUFHLElBQUksSUFBSSxDQUFDLElBQUksSUFBSSxFQUFFLENBQUMsT0FBTyxFQUFFLEdBQUcsTUFBTSxDQUFDLENBQUM7SUFFckQsSUFBSSxNQUFNLEVBQUU7UUFDUixNQUFNLEVBQUUsR0FBRyxFQUFFLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsa0JBQWtCLEVBQUUsQ0FBQyxDQUFDO1FBQ3pELE9BQU8sSUFBSSxDQUFDLGtCQUFrQixDQUFDLE9BQU8sQ0FBQyxHQUFHLEdBQUcsR0FBRyxFQUFFLENBQUM7S0FDdEQ7U0FBTTtRQUNILE9BQU8sSUFBSSxDQUFDLGtCQUFrQixDQUFDLE9BQU8sQ0FBQyxDQUFDO0tBQzNDO0FBQ0wsQ0FBQztBQUVELE1BQU0sQ0FBQyxLQUFLLFVBQVUsV0FBVyxDQUFDLEVBQU07SUFDcEMsNklBQTZJO0lBQzdJLDZHQUE2RztJQUM3RyxNQUFNLFdBQVcsR0FBRyxDQUFDLE1BQU0sRUFBRSxhQUFhLEVBQUUsU0FBUyxFQUFFLGNBQWMsRUFBRSxjQUFjLENBQUMsQ0FBQztJQUV2RixNQUFNLEtBQUssR0FBRyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUM7SUFFM0IsS0FBSyxNQUFNLENBQUMsUUFBUSxFQUFFLEtBQUssQ0FBQyxJQUFJLE1BQU0sQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEVBQUU7UUFDbkQsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUN0QyxJQUNJLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUM7WUFDL0IsTUFBTSxDQUFDLGlCQUFpQjtZQUN4QixNQUFNLENBQUMsb0JBQW9CLEdBQUcsRUFBRSxDQUFDLGVBQWUsRUFBRTtZQUNsRCxDQUFDLE1BQU0sQ0FBQyxjQUFjO1lBRXRCLFNBQVM7UUFFYixFQUFFLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ25CLEtBQUssTUFBTSxXQUFXLElBQUksS0FBSyxFQUFFO1lBQzdCLEVBQUUsQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLENBQUM7U0FDM0I7UUFFRCxNQUFNLEVBQUUsQ0FBQyxlQUFlLEVBQUUsQ0FBQztRQUMzQixFQUFFLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0tBQ3RCO0FBQ0wsQ0FBQztBQUVELE1BQU0sVUFBVSxTQUFTLENBQUMsRUFBTTtJQUM1QixFQUFFLENBQUMsVUFBVSxDQUFDLFlBQVksQ0FBQyxDQUFDO0lBQzVCLEVBQUUsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDckIseUJBQXlCO0lBQ3pCLHdCQUF3QjtJQUN4QixtQ0FBbUM7SUFDbkMsMENBQTBDO0lBQzFDLDZDQUE2QztJQUM3QyxxQ0FBcUM7SUFDckMsbUNBQW1DO0lBQ25DLGlEQUFpRDtJQUNqRCx3QkFBd0I7SUFDeEIsMkNBQTJDO0lBQzNDLG9DQUFvQztBQUN4QyxDQUFDO0FBRUQsTUFBTSxDQUFDLE1BQU0sWUFBWSxHQUFHO0lBQ3hCLFlBQVk7SUFDWixVQUFVO0lBQ1YsY0FBYztJQUNkLE9BQU87SUFDUCxVQUFVO0lBQ1Ysc0JBQXNCO0lBQ3RCLGtCQUFrQjtJQUNsQixLQUFLO0lBQ0wscUJBQXFCO0lBQ3JCLHNCQUFzQjtJQUN0QixZQUFZO0lBQ1osd0JBQXdCO0lBQ3hCLDZCQUE2QjtJQUM3QixZQUFZO0lBQ1osZ0JBQWdCO0lBQ2hCLFNBQVM7SUFDVCxPQUFPO0lBQ1AsV0FBVztJQUNYLFFBQVE7SUFDUixXQUFXO0lBQ1gsV0FBVztJQUNYLFVBQVU7SUFDVix1QkFBdUI7SUFDdkIsZUFBZTtJQUNmLGVBQWU7SUFDZixZQUFZO0lBQ1osU0FBUztJQUNULGFBQWE7SUFDYixZQUFZO0lBQ1osYUFBYTtJQUNiLFVBQVU7SUFDVixjQUFjO0lBQ2QsMkJBQTJCO0NBQzlCLENBQUM7QUFFRixNQUFNLENBQUMsS0FBSyxVQUFVLFFBQVEsQ0FDMUIsRUFBTSxFQUNOLElBQXdCLEVBQ3hCLFNBQWlCLEVBQ2pCLE9BQWUsRUFDZixNQUFjLEVBQ2QsUUFBZ0IsRUFDaEIsU0FBaUI7SUFFakIsSUFBSSxJQUFJLENBQUMsU0FBUyxLQUFLLEVBQUUsRUFBRTtRQUN2QixNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsT0FBTyxDQUNyQixzREFBc0QsRUFDdEQsSUFBSSxDQUFDLE1BQU0sRUFDWCxJQUFJLENBQUMsR0FBRyxFQUNSLElBQUksQ0FBQyxPQUFPLEVBQ1osSUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUMsTUFBTSxFQUNoQyxJQUFJLENBQUMsYUFBYSxHQUFHLElBQUksQ0FBQyxNQUFNLEVBQ2hDLElBQUksQ0FBQyxhQUFhLEVBQ2xCLFNBQVMsRUFDVCxPQUFPLEVBQ1AsT0FBTyxHQUFHLFNBQVMsRUFDbkIsU0FBUyxHQUFHLENBQUMsSUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQzlDLE9BQU8sR0FBRyxDQUFDLElBQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUM1QyxPQUFPLEdBQUcsU0FBUyxHQUFHLElBQUksQ0FBQyxhQUFhLEVBQ3hDLE1BQU0sRUFDTixRQUFRLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUNuQixFQUFFLENBQUMsc0JBQXNCLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFDakQsRUFBRSxDQUFDLE9BQU8sQ0FBQyxTQUFTLEVBQUUsV0FBVyxDQUFDLEVBQ2xDLEVBQUUsQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLHVCQUF1QixDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRSxXQUFXLENBQUMsQ0FDbkUsQ0FBQztRQUVGLE9BQU8sQ0FBQyxNQUFNLEVBQUUsQ0FBQyxZQUFZLENBQUMsYUFBYSxDQUFDLGVBQWUsRUFBRSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsTUFBTSxDQUFDLENBQUM7WUFBQyxDQUFDO0tBQzNGO0FBQ0wsQ0FBQyJ9\",\"filename\":\"/lib/util.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":13.25,\"server\":\"microdyne\",\"moduleSequenceNumber\":93249,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"purchaseTor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"purchaseProgram\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"connect\",\"cost\":2},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.stanek.charge(ns.args[0], ns.args[1]);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hhcmdlLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL3N0YW5lay9jaGFyZ2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUM5QixPQUFPLElBQUksRUFBRTtRQUNULE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7S0FDakQ7QUFDTCxDQUFDIn0=\",\"filename\":\"/lib/stanek/charge.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/stanek/charge.js\",\"url\":\"blob:file:///3dc998ce-fb63-42f5-a960-d38295327878\",\"moduleSequenceNumber\":99879}],\"dependents\":[],\"ramUsage\":2,\"server\":\"microdyne\",\"moduleSequenceNumber\":99879,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.charge\",\"cost\":0.4}]}}],\"serversOnNetwork\":[\"zb-def\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":225,\"hackDifficulty\":225,\"minDifficulty\":75,\"moneyAvailable\":508895571,\"moneyMax\":5725075173.75,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":801,\"serverGrowth\":87,\"suppression\":0,\"activeSuppressionThreads\":[],\"suppressionIntervalID\":null,\"suppressionLastUpdateTime\":0}},\"taiyang-digital\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":true,\"ip\":\"67.5.7.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"defcomm\",\"run4theh111z\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":234,\"hackDifficulty\":234,\"minDifficulty\":78,\"moneyAvailable\":638260180.5,\"moneyMax\":7180427030.625,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":939,\"serverGrowth\":76,\"suppression\":0,\"activeSuppressionThreads\":[],\"suppressionIntervalID\":null,\"suppressionLastUpdateTime\":0}},\"galactic-cyber\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":true,\"ip\":\"16.6.0.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"aevum-police\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":180,\"hackDifficulty\":180,\"minDifficulty\":60,\"moneyAvailable\":585452012.25,\"moneyMax\":6586335137.8125,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":854,\"serverGrowth\":89,\"suppression\":0,\"activeSuppressionThreads\":[],\"suppressionIntervalID\":null,\"suppressionLastUpdateTime\":0}},\"aerocorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aerocorp\",\"httpPortOpen\":true,\"ip\":\"91.6.0.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"alpha-ent\",\"deltaone\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":246,\"hackDifficulty\":246,\"minDifficulty\":82,\"moneyAvailable\":781469565.75,\"moneyMax\":8791532614.6875,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":864,\"serverGrowth\":55,\"suppression\":0,\"activeSuppressionThreads\":[],\"suppressionIntervalID\":null,\"suppressionLastUpdateTime\":0}},\"omnia\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omnia\",\"httpPortOpen\":true,\"ip\":\"13.7.3.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.grow(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLElBQUksR0FBdUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFFbkUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDdkIsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7UUFDeEMsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7S0FDM0MsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyJ9\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omnia\",\"moduleSequenceNumber\":93227,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.weaken(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxJQUFJLEdBQXVCLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO0lBRW5FLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFO1FBQ3pCLGtCQUFrQixFQUFFLElBQUksQ0FBQyxlQUFlO1FBQ3hDLGtCQUFrQixFQUFFLElBQUksQ0FBQyxlQUFlO0tBQzNDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///522b20d6-9286-4605-9f93-102cde5814c4\",\"moduleSequenceNumber\":94073}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omnia\",\"moduleSequenceNumber\":94073,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.hack(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLElBQUksR0FBdUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFFbkUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDdkIsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7UUFDeEMsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7S0FDM0MsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyJ9\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"omnia\",\"moduleSequenceNumber\":93231,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export var ReservedPorts;\\r\\n(function (ReservedPorts) {\\r\\n    ReservedPorts[ReservedPorts[\\\"HACKING_INFO\\\"] = 1] = \\\"HACKING_INFO\\\";\\r\\n    ReservedPorts[ReservedPorts[\\\"HACKNET_INFO\\\"] = 2] = \\\"HACKNET_INFO\\\";\\r\\n    ReservedPorts[ReservedPorts[\\\"HACK_WRITE_INFO\\\"] = 3] = \\\"HACK_WRITE_INFO\\\";\\r\\n})(ReservedPorts || (ReservedPorts = {}));\\r\\nexport const WEAKENJS = \\\"/lib/exec/weaken.js\\\";\\r\\nexport const GROWJS = \\\"/lib/exec/grow.js\\\";\\r\\nexport const HACKJS = \\\"/lib/exec/hack.js\\\";\\r\\nexport const UTILJS = \\\"/lib/util.js\\\";\\r\\nexport const CITIES = [\\\"Aevum\\\", \\\"Chongqing\\\", \\\"Sector-12\\\", \\\"New Tokyo\\\", \\\"Ishima\\\", \\\"Volhaven\\\"];\\r\\nexport function llog(ns, str, ...args) {\\r\\n    ns.print(ns.sprintf(\\\"%8s \\\" + str, new Date().toLocaleTimeString(\\\"it-IT\\\"), ...args));\\r\\n}\\r\\nexport function softenServer(ns, hostname) {\\r\\n    if (ns.hasRootAccess(hostname)) {\\r\\n        return;\\r\\n    }\\r\\n    let ports = 0;\\r\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n        ns.brutessh(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n        ns.ftpcrack(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n        ns.httpworm(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n        ns.relaysmtp(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n        ns.sqlinject(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ports >= ns.getServerNumPortsRequired(hostname)) {\\r\\n        ns.nuke(hostname);\\r\\n    }\\r\\n}\\r\\nexport function serverIsHackable(ns, hostname) {\\r\\n    return ns.hasRootAccess(hostname) && ns.getHackingLevel() >= ns.getServerRequiredHackingLevel(hostname);\\r\\n}\\r\\nexport function canExecuteOnServer(ns, hostname) {\\r\\n    return ns.hasRootAccess(hostname) && ns.getServerMaxRam(hostname) > 0;\\r\\n}\\r\\nexport function mapHosts(ns, hosts = {}, parents = [], current = \\\"home\\\") {\\r\\n    const newParents = parents.concat(current);\\r\\n    hosts[current] = newParents;\\r\\n    const children = ns.scan(current).filter((element) => !parents.includes(element));\\r\\n    for (const child of children) {\\r\\n        mapHosts(ns, hosts, newParents, child);\\r\\n    }\\r\\n    return hosts;\\r\\n}\\r\\nexport function allHosts(ns) {\\r\\n    return Object.keys(mapHosts(ns));\\r\\n}\\r\\nexport function doProgramBuys(ns) {\\r\\n    const player = ns.getPlayer();\\r\\n    if (!player.tor && player.money > 200e3)\\r\\n        ns.purchaseTor();\\r\\n    if (!ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\") && player.money > 500e3)\\r\\n        ns.purchaseProgram(\\\"BruteSSH.exe\\\");\\r\\n    if (!ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\") && player.money > 1500e3)\\r\\n        ns.purchaseProgram(\\\"FTPCrack.exe\\\");\\r\\n    if (!ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\") && player.money > 5e6)\\r\\n        ns.purchaseProgram(\\\"relaySMTP.exe\\\");\\r\\n    if (!ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\") && player.money > 30e6)\\r\\n        ns.purchaseProgram(\\\"HTTPWorm.exe\\\");\\r\\n    if (!ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\") && player.money > 250e6)\\r\\n        ns.purchaseProgram(\\\"SQLInject.exe\\\");\\r\\n}\\r\\nexport function doBuyAndSoftenAll(ns) {\\r\\n    doProgramBuys(ns);\\r\\n    for (const hostname of allHosts(ns)) {\\r\\n        softenServer(ns, hostname);\\r\\n    }\\r\\n}\\r\\nexport function stFormat(ns, ms, showms = false, showfull = false) {\\r\\n    let timeLeft = ms;\\r\\n    const hours = Math.floor(ms / (1000 * 60 * 60));\\r\\n    timeLeft -= hours * (1000 * 60 * 60);\\r\\n    const minutes = Math.floor(timeLeft / (1000 * 60));\\r\\n    timeLeft -= minutes * (1000 * 60);\\r\\n    const seconds = Math.floor(timeLeft / 1000);\\r\\n    timeLeft -= seconds * 1000;\\r\\n    const milliseconds = timeLeft;\\r\\n    if (showms) {\\r\\n        if (hours > 0 || showfull)\\r\\n            return ns.sprintf(\\\"%02d:%02d:%02d.%03d\\\", hours, minutes, seconds, milliseconds);\\r\\n        if (minutes > 0)\\r\\n            return ns.sprintf(\\\"%02d:%02d.%03d\\\", minutes, seconds, milliseconds);\\r\\n        return ns.sprintf(\\\"%02d.%03d\\\", seconds, milliseconds);\\r\\n    }\\r\\n    else {\\r\\n        if (hours > 0 || showfull)\\r\\n            return ns.sprintf(\\\"%02d:%02d:%02d\\\", hours, minutes, seconds);\\r\\n        if (minutes > 0)\\r\\n            return ns.sprintf(\\\"%02d:%02d\\\", minutes, seconds);\\r\\n        return ns.sprintf(\\\"%02d\\\", seconds);\\r\\n    }\\r\\n}\\r\\nexport function stdFormat(ns, offset = 0, showms = false) {\\r\\n    const date = new Date(new Date().getTime() + offset);\\r\\n    if (showms) {\\r\\n        const ms = ns.sprintf(\\\"%03d\\\", date.getUTCMilliseconds());\\r\\n        return date.toLocaleTimeString(\\\"it-IT\\\") + \\\".\\\" + ms;\\r\\n    }\\r\\n    else {\\r\\n        return date.toLocaleTimeString(\\\"it-IT\\\");\\r\\n    }\\r\\n}\\r\\nexport async function doBackdoors(ns) {\\r\\n    //const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"w0r1d_d43m0n\\\", \\\"b-and-a\\\", \\\"ecorp\\\", \\\"fulcrumassets\\\", \\\"fulcrumtech\\\"];\\r\\n    //const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"omnitek\\\", \\\"kuai-gong\\\", \\\"megacorp\\\"];\\r\\n    const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"w0r1d_d43m0n\\\"];\\r\\n    const hosts = mapHosts(ns);\\r\\n    for (const [hostName, trail] of Object.entries(hosts)) {\\r\\n        const server = ns.getServer(hostName);\\r\\n        if (!targetHosts.includes(hostName) ||\\r\\n            server.backdoorInstalled ||\\r\\n            server.requiredHackingSkill > ns.getHackingLevel() ||\\r\\n            !server.hasAdminRights)\\r\\n            continue;\\r\\n        ns.print(hostName);\\r\\n        for (const hostHopName of trail) {\\r\\n            ns.connect(hostHopName);\\r\\n        }\\r\\n        await ns.installBackdoor();\\r\\n        ns.connect(\\\"home\\\");\\r\\n    }\\r\\n}\\r\\nexport function cleanLogs(ns) {\\r\\n    ns.disableLog(\\\"disableLog\\\");\\r\\n    ns.disableLog(\\\"ALL\\\");\\r\\n    // ns.disableLog(\\\"sleep\\\")\\r\\n    // ns.disableLog(\\\"exec\\\")\\r\\n    // ns.disableLog(\\\"getServerMaxRam\\\")\\r\\n    // ns.disableLog(\\\"getServerSecurityLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerMinSecurityLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerMaxMoney\\\")\\r\\n    // ns.disableLog(\\\"getHackingLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerRequiredHackingLevel\\\")\\r\\n    // ns.disableLog(\\\"scan\\\")\\r\\n    // ns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n    // ns.disableLog(\\\"getServerUsedRam\\\")\\r\\n}\\r\\nexport const ALL_FACTIONS = [\\r\\n    \\\"Illuminati\\\",\\r\\n    \\\"Daedalus\\\",\\r\\n    \\\"The Covenant\\\",\\r\\n    \\\"ECorp\\\",\\r\\n    \\\"MegaCorp\\\",\\r\\n    \\\"Bachman & Associates\\\",\\r\\n    \\\"Blade Industries\\\",\\r\\n    \\\"NWO\\\",\\r\\n    \\\"Clarke Incorporated\\\",\\r\\n    \\\"OmniTek Incorporated\\\",\\r\\n    \\\"Four Sigma\\\",\\r\\n    \\\"KuaiGong International\\\",\\r\\n    \\\"Fulcrum Secret Technologies\\\",\\r\\n    \\\"BitRunners\\\",\\r\\n    \\\"The Black Hand\\\",\\r\\n    \\\"NiteSec\\\",\\r\\n    \\\"Aevum\\\",\\r\\n    \\\"Chongqing\\\",\\r\\n    \\\"Ishima\\\",\\r\\n    \\\"New Tokyo\\\",\\r\\n    \\\"Sector-12\\\",\\r\\n    \\\"Volhaven\\\",\\r\\n    \\\"Speakers for the Dead\\\",\\r\\n    \\\"The Dark Army\\\",\\r\\n    \\\"The Syndicate\\\",\\r\\n    \\\"Silhouette\\\",\\r\\n    \\\"Tetrads\\\",\\r\\n    \\\"Slum Snakes\\\",\\r\\n    \\\"Netburners\\\",\\r\\n    \\\"Tian Di Hui\\\",\\r\\n    \\\"CyberSec\\\",\\r\\n    \\\"Bladeburners\\\",\\r\\n    \\\"Church of the Machine God\\\",\\r\\n];\\r\\nexport async function writeOut(ns, data, startTime, endTime, result, startSec, startCash) {\\r\\n    if (data.writeFile !== \\\"\\\") {\\r\\n        const outstr = ns.sprintf(\\\"%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\", data.target, data.uid, data.batchId, data.realTimeStart + data.offset, data.realTimeStart + data.finish, data.operationTime, startTime, endTime, endTime - startTime, startTime - (data.realTimeStart + data.offset), endTime - (data.realTimeStart + data.finish), endTime - startTime - data.operationTime, result, startSec.toFixed(2), ns.getServerSecurityLevel(data.target).toFixed(2), ns.nFormat(startCash, \\\"($0.000a)\\\"), ns.nFormat(ns.getServerMoneyAvailable(data.target), \\\"($0.000a)\\\"));\\r\\n        while (!await ns.tryWritePort(ReservedPorts.HACK_WRITE_INFO, [data.writeFile, outstr]))\\r\\n            ;\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi91dGlsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLE1BQU0sQ0FBTixJQUFZLGFBSVg7QUFKRCxXQUFZLGFBQWE7SUFDckIsaUVBQWdCLENBQUE7SUFDaEIsaUVBQVksQ0FBQTtJQUNaLHVFQUFlLENBQUE7QUFDbkIsQ0FBQyxFQUpXLGFBQWEsS0FBYixhQUFhLFFBSXhCO0FBRUQsTUFBTSxDQUFDLE1BQU0sUUFBUSxHQUFHLHFCQUFxQixDQUFDO0FBQzlDLE1BQU0sQ0FBQyxNQUFNLE1BQU0sR0FBRyxtQkFBbUIsQ0FBQztBQUMxQyxNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUcsbUJBQW1CLENBQUM7QUFDMUMsTUFBTSxDQUFDLE1BQU0sTUFBTSxHQUFHLGNBQWMsQ0FBQztBQUVyQyxNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUcsQ0FBQyxPQUFPLEVBQUUsV0FBVyxFQUFFLFdBQVcsRUFBRSxXQUFXLEVBQUUsUUFBUSxFQUFFLFVBQVUsQ0FBQyxDQUFDO0FBRTdGLE1BQU0sVUFBVSxJQUFJLENBQUMsRUFBTSxFQUFFLEdBQVcsRUFBRSxHQUFHLElBQXlCO0lBQ2xFLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEdBQUcsR0FBRyxFQUFFLElBQUksSUFBSSxFQUFFLENBQUMsa0JBQWtCLENBQUMsT0FBTyxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDO0FBQ3hGLENBQUM7QUFFRCxNQUFNLFVBQVUsWUFBWSxDQUFDLEVBQU0sRUFBRSxRQUFnQjtJQUNqRCxJQUFJLEVBQUUsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDNUIsT0FBTztLQUNWO0lBRUQsSUFBSSxLQUFLLEdBQUcsQ0FBQyxDQUFDO0lBQ2QsSUFBSSxFQUFFLENBQUMsVUFBVSxDQUFDLGNBQWMsRUFB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\",\"filename\":\"/lib/util.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":13.25,\"server\":\"omnia\",\"moduleSequenceNumber\":93233,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"purchaseTor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"purchaseProgram\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"connect\",\"cost\":2},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.stanek.charge(ns.args[0], ns.args[1]);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hhcmdlLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL3N0YW5lay9jaGFyZ2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUM5QixPQUFPLElBQUksRUFBRTtRQUNULE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7S0FDakQ7QUFDTCxDQUFDIn0=\",\"filename\":\"/lib/stanek/charge.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/stanek/charge.js\",\"url\":\"blob:file:///042fd480-b307-492b-9986-0ac08c4ca6fb\",\"moduleSequenceNumber\":99872}],\"dependents\":[],\"ramUsage\":2,\"server\":\"omnia\",\"moduleSequenceNumber\":99872,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.charge\",\"cost\":0.4}]}}],\"serversOnNetwork\":[\"global-pharm\",\"icarus\",\"univ-energy\",\"solaris\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":267,\"hackDifficulty\":267,\"minDifficulty\":89,\"moneyAvailable\":731519606.25,\"moneyMax\":8229595570.3125,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":886,\"serverGrowth\":63,\"suppression\":0,\"activeSuppressionThreads\":[],\"suppressionIntervalID\":null,\"suppressionLastUpdateTime\":0}},\"zb-def\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zb-def\",\"httpPortOpen\":true,\"ip\":\"8.4.5.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zeus-med\",\"microdyne\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":177,\"hackDifficulty\":177,\"minDifficulty\":59,\"moneyAvailable\":796540790.25,\"moneyMax\":8961083890.3125,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":818,\"serverGrowth\":72,\"suppression\":0,\"activeSuppressionThreads\":[],\"suppressionIntervalID\":null,\"suppressionLastUpdateTime\":0}},\"applied-energetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"applied-energetics\",\"httpPortOpen\":true,\"ip\":\"28.4.0.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"nova-med\",\"helios\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":213,\"hackDifficulty\":213,\"minDifficulty\":71,\"moneyAvailable\":639112455.75,\"moneyMax\":7190015127.1875,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":848,\"serverGrowth\":74,\"suppression\":0,\"activeSuppressionThreads\":[],\"suppressionIntervalID\":null,\"suppressionLastUpdateTime\":0}},\"solaris\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"solaris\",\"httpPortOpen\":true,\"ip\":\"22.1.5.5\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.grow(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLElBQUksR0FBdUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFFbkUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDdkIsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7UUFDeEMsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7S0FDM0MsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyJ9\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"solaris\",\"moduleSequenceNumber\":93203,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.weaken(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxJQUFJLEdBQXVCLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO0lBRW5FLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFO1FBQ3pCLGtCQUFrQixFQUFFLElBQUksQ0FBQyxlQUFlO1FBQ3hDLGtCQUFrQixFQUFFLElBQUksQ0FBQyxlQUFlO0tBQzNDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///1bee8e3e-a64f-44a4-a4cd-ff388656adf6\",\"moduleSequenceNumber\":94076}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"solaris\",\"moduleSequenceNumber\":94076,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.hack(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLElBQUksR0FBdUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFFbkUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDdkIsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7UUFDeEMsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7S0FDM0MsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyJ9\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"solaris\",\"moduleSequenceNumber\":93207,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export var ReservedPorts;\\r\\n(function (ReservedPorts) {\\r\\n    ReservedPorts[ReservedPorts[\\\"HACKING_INFO\\\"] = 1] = \\\"HACKING_INFO\\\";\\r\\n    ReservedPorts[ReservedPorts[\\\"HACKNET_INFO\\\"] = 2] = \\\"HACKNET_INFO\\\";\\r\\n    ReservedPorts[ReservedPorts[\\\"HACK_WRITE_INFO\\\"] = 3] = \\\"HACK_WRITE_INFO\\\";\\r\\n})(ReservedPorts || (ReservedPorts = {}));\\r\\nexport const WEAKENJS = \\\"/lib/exec/weaken.js\\\";\\r\\nexport const GROWJS = \\\"/lib/exec/grow.js\\\";\\r\\nexport const HACKJS = \\\"/lib/exec/hack.js\\\";\\r\\nexport const UTILJS = \\\"/lib/util.js\\\";\\r\\nexport const CITIES = [\\\"Aevum\\\", \\\"Chongqing\\\", \\\"Sector-12\\\", \\\"New Tokyo\\\", \\\"Ishima\\\", \\\"Volhaven\\\"];\\r\\nexport function llog(ns, str, ...args) {\\r\\n    ns.print(ns.sprintf(\\\"%8s \\\" + str, new Date().toLocaleTimeString(\\\"it-IT\\\"), ...args));\\r\\n}\\r\\nexport function softenServer(ns, hostname) {\\r\\n    if (ns.hasRootAccess(hostname)) {\\r\\n        return;\\r\\n    }\\r\\n    let ports = 0;\\r\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n        ns.brutessh(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n        ns.ftpcrack(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n        ns.httpworm(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n        ns.relaysmtp(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n        ns.sqlinject(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ports >= ns.getServerNumPortsRequired(hostname)) {\\r\\n        ns.nuke(hostname);\\r\\n    }\\r\\n}\\r\\nexport function serverIsHackable(ns, hostname) {\\r\\n    return ns.hasRootAccess(hostname) && ns.getHackingLevel() >= ns.getServerRequiredHackingLevel(hostname);\\r\\n}\\r\\nexport function canExecuteOnServer(ns, hostname) {\\r\\n    return ns.hasRootAccess(hostname) && ns.getServerMaxRam(hostname) > 0;\\r\\n}\\r\\nexport function mapHosts(ns, hosts = {}, parents = [], current = \\\"home\\\") {\\r\\n    const newParents = parents.concat(current);\\r\\n    hosts[current] = newParents;\\r\\n    const children = ns.scan(current).filter((element) => !parents.includes(element));\\r\\n    for (const child of children) {\\r\\n        mapHosts(ns, hosts, newParents, child);\\r\\n    }\\r\\n    return hosts;\\r\\n}\\r\\nexport function allHosts(ns) {\\r\\n    return Object.keys(mapHosts(ns));\\r\\n}\\r\\nexport function doProgramBuys(ns) {\\r\\n    const player = ns.getPlayer();\\r\\n    if (!player.tor && player.money > 200e3)\\r\\n        ns.purchaseTor();\\r\\n    if (!ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\") && player.money > 500e3)\\r\\n        ns.purchaseProgram(\\\"BruteSSH.exe\\\");\\r\\n    if (!ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\") && player.money > 1500e3)\\r\\n        ns.purchaseProgram(\\\"FTPCrack.exe\\\");\\r\\n    if (!ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\") && player.money > 5e6)\\r\\n        ns.purchaseProgram(\\\"relaySMTP.exe\\\");\\r\\n    if (!ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\") && player.money > 30e6)\\r\\n        ns.purchaseProgram(\\\"HTTPWorm.exe\\\");\\r\\n    if (!ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\") && player.money > 250e6)\\r\\n        ns.purchaseProgram(\\\"SQLInject.exe\\\");\\r\\n}\\r\\nexport function doBuyAndSoftenAll(ns) {\\r\\n    doProgramBuys(ns);\\r\\n    for (const hostname of allHosts(ns)) {\\r\\n        softenServer(ns, hostname);\\r\\n    }\\r\\n}\\r\\nexport function stFormat(ns, ms, showms = false, showfull = false) {\\r\\n    let timeLeft = ms;\\r\\n    const hours = Math.floor(ms / (1000 * 60 * 60));\\r\\n    timeLeft -= hours * (1000 * 60 * 60);\\r\\n    const minutes = Math.floor(timeLeft / (1000 * 60));\\r\\n    timeLeft -= minutes * (1000 * 60);\\r\\n    const seconds = Math.floor(timeLeft / 1000);\\r\\n    timeLeft -= seconds * 1000;\\r\\n    const milliseconds = timeLeft;\\r\\n    if (showms) {\\r\\n        if (hours > 0 || showfull)\\r\\n            return ns.sprintf(\\\"%02d:%02d:%02d.%03d\\\", hours, minutes, seconds, milliseconds);\\r\\n        if (minutes > 0)\\r\\n            return ns.sprintf(\\\"%02d:%02d.%03d\\\", minutes, seconds, milliseconds);\\r\\n        return ns.sprintf(\\\"%02d.%03d\\\", seconds, milliseconds);\\r\\n    }\\r\\n    else {\\r\\n        if (hours > 0 || showfull)\\r\\n            return ns.sprintf(\\\"%02d:%02d:%02d\\\", hours, minutes, seconds);\\r\\n        if (minutes > 0)\\r\\n            return ns.sprintf(\\\"%02d:%02d\\\", minutes, seconds);\\r\\n        return ns.sprintf(\\\"%02d\\\", seconds);\\r\\n    }\\r\\n}\\r\\nexport function stdFormat(ns, offset = 0, showms = false) {\\r\\n    const date = new Date(new Date().getTime() + offset);\\r\\n    if (showms) {\\r\\n        const ms = ns.sprintf(\\\"%03d\\\", date.getUTCMilliseconds());\\r\\n        return date.toLocaleTimeString(\\\"it-IT\\\") + \\\".\\\" + ms;\\r\\n    }\\r\\n    else {\\r\\n        return date.toLocaleTimeString(\\\"it-IT\\\");\\r\\n    }\\r\\n}\\r\\nexport async function doBackdoors(ns) {\\r\\n    //const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"w0r1d_d43m0n\\\", \\\"b-and-a\\\", \\\"ecorp\\\", \\\"fulcrumassets\\\", \\\"fulcrumtech\\\"];\\r\\n    //const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"omnitek\\\", \\\"kuai-gong\\\", \\\"megacorp\\\"];\\r\\n    const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"w0r1d_d43m0n\\\"];\\r\\n    const hosts = mapHosts(ns);\\r\\n    for (const [hostName, trail] of Object.entries(hosts)) {\\r\\n        const server = ns.getServer(hostName);\\r\\n        if (!targetHosts.includes(hostName) ||\\r\\n            server.backdoorInstalled ||\\r\\n            server.requiredHackingSkill > ns.getHackingLevel() ||\\r\\n            !server.hasAdminRights)\\r\\n            continue;\\r\\n        ns.print(hostName);\\r\\n        for (const hostHopName of trail) {\\r\\n            ns.connect(hostHopName);\\r\\n        }\\r\\n        await ns.installBackdoor();\\r\\n        ns.connect(\\\"home\\\");\\r\\n    }\\r\\n}\\r\\nexport function cleanLogs(ns) {\\r\\n    ns.disableLog(\\\"disableLog\\\");\\r\\n    ns.disableLog(\\\"ALL\\\");\\r\\n    // ns.disableLog(\\\"sleep\\\")\\r\\n    // ns.disableLog(\\\"exec\\\")\\r\\n    // ns.disableLog(\\\"getServerMaxRam\\\")\\r\\n    // ns.disableLog(\\\"getServerSecurityLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerMinSecurityLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerMaxMoney\\\")\\r\\n    // ns.disableLog(\\\"getHackingLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerRequiredHackingLevel\\\")\\r\\n    // ns.disableLog(\\\"scan\\\")\\r\\n    // ns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n    // ns.disableLog(\\\"getServerUsedRam\\\")\\r\\n}\\r\\nexport const ALL_FACTIONS = [\\r\\n    \\\"Illuminati\\\",\\r\\n    \\\"Daedalus\\\",\\r\\n    \\\"The Covenant\\\",\\r\\n    \\\"ECorp\\\",\\r\\n    \\\"MegaCorp\\\",\\r\\n    \\\"Bachman & Associates\\\",\\r\\n    \\\"Blade Industries\\\",\\r\\n    \\\"NWO\\\",\\r\\n    \\\"Clarke Incorporated\\\",\\r\\n    \\\"OmniTek Incorporated\\\",\\r\\n    \\\"Four Sigma\\\",\\r\\n    \\\"KuaiGong International\\\",\\r\\n    \\\"Fulcrum Secret Technologies\\\",\\r\\n    \\\"BitRunners\\\",\\r\\n    \\\"The Black Hand\\\",\\r\\n    \\\"NiteSec\\\",\\r\\n    \\\"Aevum\\\",\\r\\n    \\\"Chongqing\\\",\\r\\n    \\\"Ishima\\\",\\r\\n    \\\"New Tokyo\\\",\\r\\n    \\\"Sector-12\\\",\\r\\n    \\\"Volhaven\\\",\\r\\n    \\\"Speakers for the Dead\\\",\\r\\n    \\\"The Dark Army\\\",\\r\\n    \\\"The Syndicate\\\",\\r\\n    \\\"Silhouette\\\",\\r\\n    \\\"Tetrads\\\",\\r\\n    \\\"Slum Snakes\\\",\\r\\n    \\\"Netburners\\\",\\r\\n    \\\"Tian Di Hui\\\",\\r\\n    \\\"CyberSec\\\",\\r\\n    \\\"Bladeburners\\\",\\r\\n    \\\"Church of the Machine God\\\",\\r\\n];\\r\\nexport async function writeOut(ns, data, startTime, endTime, result, startSec, startCash) {\\r\\n    if (data.writeFile !== \\\"\\\") {\\r\\n        const outstr = ns.sprintf(\\\"%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\", data.target, data.uid, data.batchId, data.realTimeStart + data.offset, data.realTimeStart + data.finish, data.operationTime, startTime, endTime, endTime - startTime, startTime - (data.realTimeStart + data.offset), endTime - (data.realTimeStart + data.finish), endTime - startTime - data.operationTime, result, startSec.toFixed(2), ns.getServerSecurityLevel(data.target).toFixed(2), ns.nFormat(startCash, \\\"($0.000a)\\\"), ns.nFormat(ns.getServerMoneyAvailable(data.target), \\\"($0.000a)\\\"));\\r\\n        while (!await ns.tryWritePort(ReservedPorts.HACK_WRITE_INFO, [data.writeFile, outstr]))\\r\\n            ;\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi91dGlsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLE1BQU0sQ0FBTixJQUFZLGFBSVg7QUFKRCxXQUFZLGFBQWE7SUFDckIsaUVBQWdCLENBQUE7SUFDaEIsaUVBQVksQ0FBQTtJQUNaLHVFQUFlLENBQUE7QUFDbkIsQ0FBQyxFQUpXLGFBQWEsS0FBYixhQUFhLFFBSXhCO0FBRUQsTUFBTSxDQUFDLE1BQU0sUUFBUSxHQUFHLHFCQUFxQixDQUFDO0FBQzlDLE1BQU0sQ0FBQyxNQUFNLE1BQU0sR0FBRyxtQkFBbUIsQ0FBQztBQUMxQyxNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUcsbUJBQW1CLENBQUM7QUFDMUMsTUFBTSxDQUFDLE1BQU0sTUFBTSxHQUFHLGNBQWMsQ0FBQztBQUVyQyxNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUcsQ0FBQyxPQUFPLEVBQUUsV0FBVyxFQUFFLFdBQVcsRUFBRSxXQUFXLEVBQUUsUUFBUSxFQUFFLFVBQVUsQ0FBQyxDQUFDO0FBRTdGLE1BQU0sVUFBVSxJQUFJLENBQUMsRUFBTSxFQUFFLEdBQVcsRUFBRSxHQUFHLElBQXlCO0lBQ2xFLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEdBQUcsR0FBRyxFQUFFLElBQUksSUFBSSxFQUFFLENBQUMsa0JBQWtCLENBQUMsT0FBTyxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDO0FBQ3hGLENBQUM7QUFFRCxNQUFNLFVBQVUsWUFBWSxDQUFDLEVBQU0sRUFBRSxRQUFnQjtJQUNqRCxJQUFJLEVBQUUsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDNUIsT0FBTztLQUNWO0lBRUQsSUFBSSxLQUFLLEdBQUcsQ0FBQyxDQUFDO0lBQ2QsSUFBSSxFQUFFLENBQUMsVUFBVSxDQUFDLGNBQWMsRUFB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\",\"filename\":\"/lib/util.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":13.25,\"server\":\"solaris\",\"moduleSequenceNumber\":93209,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"purchaseTor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"purchaseProgram\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"connect\",\"cost\":2},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.stanek.charge(ns.args[0], ns.args[1]);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hhcmdlLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL3N0YW5lay9jaGFyZ2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUM5QixPQUFPLElBQUksRUFBRTtRQUNULE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7S0FDakQ7QUFDTCxDQUFDIn0=\",\"filename\":\"/lib/stanek/charge.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/stanek/charge.js\",\"url\":\"blob:file:///9da6290f-bd83-4b98-a724-dcb5fe267230\",\"moduleSequenceNumber\":99876}],\"dependents\":[],\"ramUsage\":2,\"server\":\"solaris\",\"moduleSequenceNumber\":99876,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.charge\",\"cost\":0.4}]}}],\"serversOnNetwork\":[\"omnia\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":228,\"hackDifficulty\":228,\"minDifficulty\":76,\"moneyAvailable\":565378875.75,\"moneyMax\":6360512352.1875,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":778,\"serverGrowth\":71,\"suppression\":0,\"activeSuppressionThreads\":[],\"suppressionIntervalID\":null,\"suppressionLastUpdateTime\":0}},\"deltaone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"deltaone\",\"httpPortOpen\":true,\"ip\":\"12.4.5.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"aerocorp\",\"defcomm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":237,\"hackDifficulty\":237,\"minDifficulty\":79,\"moneyAvailable\":1253353149.75,\"moneyMax\":14100222934.6875,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":811,\"serverGrowth\":66,\"suppression\":0,\"activeSuppressionThreads\":[],\"suppressionIntervalID\":null,\"suppressionLastUpdateTime\":0}},\"global-pharm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"global-pharm\",\"httpPortOpen\":true,\"ip\":\"91.7.8.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.grow(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLElBQUksR0FBdUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFFbkUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDdkIsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7UUFDeEMsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7S0FDM0MsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyJ9\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///1e9350b0-f4d6-4631-90f2-3f8002234f87\",\"moduleSequenceNumber\":86744}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"global-pharm\",\"moduleSequenceNumber\":86744,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.weaken(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxJQUFJLEdBQXVCLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO0lBRW5FLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFO1FBQ3pCLGtCQUFrQixFQUFFLElBQUksQ0FBQyxlQUFlO1FBQ3hDLGtCQUFrQixFQUFFLElBQUksQ0FBQyxlQUFlO0tBQzNDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///117ea4f8-6f5c-4f68-8508-66bed0951517\",\"moduleSequenceNumber\":85598}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"global-pharm\",\"moduleSequenceNumber\":85598,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.hack(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLElBQUksR0FBdUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFFbkUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDdkIsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7UUFDeEMsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7S0FDM0MsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyJ9\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"global-pharm\",\"moduleSequenceNumber\":85565,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export var ReservedPorts;\\r\\n(function (ReservedPorts) {\\r\\n    ReservedPorts[ReservedPorts[\\\"HACKING_INFO\\\"] = 1] = \\\"HACKING_INFO\\\";\\r\\n    ReservedPorts[ReservedPorts[\\\"HACKNET_INFO\\\"] = 2] = \\\"HACKNET_INFO\\\";\\r\\n    ReservedPorts[ReservedPorts[\\\"HACK_WRITE_INFO\\\"] = 3] = \\\"HACK_WRITE_INFO\\\";\\r\\n})(ReservedPorts || (ReservedPorts = {}));\\r\\nexport const WEAKENJS = \\\"/lib/exec/weaken.js\\\";\\r\\nexport const GROWJS = \\\"/lib/exec/grow.js\\\";\\r\\nexport const HACKJS = \\\"/lib/exec/hack.js\\\";\\r\\nexport const UTILJS = \\\"/lib/util.js\\\";\\r\\nexport const CITIES = [\\\"Aevum\\\", \\\"Chongqing\\\", \\\"Sector-12\\\", \\\"New Tokyo\\\", \\\"Ishima\\\", \\\"Volhaven\\\"];\\r\\nexport function llog(ns, str, ...args) {\\r\\n    ns.print(ns.sprintf(\\\"%8s \\\" + str, new Date().toLocaleTimeString(\\\"it-IT\\\"), ...args));\\r\\n}\\r\\nexport function softenServer(ns, hostname) {\\r\\n    if (ns.hasRootAccess(hostname)) {\\r\\n        return;\\r\\n    }\\r\\n    let ports = 0;\\r\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n        ns.brutessh(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n        ns.ftpcrack(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n        ns.httpworm(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n        ns.relaysmtp(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n        ns.sqlinject(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ports >= ns.getServerNumPortsRequired(hostname)) {\\r\\n        ns.nuke(hostname);\\r\\n    }\\r\\n}\\r\\nexport function serverIsHackable(ns, hostname) {\\r\\n    return ns.hasRootAccess(hostname) && ns.getHackingLevel() >= ns.getServerRequiredHackingLevel(hostname);\\r\\n}\\r\\nexport function canExecuteOnServer(ns, hostname) {\\r\\n    return ns.hasRootAccess(hostname) && ns.getServerMaxRam(hostname) > 0;\\r\\n}\\r\\nexport function mapHosts(ns, hosts = {}, parents = [], current = \\\"home\\\") {\\r\\n    const newParents = parents.concat(current);\\r\\n    hosts[current] = newParents;\\r\\n    const children = ns.scan(current).filter((element) => !parents.includes(element));\\r\\n    for (const child of children) {\\r\\n        mapHosts(ns, hosts, newParents, child);\\r\\n    }\\r\\n    return hosts;\\r\\n}\\r\\nexport function allHosts(ns) {\\r\\n    return Object.keys(mapHosts(ns));\\r\\n}\\r\\nexport function doProgramBuys(ns) {\\r\\n    const player = ns.getPlayer();\\r\\n    if (!player.tor && player.money > 200e3)\\r\\n        ns.purchaseTor();\\r\\n    if (!ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\") && player.money > 500e3)\\r\\n        ns.purchaseProgram(\\\"BruteSSH.exe\\\");\\r\\n    if (!ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\") && player.money > 1500e3)\\r\\n        ns.purchaseProgram(\\\"FTPCrack.exe\\\");\\r\\n    if (!ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\") && player.money > 5e6)\\r\\n        ns.purchaseProgram(\\\"relaySMTP.exe\\\");\\r\\n    if (!ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\") && player.money > 30e6)\\r\\n        ns.purchaseProgram(\\\"HTTPWorm.exe\\\");\\r\\n    if (!ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\") && player.money > 250e6)\\r\\n        ns.purchaseProgram(\\\"SQLInject.exe\\\");\\r\\n}\\r\\nexport function doBuyAndSoftenAll(ns) {\\r\\n    doProgramBuys(ns);\\r\\n    for (const hostname of allHosts(ns)) {\\r\\n        softenServer(ns, hostname);\\r\\n    }\\r\\n}\\r\\nexport function stFormat(ns, ms, showms = false, showfull = false) {\\r\\n    let timeLeft = ms;\\r\\n    const hours = Math.floor(ms / (1000 * 60 * 60));\\r\\n    timeLeft -= hours * (1000 * 60 * 60);\\r\\n    const minutes = Math.floor(timeLeft / (1000 * 60));\\r\\n    timeLeft -= minutes * (1000 * 60);\\r\\n    const seconds = Math.floor(timeLeft / 1000);\\r\\n    timeLeft -= seconds * 1000;\\r\\n    const milliseconds = timeLeft;\\r\\n    if (showms) {\\r\\n        if (hours > 0 || showfull)\\r\\n            return ns.sprintf(\\\"%02d:%02d:%02d.%03d\\\", hours, minutes, seconds, milliseconds);\\r\\n        if (minutes > 0)\\r\\n            return ns.sprintf(\\\"%02d:%02d.%03d\\\", minutes, seconds, milliseconds);\\r\\n        return ns.sprintf(\\\"%02d.%03d\\\", seconds, milliseconds);\\r\\n    }\\r\\n    else {\\r\\n        if (hours > 0 || showfull)\\r\\n            return ns.sprintf(\\\"%02d:%02d:%02d\\\", hours, minutes, seconds);\\r\\n        if (minutes > 0)\\r\\n            return ns.sprintf(\\\"%02d:%02d\\\", minutes, seconds);\\r\\n        return ns.sprintf(\\\"%02d\\\", seconds);\\r\\n    }\\r\\n}\\r\\nexport function stdFormat(ns, offset = 0, showms = false) {\\r\\n    const date = new Date(new Date().getTime() + offset);\\r\\n    if (showms) {\\r\\n        const ms = ns.sprintf(\\\"%03d\\\", date.getUTCMilliseconds());\\r\\n        return date.toLocaleTimeString(\\\"it-IT\\\") + \\\".\\\" + ms;\\r\\n    }\\r\\n    else {\\r\\n        return date.toLocaleTimeString(\\\"it-IT\\\");\\r\\n    }\\r\\n}\\r\\nexport async function doBackdoors(ns) {\\r\\n    //const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"w0r1d_d43m0n\\\", \\\"b-and-a\\\", \\\"ecorp\\\", \\\"fulcrumassets\\\", \\\"fulcrumtech\\\"];\\r\\n    //const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"omnitek\\\", \\\"kuai-gong\\\", \\\"megacorp\\\"];\\r\\n    const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"w0r1d_d43m0n\\\"];\\r\\n    const hosts = mapHosts(ns);\\r\\n    for (const [hostName, trail] of Object.entries(hosts)) {\\r\\n        const server = ns.getServer(hostName);\\r\\n        if (!targetHosts.includes(hostName) ||\\r\\n            server.backdoorInstalled ||\\r\\n            server.requiredHackingSkill > ns.getHackingLevel() ||\\r\\n            !server.hasAdminRights)\\r\\n            continue;\\r\\n        ns.print(hostName);\\r\\n        for (const hostHopName of trail) {\\r\\n            ns.connect(hostHopName);\\r\\n        }\\r\\n        await ns.installBackdoor();\\r\\n        ns.connect(\\\"home\\\");\\r\\n    }\\r\\n}\\r\\nexport function cleanLogs(ns) {\\r\\n    ns.disableLog(\\\"disableLog\\\");\\r\\n    ns.disableLog(\\\"ALL\\\");\\r\\n    // ns.disableLog(\\\"sleep\\\")\\r\\n    // ns.disableLog(\\\"exec\\\")\\r\\n    // ns.disableLog(\\\"getServerMaxRam\\\")\\r\\n    // ns.disableLog(\\\"getServerSecurityLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerMinSecurityLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerMaxMoney\\\")\\r\\n    // ns.disableLog(\\\"getHackingLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerRequiredHackingLevel\\\")\\r\\n    // ns.disableLog(\\\"scan\\\")\\r\\n    // ns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n    // ns.disableLog(\\\"getServerUsedRam\\\")\\r\\n}\\r\\nexport const ALL_FACTIONS = [\\r\\n    \\\"Illuminati\\\",\\r\\n    \\\"Daedalus\\\",\\r\\n    \\\"The Covenant\\\",\\r\\n    \\\"ECorp\\\",\\r\\n    \\\"MegaCorp\\\",\\r\\n    \\\"Bachman & Associates\\\",\\r\\n    \\\"Blade Industries\\\",\\r\\n    \\\"NWO\\\",\\r\\n    \\\"Clarke Incorporated\\\",\\r\\n    \\\"OmniTek Incorporated\\\",\\r\\n    \\\"Four Sigma\\\",\\r\\n    \\\"KuaiGong International\\\",\\r\\n    \\\"Fulcrum Secret Technologies\\\",\\r\\n    \\\"BitRunners\\\",\\r\\n    \\\"The Black Hand\\\",\\r\\n    \\\"NiteSec\\\",\\r\\n    \\\"Aevum\\\",\\r\\n    \\\"Chongqing\\\",\\r\\n    \\\"Ishima\\\",\\r\\n    \\\"New Tokyo\\\",\\r\\n    \\\"Sector-12\\\",\\r\\n    \\\"Volhaven\\\",\\r\\n    \\\"Speakers for the Dead\\\",\\r\\n    \\\"The Dark Army\\\",\\r\\n    \\\"The Syndicate\\\",\\r\\n    \\\"Silhouette\\\",\\r\\n    \\\"Tetrads\\\",\\r\\n    \\\"Slum Snakes\\\",\\r\\n    \\\"Netburners\\\",\\r\\n    \\\"Tian Di Hui\\\",\\r\\n    \\\"CyberSec\\\",\\r\\n    \\\"Bladeburners\\\",\\r\\n    \\\"Church of the Machine God\\\",\\r\\n];\\r\\nexport async function writeOut(ns, data, startTime, endTime, result, startSec, startCash) {\\r\\n    if (data.writeFile !== \\\"\\\") {\\r\\n        const outstr = ns.sprintf(\\\"%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\", data.target, data.uid, data.batchId, data.realTimeStart + data.offset, data.realTimeStart + data.finish, data.operationTime, startTime, endTime, endTime - startTime, startTime - (data.realTimeStart + data.offset), endTime - (data.realTimeStart + data.finish), endTime - startTime - data.operationTime, result, startSec.toFixed(2), ns.getServerSecurityLevel(data.target).toFixed(2), ns.nFormat(startCash, \\\"($0.000a)\\\"), ns.nFormat(ns.getServerMoneyAvailable(data.target), \\\"($0.000a)\\\"));\\r\\n        while (!await ns.tryWritePort(ReservedPorts.HACK_WRITE_INFO, [data.writeFile, outstr]))\\r\\n            ;\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi91dGlsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLE1BQU0sQ0FBTixJQUFZLGFBSVg7QUFKRCxXQUFZLGFBQWE7SUFDckIsaUVBQWdCLENBQUE7SUFDaEIsaUVBQVksQ0FBQTtJQUNaLHVFQUFlLENBQUE7QUFDbkIsQ0FBQyxFQUpXLGFBQWEsS0FBYixhQUFhLFFBSXhCO0FBRUQsTUFBTSxDQUFDLE1BQU0sUUFBUSxHQUFHLHFCQUFxQixDQUFDO0FBQzlDLE1BQU0sQ0FBQyxNQUFNLE1BQU0sR0FBRyxtQkFBbUIsQ0FBQztBQUMxQyxNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUcsbUJBQW1CLENBQUM7QUFDMUMsTUFBTSxDQUFDLE1BQU0sTUFBTSxHQUFHLGNBQWMsQ0FBQztBQUVyQyxNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUcsQ0FBQyxPQUFPLEVBQUUsV0FBVyxFQUFFLFdBQVcsRUFBRSxXQUFXLEVBQUUsUUFBUSxFQUFFLFVBQVUsQ0FBQyxDQUFDO0FBRTdGLE1BQU0sVUFBVSxJQUFJLENBQUMsRUFBTSxFQUFFLEdBQVcsRUFBRSxHQUFHLElBQXlCO0lBQ2xFLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEdBQUcsR0FBRyxFQUFFLElBQUksSUFBSSxFQUFFLENBQUMsa0JBQWtCLENBQUMsT0FBTyxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDO0FBQ3hGLENBQUM7QUFFRCxNQUFNLFVBQVUsWUFBWSxDQUFDLEVBQU0sRUFBRSxRQUFnQjtJQUNqRCxJQUFJLEVBQUUsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDNUIsT0FBTztLQUNWO0lBRUQsSUFBSSxLQUFLLEdBQUcsQ0FBQyxDQUFDO0lBQ2QsSUFBSSxFQUFFLENBQUMsVUFBVSxDQUFDLGNBQWMsRUFB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\",\"filename\":\"/lib/util.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":13.25,\"server\":\"global-pharm\",\"moduleSequenceNumber\":85567,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"purchaseTor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"purchaseProgram\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"connect\",\"cost\":2},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.stanek.charge(ns.args[0], ns.args[1]);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hhcmdlLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL3N0YW5lay9jaGFyZ2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUM5QixPQUFPLElBQUksRUFBRTtRQUNULE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7S0FDakQ7QUFDTCxDQUFDIn0=\",\"filename\":\"/lib/stanek/charge.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/stanek/charge.js\",\"url\":\"blob:file:///4d93873b-2b3c-4e7e-a00c-d60a2988d9bd\",\"moduleSequenceNumber\":99871}],\"dependents\":[],\"ramUsage\":2,\"server\":\"global-pharm\",\"moduleSequenceNumber\":99871,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.charge\",\"cost\":0.4}]}}],\"serversOnNetwork\":[\"alpha-ent\",\"omnia\",\"unitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":237,\"hackDifficulty\":237,\"minDifficulty\":79,\"moneyAvailable\":1168814867.25,\"moneyMax\":13149167256.5625,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":786,\"serverGrowth\":90,\"suppression\":0,\"activeSuppressionThreads\":[],\"suppressionIntervalID\":null,\"suppressionLastUpdateTime\":0}},\"nova-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nova-med\",\"httpPortOpen\":true,\"ip\":\"89.5.7.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"icarus\",\"applied-energetics\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":237,\"hackDifficulty\":237,\"minDifficulty\":79,\"moneyAvailable\":919844157.75,\"moneyMax\":10348246774.6875,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":785,\"serverGrowth\":66,\"suppression\":0,\"activeSuppressionThreads\":[],\"suppressionIntervalID\":null,\"suppressionLastUpdateTime\":0}},\"zeus-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zeus-med\",\"httpPortOpen\":true,\"ip\":\"71.7.6.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"unitalife\",\"zb-def\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":267,\"hackDifficulty\":267,\"minDifficulty\":89,\"moneyAvailable\":1093356747.75,\"moneyMax\":12300263412.1875,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":849,\"serverGrowth\":79,\"suppression\":0,\"activeSuppressionThreads\":[],\"suppressionIntervalID\":null,\"suppressionLastUpdateTime\":0}},\"unitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"unitalife\",\"httpPortOpen\":true,\"ip\":\"22.1.4.9\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.grow(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLElBQUksR0FBdUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFFbkUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDdkIsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7UUFDeEMsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7S0FDM0MsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyJ9\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///7728f4ff-7172-4511-a008-460ff24499dd\",\"moduleSequenceNumber\":86747}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"unitalife\",\"moduleSequenceNumber\":86747,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.weaken(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxJQUFJLEdBQXVCLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO0lBRW5FLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFO1FBQ3pCLGtCQUFrQixFQUFFLElBQUksQ0FBQyxlQUFlO1FBQ3hDLGtCQUFrQixFQUFFLElBQUksQ0FBQyxlQUFlO0tBQzNDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///f256bd45-826c-4938-9e6c-08b51d85b20e\",\"moduleSequenceNumber\":85600}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"unitalife\",\"moduleSequenceNumber\":85600,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.hack(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLElBQUksR0FBdUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFFbkUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDdkIsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7UUFDeEMsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7S0FDM0MsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyJ9\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"unitalife\",\"moduleSequenceNumber\":85549,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export var ReservedPorts;\\r\\n(function (ReservedPorts) {\\r\\n    ReservedPorts[ReservedPorts[\\\"HACKING_INFO\\\"] = 1] = \\\"HACKING_INFO\\\";\\r\\n    ReservedPorts[ReservedPorts[\\\"HACKNET_INFO\\\"] = 2] = \\\"HACKNET_INFO\\\";\\r\\n    ReservedPorts[ReservedPorts[\\\"HACK_WRITE_INFO\\\"] = 3] = \\\"HACK_WRITE_INFO\\\";\\r\\n})(ReservedPorts || (ReservedPorts = {}));\\r\\nexport const WEAKENJS = \\\"/lib/exec/weaken.js\\\";\\r\\nexport const GROWJS = \\\"/lib/exec/grow.js\\\";\\r\\nexport const HACKJS = \\\"/lib/exec/hack.js\\\";\\r\\nexport const UTILJS = \\\"/lib/util.js\\\";\\r\\nexport const CITIES = [\\\"Aevum\\\", \\\"Chongqing\\\", \\\"Sector-12\\\", \\\"New Tokyo\\\", \\\"Ishima\\\", \\\"Volhaven\\\"];\\r\\nexport function llog(ns, str, ...args) {\\r\\n    ns.print(ns.sprintf(\\\"%8s \\\" + str, new Date().toLocaleTimeString(\\\"it-IT\\\"), ...args));\\r\\n}\\r\\nexport function softenServer(ns, hostname) {\\r\\n    if (ns.hasRootAccess(hostname)) {\\r\\n        return;\\r\\n    }\\r\\n    let ports = 0;\\r\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n        ns.brutessh(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n        ns.ftpcrack(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n        ns.httpworm(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n        ns.relaysmtp(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n        ns.sqlinject(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ports >= ns.getServerNumPortsRequired(hostname)) {\\r\\n        ns.nuke(hostname);\\r\\n    }\\r\\n}\\r\\nexport function serverIsHackable(ns, hostname) {\\r\\n    return ns.hasRootAccess(hostname) && ns.getHackingLevel() >= ns.getServerRequiredHackingLevel(hostname);\\r\\n}\\r\\nexport function canExecuteOnServer(ns, hostname) {\\r\\n    return ns.hasRootAccess(hostname) && ns.getServerMaxRam(hostname) > 0;\\r\\n}\\r\\nexport function mapHosts(ns, hosts = {}, parents = [], current = \\\"home\\\") {\\r\\n    const newParents = parents.concat(current);\\r\\n    hosts[current] = newParents;\\r\\n    const children = ns.scan(current).filter((element) => !parents.includes(element));\\r\\n    for (const child of children) {\\r\\n        mapHosts(ns, hosts, newParents, child);\\r\\n    }\\r\\n    return hosts;\\r\\n}\\r\\nexport function allHosts(ns) {\\r\\n    return Object.keys(mapHosts(ns));\\r\\n}\\r\\nexport function doProgramBuys(ns) {\\r\\n    const player = ns.getPlayer();\\r\\n    if (!player.tor && player.money > 200e3)\\r\\n        ns.purchaseTor();\\r\\n    if (!ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\") && player.money > 500e3)\\r\\n        ns.purchaseProgram(\\\"BruteSSH.exe\\\");\\r\\n    if (!ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\") && player.money > 1500e3)\\r\\n        ns.purchaseProgram(\\\"FTPCrack.exe\\\");\\r\\n    if (!ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\") && player.money > 5e6)\\r\\n        ns.purchaseProgram(\\\"relaySMTP.exe\\\");\\r\\n    if (!ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\") && player.money > 30e6)\\r\\n        ns.purchaseProgram(\\\"HTTPWorm.exe\\\");\\r\\n    if (!ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\") && player.money > 250e6)\\r\\n        ns.purchaseProgram(\\\"SQLInject.exe\\\");\\r\\n}\\r\\nexport function doBuyAndSoftenAll(ns) {\\r\\n    doProgramBuys(ns);\\r\\n    for (const hostname of allHosts(ns)) {\\r\\n        softenServer(ns, hostname);\\r\\n    }\\r\\n}\\r\\nexport function stFormat(ns, ms, showms = false, showfull = false) {\\r\\n    let timeLeft = ms;\\r\\n    const hours = Math.floor(ms / (1000 * 60 * 60));\\r\\n    timeLeft -= hours * (1000 * 60 * 60);\\r\\n    const minutes = Math.floor(timeLeft / (1000 * 60));\\r\\n    timeLeft -= minutes * (1000 * 60);\\r\\n    const seconds = Math.floor(timeLeft / 1000);\\r\\n    timeLeft -= seconds * 1000;\\r\\n    const milliseconds = timeLeft;\\r\\n    if (showms) {\\r\\n        if (hours > 0 || showfull)\\r\\n            return ns.sprintf(\\\"%02d:%02d:%02d.%03d\\\", hours, minutes, seconds, milliseconds);\\r\\n        if (minutes > 0)\\r\\n            return ns.sprintf(\\\"%02d:%02d.%03d\\\", minutes, seconds, milliseconds);\\r\\n        return ns.sprintf(\\\"%02d.%03d\\\", seconds, milliseconds);\\r\\n    }\\r\\n    else {\\r\\n        if (hours > 0 || showfull)\\r\\n            return ns.sprintf(\\\"%02d:%02d:%02d\\\", hours, minutes, seconds);\\r\\n        if (minutes > 0)\\r\\n            return ns.sprintf(\\\"%02d:%02d\\\", minutes, seconds);\\r\\n        return ns.sprintf(\\\"%02d\\\", seconds);\\r\\n    }\\r\\n}\\r\\nexport function stdFormat(ns, offset = 0, showms = false) {\\r\\n    const date = new Date(new Date().getTime() + offset);\\r\\n    if (showms) {\\r\\n        const ms = ns.sprintf(\\\"%03d\\\", date.getUTCMilliseconds());\\r\\n        return date.toLocaleTimeString(\\\"it-IT\\\") + \\\".\\\" + ms;\\r\\n    }\\r\\n    else {\\r\\n        return date.toLocaleTimeString(\\\"it-IT\\\");\\r\\n    }\\r\\n}\\r\\nexport async function doBackdoors(ns) {\\r\\n    //const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"w0r1d_d43m0n\\\", \\\"b-and-a\\\", \\\"ecorp\\\", \\\"fulcrumassets\\\", \\\"fulcrumtech\\\"];\\r\\n    //const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"omnitek\\\", \\\"kuai-gong\\\", \\\"megacorp\\\"];\\r\\n    const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"w0r1d_d43m0n\\\"];\\r\\n    const hosts = mapHosts(ns);\\r\\n    for (const [hostName, trail] of Object.entries(hosts)) {\\r\\n        const server = ns.getServer(hostName);\\r\\n        if (!targetHosts.includes(hostName) ||\\r\\n            server.backdoorInstalled ||\\r\\n            server.requiredHackingSkill > ns.getHackingLevel() ||\\r\\n            !server.hasAdminRights)\\r\\n            continue;\\r\\n        ns.print(hostName);\\r\\n        for (const hostHopName of trail) {\\r\\n            ns.connect(hostHopName);\\r\\n        }\\r\\n        await ns.installBackdoor();\\r\\n        ns.connect(\\\"home\\\");\\r\\n    }\\r\\n}\\r\\nexport function cleanLogs(ns) {\\r\\n    ns.disableLog(\\\"disableLog\\\");\\r\\n    ns.disableLog(\\\"ALL\\\");\\r\\n    // ns.disableLog(\\\"sleep\\\")\\r\\n    // ns.disableLog(\\\"exec\\\")\\r\\n    // ns.disableLog(\\\"getServerMaxRam\\\")\\r\\n    // ns.disableLog(\\\"getServerSecurityLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerMinSecurityLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerMaxMoney\\\")\\r\\n    // ns.disableLog(\\\"getHackingLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerRequiredHackingLevel\\\")\\r\\n    // ns.disableLog(\\\"scan\\\")\\r\\n    // ns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n    // ns.disableLog(\\\"getServerUsedRam\\\")\\r\\n}\\r\\nexport const ALL_FACTIONS = [\\r\\n    \\\"Illuminati\\\",\\r\\n    \\\"Daedalus\\\",\\r\\n    \\\"The Covenant\\\",\\r\\n    \\\"ECorp\\\",\\r\\n    \\\"MegaCorp\\\",\\r\\n    \\\"Bachman & Associates\\\",\\r\\n    \\\"Blade Industries\\\",\\r\\n    \\\"NWO\\\",\\r\\n    \\\"Clarke Incorporated\\\",\\r\\n    \\\"OmniTek Incorporated\\\",\\r\\n    \\\"Four Sigma\\\",\\r\\n    \\\"KuaiGong International\\\",\\r\\n    \\\"Fulcrum Secret Technologies\\\",\\r\\n    \\\"BitRunners\\\",\\r\\n    \\\"The Black Hand\\\",\\r\\n    \\\"NiteSec\\\",\\r\\n    \\\"Aevum\\\",\\r\\n    \\\"Chongqing\\\",\\r\\n    \\\"Ishima\\\",\\r\\n    \\\"New Tokyo\\\",\\r\\n    \\\"Sector-12\\\",\\r\\n    \\\"Volhaven\\\",\\r\\n    \\\"Speakers for the Dead\\\",\\r\\n    \\\"The Dark Army\\\",\\r\\n    \\\"The Syndicate\\\",\\r\\n    \\\"Silhouette\\\",\\r\\n    \\\"Tetrads\\\",\\r\\n    \\\"Slum Snakes\\\",\\r\\n    \\\"Netburners\\\",\\r\\n    \\\"Tian Di Hui\\\",\\r\\n    \\\"CyberSec\\\",\\r\\n    \\\"Bladeburners\\\",\\r\\n    \\\"Church of the Machine God\\\",\\r\\n];\\r\\nexport async function writeOut(ns, data, startTime, endTime, result, startSec, startCash) {\\r\\n    if (data.writeFile !== \\\"\\\") {\\r\\n        const outstr = ns.sprintf(\\\"%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\", data.target, data.uid, data.batchId, data.realTimeStart + data.offset, data.realTimeStart + data.finish, data.operationTime, startTime, endTime, endTime - startTime, startTime - (data.realTimeStart + data.offset), endTime - (data.realTimeStart + data.finish), endTime - startTime - data.operationTime, result, startSec.toFixed(2), ns.getServerSecurityLevel(data.target).toFixed(2), ns.nFormat(startCash, \\\"($0.000a)\\\"), ns.nFormat(ns.getServerMoneyAvailable(data.target), \\\"($0.000a)\\\"));\\r\\n        while (!await ns.tryWritePort(ReservedPorts.HACK_WRITE_INFO, [data.writeFile, outstr]))\\r\\n            ;\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi91dGlsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLE1BQU0sQ0FBTixJQUFZLGFBSVg7QUFKRCxXQUFZLGFBQWE7SUFDckIsaUVBQWdCLENBQUE7SUFDaEIsaUVBQVksQ0FBQTtJQUNaLHVFQUFlLENBQUE7QUFDbkIsQ0FBQyxFQUpXLGFBQWEsS0FBYixhQUFhLFFBSXhCO0FBRUQsTUFBTSxDQUFDLE1BQU0sUUFBUSxHQUFHLHFCQUFxQixDQUFDO0FBQzlDLE1BQU0sQ0FBQyxNQUFNLE1BQU0sR0FBRyxtQkFBbUIsQ0FBQztBQUMxQyxNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUcsbUJBQW1CLENBQUM7QUFDMUMsTUFBTSxDQUFDLE1BQU0sTUFBTSxHQUFHLGNBQWMsQ0FBQztBQUVyQyxNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUcsQ0FBQyxPQUFPLEVBQUUsV0FBVyxFQUFFLFdBQVcsRUFBRSxXQUFXLEVBQUUsUUFBUSxFQUFFLFVBQVUsQ0FBQyxDQUFDO0FBRTdGLE1BQU0sVUFBVSxJQUFJLENBQUMsRUFBTSxFQUFFLEdBQVcsRUFBRSxHQUFHLElBQXlCO0lBQ2xFLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEdBQUcsR0FBRyxFQUFFLElBQUksSUFBSSxFQUFFLENBQUMsa0JBQWtCLENBQUMsT0FBTyxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDO0FBQ3hGLENBQUM7QUFFRCxNQUFNLFVBQVUsWUFBWSxDQUFDLEVBQU0sRUFBRSxRQUFnQjtJQUNqRCxJQUFJLEVBQUUsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDNUIsT0FBTztLQUNWO0lBRUQsSUFBSSxLQUFLLEdBQUcsQ0FBQyxDQUFDO0lBQ2QsSUFBSSxFQUFFLENBQUMsVUFBVSxDQUFDLGNBQWMsRUFB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\",\"filename\":\"/lib/util.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":13.25,\"server\":\"unitalife\",\"moduleSequenceNumber\":85551,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"purchaseTor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"purchaseProgram\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"connect\",\"cost\":2},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.stanek.charge(ns.args[0], ns.args[1]);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hhcmdlLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL3N0YW5lay9jaGFyZ2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUM5QixPQUFPLElBQUksRUFBRTtRQUNULE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7S0FDakQ7QUFDTCxDQUFDIn0=\",\"filename\":\"/lib/stanek/charge.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/stanek/charge.js\",\"url\":\"blob:file:///60c285f6-031e-4a80-83bd-705a22ad448b\",\"moduleSequenceNumber\":99878}],\"dependents\":[],\"ramUsage\":2,\"server\":\"unitalife\",\"moduleSequenceNumber\":99878,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.charge\",\"cost\":0.4}]}}],\"serversOnNetwork\":[\"global-pharm\",\"zeus-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":219,\"hackDifficulty\":219,\"minDifficulty\":73,\"moneyAvailable\":810732627.75,\"moneyMax\":9120742062.1875,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":825,\"serverGrowth\":72,\"suppression\":0,\"activeSuppressionThreads\":[],\"suppressionIntervalID\":null,\"suppressionLastUpdateTime\":0}},\"lexo-corp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lexo-corp\",\"httpPortOpen\":true,\"ip\":\"71.4.3.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.grow(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLElBQUksR0FBdUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFFbkUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDdkIsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7UUFDeEMsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7S0FDM0MsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyJ9\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":85585,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.weaken(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxJQUFJLEdBQXVCLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO0lBRW5FLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFO1FBQ3pCLGtCQUFrQixFQUFFLElBQUksQ0FBQyxlQUFlO1FBQ3hDLGtCQUFrQixFQUFFLElBQUksQ0FBQyxlQUFlO0tBQzNDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///f7ef9cf9-f5f3-47d0-81a2-871b1bc0e17d\",\"moduleSequenceNumber\":85592}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":85592,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.hack(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLElBQUksR0FBdUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFFbkUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDdkIsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7UUFDeEMsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7S0FDM0MsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyJ9\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":85589,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export var ReservedPorts;\\r\\n(function (ReservedPorts) {\\r\\n    ReservedPorts[ReservedPorts[\\\"HACKING_INFO\\\"] = 1] = \\\"HACKING_INFO\\\";\\r\\n    ReservedPorts[ReservedPorts[\\\"HACKNET_INFO\\\"] = 2] = \\\"HACKNET_INFO\\\";\\r\\n    ReservedPorts[ReservedPorts[\\\"HACK_WRITE_INFO\\\"] = 3] = \\\"HACK_WRITE_INFO\\\";\\r\\n})(ReservedPorts || (ReservedPorts = {}));\\r\\nexport const WEAKENJS = \\\"/lib/exec/weaken.js\\\";\\r\\nexport const GROWJS = \\\"/lib/exec/grow.js\\\";\\r\\nexport const HACKJS = \\\"/lib/exec/hack.js\\\";\\r\\nexport const UTILJS = \\\"/lib/util.js\\\";\\r\\nexport const CITIES = [\\\"Aevum\\\", \\\"Chongqing\\\", \\\"Sector-12\\\", \\\"New Tokyo\\\", \\\"Ishima\\\", \\\"Volhaven\\\"];\\r\\nexport function llog(ns, str, ...args) {\\r\\n    ns.print(ns.sprintf(\\\"%8s \\\" + str, new Date().toLocaleTimeString(\\\"it-IT\\\"), ...args));\\r\\n}\\r\\nexport function softenServer(ns, hostname) {\\r\\n    if (ns.hasRootAccess(hostname)) {\\r\\n        return;\\r\\n    }\\r\\n    let ports = 0;\\r\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n        ns.brutessh(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n        ns.ftpcrack(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n        ns.httpworm(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n        ns.relaysmtp(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n        ns.sqlinject(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ports >= ns.getServerNumPortsRequired(hostname)) {\\r\\n        ns.nuke(hostname);\\r\\n    }\\r\\n}\\r\\nexport function serverIsHackable(ns, hostname) {\\r\\n    return ns.hasRootAccess(hostname) && ns.getHackingLevel() >= ns.getServerRequiredHackingLevel(hostname);\\r\\n}\\r\\nexport function canExecuteOnServer(ns, hostname) {\\r\\n    return ns.hasRootAccess(hostname) && ns.getServerMaxRam(hostname) > 0;\\r\\n}\\r\\nexport function mapHosts(ns, hosts = {}, parents = [], current = \\\"home\\\") {\\r\\n    const newParents = parents.concat(current);\\r\\n    hosts[current] = newParents;\\r\\n    const children = ns.scan(current).filter((element) => !parents.includes(element));\\r\\n    for (const child of children) {\\r\\n        mapHosts(ns, hosts, newParents, child);\\r\\n    }\\r\\n    return hosts;\\r\\n}\\r\\nexport function allHosts(ns) {\\r\\n    return Object.keys(mapHosts(ns));\\r\\n}\\r\\nexport function doProgramBuys(ns) {\\r\\n    const player = ns.getPlayer();\\r\\n    if (!player.tor && player.money > 200e3)\\r\\n        ns.purchaseTor();\\r\\n    if (!ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\") && player.money > 500e3)\\r\\n        ns.purchaseProgram(\\\"BruteSSH.exe\\\");\\r\\n    if (!ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\") && player.money > 1500e3)\\r\\n        ns.purchaseProgram(\\\"FTPCrack.exe\\\");\\r\\n    if (!ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\") && player.money > 5e6)\\r\\n        ns.purchaseProgram(\\\"relaySMTP.exe\\\");\\r\\n    if (!ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\") && player.money > 30e6)\\r\\n        ns.purchaseProgram(\\\"HTTPWorm.exe\\\");\\r\\n    if (!ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\") && player.money > 250e6)\\r\\n        ns.purchaseProgram(\\\"SQLInject.exe\\\");\\r\\n}\\r\\nexport function doBuyAndSoftenAll(ns) {\\r\\n    doProgramBuys(ns);\\r\\n    for (const hostname of allHosts(ns)) {\\r\\n        softenServer(ns, hostname);\\r\\n    }\\r\\n}\\r\\nexport function stFormat(ns, ms, showms = false, showfull = false) {\\r\\n    let timeLeft = ms;\\r\\n    const hours = Math.floor(ms / (1000 * 60 * 60));\\r\\n    timeLeft -= hours * (1000 * 60 * 60);\\r\\n    const minutes = Math.floor(timeLeft / (1000 * 60));\\r\\n    timeLeft -= minutes * (1000 * 60);\\r\\n    const seconds = Math.floor(timeLeft / 1000);\\r\\n    timeLeft -= seconds * 1000;\\r\\n    const milliseconds = timeLeft;\\r\\n    if (showms) {\\r\\n        if (hours > 0 || showfull)\\r\\n            return ns.sprintf(\\\"%02d:%02d:%02d.%03d\\\", hours, minutes, seconds, milliseconds);\\r\\n        if (minutes > 0)\\r\\n            return ns.sprintf(\\\"%02d:%02d.%03d\\\", minutes, seconds, milliseconds);\\r\\n        return ns.sprintf(\\\"%02d.%03d\\\", seconds, milliseconds);\\r\\n    }\\r\\n    else {\\r\\n        if (hours > 0 || showfull)\\r\\n            return ns.sprintf(\\\"%02d:%02d:%02d\\\", hours, minutes, seconds);\\r\\n        if (minutes > 0)\\r\\n            return ns.sprintf(\\\"%02d:%02d\\\", minutes, seconds);\\r\\n        return ns.sprintf(\\\"%02d\\\", seconds);\\r\\n    }\\r\\n}\\r\\nexport function stdFormat(ns, offset = 0, showms = false) {\\r\\n    const date = new Date(new Date().getTime() + offset);\\r\\n    if (showms) {\\r\\n        const ms = ns.sprintf(\\\"%03d\\\", date.getUTCMilliseconds());\\r\\n        return date.toLocaleTimeString(\\\"it-IT\\\") + \\\".\\\" + ms;\\r\\n    }\\r\\n    else {\\r\\n        return date.toLocaleTimeString(\\\"it-IT\\\");\\r\\n    }\\r\\n}\\r\\nexport async function doBackdoors(ns) {\\r\\n    //const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"w0r1d_d43m0n\\\", \\\"b-and-a\\\", \\\"ecorp\\\", \\\"fulcrumassets\\\", \\\"fulcrumtech\\\"];\\r\\n    //const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"omnitek\\\", \\\"kuai-gong\\\", \\\"megacorp\\\"];\\r\\n    const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"w0r1d_d43m0n\\\"];\\r\\n    const hosts = mapHosts(ns);\\r\\n    for (const [hostName, trail] of Object.entries(hosts)) {\\r\\n        const server = ns.getServer(hostName);\\r\\n        if (!targetHosts.includes(hostName) ||\\r\\n            server.backdoorInstalled ||\\r\\n            server.requiredHackingSkill > ns.getHackingLevel() ||\\r\\n            !server.hasAdminRights)\\r\\n            continue;\\r\\n        ns.print(hostName);\\r\\n        for (const hostHopName of trail) {\\r\\n            ns.connect(hostHopName);\\r\\n        }\\r\\n        await ns.installBackdoor();\\r\\n        ns.connect(\\\"home\\\");\\r\\n    }\\r\\n}\\r\\nexport function cleanLogs(ns) {\\r\\n    ns.disableLog(\\\"disableLog\\\");\\r\\n    ns.disableLog(\\\"ALL\\\");\\r\\n    // ns.disableLog(\\\"sleep\\\")\\r\\n    // ns.disableLog(\\\"exec\\\")\\r\\n    // ns.disableLog(\\\"getServerMaxRam\\\")\\r\\n    // ns.disableLog(\\\"getServerSecurityLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerMinSecurityLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerMaxMoney\\\")\\r\\n    // ns.disableLog(\\\"getHackingLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerRequiredHackingLevel\\\")\\r\\n    // ns.disableLog(\\\"scan\\\")\\r\\n    // ns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n    // ns.disableLog(\\\"getServerUsedRam\\\")\\r\\n}\\r\\nexport const ALL_FACTIONS = [\\r\\n    \\\"Illuminati\\\",\\r\\n    \\\"Daedalus\\\",\\r\\n    \\\"The Covenant\\\",\\r\\n    \\\"ECorp\\\",\\r\\n    \\\"MegaCorp\\\",\\r\\n    \\\"Bachman & Associates\\\",\\r\\n    \\\"Blade Industries\\\",\\r\\n    \\\"NWO\\\",\\r\\n    \\\"Clarke Incorporated\\\",\\r\\n    \\\"OmniTek Incorporated\\\",\\r\\n    \\\"Four Sigma\\\",\\r\\n    \\\"KuaiGong International\\\",\\r\\n    \\\"Fulcrum Secret Technologies\\\",\\r\\n    \\\"BitRunners\\\",\\r\\n    \\\"The Black Hand\\\",\\r\\n    \\\"NiteSec\\\",\\r\\n    \\\"Aevum\\\",\\r\\n    \\\"Chongqing\\\",\\r\\n    \\\"Ishima\\\",\\r\\n    \\\"New Tokyo\\\",\\r\\n    \\\"Sector-12\\\",\\r\\n    \\\"Volhaven\\\",\\r\\n    \\\"Speakers for the Dead\\\",\\r\\n    \\\"The Dark Army\\\",\\r\\n    \\\"The Syndicate\\\",\\r\\n    \\\"Silhouette\\\",\\r\\n    \\\"Tetrads\\\",\\r\\n    \\\"Slum Snakes\\\",\\r\\n    \\\"Netburners\\\",\\r\\n    \\\"Tian Di Hui\\\",\\r\\n    \\\"CyberSec\\\",\\r\\n    \\\"Bladeburners\\\",\\r\\n    \\\"Church of the Machine God\\\",\\r\\n];\\r\\nexport async function writeOut(ns, data, startTime, endTime, result, startSec, startCash) {\\r\\n    if (data.writeFile !== \\\"\\\") {\\r\\n        const outstr = ns.sprintf(\\\"%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\", data.target, data.uid, data.batchId, data.realTimeStart + data.offset, data.realTimeStart + data.finish, data.operationTime, startTime, endTime, endTime - startTime, startTime - (data.realTimeStart + data.offset), endTime - (data.realTimeStart + data.finish), endTime - startTime - data.operationTime, result, startSec.toFixed(2), ns.getServerSecurityLevel(data.target).toFixed(2), ns.nFormat(startCash, \\\"($0.000a)\\\"), ns.nFormat(ns.getServerMoneyAvailable(data.target), \\\"($0.000a)\\\"));\\r\\n        while (!await ns.tryWritePort(ReservedPorts.HACK_WRITE_INFO, [data.writeFile, outstr]))\\r\\n            ;\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi91dGlsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLE1BQU0sQ0FBTixJQUFZLGFBSVg7QUFKRCxXQUFZLGFBQWE7SUFDckIsaUVBQWdCLENBQUE7SUFDaEIsaUVBQVksQ0FBQTtJQUNaLHVFQUFlLENBQUE7QUFDbkIsQ0FBQyxFQUpXLGFBQWEsS0FBYixhQUFhLFFBSXhCO0FBRUQsTUFBTSxDQUFDLE1BQU0sUUFBUSxHQUFHLHFCQUFxQixDQUFDO0FBQzlDLE1BQU0sQ0FBQyxNQUFNLE1BQU0sR0FBRyxtQkFBbUIsQ0FBQztBQUMxQyxNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUcsbUJBQW1CLENBQUM7QUFDMUMsTUFBTSxDQUFDLE1BQU0sTUFBTSxHQUFHLGNBQWMsQ0FBQztBQUVyQyxNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUcsQ0FBQyxPQUFPLEVBQUUsV0FBVyxFQUFFLFdBQVcsRUFBRSxXQUFXLEVBQUUsUUFBUSxFQUFFLFVBQVUsQ0FBQyxDQUFDO0FBRTdGLE1BQU0sVUFBVSxJQUFJLENBQUMsRUFBTSxFQUFFLEdBQVcsRUFBRSxHQUFHLElBQXlCO0lBQ2xFLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEdBQUcsR0FBRyxFQUFFLElBQUksSUFBSSxFQUFFLENBQUMsa0JBQWtCLENBQUMsT0FBTyxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDO0FBQ3hGLENBQUM7QUFFRCxNQUFNLFVBQVUsWUFBWSxDQUFDLEVBQU0sRUFBRSxRQUFnQjtJQUNqRCxJQUFJLEVBQUUsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDNUIsT0FBTztLQUNWO0lBRUQsSUFBSSxLQUFLLEdBQUcsQ0FBQyxDQUFDO0lBQ2QsSUFBSSxFQUFFLENBQUMsVUFBVSxDQUFDLGNBQWMsRUFB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\",\"filename\":\"/lib/util.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":13.25,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":85591,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"purchaseTor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"purchaseProgram\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"connect\",\"cost\":2},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.stanek.charge(ns.args[0], ns.args[1]);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hhcmdlLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL3N0YW5lay9jaGFyZ2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUM5QixPQUFPLElBQUksRUFBRTtRQUNULE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7S0FDakQ7QUFDTCxDQUFDIn0=\",\"filename\":\"/lib/stanek/charge.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/stanek/charge.js\",\"url\":\"blob:file:///1d946ca7-b68a-40a0-9cca-43084444ddfc\",\"moduleSequenceNumber\":99885}],\"dependents\":[],\"ramUsage\":2,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":99885,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.charge\",\"cost\":0.4}]}}],\"serversOnNetwork\":[\"zb-institute\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":180,\"hackDifficulty\":180,\"minDifficulty\":60,\"moneyAvailable\":594228304.5,\"moneyMax\":6685068425.625,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":713,\"serverGrowth\":64,\"suppression\":0,\"activeSuppressionThreads\":[],\"suppressionIntervalID\":null,\"suppressionLastUpdateTime\":0}},\"rho-construction\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rho-construction\",\"httpPortOpen\":false,\"ip\":\"83.1.4.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.grow(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLElBQUksR0FBdUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFFbkUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDdkIsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7UUFDeEMsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7S0FDM0MsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyJ9\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///1e8f7972-2dea-4655-959d-9ed5ac66be4c\",\"moduleSequenceNumber\":86741}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"rho-construction\",\"moduleSequenceNumber\":86741,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.weaken(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxJQUFJLEdBQXVCLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO0lBRW5FLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFO1FBQ3pCLGtCQUFrQixFQUFFLElBQUksQ0FBQyxlQUFlO1FBQ3hDLGtCQUFrQixFQUFFLElBQUksQ0FBQyxlQUFlO0tBQzNDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///aef96e66-0567-4d1f-ba93-c5a2fcea86fa\",\"moduleSequenceNumber\":85596}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"rho-construction\",\"moduleSequenceNumber\":85596,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.hack(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLElBQUksR0FBdUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFFbkUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDdkIsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7UUFDeEMsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7S0FDM0MsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyJ9\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"rho-construction\",\"moduleSequenceNumber\":84411,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export var ReservedPorts;\\r\\n(function (ReservedPorts) {\\r\\n    ReservedPorts[ReservedPorts[\\\"HACKING_INFO\\\"] = 1] = \\\"HACKING_INFO\\\";\\r\\n    ReservedPorts[ReservedPorts[\\\"HACKNET_INFO\\\"] = 2] = \\\"HACKNET_INFO\\\";\\r\\n    ReservedPorts[ReservedPorts[\\\"HACK_WRITE_INFO\\\"] = 3] = \\\"HACK_WRITE_INFO\\\";\\r\\n})(ReservedPorts || (ReservedPorts = {}));\\r\\nexport const WEAKENJS = \\\"/lib/exec/weaken.js\\\";\\r\\nexport const GROWJS = \\\"/lib/exec/grow.js\\\";\\r\\nexport const HACKJS = \\\"/lib/exec/hack.js\\\";\\r\\nexport const UTILJS = \\\"/lib/util.js\\\";\\r\\nexport const CITIES = [\\\"Aevum\\\", \\\"Chongqing\\\", \\\"Sector-12\\\", \\\"New Tokyo\\\", \\\"Ishima\\\", \\\"Volhaven\\\"];\\r\\nexport function llog(ns, str, ...args) {\\r\\n    ns.print(ns.sprintf(\\\"%8s \\\" + str, new Date().toLocaleTimeString(\\\"it-IT\\\"), ...args));\\r\\n}\\r\\nexport function softenServer(ns, hostname) {\\r\\n    if (ns.hasRootAccess(hostname)) {\\r\\n        return;\\r\\n    }\\r\\n    let ports = 0;\\r\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n        ns.brutessh(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n        ns.ftpcrack(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n        ns.httpworm(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n        ns.relaysmtp(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n        ns.sqlinject(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ports >= ns.getServerNumPortsRequired(hostname)) {\\r\\n        ns.nuke(hostname);\\r\\n    }\\r\\n}\\r\\nexport function serverIsHackable(ns, hostname) {\\r\\n    return ns.hasRootAccess(hostname) && ns.getHackingLevel() >= ns.getServerRequiredHackingLevel(hostname);\\r\\n}\\r\\nexport function canExecuteOnServer(ns, hostname) {\\r\\n    return ns.hasRootAccess(hostname) && ns.getServerMaxRam(hostname) > 0;\\r\\n}\\r\\nexport function mapHosts(ns, hosts = {}, parents = [], current = \\\"home\\\") {\\r\\n    const newParents = parents.concat(current);\\r\\n    hosts[current] = newParents;\\r\\n    const children = ns.scan(current).filter((element) => !parents.includes(element));\\r\\n    for (const child of children) {\\r\\n        mapHosts(ns, hosts, newParents, child);\\r\\n    }\\r\\n    return hosts;\\r\\n}\\r\\nexport function allHosts(ns) {\\r\\n    return Object.keys(mapHosts(ns));\\r\\n}\\r\\nexport function doProgramBuys(ns) {\\r\\n    const player = ns.getPlayer();\\r\\n    if (!player.tor && player.money > 200e3)\\r\\n        ns.purchaseTor();\\r\\n    if (!ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\") && player.money > 500e3)\\r\\n        ns.purchaseProgram(\\\"BruteSSH.exe\\\");\\r\\n    if (!ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\") && player.money > 1500e3)\\r\\n        ns.purchaseProgram(\\\"FTPCrack.exe\\\");\\r\\n    if (!ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\") && player.money > 5e6)\\r\\n        ns.purchaseProgram(\\\"relaySMTP.exe\\\");\\r\\n    if (!ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\") && player.money > 30e6)\\r\\n        ns.purchaseProgram(\\\"HTTPWorm.exe\\\");\\r\\n    if (!ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\") && player.money > 250e6)\\r\\n        ns.purchaseProgram(\\\"SQLInject.exe\\\");\\r\\n}\\r\\nexport function doBuyAndSoftenAll(ns) {\\r\\n    doProgramBuys(ns);\\r\\n    for (const hostname of allHosts(ns)) {\\r\\n        softenServer(ns, hostname);\\r\\n    }\\r\\n}\\r\\nexport function stFormat(ns, ms, showms = false, showfull = false) {\\r\\n    let timeLeft = ms;\\r\\n    const hours = Math.floor(ms / (1000 * 60 * 60));\\r\\n    timeLeft -= hours * (1000 * 60 * 60);\\r\\n    const minutes = Math.floor(timeLeft / (1000 * 60));\\r\\n    timeLeft -= minutes * (1000 * 60);\\r\\n    const seconds = Math.floor(timeLeft / 1000);\\r\\n    timeLeft -= seconds * 1000;\\r\\n    const milliseconds = timeLeft;\\r\\n    if (showms) {\\r\\n        if (hours > 0 || showfull)\\r\\n            return ns.sprintf(\\\"%02d:%02d:%02d.%03d\\\", hours, minutes, seconds, milliseconds);\\r\\n        if (minutes > 0)\\r\\n            return ns.sprintf(\\\"%02d:%02d.%03d\\\", minutes, seconds, milliseconds);\\r\\n        return ns.sprintf(\\\"%02d.%03d\\\", seconds, milliseconds);\\r\\n    }\\r\\n    else {\\r\\n        if (hours > 0 || showfull)\\r\\n            return ns.sprintf(\\\"%02d:%02d:%02d\\\", hours, minutes, seconds);\\r\\n        if (minutes > 0)\\r\\n            return ns.sprintf(\\\"%02d:%02d\\\", minutes, seconds);\\r\\n        return ns.sprintf(\\\"%02d\\\", seconds);\\r\\n    }\\r\\n}\\r\\nexport function stdFormat(ns, offset = 0, showms = false) {\\r\\n    const date = new Date(new Date().getTime() + offset);\\r\\n    if (showms) {\\r\\n        const ms = ns.sprintf(\\\"%03d\\\", date.getUTCMilliseconds());\\r\\n        return date.toLocaleTimeString(\\\"it-IT\\\") + \\\".\\\" + ms;\\r\\n    }\\r\\n    else {\\r\\n        return date.toLocaleTimeString(\\\"it-IT\\\");\\r\\n    }\\r\\n}\\r\\nexport async function doBackdoors(ns) {\\r\\n    //const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"w0r1d_d43m0n\\\", \\\"b-and-a\\\", \\\"ecorp\\\", \\\"fulcrumassets\\\", \\\"fulcrumtech\\\"];\\r\\n    //const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"omnitek\\\", \\\"kuai-gong\\\", \\\"megacorp\\\"];\\r\\n    const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"w0r1d_d43m0n\\\"];\\r\\n    const hosts = mapHosts(ns);\\r\\n    for (const [hostName, trail] of Object.entries(hosts)) {\\r\\n        const server = ns.getServer(hostName);\\r\\n        if (!targetHosts.includes(hostName) ||\\r\\n            server.backdoorInstalled ||\\r\\n            server.requiredHackingSkill > ns.getHackingLevel() ||\\r\\n            !server.hasAdminRights)\\r\\n            continue;\\r\\n        ns.print(hostName);\\r\\n        for (const hostHopName of trail) {\\r\\n            ns.connect(hostHopName);\\r\\n        }\\r\\n        await ns.installBackdoor();\\r\\n        ns.connect(\\\"home\\\");\\r\\n    }\\r\\n}\\r\\nexport function cleanLogs(ns) {\\r\\n    ns.disableLog(\\\"disableLog\\\");\\r\\n    ns.disableLog(\\\"ALL\\\");\\r\\n    // ns.disableLog(\\\"sleep\\\")\\r\\n    // ns.disableLog(\\\"exec\\\")\\r\\n    // ns.disableLog(\\\"getServerMaxRam\\\")\\r\\n    // ns.disableLog(\\\"getServerSecurityLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerMinSecurityLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerMaxMoney\\\")\\r\\n    // ns.disableLog(\\\"getHackingLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerRequiredHackingLevel\\\")\\r\\n    // ns.disableLog(\\\"scan\\\")\\r\\n    // ns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n    // ns.disableLog(\\\"getServerUsedRam\\\")\\r\\n}\\r\\nexport const ALL_FACTIONS = [\\r\\n    \\\"Illuminati\\\",\\r\\n    \\\"Daedalus\\\",\\r\\n    \\\"The Covenant\\\",\\r\\n    \\\"ECorp\\\",\\r\\n    \\\"MegaCorp\\\",\\r\\n    \\\"Bachman & Associates\\\",\\r\\n    \\\"Blade Industries\\\",\\r\\n    \\\"NWO\\\",\\r\\n    \\\"Clarke Incorporated\\\",\\r\\n    \\\"OmniTek Incorporated\\\",\\r\\n    \\\"Four Sigma\\\",\\r\\n    \\\"KuaiGong International\\\",\\r\\n    \\\"Fulcrum Secret Technologies\\\",\\r\\n    \\\"BitRunners\\\",\\r\\n    \\\"The Black Hand\\\",\\r\\n    \\\"NiteSec\\\",\\r\\n    \\\"Aevum\\\",\\r\\n    \\\"Chongqing\\\",\\r\\n    \\\"Ishima\\\",\\r\\n    \\\"New Tokyo\\\",\\r\\n    \\\"Sector-12\\\",\\r\\n    \\\"Volhaven\\\",\\r\\n    \\\"Speakers for the Dead\\\",\\r\\n    \\\"The Dark Army\\\",\\r\\n    \\\"The Syndicate\\\",\\r\\n    \\\"Silhouette\\\",\\r\\n    \\\"Tetrads\\\",\\r\\n    \\\"Slum Snakes\\\",\\r\\n    \\\"Netburners\\\",\\r\\n    \\\"Tian Di Hui\\\",\\r\\n    \\\"CyberSec\\\",\\r\\n    \\\"Bladeburners\\\",\\r\\n    \\\"Church of the Machine God\\\",\\r\\n];\\r\\nexport async function writeOut(ns, data, startTime, endTime, result, startSec, startCash) {\\r\\n    if (data.writeFile !== \\\"\\\") {\\r\\n        const outstr = ns.sprintf(\\\"%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\", data.target, data.uid, data.batchId, data.realTimeStart + data.offset, data.realTimeStart + data.finish, data.operationTime, startTime, endTime, endTime - startTime, startTime - (data.realTimeStart + data.offset), endTime - (data.realTimeStart + data.finish), endTime - startTime - data.operationTime, result, startSec.toFixed(2), ns.getServerSecurityLevel(data.target).toFixed(2), ns.nFormat(startCash, \\\"($0.000a)\\\"), ns.nFormat(ns.getServerMoneyAvailable(data.target), \\\"($0.000a)\\\"));\\r\\n        while (!await ns.tryWritePort(ReservedPorts.HACK_WRITE_INFO, [data.writeFile, outstr]))\\r\\n            ;\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi91dGlsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLE1BQU0sQ0FBTixJQUFZLGFBSVg7QUFKRCxXQUFZLGFBQWE7SUFDckIsaUVBQWdCLENBQUE7SUFDaEIsaUVBQVksQ0FBQTtJQUNaLHVFQUFlLENBQUE7QUFDbkIsQ0FBQyxFQUpXLGFBQWEsS0FBYixhQUFhLFFBSXhCO0FBRUQsTUFBTSxDQUFDLE1BQU0sUUFBUSxHQUFHLHFCQUFxQixDQUFDO0FBQzlDLE1BQU0sQ0FBQyxNQUFNLE1BQU0sR0FBRyxtQkFBbUIsQ0FBQztBQUMxQyxNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUcsbUJBQW1CLENBQUM7QUFDMUMsTUFBTSxDQUFDLE1BQU0sTUFBTSxHQUFHLGNBQWMsQ0FBQztBQUVyQyxNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUcsQ0FBQyxPQUFPLEVBQUUsV0FBVyxFQUFFLFdBQVcsRUFBRSxXQUFXLEVBQUUsUUFBUSxFQUFFLFVBQVUsQ0FBQyxDQUFDO0FBRTdGLE1BQU0sVUFBVSxJQUFJLENBQUMsRUFBTSxFQUFFLEdBQVcsRUFBRSxHQUFHLElBQXlCO0lBQ2xFLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEdBQUcsR0FBRyxFQUFFLElBQUksSUFBSSxFQUFFLENBQUMsa0JBQWtCLENBQUMsT0FBTyxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDO0FBQ3hGLENBQUM7QUFFRCxNQUFNLFVBQVUsWUFBWSxDQUFDLEVBQU0sRUFBRSxRQUFnQjtJQUNqRCxJQUFJLEVBQUUsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDNUIsT0FBTztLQUNWO0lBRUQsSUFBSSxLQUFLLEdBQUcsQ0FBQyxDQUFDO0lBQ2QsSUFBSSxFQUFFLENBQUMsVUFBVSxDQUFDLGNBQWMsRUFB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\",\"filename\":\"/lib/util.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":13.25,\"server\":\"rho-construction\",\"moduleSequenceNumber\":84413,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"purchaseTor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"purchaseProgram\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"connect\",\"cost\":2},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.stanek.charge(ns.args[0], ns.args[1]);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hhcmdlLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL3N0YW5lay9jaGFyZ2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUM5QixPQUFPLElBQUksRUFBRTtRQUNULE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7S0FDakQ7QUFDTCxDQUFDIn0=\",\"filename\":\"/lib/stanek/charge.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/stanek/charge.js\",\"url\":\"blob:file:///81d9f20c-92c7-47a4-9880-d74e913d36f3\",\"moduleSequenceNumber\":99887}],\"dependents\":[],\"ramUsage\":2,\"server\":\"rho-construction\",\"moduleSequenceNumber\":99887,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.charge\",\"cost\":0.4}]}}],\"serversOnNetwork\":[\"catalyst\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":120,\"hackDifficulty\":120,\"minDifficulty\":40,\"moneyAvailable\":380122189.5,\"moneyMax\":4276374631.875,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":503,\"serverGrowth\":49,\"suppression\":0,\"activeSuppressionThreads\":[],\"suppressionIntervalID\":null,\"suppressionLastUpdateTime\":0}},\"alpha-ent\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"alpha-ent\",\"httpPortOpen\":true,\"ip\":\"70.4.8.2\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.grow(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLElBQUksR0FBdUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFFbkUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDdkIsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7UUFDeEMsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7S0FDM0MsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyJ9\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///93f13dc4-57fc-4775-b52a-d0efdda9e6ef\",\"moduleSequenceNumber\":86749}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":86749,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.weaken(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxJQUFJLEdBQXVCLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO0lBRW5FLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFO1FBQ3pCLGtCQUFrQixFQUFFLElBQUksQ0FBQyxlQUFlO1FBQ3hDLGtCQUFrQixFQUFFLElBQUksQ0FBQyxlQUFlO0tBQzNDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///08e250c9-30ed-4265-bf90-3c45d7c1a4be\",\"moduleSequenceNumber\":85602}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":85602,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.hack(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLElBQUksR0FBdUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFFbkUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDdkIsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7UUFDeEMsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7S0FDM0MsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyJ9\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":85533,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export var ReservedPorts;\\r\\n(function (ReservedPorts) {\\r\\n    ReservedPorts[ReservedPorts[\\\"HACKING_INFO\\\"] = 1] = \\\"HACKING_INFO\\\";\\r\\n    ReservedPorts[ReservedPorts[\\\"HACKNET_INFO\\\"] = 2] = \\\"HACKNET_INFO\\\";\\r\\n    ReservedPorts[ReservedPorts[\\\"HACK_WRITE_INFO\\\"] = 3] = \\\"HACK_WRITE_INFO\\\";\\r\\n})(ReservedPorts || (ReservedPorts = {}));\\r\\nexport const WEAKENJS = \\\"/lib/exec/weaken.js\\\";\\r\\nexport const GROWJS = \\\"/lib/exec/grow.js\\\";\\r\\nexport const HACKJS = \\\"/lib/exec/hack.js\\\";\\r\\nexport const UTILJS = \\\"/lib/util.js\\\";\\r\\nexport const CITIES = [\\\"Aevum\\\", \\\"Chongqing\\\", \\\"Sector-12\\\", \\\"New Tokyo\\\", \\\"Ishima\\\", \\\"Volhaven\\\"];\\r\\nexport function llog(ns, str, ...args) {\\r\\n    ns.print(ns.sprintf(\\\"%8s \\\" + str, new Date().toLocaleTimeString(\\\"it-IT\\\"), ...args));\\r\\n}\\r\\nexport function softenServer(ns, hostname) {\\r\\n    if (ns.hasRootAccess(hostname)) {\\r\\n        return;\\r\\n    }\\r\\n    let ports = 0;\\r\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n        ns.brutessh(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n        ns.ftpcrack(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n        ns.httpworm(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n        ns.relaysmtp(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n        ns.sqlinject(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ports >= ns.getServerNumPortsRequired(hostname)) {\\r\\n        ns.nuke(hostname);\\r\\n    }\\r\\n}\\r\\nexport function serverIsHackable(ns, hostname) {\\r\\n    return ns.hasRootAccess(hostname) && ns.getHackingLevel() >= ns.getServerRequiredHackingLevel(hostname);\\r\\n}\\r\\nexport function canExecuteOnServer(ns, hostname) {\\r\\n    return ns.hasRootAccess(hostname) && ns.getServerMaxRam(hostname) > 0;\\r\\n}\\r\\nexport function mapHosts(ns, hosts = {}, parents = [], current = \\\"home\\\") {\\r\\n    const newParents = parents.concat(current);\\r\\n    hosts[current] = newParents;\\r\\n    const children = ns.scan(current).filter((element) => !parents.includes(element));\\r\\n    for (const child of children) {\\r\\n        mapHosts(ns, hosts, newParents, child);\\r\\n    }\\r\\n    return hosts;\\r\\n}\\r\\nexport function allHosts(ns) {\\r\\n    return Object.keys(mapHosts(ns));\\r\\n}\\r\\nexport function doProgramBuys(ns) {\\r\\n    const player = ns.getPlayer();\\r\\n    if (!player.tor && player.money > 200e3)\\r\\n        ns.purchaseTor();\\r\\n    if (!ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\") && player.money > 500e3)\\r\\n        ns.purchaseProgram(\\\"BruteSSH.exe\\\");\\r\\n    if (!ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\") && player.money > 1500e3)\\r\\n        ns.purchaseProgram(\\\"FTPCrack.exe\\\");\\r\\n    if (!ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\") && player.money > 5e6)\\r\\n        ns.purchaseProgram(\\\"relaySMTP.exe\\\");\\r\\n    if (!ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\") && player.money > 30e6)\\r\\n        ns.purchaseProgram(\\\"HTTPWorm.exe\\\");\\r\\n    if (!ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\") && player.money > 250e6)\\r\\n        ns.purchaseProgram(\\\"SQLInject.exe\\\");\\r\\n}\\r\\nexport function doBuyAndSoftenAll(ns) {\\r\\n    doProgramBuys(ns);\\r\\n    for (const hostname of allHosts(ns)) {\\r\\n        softenServer(ns, hostname);\\r\\n    }\\r\\n}\\r\\nexport function stFormat(ns, ms, showms = false, showfull = false) {\\r\\n    let timeLeft = ms;\\r\\n    const hours = Math.floor(ms / (1000 * 60 * 60));\\r\\n    timeLeft -= hours * (1000 * 60 * 60);\\r\\n    const minutes = Math.floor(timeLeft / (1000 * 60));\\r\\n    timeLeft -= minutes * (1000 * 60);\\r\\n    const seconds = Math.floor(timeLeft / 1000);\\r\\n    timeLeft -= seconds * 1000;\\r\\n    const milliseconds = timeLeft;\\r\\n    if (showms) {\\r\\n        if (hours > 0 || showfull)\\r\\n            return ns.sprintf(\\\"%02d:%02d:%02d.%03d\\\", hours, minutes, seconds, milliseconds);\\r\\n        if (minutes > 0)\\r\\n            return ns.sprintf(\\\"%02d:%02d.%03d\\\", minutes, seconds, milliseconds);\\r\\n        return ns.sprintf(\\\"%02d.%03d\\\", seconds, milliseconds);\\r\\n    }\\r\\n    else {\\r\\n        if (hours > 0 || showfull)\\r\\n            return ns.sprintf(\\\"%02d:%02d:%02d\\\", hours, minutes, seconds);\\r\\n        if (minutes > 0)\\r\\n            return ns.sprintf(\\\"%02d:%02d\\\", minutes, seconds);\\r\\n        return ns.sprintf(\\\"%02d\\\", seconds);\\r\\n    }\\r\\n}\\r\\nexport function stdFormat(ns, offset = 0, showms = false) {\\r\\n    const date = new Date(new Date().getTime() + offset);\\r\\n    if (showms) {\\r\\n        const ms = ns.sprintf(\\\"%03d\\\", date.getUTCMilliseconds());\\r\\n        return date.toLocaleTimeString(\\\"it-IT\\\") + \\\".\\\" + ms;\\r\\n    }\\r\\n    else {\\r\\n        return date.toLocaleTimeString(\\\"it-IT\\\");\\r\\n    }\\r\\n}\\r\\nexport async function doBackdoors(ns) {\\r\\n    //const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"w0r1d_d43m0n\\\", \\\"b-and-a\\\", \\\"ecorp\\\", \\\"fulcrumassets\\\", \\\"fulcrumtech\\\"];\\r\\n    //const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"omnitek\\\", \\\"kuai-gong\\\", \\\"megacorp\\\"];\\r\\n    const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"w0r1d_d43m0n\\\"];\\r\\n    const hosts = mapHosts(ns);\\r\\n    for (const [hostName, trail] of Object.entries(hosts)) {\\r\\n        const server = ns.getServer(hostName);\\r\\n        if (!targetHosts.includes(hostName) ||\\r\\n            server.backdoorInstalled ||\\r\\n            server.requiredHackingSkill > ns.getHackingLevel() ||\\r\\n            !server.hasAdminRights)\\r\\n            continue;\\r\\n        ns.print(hostName);\\r\\n        for (const hostHopName of trail) {\\r\\n            ns.connect(hostHopName);\\r\\n        }\\r\\n        await ns.installBackdoor();\\r\\n        ns.connect(\\\"home\\\");\\r\\n    }\\r\\n}\\r\\nexport function cleanLogs(ns) {\\r\\n    ns.disableLog(\\\"disableLog\\\");\\r\\n    ns.disableLog(\\\"ALL\\\");\\r\\n    // ns.disableLog(\\\"sleep\\\")\\r\\n    // ns.disableLog(\\\"exec\\\")\\r\\n    // ns.disableLog(\\\"getServerMaxRam\\\")\\r\\n    // ns.disableLog(\\\"getServerSecurityLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerMinSecurityLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerMaxMoney\\\")\\r\\n    // ns.disableLog(\\\"getHackingLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerRequiredHackingLevel\\\")\\r\\n    // ns.disableLog(\\\"scan\\\")\\r\\n    // ns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n    // ns.disableLog(\\\"getServerUsedRam\\\")\\r\\n}\\r\\nexport const ALL_FACTIONS = [\\r\\n    \\\"Illuminati\\\",\\r\\n    \\\"Daedalus\\\",\\r\\n    \\\"The Covenant\\\",\\r\\n    \\\"ECorp\\\",\\r\\n    \\\"MegaCorp\\\",\\r\\n    \\\"Bachman & Associates\\\",\\r\\n    \\\"Blade Industries\\\",\\r\\n    \\\"NWO\\\",\\r\\n    \\\"Clarke Incorporated\\\",\\r\\n    \\\"OmniTek Incorporated\\\",\\r\\n    \\\"Four Sigma\\\",\\r\\n    \\\"KuaiGong International\\\",\\r\\n    \\\"Fulcrum Secret Technologies\\\",\\r\\n    \\\"BitRunners\\\",\\r\\n    \\\"The Black Hand\\\",\\r\\n    \\\"NiteSec\\\",\\r\\n    \\\"Aevum\\\",\\r\\n    \\\"Chongqing\\\",\\r\\n    \\\"Ishima\\\",\\r\\n    \\\"New Tokyo\\\",\\r\\n    \\\"Sector-12\\\",\\r\\n    \\\"Volhaven\\\",\\r\\n    \\\"Speakers for the Dead\\\",\\r\\n    \\\"The Dark Army\\\",\\r\\n    \\\"The Syndicate\\\",\\r\\n    \\\"Silhouette\\\",\\r\\n    \\\"Tetrads\\\",\\r\\n    \\\"Slum Snakes\\\",\\r\\n    \\\"Netburners\\\",\\r\\n    \\\"Tian Di Hui\\\",\\r\\n    \\\"CyberSec\\\",\\r\\n    \\\"Bladeburners\\\",\\r\\n    \\\"Church of the Machine God\\\",\\r\\n];\\r\\nexport async function writeOut(ns, data, startTime, endTime, result, startSec, startCash) {\\r\\n    if (data.writeFile !== \\\"\\\") {\\r\\n        const outstr = ns.sprintf(\\\"%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\", data.target, data.uid, data.batchId, data.realTimeStart + data.offset, data.realTimeStart + data.finish, data.operationTime, startTime, endTime, endTime - startTime, startTime - (data.realTimeStart + data.offset), endTime - (data.realTimeStart + data.finish), endTime - startTime - data.operationTime, result, startSec.toFixed(2), ns.getServerSecurityLevel(data.target).toFixed(2), ns.nFormat(startCash, \\\"($0.000a)\\\"), ns.nFormat(ns.getServerMoneyAvailable(data.target), \\\"($0.000a)\\\"));\\r\\n        while (!await ns.tryWritePort(ReservedPorts.HACK_WRITE_INFO, [data.writeFile, outstr]))\\r\\n            ;\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi91dGlsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLE1BQU0sQ0FBTixJQUFZLGFBSVg7QUFKRCxXQUFZLGFBQWE7SUFDckIsaUVBQWdCLENBQUE7SUFDaEIsaUVBQVksQ0FBQTtJQUNaLHVFQUFlLENBQUE7QUFDbkIsQ0FBQyxFQUpXLGFBQWEsS0FBYixhQUFhLFFBSXhCO0FBRUQsTUFBTSxDQUFDLE1BQU0sUUFBUSxHQUFHLHFCQUFxQixDQUFDO0FBQzlDLE1BQU0sQ0FBQyxNQUFNLE1BQU0sR0FBRyxtQkFBbUIsQ0FBQztBQUMxQyxNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUcsbUJBQW1CLENBQUM7QUFDMUMsTUFBTSxDQUFDLE1BQU0sTUFBTSxHQUFHLGNBQWMsQ0FBQztBQUVyQyxNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUcsQ0FBQyxPQUFPLEVBQUUsV0FBVyxFQUFFLFdBQVcsRUFBRSxXQUFXLEVBQUUsUUFBUSxFQUFFLFVBQVUsQ0FBQyxDQUFDO0FBRTdGLE1BQU0sVUFBVSxJQUFJLENBQUMsRUFBTSxFQUFFLEdBQVcsRUFBRSxHQUFHLElBQXlCO0lBQ2xFLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEdBQUcsR0FBRyxFQUFFLElBQUksSUFBSSxFQUFFLENBQUMsa0JBQWtCLENBQUMsT0FBTyxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDO0FBQ3hGLENBQUM7QUFFRCxNQUFNLFVBQVUsWUFBWSxDQUFDLEVBQU0sRUFBRSxRQUFnQjtJQUNqRCxJQUFJLEVBQUUsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDNUIsT0FBTztLQUNWO0lBRUQsSUFBSSxLQUFLLEdBQUcsQ0FBQyxDQUFDO0lBQ2QsSUFBSSxFQUFFLENBQUMsVUFBVSxDQUFDLGNBQWMsRUFB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\",\"filename\":\"/lib/util.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":13.25,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":85535,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"purchaseTor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"purchaseProgram\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"connect\",\"cost\":2},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.stanek.charge(ns.args[0], ns.args[1]);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hhcmdlLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL3N0YW5lay9jaGFyZ2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUM5QixPQUFPLElBQUksRUFBRTtRQUNULE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7S0FDakQ7QUFDTCxDQUFDIn0=\",\"filename\":\"/lib/stanek/charge.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/stanek/charge.js\",\"url\":\"blob:file:///61d8d3e0-df95-46cc-8155-ec82ff559de0\",\"moduleSequenceNumber\":99862}],\"dependents\":[],\"ramUsage\":2,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":99862,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.charge\",\"cost\":0.4}]}}],\"serversOnNetwork\":[\"rothman-uni\",\"aerocorp\",\"global-pharm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":177,\"hackDifficulty\":177,\"minDifficulty\":59,\"moneyAvailable\":462111916.5,\"moneyMax\":5198759060.625,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":588,\"serverGrowth\":51,\"suppression\":0,\"activeSuppressionThreads\":[],\"suppressionIntervalID\":null,\"suppressionLastUpdateTime\":0}},\"aevum-police\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-180937.cct\",\"type\":\"Total Ways to Sum\",\"data\":54,\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aevum-police\",\"httpPortOpen\":true,\"ip\":\"59.3.2.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.grow(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLElBQUksR0FBdUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFFbkUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDdkIsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7UUFDeEMsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7S0FDM0MsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyJ9\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"aevum-police\",\"moduleSequenceNumber\":85577,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.weaken(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxJQUFJLEdBQXVCLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO0lBRW5FLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFO1FBQ3pCLGtCQUFrQixFQUFFLElBQUksQ0FBQyxlQUFlO1FBQ3hDLGtCQUFrQixFQUFFLElBQUksQ0FBQyxlQUFlO0tBQzNDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///b9fc76ab-db2e-4d44-8360-6911cc16d853\",\"moduleSequenceNumber\":85593}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"aevum-police\",\"moduleSequenceNumber\":85593,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.hack(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLElBQUksR0FBdUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFFbkUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDdkIsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7UUFDeEMsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7S0FDM0MsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyJ9\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"aevum-police\",\"moduleSequenceNumber\":85581,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export var ReservedPorts;\\r\\n(function (ReservedPorts) {\\r\\n    ReservedPorts[ReservedPorts[\\\"HACKING_INFO\\\"] = 1] = \\\"HACKING_INFO\\\";\\r\\n    ReservedPorts[ReservedPorts[\\\"HACKNET_INFO\\\"] = 2] = \\\"HACKNET_INFO\\\";\\r\\n    ReservedPorts[ReservedPorts[\\\"HACK_WRITE_INFO\\\"] = 3] = \\\"HACK_WRITE_INFO\\\";\\r\\n})(ReservedPorts || (ReservedPorts = {}));\\r\\nexport const WEAKENJS = \\\"/lib/exec/weaken.js\\\";\\r\\nexport const GROWJS = \\\"/lib/exec/grow.js\\\";\\r\\nexport const HACKJS = \\\"/lib/exec/hack.js\\\";\\r\\nexport const UTILJS = \\\"/lib/util.js\\\";\\r\\nexport const CITIES = [\\\"Aevum\\\", \\\"Chongqing\\\", \\\"Sector-12\\\", \\\"New Tokyo\\\", \\\"Ishima\\\", \\\"Volhaven\\\"];\\r\\nexport function llog(ns, str, ...args) {\\r\\n    ns.print(ns.sprintf(\\\"%8s \\\" + str, new Date().toLocaleTimeString(\\\"it-IT\\\"), ...args));\\r\\n}\\r\\nexport function softenServer(ns, hostname) {\\r\\n    if (ns.hasRootAccess(hostname)) {\\r\\n        return;\\r\\n    }\\r\\n    let ports = 0;\\r\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n        ns.brutessh(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n        ns.ftpcrack(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n        ns.httpworm(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n        ns.relaysmtp(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n        ns.sqlinject(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ports >= ns.getServerNumPortsRequired(hostname)) {\\r\\n        ns.nuke(hostname);\\r\\n    }\\r\\n}\\r\\nexport function serverIsHackable(ns, hostname) {\\r\\n    return ns.hasRootAccess(hostname) && ns.getHackingLevel() >= ns.getServerRequiredHackingLevel(hostname);\\r\\n}\\r\\nexport function canExecuteOnServer(ns, hostname) {\\r\\n    return ns.hasRootAccess(hostname) && ns.getServerMaxRam(hostname) > 0;\\r\\n}\\r\\nexport function mapHosts(ns, hosts = {}, parents = [], current = \\\"home\\\") {\\r\\n    const newParents = parents.concat(current);\\r\\n    hosts[current] = newParents;\\r\\n    const children = ns.scan(current).filter((element) => !parents.includes(element));\\r\\n    for (const child of children) {\\r\\n        mapHosts(ns, hosts, newParents, child);\\r\\n    }\\r\\n    return hosts;\\r\\n}\\r\\nexport function allHosts(ns) {\\r\\n    return Object.keys(mapHosts(ns));\\r\\n}\\r\\nexport function doProgramBuys(ns) {\\r\\n    const player = ns.getPlayer();\\r\\n    if (!player.tor && player.money > 200e3)\\r\\n        ns.purchaseTor();\\r\\n    if (!ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\") && player.money > 500e3)\\r\\n        ns.purchaseProgram(\\\"BruteSSH.exe\\\");\\r\\n    if (!ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\") && player.money > 1500e3)\\r\\n        ns.purchaseProgram(\\\"FTPCrack.exe\\\");\\r\\n    if (!ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\") && player.money > 5e6)\\r\\n        ns.purchaseProgram(\\\"relaySMTP.exe\\\");\\r\\n    if (!ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\") && player.money > 30e6)\\r\\n        ns.purchaseProgram(\\\"HTTPWorm.exe\\\");\\r\\n    if (!ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\") && player.money > 250e6)\\r\\n        ns.purchaseProgram(\\\"SQLInject.exe\\\");\\r\\n}\\r\\nexport function doBuyAndSoftenAll(ns) {\\r\\n    doProgramBuys(ns);\\r\\n    for (const hostname of allHosts(ns)) {\\r\\n        softenServer(ns, hostname);\\r\\n    }\\r\\n}\\r\\nexport function stFormat(ns, ms, showms = false, showfull = false) {\\r\\n    let timeLeft = ms;\\r\\n    const hours = Math.floor(ms / (1000 * 60 * 60));\\r\\n    timeLeft -= hours * (1000 * 60 * 60);\\r\\n    const minutes = Math.floor(timeLeft / (1000 * 60));\\r\\n    timeLeft -= minutes * (1000 * 60);\\r\\n    const seconds = Math.floor(timeLeft / 1000);\\r\\n    timeLeft -= seconds * 1000;\\r\\n    const milliseconds = timeLeft;\\r\\n    if (showms) {\\r\\n        if (hours > 0 || showfull)\\r\\n            return ns.sprintf(\\\"%02d:%02d:%02d.%03d\\\", hours, minutes, seconds, milliseconds);\\r\\n        if (minutes > 0)\\r\\n            return ns.sprintf(\\\"%02d:%02d.%03d\\\", minutes, seconds, milliseconds);\\r\\n        return ns.sprintf(\\\"%02d.%03d\\\", seconds, milliseconds);\\r\\n    }\\r\\n    else {\\r\\n        if (hours > 0 || showfull)\\r\\n            return ns.sprintf(\\\"%02d:%02d:%02d\\\", hours, minutes, seconds);\\r\\n        if (minutes > 0)\\r\\n            return ns.sprintf(\\\"%02d:%02d\\\", minutes, seconds);\\r\\n        return ns.sprintf(\\\"%02d\\\", seconds);\\r\\n    }\\r\\n}\\r\\nexport function stdFormat(ns, offset = 0, showms = false) {\\r\\n    const date = new Date(new Date().getTime() + offset);\\r\\n    if (showms) {\\r\\n        const ms = ns.sprintf(\\\"%03d\\\", date.getUTCMilliseconds());\\r\\n        return date.toLocaleTimeString(\\\"it-IT\\\") + \\\".\\\" + ms;\\r\\n    }\\r\\n    else {\\r\\n        return date.toLocaleTimeString(\\\"it-IT\\\");\\r\\n    }\\r\\n}\\r\\nexport async function doBackdoors(ns) {\\r\\n    //const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"w0r1d_d43m0n\\\", \\\"b-and-a\\\", \\\"ecorp\\\", \\\"fulcrumassets\\\", \\\"fulcrumtech\\\"];\\r\\n    //const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"omnitek\\\", \\\"kuai-gong\\\", \\\"megacorp\\\"];\\r\\n    const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"w0r1d_d43m0n\\\"];\\r\\n    const hosts = mapHosts(ns);\\r\\n    for (const [hostName, trail] of Object.entries(hosts)) {\\r\\n        const server = ns.getServer(hostName);\\r\\n        if (!targetHosts.includes(hostName) ||\\r\\n            server.backdoorInstalled ||\\r\\n            server.requiredHackingSkill > ns.getHackingLevel() ||\\r\\n            !server.hasAdminRights)\\r\\n            continue;\\r\\n        ns.print(hostName);\\r\\n        for (const hostHopName of trail) {\\r\\n            ns.connect(hostHopName);\\r\\n        }\\r\\n        await ns.installBackdoor();\\r\\n        ns.connect(\\\"home\\\");\\r\\n    }\\r\\n}\\r\\nexport function cleanLogs(ns) {\\r\\n    ns.disableLog(\\\"disableLog\\\");\\r\\n    ns.disableLog(\\\"ALL\\\");\\r\\n    // ns.disableLog(\\\"sleep\\\")\\r\\n    // ns.disableLog(\\\"exec\\\")\\r\\n    // ns.disableLog(\\\"getServerMaxRam\\\")\\r\\n    // ns.disableLog(\\\"getServerSecurityLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerMinSecurityLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerMaxMoney\\\")\\r\\n    // ns.disableLog(\\\"getHackingLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerRequiredHackingLevel\\\")\\r\\n    // ns.disableLog(\\\"scan\\\")\\r\\n    // ns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n    // ns.disableLog(\\\"getServerUsedRam\\\")\\r\\n}\\r\\nexport const ALL_FACTIONS = [\\r\\n    \\\"Illuminati\\\",\\r\\n    \\\"Daedalus\\\",\\r\\n    \\\"The Covenant\\\",\\r\\n    \\\"ECorp\\\",\\r\\n    \\\"MegaCorp\\\",\\r\\n    \\\"Bachman & Associates\\\",\\r\\n    \\\"Blade Industries\\\",\\r\\n    \\\"NWO\\\",\\r\\n    \\\"Clarke Incorporated\\\",\\r\\n    \\\"OmniTek Incorporated\\\",\\r\\n    \\\"Four Sigma\\\",\\r\\n    \\\"KuaiGong International\\\",\\r\\n    \\\"Fulcrum Secret Technologies\\\",\\r\\n    \\\"BitRunners\\\",\\r\\n    \\\"The Black Hand\\\",\\r\\n    \\\"NiteSec\\\",\\r\\n    \\\"Aevum\\\",\\r\\n    \\\"Chongqing\\\",\\r\\n    \\\"Ishima\\\",\\r\\n    \\\"New Tokyo\\\",\\r\\n    \\\"Sector-12\\\",\\r\\n    \\\"Volhaven\\\",\\r\\n    \\\"Speakers for the Dead\\\",\\r\\n    \\\"The Dark Army\\\",\\r\\n    \\\"The Syndicate\\\",\\r\\n    \\\"Silhouette\\\",\\r\\n    \\\"Tetrads\\\",\\r\\n    \\\"Slum Snakes\\\",\\r\\n    \\\"Netburners\\\",\\r\\n    \\\"Tian Di Hui\\\",\\r\\n    \\\"CyberSec\\\",\\r\\n    \\\"Bladeburners\\\",\\r\\n    \\\"Church of the Machine God\\\",\\r\\n];\\r\\nexport async function writeOut(ns, data, startTime, endTime, result, startSec, startCash) {\\r\\n    if (data.writeFile !== \\\"\\\") {\\r\\n        const outstr = ns.sprintf(\\\"%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\", data.target, data.uid, data.batchId, data.realTimeStart + data.offset, data.realTimeStart + data.finish, data.operationTime, startTime, endTime, endTime - startTime, startTime - (data.realTimeStart + data.offset), endTime - (data.realTimeStart + data.finish), endTime - startTime - data.operationTime, result, startSec.toFixed(2), ns.getServerSecurityLevel(data.target).toFixed(2), ns.nFormat(startCash, \\\"($0.000a)\\\"), ns.nFormat(ns.getServerMoneyAvailable(data.target), \\\"($0.000a)\\\"));\\r\\n        while (!await ns.tryWritePort(ReservedPorts.HACK_WRITE_INFO, [data.writeFile, outstr]))\\r\\n            ;\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi91dGlsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLE1BQU0sQ0FBTixJQUFZLGFBSVg7QUFKRCxXQUFZLGFBQWE7SUFDckIsaUVBQWdCLENBQUE7SUFDaEIsaUVBQVksQ0FBQTtJQUNaLHVFQUFlLENBQUE7QUFDbkIsQ0FBQyxFQUpXLGFBQWEsS0FBYixhQUFhLFFBSXhCO0FBRUQsTUFBTSxDQUFDLE1BQU0sUUFBUSxHQUFHLHFCQUFxQixDQUFDO0FBQzlDLE1BQU0sQ0FBQyxNQUFNLE1BQU0sR0FBRyxtQkFBbUIsQ0FBQztBQUMxQyxNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUcsbUJBQW1CLENBQUM7QUFDMUMsTUFBTSxDQUFDLE1BQU0sTUFBTSxHQUFHLGNBQWMsQ0FBQztBQUVyQyxNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUcsQ0FBQyxPQUFPLEVBQUUsV0FBVyxFQUFFLFdBQVcsRUFBRSxXQUFXLEVBQUUsUUFBUSxFQUFFLFVBQVUsQ0FBQyxDQUFDO0FBRTdGLE1BQU0sVUFBVSxJQUFJLENBQUMsRUFBTSxFQUFFLEdBQVcsRUFBRSxHQUFHLElBQXlCO0lBQ2xFLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEdBQUcsR0FBRyxFQUFFLElBQUksSUFBSSxFQUFFLENBQUMsa0JBQWtCLENBQUMsT0FBTyxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDO0FBQ3hGLENBQUM7QUFFRCxNQUFNLFVBQVUsWUFBWSxDQUFDLEVBQU0sRUFBRSxRQUFnQjtJQUNqRCxJQUFJLEVBQUUsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDNUIsT0FBTztLQUNWO0lBRUQsSUFBSSxLQUFLLEdBQUcsQ0FBQyxDQUFDO0lBQ2QsSUFBSSxFQUFFLENBQUMsVUFBVSxDQUFDLGNBQWMsRUFB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\",\"filename\":\"/lib/util.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":13.25,\"server\":\"aevum-police\",\"moduleSequenceNumber\":85583,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"purchaseTor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"purchaseProgram\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"connect\",\"cost\":2},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.stanek.charge(ns.args[0], ns.args[1]);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hhcmdlLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL3N0YW5lay9jaGFyZ2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUM5QixPQUFPLElBQUksRUFBRTtRQUNULE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7S0FDakQ7QUFDTCxDQUFDIn0=\",\"filename\":\"/lib/stanek/charge.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/stanek/charge.js\",\"url\":\"blob:file:///9a4c470b-4fdb-4f67-91e6-118dc33cfcaf\",\"moduleSequenceNumber\":99880}],\"dependents\":[],\"ramUsage\":2,\"server\":\"aevum-police\",\"moduleSequenceNumber\":99880,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.charge\",\"cost\":0.4}]}}],\"serversOnNetwork\":[\"rothman-uni\",\"galactic-cyber\",\"snap-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":222,\"hackDifficulty\":222,\"minDifficulty\":74,\"moneyAvailable\":199187441.25,\"moneyMax\":2240858714.0625,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":409,\"serverGrowth\":46,\"suppression\":0,\"activeSuppressionThreads\":[],\"suppressionIntervalID\":null,\"suppressionLastUpdateTime\":0}},\"rothman-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rothman-uni\",\"httpPortOpen\":false,\"ip\":\"21.9.3.3\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.grow(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLElBQUksR0FBdUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFFbkUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDdkIsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7UUFDeEMsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7S0FDM0MsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyJ9\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///30070ca4-4670-4e9c-a4ff-481ab2be1365\",\"moduleSequenceNumber\":86750}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":86750,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.weaken(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxJQUFJLEdBQXVCLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO0lBRW5FLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFO1FBQ3pCLGtCQUFrQixFQUFFLElBQUksQ0FBQyxlQUFlO1FBQ3hDLGtCQUFrQixFQUFFLElBQUksQ0FBQyxlQUFlO0tBQzNDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///a9b5a75b-8dbe-4af2-8a61-66c3c6bd2afe\",\"moduleSequenceNumber\":84422}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":84422,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.hack(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLElBQUksR0FBdUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFFbkUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDdkIsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7UUFDeEMsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7S0FDM0MsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyJ9\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":84395,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export var ReservedPorts;\\r\\n(function (ReservedPorts) {\\r\\n    ReservedPorts[ReservedPorts[\\\"HACKING_INFO\\\"] = 1] = \\\"HACKING_INFO\\\";\\r\\n    ReservedPorts[ReservedPorts[\\\"HACKNET_INFO\\\"] = 2] = \\\"HACKNET_INFO\\\";\\r\\n    ReservedPorts[ReservedPorts[\\\"HACK_WRITE_INFO\\\"] = 3] = \\\"HACK_WRITE_INFO\\\";\\r\\n})(ReservedPorts || (ReservedPorts = {}));\\r\\nexport const WEAKENJS = \\\"/lib/exec/weaken.js\\\";\\r\\nexport const GROWJS = \\\"/lib/exec/grow.js\\\";\\r\\nexport const HACKJS = \\\"/lib/exec/hack.js\\\";\\r\\nexport const UTILJS = \\\"/lib/util.js\\\";\\r\\nexport const CITIES = [\\\"Aevum\\\", \\\"Chongqing\\\", \\\"Sector-12\\\", \\\"New Tokyo\\\", \\\"Ishima\\\", \\\"Volhaven\\\"];\\r\\nexport function llog(ns, str, ...args) {\\r\\n    ns.print(ns.sprintf(\\\"%8s \\\" + str, new Date().toLocaleTimeString(\\\"it-IT\\\"), ...args));\\r\\n}\\r\\nexport function softenServer(ns, hostname) {\\r\\n    if (ns.hasRootAccess(hostname)) {\\r\\n        return;\\r\\n    }\\r\\n    let ports = 0;\\r\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n        ns.brutessh(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n        ns.ftpcrack(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n        ns.httpworm(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n        ns.relaysmtp(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n        ns.sqlinject(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ports >= ns.getServerNumPortsRequired(hostname)) {\\r\\n        ns.nuke(hostname);\\r\\n    }\\r\\n}\\r\\nexport function serverIsHackable(ns, hostname) {\\r\\n    return ns.hasRootAccess(hostname) && ns.getHackingLevel() >= ns.getServerRequiredHackingLevel(hostname);\\r\\n}\\r\\nexport function canExecuteOnServer(ns, hostname) {\\r\\n    return ns.hasRootAccess(hostname) && ns.getServerMaxRam(hostname) > 0;\\r\\n}\\r\\nexport function mapHosts(ns, hosts = {}, parents = [], current = \\\"home\\\") {\\r\\n    const newParents = parents.concat(current);\\r\\n    hosts[current] = newParents;\\r\\n    const children = ns.scan(current).filter((element) => !parents.includes(element));\\r\\n    for (const child of children) {\\r\\n        mapHosts(ns, hosts, newParents, child);\\r\\n    }\\r\\n    return hosts;\\r\\n}\\r\\nexport function allHosts(ns) {\\r\\n    return Object.keys(mapHosts(ns));\\r\\n}\\r\\nexport function doProgramBuys(ns) {\\r\\n    const player = ns.getPlayer();\\r\\n    if (!player.tor && player.money > 200e3)\\r\\n        ns.purchaseTor();\\r\\n    if (!ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\") && player.money > 500e3)\\r\\n        ns.purchaseProgram(\\\"BruteSSH.exe\\\");\\r\\n    if (!ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\") && player.money > 1500e3)\\r\\n        ns.purchaseProgram(\\\"FTPCrack.exe\\\");\\r\\n    if (!ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\") && player.money > 5e6)\\r\\n        ns.purchaseProgram(\\\"relaySMTP.exe\\\");\\r\\n    if (!ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\") && player.money > 30e6)\\r\\n        ns.purchaseProgram(\\\"HTTPWorm.exe\\\");\\r\\n    if (!ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\") && player.money > 250e6)\\r\\n        ns.purchaseProgram(\\\"SQLInject.exe\\\");\\r\\n}\\r\\nexport function doBuyAndSoftenAll(ns) {\\r\\n    doProgramBuys(ns);\\r\\n    for (const hostname of allHosts(ns)) {\\r\\n        softenServer(ns, hostname);\\r\\n    }\\r\\n}\\r\\nexport function stFormat(ns, ms, showms = false, showfull = false) {\\r\\n    let timeLeft = ms;\\r\\n    const hours = Math.floor(ms / (1000 * 60 * 60));\\r\\n    timeLeft -= hours * (1000 * 60 * 60);\\r\\n    const minutes = Math.floor(timeLeft / (1000 * 60));\\r\\n    timeLeft -= minutes * (1000 * 60);\\r\\n    const seconds = Math.floor(timeLeft / 1000);\\r\\n    timeLeft -= seconds * 1000;\\r\\n    const milliseconds = timeLeft;\\r\\n    if (showms) {\\r\\n        if (hours > 0 || showfull)\\r\\n            return ns.sprintf(\\\"%02d:%02d:%02d.%03d\\\", hours, minutes, seconds, milliseconds);\\r\\n        if (minutes > 0)\\r\\n            return ns.sprintf(\\\"%02d:%02d.%03d\\\", minutes, seconds, milliseconds);\\r\\n        return ns.sprintf(\\\"%02d.%03d\\\", seconds, milliseconds);\\r\\n    }\\r\\n    else {\\r\\n        if (hours > 0 || showfull)\\r\\n            return ns.sprintf(\\\"%02d:%02d:%02d\\\", hours, minutes, seconds);\\r\\n        if (minutes > 0)\\r\\n            return ns.sprintf(\\\"%02d:%02d\\\", minutes, seconds);\\r\\n        return ns.sprintf(\\\"%02d\\\", seconds);\\r\\n    }\\r\\n}\\r\\nexport function stdFormat(ns, offset = 0, showms = false) {\\r\\n    const date = new Date(new Date().getTime() + offset);\\r\\n    if (showms) {\\r\\n        const ms = ns.sprintf(\\\"%03d\\\", date.getUTCMilliseconds());\\r\\n        return date.toLocaleTimeString(\\\"it-IT\\\") + \\\".\\\" + ms;\\r\\n    }\\r\\n    else {\\r\\n        return date.toLocaleTimeString(\\\"it-IT\\\");\\r\\n    }\\r\\n}\\r\\nexport async function doBackdoors(ns) {\\r\\n    //const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"w0r1d_d43m0n\\\", \\\"b-and-a\\\", \\\"ecorp\\\", \\\"fulcrumassets\\\", \\\"fulcrumtech\\\"];\\r\\n    //const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"omnitek\\\", \\\"kuai-gong\\\", \\\"megacorp\\\"];\\r\\n    const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"w0r1d_d43m0n\\\"];\\r\\n    const hosts = mapHosts(ns);\\r\\n    for (const [hostName, trail] of Object.entries(hosts)) {\\r\\n        const server = ns.getServer(hostName);\\r\\n        if (!targetHosts.includes(hostName) ||\\r\\n            server.backdoorInstalled ||\\r\\n            server.requiredHackingSkill > ns.getHackingLevel() ||\\r\\n            !server.hasAdminRights)\\r\\n            continue;\\r\\n        ns.print(hostName);\\r\\n        for (const hostHopName of trail) {\\r\\n            ns.connect(hostHopName);\\r\\n        }\\r\\n        await ns.installBackdoor();\\r\\n        ns.connect(\\\"home\\\");\\r\\n    }\\r\\n}\\r\\nexport function cleanLogs(ns) {\\r\\n    ns.disableLog(\\\"disableLog\\\");\\r\\n    ns.disableLog(\\\"ALL\\\");\\r\\n    // ns.disableLog(\\\"sleep\\\")\\r\\n    // ns.disableLog(\\\"exec\\\")\\r\\n    // ns.disableLog(\\\"getServerMaxRam\\\")\\r\\n    // ns.disableLog(\\\"getServerSecurityLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerMinSecurityLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerMaxMoney\\\")\\r\\n    // ns.disableLog(\\\"getHackingLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerRequiredHackingLevel\\\")\\r\\n    // ns.disableLog(\\\"scan\\\")\\r\\n    // ns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n    // ns.disableLog(\\\"getServerUsedRam\\\")\\r\\n}\\r\\nexport const ALL_FACTIONS = [\\r\\n    \\\"Illuminati\\\",\\r\\n    \\\"Daedalus\\\",\\r\\n    \\\"The Covenant\\\",\\r\\n    \\\"ECorp\\\",\\r\\n    \\\"MegaCorp\\\",\\r\\n    \\\"Bachman & Associates\\\",\\r\\n    \\\"Blade Industries\\\",\\r\\n    \\\"NWO\\\",\\r\\n    \\\"Clarke Incorporated\\\",\\r\\n    \\\"OmniTek Incorporated\\\",\\r\\n    \\\"Four Sigma\\\",\\r\\n    \\\"KuaiGong International\\\",\\r\\n    \\\"Fulcrum Secret Technologies\\\",\\r\\n    \\\"BitRunners\\\",\\r\\n    \\\"The Black Hand\\\",\\r\\n    \\\"NiteSec\\\",\\r\\n    \\\"Aevum\\\",\\r\\n    \\\"Chongqing\\\",\\r\\n    \\\"Ishima\\\",\\r\\n    \\\"New Tokyo\\\",\\r\\n    \\\"Sector-12\\\",\\r\\n    \\\"Volhaven\\\",\\r\\n    \\\"Speakers for the Dead\\\",\\r\\n    \\\"The Dark Army\\\",\\r\\n    \\\"The Syndicate\\\",\\r\\n    \\\"Silhouette\\\",\\r\\n    \\\"Tetrads\\\",\\r\\n    \\\"Slum Snakes\\\",\\r\\n    \\\"Netburners\\\",\\r\\n    \\\"Tian Di Hui\\\",\\r\\n    \\\"CyberSec\\\",\\r\\n    \\\"Bladeburners\\\",\\r\\n    \\\"Church of the Machine God\\\",\\r\\n];\\r\\nexport async function writeOut(ns, data, startTime, endTime, result, startSec, startCash) {\\r\\n    if (data.writeFile !== \\\"\\\") {\\r\\n        const outstr = ns.sprintf(\\\"%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\", data.target, data.uid, data.batchId, data.realTimeStart + data.offset, data.realTimeStart + data.finish, data.operationTime, startTime, endTime, endTime - startTime, startTime - (data.realTimeStart + data.offset), endTime - (data.realTimeStart + data.finish), endTime - startTime - data.operationTime, result, startSec.toFixed(2), ns.getServerSecurityLevel(data.target).toFixed(2), ns.nFormat(startCash, \\\"($0.000a)\\\"), ns.nFormat(ns.getServerMoneyAvailable(data.target), \\\"($0.000a)\\\"));\\r\\n        while (!await ns.tryWritePort(ReservedPorts.HACK_WRITE_INFO, [data.writeFile, outstr]))\\r\\n            ;\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi91dGlsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLE1BQU0sQ0FBTixJQUFZLGFBSVg7QUFKRCxXQUFZLGFBQWE7SUFDckIsaUVBQWdCLENBQUE7SUFDaEIsaUVBQVksQ0FBQTtJQUNaLHVFQUFlLENBQUE7QUFDbkIsQ0FBQyxFQUpXLGFBQWEsS0FBYixhQUFhLFFBSXhCO0FBRUQsTUFBTSxDQUFDLE1BQU0sUUFBUSxHQUFHLHFCQUFxQixDQUFDO0FBQzlDLE1BQU0sQ0FBQyxNQUFNLE1BQU0sR0FBRyxtQkFBbUIsQ0FBQztBQUMxQyxNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUcsbUJBQW1CLENBQUM7QUFDMUMsTUFBTSxDQUFDLE1BQU0sTUFBTSxHQUFHLGNBQWMsQ0FBQztBQUVyQyxNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUcsQ0FBQyxPQUFPLEVBQUUsV0FBVyxFQUFFLFdBQVcsRUFBRSxXQUFXLEVBQUUsUUFBUSxFQUFFLFVBQVUsQ0FBQyxDQUFDO0FBRTdGLE1BQU0sVUFBVSxJQUFJLENBQUMsRUFBTSxFQUFFLEdBQVcsRUFBRSxHQUFHLElBQXlCO0lBQ2xFLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEdBQUcsR0FBRyxFQUFFLElBQUksSUFBSSxFQUFFLENBQUMsa0JBQWtCLENBQUMsT0FBTyxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDO0FBQ3hGLENBQUM7QUFFRCxNQUFNLFVBQVUsWUFBWSxDQUFDLEVBQU0sRUFBRSxRQUFnQjtJQUNqRCxJQUFJLEVBQUUsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDNUIsT0FBTztLQUNWO0lBRUQsSUFBSSxLQUFLLEdBQUcsQ0FBQyxDQUFDO0lBQ2QsSUFBSSxFQUFFLENBQUMsVUFBVSxDQUFDLGNBQWMsRUFB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\",\"filename\":\"/lib/util.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":13.25,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":84397,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"purchaseTor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"purchaseProgram\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"connect\",\"cost\":2},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.stanek.charge(ns.args[0], ns.args[1]);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hhcmdlLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL3N0YW5lay9jaGFyZ2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUM5QixPQUFPLElBQUksRUFBRTtRQUNULE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7S0FDakQ7QUFDTCxDQUFDIn0=\",\"filename\":\"/lib/stanek/charge.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/stanek/charge.js\",\"url\":\"blob:file:///79443573-5c61-45e0-ab8b-5718c82883bb\",\"moduleSequenceNumber\":99861}],\"dependents\":[],\"ramUsage\":2,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":99861,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.charge\",\"cost\":0.4}]}}],\"serversOnNetwork\":[\"netlink\",\"alpha-ent\",\"aevum-police\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":138,\"hackDifficulty\":138,\"minDifficulty\":46,\"moneyAvailable\":131929461,\"moneyMax\":1484206436.25,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":405,\"serverGrowth\":38,\"suppression\":0,\"activeSuppressionThreads\":[],\"suppressionIntervalID\":null,\"suppressionLastUpdateTime\":0}},\"zb-institute\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zb-institute\",\"httpPortOpen\":true,\"ip\":\"46.4.7.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.grow(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLElBQUksR0FBdUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFFbkUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDdkIsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7UUFDeEMsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7S0FDM0MsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyJ9\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zb-institute\",\"moduleSequenceNumber\":93251,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.weaken(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxJQUFJLEdBQXVCLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO0lBRW5FLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFO1FBQ3pCLGtCQUFrQixFQUFFLElBQUksQ0FBQyxlQUFlO1FBQ3hDLGtCQUFrQixFQUFFLElBQUksQ0FBQyxlQUFlO0tBQzNDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///939bdcd5-0f94-40eb-9253-4a907e1180fb\",\"moduleSequenceNumber\":94070}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zb-institute\",\"moduleSequenceNumber\":94070,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.hack(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLElBQUksR0FBdUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFFbkUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDdkIsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7UUFDeEMsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7S0FDM0MsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyJ9\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"zb-institute\",\"moduleSequenceNumber\":93255,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export var ReservedPorts;\\r\\n(function (ReservedPorts) {\\r\\n    ReservedPorts[ReservedPorts[\\\"HACKING_INFO\\\"] = 1] = \\\"HACKING_INFO\\\";\\r\\n    ReservedPorts[ReservedPorts[\\\"HACKNET_INFO\\\"] = 2] = \\\"HACKNET_INFO\\\";\\r\\n    ReservedPorts[ReservedPorts[\\\"HACK_WRITE_INFO\\\"] = 3] = \\\"HACK_WRITE_INFO\\\";\\r\\n})(ReservedPorts || (ReservedPorts = {}));\\r\\nexport const WEAKENJS = \\\"/lib/exec/weaken.js\\\";\\r\\nexport const GROWJS = \\\"/lib/exec/grow.js\\\";\\r\\nexport const HACKJS = \\\"/lib/exec/hack.js\\\";\\r\\nexport const UTILJS = \\\"/lib/util.js\\\";\\r\\nexport const CITIES = [\\\"Aevum\\\", \\\"Chongqing\\\", \\\"Sector-12\\\", \\\"New Tokyo\\\", \\\"Ishima\\\", \\\"Volhaven\\\"];\\r\\nexport function llog(ns, str, ...args) {\\r\\n    ns.print(ns.sprintf(\\\"%8s \\\" + str, new Date().toLocaleTimeString(\\\"it-IT\\\"), ...args));\\r\\n}\\r\\nexport function softenServer(ns, hostname) {\\r\\n    if (ns.hasRootAccess(hostname)) {\\r\\n        return;\\r\\n    }\\r\\n    let ports = 0;\\r\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n        ns.brutessh(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n        ns.ftpcrack(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n        ns.httpworm(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n        ns.relaysmtp(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n        ns.sqlinject(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ports >= ns.getServerNumPortsRequired(hostname)) {\\r\\n        ns.nuke(hostname);\\r\\n    }\\r\\n}\\r\\nexport function serverIsHackable(ns, hostname) {\\r\\n    return ns.hasRootAccess(hostname) && ns.getHackingLevel() >= ns.getServerRequiredHackingLevel(hostname);\\r\\n}\\r\\nexport function canExecuteOnServer(ns, hostname) {\\r\\n    return ns.hasRootAccess(hostname) && ns.getServerMaxRam(hostname) > 0;\\r\\n}\\r\\nexport function mapHosts(ns, hosts = {}, parents = [], current = \\\"home\\\") {\\r\\n    const newParents = parents.concat(current);\\r\\n    hosts[current] = newParents;\\r\\n    const children = ns.scan(current).filter((element) => !parents.includes(element));\\r\\n    for (const child of children) {\\r\\n        mapHosts(ns, hosts, newParents, child);\\r\\n    }\\r\\n    return hosts;\\r\\n}\\r\\nexport function allHosts(ns) {\\r\\n    return Object.keys(mapHosts(ns));\\r\\n}\\r\\nexport function doProgramBuys(ns) {\\r\\n    const player = ns.getPlayer();\\r\\n    if (!player.tor && player.money > 200e3)\\r\\n        ns.purchaseTor();\\r\\n    if (!ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\") && player.money > 500e3)\\r\\n        ns.purchaseProgram(\\\"BruteSSH.exe\\\");\\r\\n    if (!ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\") && player.money > 1500e3)\\r\\n        ns.purchaseProgram(\\\"FTPCrack.exe\\\");\\r\\n    if (!ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\") && player.money > 5e6)\\r\\n        ns.purchaseProgram(\\\"relaySMTP.exe\\\");\\r\\n    if (!ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\") && player.money > 30e6)\\r\\n        ns.purchaseProgram(\\\"HTTPWorm.exe\\\");\\r\\n    if (!ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\") && player.money > 250e6)\\r\\n        ns.purchaseProgram(\\\"SQLInject.exe\\\");\\r\\n}\\r\\nexport function doBuyAndSoftenAll(ns) {\\r\\n    doProgramBuys(ns);\\r\\n    for (const hostname of allHosts(ns)) {\\r\\n        softenServer(ns, hostname);\\r\\n    }\\r\\n}\\r\\nexport function stFormat(ns, ms, showms = false, showfull = false) {\\r\\n    let timeLeft = ms;\\r\\n    const hours = Math.floor(ms / (1000 * 60 * 60));\\r\\n    timeLeft -= hours * (1000 * 60 * 60);\\r\\n    const minutes = Math.floor(timeLeft / (1000 * 60));\\r\\n    timeLeft -= minutes * (1000 * 60);\\r\\n    const seconds = Math.floor(timeLeft / 1000);\\r\\n    timeLeft -= seconds * 1000;\\r\\n    const milliseconds = timeLeft;\\r\\n    if (showms) {\\r\\n        if (hours > 0 || showfull)\\r\\n            return ns.sprintf(\\\"%02d:%02d:%02d.%03d\\\", hours, minutes, seconds, milliseconds);\\r\\n        if (minutes > 0)\\r\\n            return ns.sprintf(\\\"%02d:%02d.%03d\\\", minutes, seconds, milliseconds);\\r\\n        return ns.sprintf(\\\"%02d.%03d\\\", seconds, milliseconds);\\r\\n    }\\r\\n    else {\\r\\n        if (hours > 0 || showfull)\\r\\n            return ns.sprintf(\\\"%02d:%02d:%02d\\\", hours, minutes, seconds);\\r\\n        if (minutes > 0)\\r\\n            return ns.sprintf(\\\"%02d:%02d\\\", minutes, seconds);\\r\\n        return ns.sprintf(\\\"%02d\\\", seconds);\\r\\n    }\\r\\n}\\r\\nexport function stdFormat(ns, offset = 0, showms = false) {\\r\\n    const date = new Date(new Date().getTime() + offset);\\r\\n    if (showms) {\\r\\n        const ms = ns.sprintf(\\\"%03d\\\", date.getUTCMilliseconds());\\r\\n        return date.toLocaleTimeString(\\\"it-IT\\\") + \\\".\\\" + ms;\\r\\n    }\\r\\n    else {\\r\\n        return date.toLocaleTimeString(\\\"it-IT\\\");\\r\\n    }\\r\\n}\\r\\nexport async function doBackdoors(ns) {\\r\\n    //const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"w0r1d_d43m0n\\\", \\\"b-and-a\\\", \\\"ecorp\\\", \\\"fulcrumassets\\\", \\\"fulcrumtech\\\"];\\r\\n    //const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"omnitek\\\", \\\"kuai-gong\\\", \\\"megacorp\\\"];\\r\\n    const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"w0r1d_d43m0n\\\"];\\r\\n    const hosts = mapHosts(ns);\\r\\n    for (const [hostName, trail] of Object.entries(hosts)) {\\r\\n        const server = ns.getServer(hostName);\\r\\n        if (!targetHosts.includes(hostName) ||\\r\\n            server.backdoorInstalled ||\\r\\n            server.requiredHackingSkill > ns.getHackingLevel() ||\\r\\n            !server.hasAdminRights)\\r\\n            continue;\\r\\n        ns.print(hostName);\\r\\n        for (const hostHopName of trail) {\\r\\n            ns.connect(hostHopName);\\r\\n        }\\r\\n        await ns.installBackdoor();\\r\\n        ns.connect(\\\"home\\\");\\r\\n    }\\r\\n}\\r\\nexport function cleanLogs(ns) {\\r\\n    ns.disableLog(\\\"disableLog\\\");\\r\\n    ns.disableLog(\\\"ALL\\\");\\r\\n    // ns.disableLog(\\\"sleep\\\")\\r\\n    // ns.disableLog(\\\"exec\\\")\\r\\n    // ns.disableLog(\\\"getServerMaxRam\\\")\\r\\n    // ns.disableLog(\\\"getServerSecurityLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerMinSecurityLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerMaxMoney\\\")\\r\\n    // ns.disableLog(\\\"getHackingLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerRequiredHackingLevel\\\")\\r\\n    // ns.disableLog(\\\"scan\\\")\\r\\n    // ns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n    // ns.disableLog(\\\"getServerUsedRam\\\")\\r\\n}\\r\\nexport const ALL_FACTIONS = [\\r\\n    \\\"Illuminati\\\",\\r\\n    \\\"Daedalus\\\",\\r\\n    \\\"The Covenant\\\",\\r\\n    \\\"ECorp\\\",\\r\\n    \\\"MegaCorp\\\",\\r\\n    \\\"Bachman & Associates\\\",\\r\\n    \\\"Blade Industries\\\",\\r\\n    \\\"NWO\\\",\\r\\n    \\\"Clarke Incorporated\\\",\\r\\n    \\\"OmniTek Incorporated\\\",\\r\\n    \\\"Four Sigma\\\",\\r\\n    \\\"KuaiGong International\\\",\\r\\n    \\\"Fulcrum Secret Technologies\\\",\\r\\n    \\\"BitRunners\\\",\\r\\n    \\\"The Black Hand\\\",\\r\\n    \\\"NiteSec\\\",\\r\\n    \\\"Aevum\\\",\\r\\n    \\\"Chongqing\\\",\\r\\n    \\\"Ishima\\\",\\r\\n    \\\"New Tokyo\\\",\\r\\n    \\\"Sector-12\\\",\\r\\n    \\\"Volhaven\\\",\\r\\n    \\\"Speakers for the Dead\\\",\\r\\n    \\\"The Dark Army\\\",\\r\\n    \\\"The Syndicate\\\",\\r\\n    \\\"Silhouette\\\",\\r\\n    \\\"Tetrads\\\",\\r\\n    \\\"Slum Snakes\\\",\\r\\n    \\\"Netburners\\\",\\r\\n    \\\"Tian Di Hui\\\",\\r\\n    \\\"CyberSec\\\",\\r\\n    \\\"Bladeburners\\\",\\r\\n    \\\"Church of the Machine God\\\",\\r\\n];\\r\\nexport async function writeOut(ns, data, startTime, endTime, result, startSec, startCash) {\\r\\n    if (data.writeFile !== \\\"\\\") {\\r\\n        const outstr = ns.sprintf(\\\"%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\", data.target, data.uid, data.batchId, data.realTimeStart + data.offset, data.realTimeStart + data.finish, data.operationTime, startTime, endTime, endTime - startTime, startTime - (data.realTimeStart + data.offset), endTime - (data.realTimeStart + data.finish), endTime - startTime - data.operationTime, result, startSec.toFixed(2), ns.getServerSecurityLevel(data.target).toFixed(2), ns.nFormat(startCash, \\\"($0.000a)\\\"), ns.nFormat(ns.getServerMoneyAvailable(data.target), \\\"($0.000a)\\\"));\\r\\n        while (!await ns.tryWritePort(ReservedPorts.HACK_WRITE_INFO, [data.writeFile, outstr]))\\r\\n            ;\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi91dGlsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLE1BQU0sQ0FBTixJQUFZLGFBSVg7QUFKRCxXQUFZLGFBQWE7SUFDckIsaUVBQWdCLENBQUE7SUFDaEIsaUVBQVksQ0FBQTtJQUNaLHVFQUFlLENBQUE7QUFDbkIsQ0FBQyxFQUpXLGFBQWEsS0FBYixhQUFhLFFBSXhCO0FBRUQsTUFBTSxDQUFDLE1BQU0sUUFBUSxHQUFHLHFCQUFxQixDQUFDO0FBQzlDLE1BQU0sQ0FBQyxNQUFNLE1BQU0sR0FBRyxtQkFBbUIsQ0FBQztBQUMxQyxNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUcsbUJBQW1CLENBQUM7QUFDMUMsTUFBTSxDQUFDLE1BQU0sTUFBTSxHQUFHLGNBQWMsQ0FBQztBQUVyQyxNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUcsQ0FBQyxPQUFPLEVBQUUsV0FBVyxFQUFFLFdBQVcsRUFBRSxXQUFXLEVBQUUsUUFBUSxFQUFFLFVBQVUsQ0FBQyxDQUFDO0FBRTdGLE1BQU0sVUFBVSxJQUFJLENBQUMsRUFBTSxFQUFFLEdBQVcsRUFBRSxHQUFHLElBQXlCO0lBQ2xFLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEdBQUcsR0FBRyxFQUFFLElBQUksSUFBSSxFQUFFLENBQUMsa0JBQWtCLENBQUMsT0FBTyxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDO0FBQ3hGLENBQUM7QUFFRCxNQUFNLFVBQVUsWUFBWSxDQUFDLEVBQU0sRUFBRSxRQUFnQjtJQUNqRCxJQUFJLEVBQUUsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDNUIsT0FBTztLQUNWO0lBRUQsSUFBSSxLQUFLLEdBQUcsQ0FBQyxDQUFDO0lBQ2QsSUFBSSxFQUFFLENBQUMsVUFBVSxDQUFDLGNBQWMsRUFB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\",\"filename\":\"/lib/util.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":13.25,\"server\":\"zb-institute\",\"moduleSequenceNumber\":93257,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"purchaseTor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"purchaseProgram\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"connect\",\"cost\":2},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.stanek.charge(ns.args[0], ns.args[1]);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hhcmdlLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL3N0YW5lay9jaGFyZ2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUM5QixPQUFPLElBQUksRUFBRTtRQUNULE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7S0FDakQ7QUFDTCxDQUFDIn0=\",\"filename\":\"/lib/stanek/charge.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/stanek/charge.js\",\"url\":\"blob:file:///511989e3-7d95-40c1-b892-7fad7a29f770\",\"moduleSequenceNumber\":99884}],\"dependents\":[],\"ramUsage\":2,\"server\":\"zb-institute\",\"moduleSequenceNumber\":99884,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.charge\",\"cost\":0.4}]}}],\"serversOnNetwork\":[\"comptek\",\"lexo-corp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":207,\"hackDifficulty\":207,\"minDifficulty\":69,\"moneyAvailable\":705421766.25,\"moneyMax\":7935994870.3125,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":770,\"serverGrowth\":78,\"suppression\":0,\"activeSuppressionThreads\":[],\"suppressionIntervalID\":null,\"suppressionLastUpdateTime\":0}},\"summit-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"summit-uni\",\"httpPortOpen\":false,\"ip\":\"17.9.0.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.grow(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLElBQUksR0FBdUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFFbkUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDdkIsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7UUFDeEMsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7S0FDM0MsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyJ9\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"summit-uni\",\"moduleSequenceNumber\":84415,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.weaken(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxJQUFJLEdBQXVCLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO0lBRW5FLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFO1FBQ3pCLGtCQUFrQixFQUFFLElBQUksQ0FBQyxlQUFlO1FBQ3hDLGtCQUFrQixFQUFFLElBQUksQ0FBQyxlQUFlO0tBQzNDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///7018b4b9-155f-4cfa-aae2-73248a0d60e8\",\"moduleSequenceNumber\":85595}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"summit-uni\",\"moduleSequenceNumber\":85595,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.hack(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLElBQUksR0FBdUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFFbkUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDdkIsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7UUFDeEMsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7S0FDM0MsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyJ9\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"summit-uni\",\"moduleSequenceNumber\":84419,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export var ReservedPorts;\\r\\n(function (ReservedPorts) {\\r\\n    ReservedPorts[ReservedPorts[\\\"HACKING_INFO\\\"] = 1] = \\\"HACKING_INFO\\\";\\r\\n    ReservedPorts[ReservedPorts[\\\"HACKNET_INFO\\\"] = 2] = \\\"HACKNET_INFO\\\";\\r\\n    ReservedPorts[ReservedPorts[\\\"HACK_WRITE_INFO\\\"] = 3] = \\\"HACK_WRITE_INFO\\\";\\r\\n})(ReservedPorts || (ReservedPorts = {}));\\r\\nexport const WEAKENJS = \\\"/lib/exec/weaken.js\\\";\\r\\nexport const GROWJS = \\\"/lib/exec/grow.js\\\";\\r\\nexport const HACKJS = \\\"/lib/exec/hack.js\\\";\\r\\nexport const UTILJS = \\\"/lib/util.js\\\";\\r\\nexport const CITIES = [\\\"Aevum\\\", \\\"Chongqing\\\", \\\"Sector-12\\\", \\\"New Tokyo\\\", \\\"Ishima\\\", \\\"Volhaven\\\"];\\r\\nexport function llog(ns, str, ...args) {\\r\\n    ns.print(ns.sprintf(\\\"%8s \\\" + str, new Date().toLocaleTimeString(\\\"it-IT\\\"), ...args));\\r\\n}\\r\\nexport function softenServer(ns, hostname) {\\r\\n    if (ns.hasRootAccess(hostname)) {\\r\\n        return;\\r\\n    }\\r\\n    let ports = 0;\\r\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n        ns.brutessh(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n        ns.ftpcrack(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n        ns.httpworm(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n        ns.relaysmtp(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n        ns.sqlinject(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ports >= ns.getServerNumPortsRequired(hostname)) {\\r\\n        ns.nuke(hostname);\\r\\n    }\\r\\n}\\r\\nexport function serverIsHackable(ns, hostname) {\\r\\n    return ns.hasRootAccess(hostname) && ns.getHackingLevel() >= ns.getServerRequiredHackingLevel(hostname);\\r\\n}\\r\\nexport function canExecuteOnServer(ns, hostname) {\\r\\n    return ns.hasRootAccess(hostname) && ns.getServerMaxRam(hostname) > 0;\\r\\n}\\r\\nexport function mapHosts(ns, hosts = {}, parents = [], current = \\\"home\\\") {\\r\\n    const newParents = parents.concat(current);\\r\\n    hosts[current] = newParents;\\r\\n    const children = ns.scan(current).filter((element) => !parents.includes(element));\\r\\n    for (const child of children) {\\r\\n        mapHosts(ns, hosts, newParents, child);\\r\\n    }\\r\\n    return hosts;\\r\\n}\\r\\nexport function allHosts(ns) {\\r\\n    return Object.keys(mapHosts(ns));\\r\\n}\\r\\nexport function doProgramBuys(ns) {\\r\\n    const player = ns.getPlayer();\\r\\n    if (!player.tor && player.money > 200e3)\\r\\n        ns.purchaseTor();\\r\\n    if (!ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\") && player.money > 500e3)\\r\\n        ns.purchaseProgram(\\\"BruteSSH.exe\\\");\\r\\n    if (!ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\") && player.money > 1500e3)\\r\\n        ns.purchaseProgram(\\\"FTPCrack.exe\\\");\\r\\n    if (!ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\") && player.money > 5e6)\\r\\n        ns.purchaseProgram(\\\"relaySMTP.exe\\\");\\r\\n    if (!ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\") && player.money > 30e6)\\r\\n        ns.purchaseProgram(\\\"HTTPWorm.exe\\\");\\r\\n    if (!ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\") && player.money > 250e6)\\r\\n        ns.purchaseProgram(\\\"SQLInject.exe\\\");\\r\\n}\\r\\nexport function doBuyAndSoftenAll(ns) {\\r\\n    doProgramBuys(ns);\\r\\n    for (const hostname of allHosts(ns)) {\\r\\n        softenServer(ns, hostname);\\r\\n    }\\r\\n}\\r\\nexport function stFormat(ns, ms, showms = false, showfull = false) {\\r\\n    let timeLeft = ms;\\r\\n    const hours = Math.floor(ms / (1000 * 60 * 60));\\r\\n    timeLeft -= hours * (1000 * 60 * 60);\\r\\n    const minutes = Math.floor(timeLeft / (1000 * 60));\\r\\n    timeLeft -= minutes * (1000 * 60);\\r\\n    const seconds = Math.floor(timeLeft / 1000);\\r\\n    timeLeft -= seconds * 1000;\\r\\n    const milliseconds = timeLeft;\\r\\n    if (showms) {\\r\\n        if (hours > 0 || showfull)\\r\\n            return ns.sprintf(\\\"%02d:%02d:%02d.%03d\\\", hours, minutes, seconds, milliseconds);\\r\\n        if (minutes > 0)\\r\\n            return ns.sprintf(\\\"%02d:%02d.%03d\\\", minutes, seconds, milliseconds);\\r\\n        return ns.sprintf(\\\"%02d.%03d\\\", seconds, milliseconds);\\r\\n    }\\r\\n    else {\\r\\n        if (hours > 0 || showfull)\\r\\n            return ns.sprintf(\\\"%02d:%02d:%02d\\\", hours, minutes, seconds);\\r\\n        if (minutes > 0)\\r\\n            return ns.sprintf(\\\"%02d:%02d\\\", minutes, seconds);\\r\\n        return ns.sprintf(\\\"%02d\\\", seconds);\\r\\n    }\\r\\n}\\r\\nexport function stdFormat(ns, offset = 0, showms = false) {\\r\\n    const date = new Date(new Date().getTime() + offset);\\r\\n    if (showms) {\\r\\n        const ms = ns.sprintf(\\\"%03d\\\", date.getUTCMilliseconds());\\r\\n        return date.toLocaleTimeString(\\\"it-IT\\\") + \\\".\\\" + ms;\\r\\n    }\\r\\n    else {\\r\\n        return date.toLocaleTimeString(\\\"it-IT\\\");\\r\\n    }\\r\\n}\\r\\nexport async function doBackdoors(ns) {\\r\\n    //const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"w0r1d_d43m0n\\\", \\\"b-and-a\\\", \\\"ecorp\\\", \\\"fulcrumassets\\\", \\\"fulcrumtech\\\"];\\r\\n    //const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"omnitek\\\", \\\"kuai-gong\\\", \\\"megacorp\\\"];\\r\\n    const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"w0r1d_d43m0n\\\"];\\r\\n    const hosts = mapHosts(ns);\\r\\n    for (const [hostName, trail] of Object.entries(hosts)) {\\r\\n        const server = ns.getServer(hostName);\\r\\n        if (!targetHosts.includes(hostName) ||\\r\\n            server.backdoorInstalled ||\\r\\n            server.requiredHackingSkill > ns.getHackingLevel() ||\\r\\n            !server.hasAdminRights)\\r\\n            continue;\\r\\n        ns.print(hostName);\\r\\n        for (const hostHopName of trail) {\\r\\n            ns.connect(hostHopName);\\r\\n        }\\r\\n        await ns.installBackdoor();\\r\\n        ns.connect(\\\"home\\\");\\r\\n    }\\r\\n}\\r\\nexport function cleanLogs(ns) {\\r\\n    ns.disableLog(\\\"disableLog\\\");\\r\\n    ns.disableLog(\\\"ALL\\\");\\r\\n    // ns.disableLog(\\\"sleep\\\")\\r\\n    // ns.disableLog(\\\"exec\\\")\\r\\n    // ns.disableLog(\\\"getServerMaxRam\\\")\\r\\n    // ns.disableLog(\\\"getServerSecurityLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerMinSecurityLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerMaxMoney\\\")\\r\\n    // ns.disableLog(\\\"getHackingLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerRequiredHackingLevel\\\")\\r\\n    // ns.disableLog(\\\"scan\\\")\\r\\n    // ns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n    // ns.disableLog(\\\"getServerUsedRam\\\")\\r\\n}\\r\\nexport const ALL_FACTIONS = [\\r\\n    \\\"Illuminati\\\",\\r\\n    \\\"Daedalus\\\",\\r\\n    \\\"The Covenant\\\",\\r\\n    \\\"ECorp\\\",\\r\\n    \\\"MegaCorp\\\",\\r\\n    \\\"Bachman & Associates\\\",\\r\\n    \\\"Blade Industries\\\",\\r\\n    \\\"NWO\\\",\\r\\n    \\\"Clarke Incorporated\\\",\\r\\n    \\\"OmniTek Incorporated\\\",\\r\\n    \\\"Four Sigma\\\",\\r\\n    \\\"KuaiGong International\\\",\\r\\n    \\\"Fulcrum Secret Technologies\\\",\\r\\n    \\\"BitRunners\\\",\\r\\n    \\\"The Black Hand\\\",\\r\\n    \\\"NiteSec\\\",\\r\\n    \\\"Aevum\\\",\\r\\n    \\\"Chongqing\\\",\\r\\n    \\\"Ishima\\\",\\r\\n    \\\"New Tokyo\\\",\\r\\n    \\\"Sector-12\\\",\\r\\n    \\\"Volhaven\\\",\\r\\n    \\\"Speakers for the Dead\\\",\\r\\n    \\\"The Dark Army\\\",\\r\\n    \\\"The Syndicate\\\",\\r\\n    \\\"Silhouette\\\",\\r\\n    \\\"Tetrads\\\",\\r\\n    \\\"Slum Snakes\\\",\\r\\n    \\\"Netburners\\\",\\r\\n    \\\"Tian Di Hui\\\",\\r\\n    \\\"CyberSec\\\",\\r\\n    \\\"Bladeburners\\\",\\r\\n    \\\"Church of the Machine God\\\",\\r\\n];\\r\\nexport async function writeOut(ns, data, startTime, endTime, result, startSec, startCash) {\\r\\n    if (data.writeFile !== \\\"\\\") {\\r\\n        const outstr = ns.sprintf(\\\"%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\", data.target, data.uid, data.batchId, data.realTimeStart + data.offset, data.realTimeStart + data.finish, data.operationTime, startTime, endTime, endTime - startTime, startTime - (data.realTimeStart + data.offset), endTime - (data.realTimeStart + data.finish), endTime - startTime - data.operationTime, result, startSec.toFixed(2), ns.getServerSecurityLevel(data.target).toFixed(2), ns.nFormat(startCash, \\\"($0.000a)\\\"), ns.nFormat(ns.getServerMoneyAvailable(data.target), \\\"($0.000a)\\\"));\\r\\n        while (!await ns.tryWritePort(ReservedPorts.HACK_WRITE_INFO, [data.writeFile, outstr]))\\r\\n            ;\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi91dGlsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLE1BQU0sQ0FBTixJQUFZLGFBSVg7QUFKRCxXQUFZLGFBQWE7SUFDckIsaUVBQWdCLENBQUE7SUFDaEIsaUVBQVksQ0FBQTtJQUNaLHVFQUFlLENBQUE7QUFDbkIsQ0FBQyxFQUpXLGFBQWEsS0FBYixhQUFhLFFBSXhCO0FBRUQsTUFBTSxDQUFDLE1BQU0sUUFBUSxHQUFHLHFCQUFxQixDQUFDO0FBQzlDLE1BQU0sQ0FBQyxNQUFNLE1BQU0sR0FBRyxtQkFBbUIsQ0FBQztBQUMxQyxNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUcsbUJBQW1CLENBQUM7QUFDMUMsTUFBTSxDQUFDLE1BQU0sTUFBTSxHQUFHLGNBQWMsQ0FBQztBQUVyQyxNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUcsQ0FBQyxPQUFPLEVBQUUsV0FBVyxFQUFFLFdBQVcsRUFBRSxXQUFXLEVBQUUsUUFBUSxFQUFFLFVBQVUsQ0FBQyxDQUFDO0FBRTdGLE1BQU0sVUFBVSxJQUFJLENBQUMsRUFBTSxFQUFFLEdBQVcsRUFBRSxHQUFHLElBQXlCO0lBQ2xFLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEdBQUcsR0FBRyxFQUFFLElBQUksSUFBSSxFQUFFLENBQUMsa0JBQWtCLENBQUMsT0FBTyxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDO0FBQ3hGLENBQUM7QUFFRCxNQUFNLFVBQVUsWUFBWSxDQUFDLEVBQU0sRUFBRSxRQUFnQjtJQUNqRCxJQUFJLEVBQUUsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDNUIsT0FBTztLQUNWO0lBRUQsSUFBSSxLQUFLLEdBQUcsQ0FBQyxDQUFDO0lBQ2QsSUFBSSxFQUFFLENBQUMsVUFBVSxDQUFDLGNBQWMsRUFB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\",\"filename\":\"/lib/util.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":13.25,\"server\":\"summit-uni\",\"moduleSequenceNumber\":84421,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"purchaseTor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"purchaseProgram\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"connect\",\"cost\":2},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.stanek.charge(ns.args[0], ns.args[1]);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hhcmdlLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL3N0YW5lay9jaGFyZ2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUM5QixPQUFPLElBQUksRUFBRTtRQUNULE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7S0FDakQ7QUFDTCxDQUFDIn0=\",\"filename\":\"/lib/stanek/charge.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/stanek/charge.js\",\"url\":\"blob:file:///2b4aff80-97c9-4ef9-b43a-545ef3c645da\",\"moduleSequenceNumber\":99898}],\"dependents\":[],\"ramUsage\":2,\"server\":\"summit-uni\",\"moduleSequenceNumber\":99898,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.charge\",\"cost\":0.4}]}}],\"serversOnNetwork\":[\"crush-fitness\",\"millenium-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":156,\"hackDifficulty\":156,\"minDifficulty\":52,\"moneyAvailable\":216142689,\"moneyMax\":2431605251.25,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":455,\"serverGrowth\":55,\"suppression\":0,\"activeSuppressionThreads\":[],\"suppressionIntervalID\":null,\"suppressionLastUpdateTime\":0}},\"syscore\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"syscore\",\"httpPortOpen\":true,\"ip\":\"13.3.9.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"avmnite-02h\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":237,\"hackDifficulty\":237,\"minDifficulty\":79,\"moneyAvailable\":406167216.75,\"moneyMax\":4569381188.4375,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":613,\"serverGrowth\":61,\"suppression\":0,\"activeSuppressionThreads\":[],\"suppressionIntervalID\":null,\"suppressionLastUpdateTime\":0}},\"catalyst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"catalyst\",\"httpPortOpen\":false,\"ip\":\"20.9.3.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.grow(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLElBQUksR0FBdUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFFbkUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDdkIsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7UUFDeEMsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7S0FDM0MsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyJ9\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///3cbf629f-c437-494f-bfad-8a394e4c198f\",\"moduleSequenceNumber\":86742}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"catalyst\",\"moduleSequenceNumber\":86742,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.weaken(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxJQUFJLEdBQXVCLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO0lBRW5FLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFO1FBQ3pCLGtCQUFrQixFQUFFLElBQUksQ0FBQyxlQUFlO1FBQ3hDLGtCQUFrQixFQUFFLElBQUksQ0FBQyxlQUFlO0tBQzNDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///3682e74a-d7be-4490-a349-25394670a3e8\",\"moduleSequenceNumber\":85597}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"catalyst\",\"moduleSequenceNumber\":85597,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.hack(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLElBQUksR0FBdUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFFbkUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDdkIsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7UUFDeEMsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7S0FDM0MsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyJ9\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"catalyst\",\"moduleSequenceNumber\":84403,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export var ReservedPorts;\\r\\n(function (ReservedPorts) {\\r\\n    ReservedPorts[ReservedPorts[\\\"HACKING_INFO\\\"] = 1] = \\\"HACKING_INFO\\\";\\r\\n    ReservedPorts[ReservedPorts[\\\"HACKNET_INFO\\\"] = 2] = \\\"HACKNET_INFO\\\";\\r\\n    ReservedPorts[ReservedPorts[\\\"HACK_WRITE_INFO\\\"] = 3] = \\\"HACK_WRITE_INFO\\\";\\r\\n})(ReservedPorts || (ReservedPorts = {}));\\r\\nexport const WEAKENJS = \\\"/lib/exec/weaken.js\\\";\\r\\nexport const GROWJS = \\\"/lib/exec/grow.js\\\";\\r\\nexport const HACKJS = \\\"/lib/exec/hack.js\\\";\\r\\nexport const UTILJS = \\\"/lib/util.js\\\";\\r\\nexport const CITIES = [\\\"Aevum\\\", \\\"Chongqing\\\", \\\"Sector-12\\\", \\\"New Tokyo\\\", \\\"Ishima\\\", \\\"Volhaven\\\"];\\r\\nexport function llog(ns, str, ...args) {\\r\\n    ns.print(ns.sprintf(\\\"%8s \\\" + str, new Date().toLocaleTimeString(\\\"it-IT\\\"), ...args));\\r\\n}\\r\\nexport function softenServer(ns, hostname) {\\r\\n    if (ns.hasRootAccess(hostname)) {\\r\\n        return;\\r\\n    }\\r\\n    let ports = 0;\\r\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n        ns.brutessh(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n        ns.ftpcrack(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n        ns.httpworm(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n        ns.relaysmtp(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n        ns.sqlinject(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ports >= ns.getServerNumPortsRequired(hostname)) {\\r\\n        ns.nuke(hostname);\\r\\n    }\\r\\n}\\r\\nexport function serverIsHackable(ns, hostname) {\\r\\n    return ns.hasRootAccess(hostname) && ns.getHackingLevel() >= ns.getServerRequiredHackingLevel(hostname);\\r\\n}\\r\\nexport function canExecuteOnServer(ns, hostname) {\\r\\n    return ns.hasRootAccess(hostname) && ns.getServerMaxRam(hostname) > 0;\\r\\n}\\r\\nexport function mapHosts(ns, hosts = {}, parents = [], current = \\\"home\\\") {\\r\\n    const newParents = parents.concat(current);\\r\\n    hosts[current] = newParents;\\r\\n    const children = ns.scan(current).filter((element) => !parents.includes(element));\\r\\n    for (const child of children) {\\r\\n        mapHosts(ns, hosts, newParents, child);\\r\\n    }\\r\\n    return hosts;\\r\\n}\\r\\nexport function allHosts(ns) {\\r\\n    return Object.keys(mapHosts(ns));\\r\\n}\\r\\nexport function doProgramBuys(ns) {\\r\\n    const player = ns.getPlayer();\\r\\n    if (!player.tor && player.money > 200e3)\\r\\n        ns.purchaseTor();\\r\\n    if (!ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\") && player.money > 500e3)\\r\\n        ns.purchaseProgram(\\\"BruteSSH.exe\\\");\\r\\n    if (!ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\") && player.money > 1500e3)\\r\\n        ns.purchaseProgram(\\\"FTPCrack.exe\\\");\\r\\n    if (!ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\") && player.money > 5e6)\\r\\n        ns.purchaseProgram(\\\"relaySMTP.exe\\\");\\r\\n    if (!ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\") && player.money > 30e6)\\r\\n        ns.purchaseProgram(\\\"HTTPWorm.exe\\\");\\r\\n    if (!ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\") && player.money > 250e6)\\r\\n        ns.purchaseProgram(\\\"SQLInject.exe\\\");\\r\\n}\\r\\nexport function doBuyAndSoftenAll(ns) {\\r\\n    doProgramBuys(ns);\\r\\n    for (const hostname of allHosts(ns)) {\\r\\n        softenServer(ns, hostname);\\r\\n    }\\r\\n}\\r\\nexport function stFormat(ns, ms, showms = false, showfull = false) {\\r\\n    let timeLeft = ms;\\r\\n    const hours = Math.floor(ms / (1000 * 60 * 60));\\r\\n    timeLeft -= hours * (1000 * 60 * 60);\\r\\n    const minutes = Math.floor(timeLeft / (1000 * 60));\\r\\n    timeLeft -= minutes * (1000 * 60);\\r\\n    const seconds = Math.floor(timeLeft / 1000);\\r\\n    timeLeft -= seconds * 1000;\\r\\n    const milliseconds = timeLeft;\\r\\n    if (showms) {\\r\\n        if (hours > 0 || showfull)\\r\\n            return ns.sprintf(\\\"%02d:%02d:%02d.%03d\\\", hours, minutes, seconds, milliseconds);\\r\\n        if (minutes > 0)\\r\\n            return ns.sprintf(\\\"%02d:%02d.%03d\\\", minutes, seconds, milliseconds);\\r\\n        return ns.sprintf(\\\"%02d.%03d\\\", seconds, milliseconds);\\r\\n    }\\r\\n    else {\\r\\n        if (hours > 0 || showfull)\\r\\n            return ns.sprintf(\\\"%02d:%02d:%02d\\\", hours, minutes, seconds);\\r\\n        if (minutes > 0)\\r\\n            return ns.sprintf(\\\"%02d:%02d\\\", minutes, seconds);\\r\\n        return ns.sprintf(\\\"%02d\\\", seconds);\\r\\n    }\\r\\n}\\r\\nexport function stdFormat(ns, offset = 0, showms = false) {\\r\\n    const date = new Date(new Date().getTime() + offset);\\r\\n    if (showms) {\\r\\n        const ms = ns.sprintf(\\\"%03d\\\", date.getUTCMilliseconds());\\r\\n        return date.toLocaleTimeString(\\\"it-IT\\\") + \\\".\\\" + ms;\\r\\n    }\\r\\n    else {\\r\\n        return date.toLocaleTimeString(\\\"it-IT\\\");\\r\\n    }\\r\\n}\\r\\nexport async function doBackdoors(ns) {\\r\\n    //const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"w0r1d_d43m0n\\\", \\\"b-and-a\\\", \\\"ecorp\\\", \\\"fulcrumassets\\\", \\\"fulcrumtech\\\"];\\r\\n    //const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"omnitek\\\", \\\"kuai-gong\\\", \\\"megacorp\\\"];\\r\\n    const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"w0r1d_d43m0n\\\"];\\r\\n    const hosts = mapHosts(ns);\\r\\n    for (const [hostName, trail] of Object.entries(hosts)) {\\r\\n        const server = ns.getServer(hostName);\\r\\n        if (!targetHosts.includes(hostName) ||\\r\\n            server.backdoorInstalled ||\\r\\n            server.requiredHackingSkill > ns.getHackingLevel() ||\\r\\n            !server.hasAdminRights)\\r\\n            continue;\\r\\n        ns.print(hostName);\\r\\n        for (const hostHopName of trail) {\\r\\n            ns.connect(hostHopName);\\r\\n        }\\r\\n        await ns.installBackdoor();\\r\\n        ns.connect(\\\"home\\\");\\r\\n    }\\r\\n}\\r\\nexport function cleanLogs(ns) {\\r\\n    ns.disableLog(\\\"disableLog\\\");\\r\\n    ns.disableLog(\\\"ALL\\\");\\r\\n    // ns.disableLog(\\\"sleep\\\")\\r\\n    // ns.disableLog(\\\"exec\\\")\\r\\n    // ns.disableLog(\\\"getServerMaxRam\\\")\\r\\n    // ns.disableLog(\\\"getServerSecurityLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerMinSecurityLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerMaxMoney\\\")\\r\\n    // ns.disableLog(\\\"getHackingLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerRequiredHackingLevel\\\")\\r\\n    // ns.disableLog(\\\"scan\\\")\\r\\n    // ns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n    // ns.disableLog(\\\"getServerUsedRam\\\")\\r\\n}\\r\\nexport const ALL_FACTIONS = [\\r\\n    \\\"Illuminati\\\",\\r\\n    \\\"Daedalus\\\",\\r\\n    \\\"The Covenant\\\",\\r\\n    \\\"ECorp\\\",\\r\\n    \\\"MegaCorp\\\",\\r\\n    \\\"Bachman & Associates\\\",\\r\\n    \\\"Blade Industries\\\",\\r\\n    \\\"NWO\\\",\\r\\n    \\\"Clarke Incorporated\\\",\\r\\n    \\\"OmniTek Incorporated\\\",\\r\\n    \\\"Four Sigma\\\",\\r\\n    \\\"KuaiGong International\\\",\\r\\n    \\\"Fulcrum Secret Technologies\\\",\\r\\n    \\\"BitRunners\\\",\\r\\n    \\\"The Black Hand\\\",\\r\\n    \\\"NiteSec\\\",\\r\\n    \\\"Aevum\\\",\\r\\n    \\\"Chongqing\\\",\\r\\n    \\\"Ishima\\\",\\r\\n    \\\"New Tokyo\\\",\\r\\n    \\\"Sector-12\\\",\\r\\n    \\\"Volhaven\\\",\\r\\n    \\\"Speakers for the Dead\\\",\\r\\n    \\\"The Dark Army\\\",\\r\\n    \\\"The Syndicate\\\",\\r\\n    \\\"Silhouette\\\",\\r\\n    \\\"Tetrads\\\",\\r\\n    \\\"Slum Snakes\\\",\\r\\n    \\\"Netburners\\\",\\r\\n    \\\"Tian Di Hui\\\",\\r\\n    \\\"CyberSec\\\",\\r\\n    \\\"Bladeburners\\\",\\r\\n    \\\"Church of the Machine God\\\",\\r\\n];\\r\\nexport async function writeOut(ns, data, startTime, endTime, result, startSec, startCash) {\\r\\n    if (data.writeFile !== \\\"\\\") {\\r\\n        const outstr = ns.sprintf(\\\"%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\", data.target, data.uid, data.batchId, data.realTimeStart + data.offset, data.realTimeStart + data.finish, data.operationTime, startTime, endTime, endTime - startTime, startTime - (data.realTimeStart + data.offset), endTime - (data.realTimeStart + data.finish), endTime - startTime - data.operationTime, result, startSec.toFixed(2), ns.getServerSecurityLevel(data.target).toFixed(2), ns.nFormat(startCash, \\\"($0.000a)\\\"), ns.nFormat(ns.getServerMoneyAvailable(data.target), \\\"($0.000a)\\\"));\\r\\n        while (!await ns.tryWritePort(ReservedPorts.HACK_WRITE_INFO, [data.writeFile, outstr]))\\r\\n            ;\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi91dGlsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLE1BQU0sQ0FBTixJQUFZLGFBSVg7QUFKRCxXQUFZLGFBQWE7SUFDckIsaUVBQWdCLENBQUE7SUFDaEIsaUVBQVksQ0FBQTtJQUNaLHVFQUFlLENBQUE7QUFDbkIsQ0FBQyxFQUpXLGFBQWEsS0FBYixhQUFhLFFBSXhCO0FBRUQsTUFBTSxDQUFDLE1BQU0sUUFBUSxHQUFHLHFCQUFxQixDQUFDO0FBQzlDLE1BQU0sQ0FBQyxNQUFNLE1BQU0sR0FBRyxtQkFBbUIsQ0FBQztBQUMxQyxNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUcsbUJBQW1CLENBQUM7QUFDMUMsTUFBTSxDQUFDLE1BQU0sTUFBTSxHQUFHLGNBQWMsQ0FBQztBQUVyQyxNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUcsQ0FBQyxPQUFPLEVBQUUsV0FBVyxFQUFFLFdBQVcsRUFBRSxXQUFXLEVBQUUsUUFBUSxFQUFFLFVBQVUsQ0FBQyxDQUFDO0FBRTdGLE1BQU0sVUFBVSxJQUFJLENBQUMsRUFBTSxFQUFFLEdBQVcsRUFBRSxHQUFHLElBQXlCO0lBQ2xFLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEdBQUcsR0FBRyxFQUFFLElBQUksSUFBSSxFQUFFLENBQUMsa0JBQWtCLENBQUMsT0FBTyxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDO0FBQ3hGLENBQUM7QUFFRCxNQUFNLFVBQVUsWUFBWSxDQUFDLEVBQU0sRUFBRSxRQUFnQjtJQUNqRCxJQUFJLEVBQUUsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDNUIsT0FBTztLQUNWO0lBRUQsSUFBSSxLQUFLLEdBQUcsQ0FBQyxDQUFDO0lBQ2QsSUFBSSxFQUFFLENBQUMsVUFBVSxDQUFDLGNBQWMsRUFB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\",\"filename\":\"/lib/util.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":13.25,\"server\":\"catalyst\",\"moduleSequenceNumber\":84405,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"purchaseTor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"purchaseProgram\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"connect\",\"cost\":2},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.stanek.charge(ns.args[0], ns.args[1]);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hhcmdlLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL3N0YW5lay9jaGFyZ2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUM5QixPQUFPLElBQUksRUFBRTtRQUNULE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7S0FDakQ7QUFDTCxDQUFDIn0=\",\"filename\":\"/lib/stanek/charge.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/stanek/charge.js\",\"url\":\"blob:file:///899af535-b073-4625-80be-11559b41f1cc\",\"moduleSequenceNumber\":99886}],\"dependents\":[],\"ramUsage\":2,\"server\":\"catalyst\",\"moduleSequenceNumber\":99886,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.charge\",\"cost\":0.4}]}}],\"serversOnNetwork\":[\"comptek\",\"rho-construction\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":195,\"hackDifficulty\":195,\"minDifficulty\":65,\"moneyAvailable\":397645706.25,\"moneyMax\":4473514195.3125,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":427,\"serverGrowth\":48,\"suppression\":0,\"activeSuppressionThreads\":[],\"suppressionIntervalID\":null,\"suppressionLastUpdateTime\":0}},\"the-hub\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"the-hub\",\"httpPortOpen\":false,\"ip\":\"9.5.1.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.grow(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLElBQUksR0FBdUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFFbkUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDdkIsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7UUFDeEMsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7S0FDM0MsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyJ9\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"the-hub\",\"moduleSequenceNumber\":83801,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.weaken(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxJQUFJLEdBQXVCLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO0lBRW5FLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFO1FBQ3pCLGtCQUFrQixFQUFFLElBQUksQ0FBQyxlQUFlO1FBQ3hDLGtCQUFrQixFQUFFLElBQUksQ0FBQyxlQUFlO0tBQzNDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///2bca05a3-b86d-4b13-8192-654ed20acdc5\",\"moduleSequenceNumber\":83844}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"the-hub\",\"moduleSequenceNumber\":83844,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.hack(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLElBQUksR0FBdUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFFbkUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDdkIsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7UUFDeEMsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7S0FDM0MsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyJ9\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"the-hub\",\"moduleSequenceNumber\":83805,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export var ReservedPorts;\\r\\n(function (ReservedPorts) {\\r\\n    ReservedPorts[ReservedPorts[\\\"HACKING_INFO\\\"] = 1] = \\\"HACKING_INFO\\\";\\r\\n    ReservedPorts[ReservedPorts[\\\"HACKNET_INFO\\\"] = 2] = \\\"HACKNET_INFO\\\";\\r\\n    ReservedPorts[ReservedPorts[\\\"HACK_WRITE_INFO\\\"] = 3] = \\\"HACK_WRITE_INFO\\\";\\r\\n})(ReservedPorts || (ReservedPorts = {}));\\r\\nexport const WEAKENJS = \\\"/lib/exec/weaken.js\\\";\\r\\nexport const GROWJS = \\\"/lib/exec/grow.js\\\";\\r\\nexport const HACKJS = \\\"/lib/exec/hack.js\\\";\\r\\nexport const UTILJS = \\\"/lib/util.js\\\";\\r\\nexport const CITIES = [\\\"Aevum\\\", \\\"Chongqing\\\", \\\"Sector-12\\\", \\\"New Tokyo\\\", \\\"Ishima\\\", \\\"Volhaven\\\"];\\r\\nexport function llog(ns, str, ...args) {\\r\\n    ns.print(ns.sprintf(\\\"%8s \\\" + str, new Date().toLocaleTimeString(\\\"it-IT\\\"), ...args));\\r\\n}\\r\\nexport function softenServer(ns, hostname) {\\r\\n    if (ns.hasRootAccess(hostname)) {\\r\\n        return;\\r\\n    }\\r\\n    let ports = 0;\\r\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n        ns.brutessh(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n        ns.ftpcrack(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n        ns.httpworm(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n        ns.relaysmtp(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n        ns.sqlinject(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ports >= ns.getServerNumPortsRequired(hostname)) {\\r\\n        ns.nuke(hostname);\\r\\n    }\\r\\n}\\r\\nexport function serverIsHackable(ns, hostname) {\\r\\n    return ns.hasRootAccess(hostname) && ns.getHackingLevel() >= ns.getServerRequiredHackingLevel(hostname);\\r\\n}\\r\\nexport function canExecuteOnServer(ns, hostname) {\\r\\n    return ns.hasRootAccess(hostname) && ns.getServerMaxRam(hostname) > 0;\\r\\n}\\r\\nexport function mapHosts(ns, hosts = {}, parents = [], current = \\\"home\\\") {\\r\\n    const newParents = parents.concat(current);\\r\\n    hosts[current] = newParents;\\r\\n    const children = ns.scan(current).filter((element) => !parents.includes(element));\\r\\n    for (const child of children) {\\r\\n        mapHosts(ns, hosts, newParents, child);\\r\\n    }\\r\\n    return hosts;\\r\\n}\\r\\nexport function allHosts(ns) {\\r\\n    return Object.keys(mapHosts(ns));\\r\\n}\\r\\nexport function doProgramBuys(ns) {\\r\\n    const player = ns.getPlayer();\\r\\n    if (!player.tor && player.money > 200e3)\\r\\n        ns.purchaseTor();\\r\\n    if (!ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\") && player.money > 500e3)\\r\\n        ns.purchaseProgram(\\\"BruteSSH.exe\\\");\\r\\n    if (!ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\") && player.money > 1500e3)\\r\\n        ns.purchaseProgram(\\\"FTPCrack.exe\\\");\\r\\n    if (!ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\") && player.money > 5e6)\\r\\n        ns.purchaseProgram(\\\"relaySMTP.exe\\\");\\r\\n    if (!ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\") && player.money > 30e6)\\r\\n        ns.purchaseProgram(\\\"HTTPWorm.exe\\\");\\r\\n    if (!ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\") && player.money > 250e6)\\r\\n        ns.purchaseProgram(\\\"SQLInject.exe\\\");\\r\\n}\\r\\nexport function doBuyAndSoftenAll(ns) {\\r\\n    doProgramBuys(ns);\\r\\n    for (const hostname of allHosts(ns)) {\\r\\n        softenServer(ns, hostname);\\r\\n    }\\r\\n}\\r\\nexport function stFormat(ns, ms, showms = false, showfull = false) {\\r\\n    let timeLeft = ms;\\r\\n    const hours = Math.floor(ms / (1000 * 60 * 60));\\r\\n    timeLeft -= hours * (1000 * 60 * 60);\\r\\n    const minutes = Math.floor(timeLeft / (1000 * 60));\\r\\n    timeLeft -= minutes * (1000 * 60);\\r\\n    const seconds = Math.floor(timeLeft / 1000);\\r\\n    timeLeft -= seconds * 1000;\\r\\n    const milliseconds = timeLeft;\\r\\n    if (showms) {\\r\\n        if (hours > 0 || showfull)\\r\\n            return ns.sprintf(\\\"%02d:%02d:%02d.%03d\\\", hours, minutes, seconds, milliseconds);\\r\\n        if (minutes > 0)\\r\\n            return ns.sprintf(\\\"%02d:%02d.%03d\\\", minutes, seconds, milliseconds);\\r\\n        return ns.sprintf(\\\"%02d.%03d\\\", seconds, milliseconds);\\r\\n    }\\r\\n    else {\\r\\n        if (hours > 0 || showfull)\\r\\n            return ns.sprintf(\\\"%02d:%02d:%02d\\\", hours, minutes, seconds);\\r\\n        if (minutes > 0)\\r\\n            return ns.sprintf(\\\"%02d:%02d\\\", minutes, seconds);\\r\\n        return ns.sprintf(\\\"%02d\\\", seconds);\\r\\n    }\\r\\n}\\r\\nexport function stdFormat(ns, offset = 0, showms = false) {\\r\\n    const date = new Date(new Date().getTime() + offset);\\r\\n    if (showms) {\\r\\n        const ms = ns.sprintf(\\\"%03d\\\", date.getUTCMilliseconds());\\r\\n        return date.toLocaleTimeString(\\\"it-IT\\\") + \\\".\\\" + ms;\\r\\n    }\\r\\n    else {\\r\\n        return date.toLocaleTimeString(\\\"it-IT\\\");\\r\\n    }\\r\\n}\\r\\nexport async function doBackdoors(ns) {\\r\\n    //const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"w0r1d_d43m0n\\\", \\\"b-and-a\\\", \\\"ecorp\\\", \\\"fulcrumassets\\\", \\\"fulcrumtech\\\"];\\r\\n    //const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"omnitek\\\", \\\"kuai-gong\\\", \\\"megacorp\\\"];\\r\\n    const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"w0r1d_d43m0n\\\"];\\r\\n    const hosts = mapHosts(ns);\\r\\n    for (const [hostName, trail] of Object.entries(hosts)) {\\r\\n        const server = ns.getServer(hostName);\\r\\n        if (!targetHosts.includes(hostName) ||\\r\\n            server.backdoorInstalled ||\\r\\n            server.requiredHackingSkill > ns.getHackingLevel() ||\\r\\n            !server.hasAdminRights)\\r\\n            continue;\\r\\n        ns.print(hostName);\\r\\n        for (const hostHopName of trail) {\\r\\n            ns.connect(hostHopName);\\r\\n        }\\r\\n        await ns.installBackdoor();\\r\\n        ns.connect(\\\"home\\\");\\r\\n    }\\r\\n}\\r\\nexport function cleanLogs(ns) {\\r\\n    ns.disableLog(\\\"disableLog\\\");\\r\\n    ns.disableLog(\\\"ALL\\\");\\r\\n    // ns.disableLog(\\\"sleep\\\")\\r\\n    // ns.disableLog(\\\"exec\\\")\\r\\n    // ns.disableLog(\\\"getServerMaxRam\\\")\\r\\n    // ns.disableLog(\\\"getServerSecurityLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerMinSecurityLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerMaxMoney\\\")\\r\\n    // ns.disableLog(\\\"getHackingLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerRequiredHackingLevel\\\")\\r\\n    // ns.disableLog(\\\"scan\\\")\\r\\n    // ns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n    // ns.disableLog(\\\"getServerUsedRam\\\")\\r\\n}\\r\\nexport const ALL_FACTIONS = [\\r\\n    \\\"Illuminati\\\",\\r\\n    \\\"Daedalus\\\",\\r\\n    \\\"The Covenant\\\",\\r\\n    \\\"ECorp\\\",\\r\\n    \\\"MegaCorp\\\",\\r\\n    \\\"Bachman & Associates\\\",\\r\\n    \\\"Blade Industries\\\",\\r\\n    \\\"NWO\\\",\\r\\n    \\\"Clarke Incorporated\\\",\\r\\n    \\\"OmniTek Incorporated\\\",\\r\\n    \\\"Four Sigma\\\",\\r\\n    \\\"KuaiGong International\\\",\\r\\n    \\\"Fulcrum Secret Technologies\\\",\\r\\n    \\\"BitRunners\\\",\\r\\n    \\\"The Black Hand\\\",\\r\\n    \\\"NiteSec\\\",\\r\\n    \\\"Aevum\\\",\\r\\n    \\\"Chongqing\\\",\\r\\n    \\\"Ishima\\\",\\r\\n    \\\"New Tokyo\\\",\\r\\n    \\\"Sector-12\\\",\\r\\n    \\\"Volhaven\\\",\\r\\n    \\\"Speakers for the Dead\\\",\\r\\n    \\\"The Dark Army\\\",\\r\\n    \\\"The Syndicate\\\",\\r\\n    \\\"Silhouette\\\",\\r\\n    \\\"Tetrads\\\",\\r\\n    \\\"Slum Snakes\\\",\\r\\n    \\\"Netburners\\\",\\r\\n    \\\"Tian Di Hui\\\",\\r\\n    \\\"CyberSec\\\",\\r\\n    \\\"Bladeburners\\\",\\r\\n    \\\"Church of the Machine God\\\",\\r\\n];\\r\\nexport async function writeOut(ns, data, startTime, endTime, result, startSec, startCash) {\\r\\n    if (data.writeFile !== \\\"\\\") {\\r\\n        const outstr = ns.sprintf(\\\"%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\", data.target, data.uid, data.batchId, data.realTimeStart + data.offset, data.realTimeStart + data.finish, data.operationTime, startTime, endTime, endTime - startTime, startTime - (data.realTimeStart + data.offset), endTime - (data.realTimeStart + data.finish), endTime - startTime - data.operationTime, result, startSec.toFixed(2), ns.getServerSecurityLevel(data.target).toFixed(2), ns.nFormat(startCash, \\\"($0.000a)\\\"), ns.nFormat(ns.getServerMoneyAvailable(data.target), \\\"($0.000a)\\\"));\\r\\n        while (!await ns.tryWritePort(ReservedPorts.HACK_WRITE_INFO, [data.writeFile, outstr]))\\r\\n            ;\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi91dGlsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLE1BQU0sQ0FBTixJQUFZLGFBSVg7QUFKRCxXQUFZLGFBQWE7SUFDckIsaUVBQWdCLENBQUE7SUFDaEIsaUVBQVksQ0FBQTtJQUNaLHVFQUFlLENBQUE7QUFDbkIsQ0FBQyxFQUpXLGFBQWEsS0FBYixhQUFhLFFBSXhCO0FBRUQsTUFBTSxDQUFDLE1BQU0sUUFBUSxHQUFHLHFCQUFxQixDQUFDO0FBQzlDLE1BQU0sQ0FBQyxNQUFNLE1BQU0sR0FBRyxtQkFBbUIsQ0FBQztBQUMxQyxNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUcsbUJBQW1CLENBQUM7QUFDMUMsTUFBTSxDQUFDLE1BQU0sTUFBTSxHQUFHLGNBQWMsQ0FBQztBQUVyQyxNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUcsQ0FBQyxPQUFPLEVBQUUsV0FBVyxFQUFFLFdBQVcsRUFBRSxXQUFXLEVBQUUsUUFBUSxFQUFFLFVBQVUsQ0FBQyxDQUFDO0FBRTdGLE1BQU0sVUFBVSxJQUFJLENBQUMsRUFBTSxFQUFFLEdBQVcsRUFBRSxHQUFHLElBQXlCO0lBQ2xFLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEdBQUcsR0FBRyxFQUFFLElBQUksSUFBSSxFQUFFLENBQUMsa0JBQWtCLENBQUMsT0FBTyxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDO0FBQ3hGLENBQUM7QUFFRCxNQUFNLFVBQVUsWUFBWSxDQUFDLEVBQU0sRUFBRSxRQUFnQjtJQUNqRCxJQUFJLEVBQUUsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDNUIsT0FBTztLQUNWO0lBRUQsSUFBSSxLQUFLLEdBQUcsQ0FBQyxDQUFDO0lBQ2QsSUFBSSxFQUFFLENBQUMsVUFBVSxDQUFDLGNBQWMsRUFB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\",\"filename\":\"/lib/util.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":13.25,\"server\":\"the-hub\",\"moduleSequenceNumber\":83807,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"purchaseTor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"purchaseProgram\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"connect\",\"cost\":2},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.stanek.charge(ns.args[0], ns.args[1]);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hhcmdlLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL3N0YW5lay9jaGFyZ2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUM5QixPQUFPLElBQUksRUFBRTtRQUNULE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7S0FDakQ7QUFDTCxDQUFDIn0=\",\"filename\":\"/lib/stanek/charge.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/stanek/charge.js\",\"url\":\"blob:file:///ec2e3fa6-5ba6-4a57-a4a8-fb05916b0788\",\"moduleSequenceNumber\":99893}],\"dependents\":[],\"ramUsage\":2,\"server\":\"the-hub\",\"moduleSequenceNumber\":99893,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.charge\",\"cost\":0.4}]}}],\"serversOnNetwork\":[\"neo-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":111,\"hackDifficulty\":111,\"minDifficulty\":37,\"moneyAvailable\":114566876.25,\"moneyMax\":1288877357.8125,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":293,\"serverGrowth\":53,\"suppression\":0,\"activeSuppressionThreads\":[],\"suppressionIntervalID\":null,\"suppressionLastUpdateTime\":0}},\"comptek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"comptek\",\"httpPortOpen\":false,\"ip\":\"26.9.6.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omega-net\",\"zb-institute\",\"catalyst\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":177,\"hackDifficulty\":177,\"minDifficulty\":59,\"moneyAvailable\":179319879,\"moneyMax\":2017348638.75,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":361,\"serverGrowth\":64,\"suppression\":0,\"activeSuppressionThreads\":[],\"suppressionIntervalID\":null,\"suppressionLastUpdateTime\":0}},\"netlink\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"netlink\",\"httpPortOpen\":false,\"ip\":\"65.1.8.4\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.grow(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLElBQUksR0FBdUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFFbkUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDdkIsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7UUFDeEMsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7S0FDM0MsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyJ9\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///34b8d10e-ea65-48dd-b46c-2ffd92ec34cf\",\"moduleSequenceNumber\":84581}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"netlink\",\"moduleSequenceNumber\":84581,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.weaken(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxJQUFJLEdBQXVCLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO0lBRW5FLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFO1FBQ3pCLGtCQUFrQixFQUFFLElBQUksQ0FBQyxlQUFlO1FBQ3hDLGtCQUFrQixFQUFFLElBQUksQ0FBQyxlQUFlO0tBQzNDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///1299258d-f08d-4607-a025-5694be55a283\",\"moduleSequenceNumber\":84423}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"netlink\",\"moduleSequenceNumber\":84423,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.hack(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLElBQUksR0FBdUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFFbkUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDdkIsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7UUFDeEMsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7S0FDM0MsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyJ9\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"netlink\",\"moduleSequenceNumber\":84387,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export var ReservedPorts;\\r\\n(function (ReservedPorts) {\\r\\n    ReservedPorts[ReservedPorts[\\\"HACKING_INFO\\\"] = 1] = \\\"HACKING_INFO\\\";\\r\\n    ReservedPorts[ReservedPorts[\\\"HACKNET_INFO\\\"] = 2] = \\\"HACKNET_INFO\\\";\\r\\n    ReservedPorts[ReservedPorts[\\\"HACK_WRITE_INFO\\\"] = 3] = \\\"HACK_WRITE_INFO\\\";\\r\\n})(ReservedPorts || (ReservedPorts = {}));\\r\\nexport const WEAKENJS = \\\"/lib/exec/weaken.js\\\";\\r\\nexport const GROWJS = \\\"/lib/exec/grow.js\\\";\\r\\nexport const HACKJS = \\\"/lib/exec/hack.js\\\";\\r\\nexport const UTILJS = \\\"/lib/util.js\\\";\\r\\nexport const CITIES = [\\\"Aevum\\\", \\\"Chongqing\\\", \\\"Sector-12\\\", \\\"New Tokyo\\\", \\\"Ishima\\\", \\\"Volhaven\\\"];\\r\\nexport function llog(ns, str, ...args) {\\r\\n    ns.print(ns.sprintf(\\\"%8s \\\" + str, new Date().toLocaleTimeString(\\\"it-IT\\\"), ...args));\\r\\n}\\r\\nexport function softenServer(ns, hostname) {\\r\\n    if (ns.hasRootAccess(hostname)) {\\r\\n        return;\\r\\n    }\\r\\n    let ports = 0;\\r\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n        ns.brutessh(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n        ns.ftpcrack(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n        ns.httpworm(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n        ns.relaysmtp(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n        ns.sqlinject(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ports >= ns.getServerNumPortsRequired(hostname)) {\\r\\n        ns.nuke(hostname);\\r\\n    }\\r\\n}\\r\\nexport function serverIsHackable(ns, hostname) {\\r\\n    return ns.hasRootAccess(hostname) && ns.getHackingLevel() >= ns.getServerRequiredHackingLevel(hostname);\\r\\n}\\r\\nexport function canExecuteOnServer(ns, hostname) {\\r\\n    return ns.hasRootAccess(hostname) && ns.getServerMaxRam(hostname) > 0;\\r\\n}\\r\\nexport function mapHosts(ns, hosts = {}, parents = [], current = \\\"home\\\") {\\r\\n    const newParents = parents.concat(current);\\r\\n    hosts[current] = newParents;\\r\\n    const children = ns.scan(current).filter((element) => !parents.includes(element));\\r\\n    for (const child of children) {\\r\\n        mapHosts(ns, hosts, newParents, child);\\r\\n    }\\r\\n    return hosts;\\r\\n}\\r\\nexport function allHosts(ns) {\\r\\n    return Object.keys(mapHosts(ns));\\r\\n}\\r\\nexport function doProgramBuys(ns) {\\r\\n    const player = ns.getPlayer();\\r\\n    if (!player.tor && player.money > 200e3)\\r\\n        ns.purchaseTor();\\r\\n    if (!ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\") && player.money > 500e3)\\r\\n        ns.purchaseProgram(\\\"BruteSSH.exe\\\");\\r\\n    if (!ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\") && player.money > 1500e3)\\r\\n        ns.purchaseProgram(\\\"FTPCrack.exe\\\");\\r\\n    if (!ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\") && player.money > 5e6)\\r\\n        ns.purchaseProgram(\\\"relaySMTP.exe\\\");\\r\\n    if (!ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\") && player.money > 30e6)\\r\\n        ns.purchaseProgram(\\\"HTTPWorm.exe\\\");\\r\\n    if (!ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\") && player.money > 250e6)\\r\\n        ns.purchaseProgram(\\\"SQLInject.exe\\\");\\r\\n}\\r\\nexport function doBuyAndSoftenAll(ns) {\\r\\n    doProgramBuys(ns);\\r\\n    for (const hostname of allHosts(ns)) {\\r\\n        softenServer(ns, hostname);\\r\\n    }\\r\\n}\\r\\nexport function stFormat(ns, ms, showms = false, showfull = false) {\\r\\n    let timeLeft = ms;\\r\\n    const hours = Math.floor(ms / (1000 * 60 * 60));\\r\\n    timeLeft -= hours * (1000 * 60 * 60);\\r\\n    const minutes = Math.floor(timeLeft / (1000 * 60));\\r\\n    timeLeft -= minutes * (1000 * 60);\\r\\n    const seconds = Math.floor(timeLeft / 1000);\\r\\n    timeLeft -= seconds * 1000;\\r\\n    const milliseconds = timeLeft;\\r\\n    if (showms) {\\r\\n        if (hours > 0 || showfull)\\r\\n            return ns.sprintf(\\\"%02d:%02d:%02d.%03d\\\", hours, minutes, seconds, milliseconds);\\r\\n        if (minutes > 0)\\r\\n            return ns.sprintf(\\\"%02d:%02d.%03d\\\", minutes, seconds, milliseconds);\\r\\n        return ns.sprintf(\\\"%02d.%03d\\\", seconds, milliseconds);\\r\\n    }\\r\\n    else {\\r\\n        if (hours > 0 || showfull)\\r\\n            return ns.sprintf(\\\"%02d:%02d:%02d\\\", hours, minutes, seconds);\\r\\n        if (minutes > 0)\\r\\n            return ns.sprintf(\\\"%02d:%02d\\\", minutes, seconds);\\r\\n        return ns.sprintf(\\\"%02d\\\", seconds);\\r\\n    }\\r\\n}\\r\\nexport function stdFormat(ns, offset = 0, showms = false) {\\r\\n    const date = new Date(new Date().getTime() + offset);\\r\\n    if (showms) {\\r\\n        const ms = ns.sprintf(\\\"%03d\\\", date.getUTCMilliseconds());\\r\\n        return date.toLocaleTimeString(\\\"it-IT\\\") + \\\".\\\" + ms;\\r\\n    }\\r\\n    else {\\r\\n        return date.toLocaleTimeString(\\\"it-IT\\\");\\r\\n    }\\r\\n}\\r\\nexport async function doBackdoors(ns) {\\r\\n    //const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"w0r1d_d43m0n\\\", \\\"b-and-a\\\", \\\"ecorp\\\", \\\"fulcrumassets\\\", \\\"fulcrumtech\\\"];\\r\\n    //const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"omnitek\\\", \\\"kuai-gong\\\", \\\"megacorp\\\"];\\r\\n    const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"w0r1d_d43m0n\\\"];\\r\\n    const hosts = mapHosts(ns);\\r\\n    for (const [hostName, trail] of Object.entries(hosts)) {\\r\\n        const server = ns.getServer(hostName);\\r\\n        if (!targetHosts.includes(hostName) ||\\r\\n            server.backdoorInstalled ||\\r\\n            server.requiredHackingSkill > ns.getHackingLevel() ||\\r\\n            !server.hasAdminRights)\\r\\n            continue;\\r\\n        ns.print(hostName);\\r\\n        for (const hostHopName of trail) {\\r\\n            ns.connect(hostHopName);\\r\\n        }\\r\\n        await ns.installBackdoor();\\r\\n        ns.connect(\\\"home\\\");\\r\\n    }\\r\\n}\\r\\nexport function cleanLogs(ns) {\\r\\n    ns.disableLog(\\\"disableLog\\\");\\r\\n    ns.disableLog(\\\"ALL\\\");\\r\\n    // ns.disableLog(\\\"sleep\\\")\\r\\n    // ns.disableLog(\\\"exec\\\")\\r\\n    // ns.disableLog(\\\"getServerMaxRam\\\")\\r\\n    // ns.disableLog(\\\"getServerSecurityLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerMinSecurityLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerMaxMoney\\\")\\r\\n    // ns.disableLog(\\\"getHackingLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerRequiredHackingLevel\\\")\\r\\n    // ns.disableLog(\\\"scan\\\")\\r\\n    // ns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n    // ns.disableLog(\\\"getServerUsedRam\\\")\\r\\n}\\r\\nexport const ALL_FACTIONS = [\\r\\n    \\\"Illuminati\\\",\\r\\n    \\\"Daedalus\\\",\\r\\n    \\\"The Covenant\\\",\\r\\n    \\\"ECorp\\\",\\r\\n    \\\"MegaCorp\\\",\\r\\n    \\\"Bachman & Associates\\\",\\r\\n    \\\"Blade Industries\\\",\\r\\n    \\\"NWO\\\",\\r\\n    \\\"Clarke Incorporated\\\",\\r\\n    \\\"OmniTek Incorporated\\\",\\r\\n    \\\"Four Sigma\\\",\\r\\n    \\\"KuaiGong International\\\",\\r\\n    \\\"Fulcrum Secret Technologies\\\",\\r\\n    \\\"BitRunners\\\",\\r\\n    \\\"The Black Hand\\\",\\r\\n    \\\"NiteSec\\\",\\r\\n    \\\"Aevum\\\",\\r\\n    \\\"Chongqing\\\",\\r\\n    \\\"Ishima\\\",\\r\\n    \\\"New Tokyo\\\",\\r\\n    \\\"Sector-12\\\",\\r\\n    \\\"Volhaven\\\",\\r\\n    \\\"Speakers for the Dead\\\",\\r\\n    \\\"The Dark Army\\\",\\r\\n    \\\"The Syndicate\\\",\\r\\n    \\\"Silhouette\\\",\\r\\n    \\\"Tetrads\\\",\\r\\n    \\\"Slum Snakes\\\",\\r\\n    \\\"Netburners\\\",\\r\\n    \\\"Tian Di Hui\\\",\\r\\n    \\\"CyberSec\\\",\\r\\n    \\\"Bladeburners\\\",\\r\\n    \\\"Church of the Machine God\\\",\\r\\n];\\r\\nexport async function writeOut(ns, data, startTime, endTime, result, startSec, startCash) {\\r\\n    if (data.writeFile !== \\\"\\\") {\\r\\n        const outstr = ns.sprintf(\\\"%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\", data.target, data.uid, data.batchId, data.realTimeStart + data.offset, data.realTimeStart + data.finish, data.operationTime, startTime, endTime, endTime - startTime, startTime - (data.realTimeStart + data.offset), endTime - (data.realTimeStart + data.finish), endTime - startTime - data.operationTime, result, startSec.toFixed(2), ns.getServerSecurityLevel(data.target).toFixed(2), ns.nFormat(startCash, \\\"($0.000a)\\\"), ns.nFormat(ns.getServerMoneyAvailable(data.target), \\\"($0.000a)\\\"));\\r\\n        while (!await ns.tryWritePort(ReservedPorts.HACK_WRITE_INFO, [data.writeFile, outstr]))\\r\\n            ;\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi91dGlsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLE1BQU0sQ0FBTixJQUFZLGFBSVg7QUFKRCxXQUFZLGFBQWE7SUFDckIsaUVBQWdCLENBQUE7SUFDaEIsaUVBQVksQ0FBQTtJQUNaLHVFQUFlLENBQUE7QUFDbkIsQ0FBQyxFQUpXLGFBQWEsS0FBYixhQUFhLFFBSXhCO0FBRUQsTUFBTSxDQUFDLE1BQU0sUUFBUSxHQUFHLHFCQUFxQixDQUFDO0FBQzlDLE1BQU0sQ0FBQyxNQUFNLE1BQU0sR0FBRyxtQkFBbUIsQ0FBQztBQUMxQyxNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUcsbUJBQW1CLENBQUM7QUFDMUMsTUFBTSxDQUFDLE1BQU0sTUFBTSxHQUFHLGNBQWMsQ0FBQztBQUVyQyxNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUcsQ0FBQyxPQUFPLEVBQUUsV0FBVyxFQUFFLFdBQVcsRUFBRSxXQUFXLEVBQUUsUUFBUSxFQUFFLFVBQVUsQ0FBQyxDQUFDO0FBRTdGLE1BQU0sVUFBVSxJQUFJLENBQUMsRUFBTSxFQUFFLEdBQVcsRUFBRSxHQUFHLElBQXlCO0lBQ2xFLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEdBQUcsR0FBRyxFQUFFLElBQUksSUFBSSxFQUFFLENBQUMsa0JBQWtCLENBQUMsT0FBTyxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDO0FBQ3hGLENBQUM7QUFFRCxNQUFNLFVBQVUsWUFBWSxDQUFDLEVBQU0sRUFBRSxRQUFnQjtJQUNqRCxJQUFJLEVBQUUsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDNUIsT0FBTztLQUNWO0lBRUQsSUFBSSxLQUFLLEdBQUcsQ0FBQyxDQUFDO0lBQ2QsSUFBSSxFQUFFLENBQUMsVUFBVSxDQUFDLGNBQWMsRUFBRSxNQUFNLENBQUMsRUFBRTtRQUN2QyxFQUFFLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ3RCLEtBQUssRUFBRSxDQUFDO0tBQ1g7SUFFRCxJQUFJLEVBQUUsQ0FBQyxVQUFVLENBQUMsY0FBYyxFQUFFLE1BQU0sQ0FBQyxFQUFFO1FBQ3ZDLEVBQUUsQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDdEIsS0FBSyxFQUFFLENBQUM7S0FDWDtJQUVELElBQUksRUFBRSxDQUFDLFVBQVUsQ0FBQyxjQUFjLEVBQUUsTUFBTSxDQUFDLEVBQUU7UUFDdkMsRUFBRSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUN0QixLQUFLLEVBQUUsQ0FBQztLQUNYO0lBRUQsSUFBSSxFQUFFLENBQUMsVUFBVSxDQUFDLGVBQWUsRUFBRSxNQUFNLENBQUMsRUFBRTtRQUN4QyxFQUFFLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ3ZCLEtBQUssRUFBRSxDQUFDO0tBQ1g7SUFFRCxJQUFJLEVBQUUsQ0FBQyxVQUFVLENBQUMsZUFBZSxFQUFFLE1BQU0sQ0FBQyxFQUFFO1FBQ3hDLEVBQUUsQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDdkIsS0FBSyxFQUFFLENBQUM7S0FDWDtJQUVELElBQUksS0FBSyxJQUFJLEVBQUUsQ0FBQyx5QkFBeUIsQ0FBQyxRQUFRLENBQUMsRUFBRTtRQUNqRCxFQUFFLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0tBQ3JCO0FBQ0wsQ0FBQztBQUVELE1BQU0sVUFBVSxnQkFBZ0IsQ0FBQyxFQUFNLEVBQUUsUUFBZ0I7SUFDckQsT0FBTyxFQUFFLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxlQUFlLEVBQUUsSUFBSSxFQUFFLENBQUMsNkJBQTZCLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDNUcsQ0FBQztBQUVELE1BQU0sVUFBVSxrQkFBa0IsQ0FBQyxFQUFNLEVBQUUsUUFBZ0I7SUFDdkQsT0FBTyxFQUFFLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxlQUFlLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQzFFLENBQUM7QUFFRCxNQUFNLFVBQVUsUUFBUSxDQUNwQixFQUFNLEVBQ04sUUFBa0MsRUFBRSxFQUNwQyxVQUFvQixFQUFFLEVBQ3RCLE9BQU8sR0FBRyxNQUFNO0lBRWhCLE1BQU0sVUFBVSxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDM0MsS0FBSyxDQUFDLE9BQU8sQ0FBQyxHQUFHLFVBQVUsQ0FBQztJQUU1QixNQUFNLFFBQVEsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLE9BQU8sRUFBRSxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7SUFDbEYsS0FBSyxNQUFNLEtBQUssSUFBSSxRQUFRLEVBQUU7UUFDMUIsUUFBUSxDQUFDLEVBQUUsRUFBRSxLQUFLLEVBQUUsVUFBVSxFQUFFLEtBQUssQ0FBQyxDQUFDO0tBQzFDO0lBQ0QsT0FBTyxLQUFLLENBQUM7QUFDakIsQ0FBQztBQUVELE1BQU0sVUFBVSxRQUFRLENBQUMsRUFBTTtJQUMzQixPQUFPLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFDckMsQ0FBQztBQUVELE1BQU0sVUFBVSxhQUFhLENBQUMsRUFBTTtJQUNoQyxNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsU0FBUyxFQUFFLENBQUM7SUFFOUIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLElBQUksTUFBTSxDQUFDLEtBQUssR0FBRyxLQUFLO1FBQUUsRUFBRSxDQUFDLFdBQVcsRUFBRSxDQUFDO0lBRTFELElBQUksQ0FBQyxFQUFFLENBQUMsVUFBVSxDQUFDLGNBQWMsRUFBRSxNQUFNLENBQUMsSUFBSSxNQUFNLENBQUMsS0FBSyxHQUFHLEtBQUs7UUFBRSxFQUFFLENBQUMsZUFBZSxDQUFDLGNBQWMsQ0FBQyxDQUFDO0lBRXZHLElBQUksQ0FBQyxFQUFFLENBQUMsVUFBVSxDQUFDLGNBQWMsRUFBRSxNQUFNLENBQUMsSUFBSSxNQUFNLENBQUMsS0FBSyxHQUFHLE1BQU07UUFBRSxFQUFFLENBQUMsZUFBZSxDQUFDLGNBQWMsQ0FBQyxDQUFDO0lBRXhHLElBQUksQ0FBQyxFQUFFLENBQUMsVUFBVSxDQUFDLGVBQWUsRUFBRSxNQUFNLENBQUMsSUFBSSxNQUFNLENBQUMsS0FBSyxHQUFHLEdBQUc7UUFBRSxFQUFFLENBQUMsZUFBZSxDQUFDLGVBQWUsQ0FBQyxDQUFDO0lBRXZHLElBQUksQ0FBQyxFQUFFLENBQUMsVUFBVSxDQUFDLGNBQWMsRUFBRSxNQUFNLENBQUMsSUFBSSxNQUFNLENBQUMsS0FBSyxHQUFHLElBQUk7UUFBRSxFQUFFLENBQUMsZUFBZSxDQUFDLGNBQWMsQ0FBQyxDQUFDO0lBRXRHLElBQUksQ0FBQyxFQUFFLENBQUMsVUFBVSxDQUFDLGVBQWUsRUFBRSxNQUFNLENBQUMsSUFBSSxNQUFNLENBQUMsS0FBSyxHQUFHLEtBQUs7UUFBRSxFQUFFLENBQUMsZUFBZSxDQUFDLGVBQWUsQ0FBQyxDQUFDO0FBQzdHLENBQUM7QUFFRCxNQUFNLFVBQVUsaUJBQWlCLENBQUMsRUFBTTtJQUNwQyxhQUFhLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDbEIsS0FBSyxNQUFNLFFBQVEsSUFBSSxRQUFRLENBQUMsRUFBRSxDQUFDLEVBQUU7UUFDakMsWUFBWSxDQUFDLEVBQUUsRUFBRSxRQUFRLENBQUMsQ0FBQztLQUM5QjtBQUNMLENBQUM7QUFFRCxNQUFNLFVBQVUsUUFBUSxDQUFDLEVBQU0sRUFBRSxFQUFVLEVBQUUsTUFBTSxHQUFHLEtBQUssRUFBRSxRQUFRLEdBQUcsS0FBSztJQUN6RSxJQUFJLFFBQVEsR0FBRyxFQUFFLENBQUM7SUFDbEIsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLEdBQUcsQ0FBQyxJQUFJLEdBQUcsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDaEQsUUFBUSxJQUFJLEtBQUssR0FBRyxDQUFDLElBQUksR0FBRyxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUM7SUFDckMsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLEdBQUcsQ0FBQyxJQUFJLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUNuRCxRQUFRLElBQUksT0FBTyxHQUFHLENBQUMsSUFBSSxHQUFHLEVBQUUsQ0FBQyxDQUFDO0lBQ2xDLE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxDQUFDO0lBQzVDLFFBQVEsSUFBSSxPQUFPLEdBQUcsSUFBSSxDQUFDO0lBQzNCLE1BQU0sWUFBWSxHQUFHLFFBQVEsQ0FBQztJQUU5QixJQUFJLE1BQU0sRUFBRTtRQUNSLElBQUksS0FBSyxHQUFHLENBQUMsSUFBSSxRQUFRO1lBQUUsT0FBTyxFQUFFLENBQUMsT0FBTyxDQUFDLHFCQUFxQixFQUFFLEtBQUssRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLFlBQVksQ0FBQyxDQUFDO1FBQzNHLElBQUksT0FBTyxHQUFHLENBQUM7WUFBRSxPQUFPLEVBQUUsQ0FBQyxPQUFPLENBQUMsZ0JBQWdCLEVBQUUsT0FBTyxFQUFFLE9BQU8sRUFBRSxZQUFZLENBQUMsQ0FBQztRQUNyRixPQUFPLEVBQUUsQ0FBQyxPQUFPLENBQUMsV0FBVyxFQUFFLE9BQU8sRUFBRSxZQUFZLENBQUMsQ0FBQztLQUN6RDtTQUFNO1FBQ0gsSUFBSSxLQUFLLEdBQUcsQ0FBQyxJQUFJLFFBQVE7WUFBRSxPQUFPLEVBQUUsQ0FBQyxPQUFPLENBQUMsZ0JBQWdCLEVBQUUsS0FBSyxFQUFFLE9BQU8sRUFBRSxPQUFPLENBQUMsQ0FBQztRQUN4RixJQUFJLE9BQU8sR0FBRyxDQUFDO1lBQUUsT0FBTyxFQUFFLENBQUMsT0FBTyxDQUFDLFdBQVcsRUFBRSxPQUFPLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFDbEUsT0FBTyxFQUFFLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxPQUFPLENBQUMsQ0FBQztLQUN0QztBQUNMLENBQUM7QUFFRCxNQUFNLFVBQVUsU0FBUyxDQUFDLEVBQU0sRUFBRSxNQUFNLEdBQUcsQ0FBQyxFQUFFLE1BQU0sR0FBRyxLQUFLO0lBQ3hELE1BQU0sSUFBSSxHQUFHLElBQUksSUFBSSxDQUFDLElBQUksSUFBSSxFQUFFLENBQUMsT0FBTyxFQUFFLEdBQUcsTUFBTSxDQUFDLENBQUM7SUFFckQsSUFBSSxNQUFNLEVBQUU7UUFDUixNQUFNLEVBQUUsR0FBRyxFQUFFLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsa0JBQWtCLEVBQUUsQ0FBQyxDQUFDO1FBQ3pELE9BQU8sSUFBSSxDQUFDLGtCQUFrQixDQUFDLE9BQU8sQ0FBQyxHQUFHLEdBQUcsR0FBRyxFQUFFLENBQUM7S0FDdEQ7U0FBTTtRQUNILE9BQU8sSUFBSSxDQUFDLGtCQUFrQixDQUFDLE9BQU8sQ0FBQyxDQUFDO0tBQzNDO0FBQ0wsQ0FBQztBQUVELE1BQU0sQ0FBQyxLQUFLLFVBQVUsV0FBVyxDQUFDLEVBQU07SUFDcEMsNklBQTZJO0lBQzdJLDZHQUE2RztJQUM3RyxNQUFNLFdBQVcsR0FBRyxDQUFDLE1BQU0sRUFBRSxhQUFhLEVBQUUsU0FBUyxFQUFFLGNBQWMsRUFBRSxjQUFjLENBQUMsQ0FBQztJQUV2RixNQUFNLEtBQUssR0FBRyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUM7SUFFM0IsS0FBSyxNQUFNLENBQUMsUUFBUSxFQUFFLEtBQUssQ0FBQyxJQUFJLE1BQU0sQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEVBQUU7UUFDbkQsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUN0QyxJQUNJLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUM7WUFDL0IsTUFBTSxDQUFDLGlCQUFpQjtZQUN4QixNQUFNLENBQUMsb0JBQW9CLEdBQUcsRUFBRSxDQUFDLGVBQWUsRUFBRTtZQUNsRCxDQUFDLE1BQU0sQ0FBQyxjQUFjO1lBRXRCLFNBQVM7UUFFYixFQUFFLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ25CLEtBQUssTUFBTSxXQUFXLElBQUksS0FBSyxFQUFFO1lBQzdCLEVBQUUsQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLENBQUM7U0FDM0I7UUFFRCxNQUFNLEVBQUUsQ0FBQyxlQUFlLEVBQUUsQ0FBQztRQUMzQixFQUFFLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0tBQ3RCO0FBQ0wsQ0FBQztBQUVELE1BQU0sVUFBVSxTQUFTLENBQUMsRUFBTTtJQUM1QixFQUFFLENBQUMsVUFBVSxDQUFDLFlBQVksQ0FBQyxDQUFDO0lBQzVCLEVBQUUsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDckIseUJBQXlCO0lBQ3pCLHdCQUF3QjtJQUN4QixtQ0FBbUM7SUFDbkMsMENBQTBDO0lBQzFDLDZDQUE2QztJQUM3QyxxQ0FBcUM7SUFDckMsbUNBQW1DO0lBQ25DLGlEQUFpRDtJQUNqRCx3QkFBd0I7SUFDeEIsMkNBQTJDO0lBQzNDLG9DQUFvQztBQUN4QyxDQUFDO0FBRUQsTUFBTSxDQUFDLE1BQU0sWUFBWSxHQUFHO0lBQ3hCLFlBQVk7SUFDWixVQUFVO0lBQ1YsY0FBYztJQUNkLE9BQU87SUFDUCxVQUFVO0lBQ1Ysc0JBQXNCO0lBQ3RCLGtCQUFrQjtJQUNsQixLQUFLO0lBQ0wscUJBQXFCO0lBQ3JCLHNCQUFzQjtJQUN0QixZQUFZO0lBQ1osd0JBQXdCO0lBQ3hCLDZCQUE2QjtJQUM3QixZQUFZO0lBQ1osZ0JBQWdCO0lBQ2hCLFNBQVM7SUFDVCxPQUFPO0lBQ1AsV0FBVztJQUNYLFFBQVE7SUFDUixXQUFXO0lBQ1gsV0FBVztJQUNYLFVBQVU7SUFDVix1QkFBdUI7SUFDdkIsZUFBZTtJQUNmLGVBQWU7SUFDZixZQUFZO0lBQ1osU0FBUztJQUNULGFBQWE7SUFDYixZQUFZO0lBQ1osYUFBYTtJQUNiLFVBQVU7SUFDVixjQUFjO0lBQ2QsMkJBQTJCO0NBQzlCLENBQUM7QUFFRixNQUFNLENBQUMsS0FBSyxVQUFVLFFBQVEsQ0FDMUIsRUFBTSxFQUNOLElBQXdCLEVBQ3hCLFNBQWlCLEVBQ2pCLE9BQWUsRUFDZixNQUFjLEVBQ2QsUUFBZ0IsRUFDaEIsU0FBaUI7SUFFakIsSUFBSSxJQUFJLENBQUMsU0FBUyxLQUFLLEVBQUUsRUFBRTtRQUN2QixNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsT0FBTyxDQUNyQixzREFBc0QsRUFDdEQsSUFBSSxDQUFDLE1BQU0sRUFDWCxJQUFJLENBQUMsR0FBRyxFQUNSLElBQUksQ0FBQyxPQUFPLEVBQ1osSUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUMsTUFBTSxFQUNoQyxJQUFJLENBQUMsYUFBYSxHQUFHLElBQUksQ0FBQyxNQUFNLEVBQ2hDLElBQUksQ0FBQyxhQUFhLEVBQ2xCLFNBQVMsRUFDVCxPQUFPLEVBQ1AsT0FBTyxHQUFHLFNBQVMsRUFDbkIsU0FBUyxHQUFHLENBQUMsSUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQzlDLE9BQU8sR0FBRyxDQUFDLElBQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUM1QyxPQUFPLEdBQUcsU0FBUyxHQUFHLElBQUksQ0FBQyxhQUFhLEVBQ3hDLE1BQU0sRUFDTixRQUFRLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUNuQixFQUFFLENBQUMsc0JBQXNCLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFDakQsRUFBRSxDQUFDLE9BQU8sQ0FBQyxTQUFTLEVBQUUsV0FBVyxDQUFDLEVBQ2xDLEVBQUUsQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLHVCQUF1QixDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRSxXQUFXLENBQUMsQ0FDbkUsQ0FBQztRQUVGLE9BQU8sQ0FBQyxNQUFNLEVBQUUsQ0FBQyxZQUFZLENBQUMsYUFBYSxDQUFDLGVBQWUsRUFBRSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsTUFBTSxDQUFDLENBQUM7WUFBQyxDQUFDO0tBQzNGO0FBQ0wsQ0FBQyJ9\",\"filename\":\"/lib/util.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":13.25,\"server\":\"netlink\",\"moduleSequenceNumber\":84389,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"purchaseTor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"purchaseProgram\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"connect\",\"cost\":2},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.stanek.charge(ns.args[0], ns.args[1]);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hhcmdlLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL3N0YW5lay9jaGFyZ2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUM5QixPQUFPLElBQUksRUFBRTtRQUNULE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7S0FDakQ7QUFDTCxDQUFDIn0=\",\"filename\":\"/lib/stanek/charge.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/stanek/charge.js\",\"url\":\"blob:file:///ac9dd73f-ee3a-4be5-9b79-6caa7d9ba2ae\",\"moduleSequenceNumber\":99860}],\"dependents\":[],\"ramUsage\":2,\"server\":\"netlink\",\"moduleSequenceNumber\":99860,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.charge\",\"cost\":0.4}]}}],\"serversOnNetwork\":[\"silver-helix\",\"rothman-uni\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":213,\"hackDifficulty\":213,\"minDifficulty\":71,\"moneyAvailable\":206250000,\"moneyMax\":2320312500,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":379,\"serverGrowth\":60,\"suppression\":0,\"activeSuppressionThreads\":[],\"suppressionIntervalID\":null,\"suppressionLastUpdateTime\":0}},\"johnson-ortho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":false,\"ip\":\"84.1.9.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omega-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":123,\"hackDifficulty\":123,\"minDifficulty\":41,\"moneyAvailable\":57538717.5,\"moneyMax\":647310571.875,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":296,\"serverGrowth\":40,\"suppression\":0,\"activeSuppressionThreads\":[],\"suppressionIntervalID\":null,\"suppressionLastUpdateTime\":0}},\"n00dles\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"n00dles\",\"httpPortOpen\":false,\"ip\":\"74.6.6.1\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.grow(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLElBQUksR0FBdUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFFbkUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDdkIsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7UUFDeEMsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7S0FDM0MsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyJ9\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"n00dles\",\"moduleSequenceNumber\":83474,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.weaken(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxJQUFJLEdBQXVCLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO0lBRW5FLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFO1FBQ3pCLGtCQUFrQixFQUFFLElBQUksQ0FBQyxlQUFlO1FBQ3hDLGtCQUFrQixFQUFFLElBQUksQ0FBQyxlQUFlO0tBQzNDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///1ff2fc8a-d4ea-49d1-91f4-e66ba8565401\",\"moduleSequenceNumber\":83481}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"n00dles\",\"moduleSequenceNumber\":83481,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.hack(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLElBQUksR0FBdUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFFbkUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDdkIsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7UUFDeEMsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7S0FDM0MsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyJ9\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"n00dles\",\"moduleSequenceNumber\":83478,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export var ReservedPorts;\\r\\n(function (ReservedPorts) {\\r\\n    ReservedPorts[ReservedPorts[\\\"HACKING_INFO\\\"] = 1] = \\\"HACKING_INFO\\\";\\r\\n    ReservedPorts[ReservedPorts[\\\"HACKNET_INFO\\\"] = 2] = \\\"HACKNET_INFO\\\";\\r\\n    ReservedPorts[ReservedPorts[\\\"HACK_WRITE_INFO\\\"] = 3] = \\\"HACK_WRITE_INFO\\\";\\r\\n})(ReservedPorts || (ReservedPorts = {}));\\r\\nexport const WEAKENJS = \\\"/lib/exec/weaken.js\\\";\\r\\nexport const GROWJS = \\\"/lib/exec/grow.js\\\";\\r\\nexport const HACKJS = \\\"/lib/exec/hack.js\\\";\\r\\nexport const UTILJS = \\\"/lib/util.js\\\";\\r\\nexport const CITIES = [\\\"Aevum\\\", \\\"Chongqing\\\", \\\"Sector-12\\\", \\\"New Tokyo\\\", \\\"Ishima\\\", \\\"Volhaven\\\"];\\r\\nexport function llog(ns, str, ...args) {\\r\\n    ns.print(ns.sprintf(\\\"%8s \\\" + str, new Date().toLocaleTimeString(\\\"it-IT\\\"), ...args));\\r\\n}\\r\\nexport function softenServer(ns, hostname) {\\r\\n    if (ns.hasRootAccess(hostname)) {\\r\\n        return;\\r\\n    }\\r\\n    let ports = 0;\\r\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n        ns.brutessh(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n        ns.ftpcrack(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n        ns.httpworm(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n        ns.relaysmtp(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n        ns.sqlinject(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ports >= ns.getServerNumPortsRequired(hostname)) {\\r\\n        ns.nuke(hostname);\\r\\n    }\\r\\n}\\r\\nexport function serverIsHackable(ns, hostname) {\\r\\n    return ns.hasRootAccess(hostname) && ns.getHackingLevel() >= ns.getServerRequiredHackingLevel(hostname);\\r\\n}\\r\\nexport function canExecuteOnServer(ns, hostname) {\\r\\n    return ns.hasRootAccess(hostname) && ns.getServerMaxRam(hostname) > 0;\\r\\n}\\r\\nexport function mapHosts(ns, hosts = {}, parents = [], current = \\\"home\\\") {\\r\\n    const newParents = parents.concat(current);\\r\\n    hosts[current] = newParents;\\r\\n    const children = ns.scan(current).filter((element) => !parents.includes(element));\\r\\n    for (const child of children) {\\r\\n        mapHosts(ns, hosts, newParents, child);\\r\\n    }\\r\\n    return hosts;\\r\\n}\\r\\nexport function allHosts(ns) {\\r\\n    return Object.keys(mapHosts(ns));\\r\\n}\\r\\nexport function doProgramBuys(ns) {\\r\\n    const player = ns.getPlayer();\\r\\n    if (!player.tor && player.money > 200e3)\\r\\n        ns.purchaseTor();\\r\\n    if (!ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\") && player.money > 500e3)\\r\\n        ns.purchaseProgram(\\\"BruteSSH.exe\\\");\\r\\n    if (!ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\") && player.money > 1500e3)\\r\\n        ns.purchaseProgram(\\\"FTPCrack.exe\\\");\\r\\n    if (!ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\") && player.money > 5e6)\\r\\n        ns.purchaseProgram(\\\"relaySMTP.exe\\\");\\r\\n    if (!ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\") && player.money > 30e6)\\r\\n        ns.purchaseProgram(\\\"HTTPWorm.exe\\\");\\r\\n    if (!ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\") && player.money > 250e6)\\r\\n        ns.purchaseProgram(\\\"SQLInject.exe\\\");\\r\\n}\\r\\nexport function doBuyAndSoftenAll(ns) {\\r\\n    doProgramBuys(ns);\\r\\n    for (const hostname of allHosts(ns)) {\\r\\n        softenServer(ns, hostname);\\r\\n    }\\r\\n}\\r\\nexport function stFormat(ns, ms, showms = false, showfull = false) {\\r\\n    let timeLeft = ms;\\r\\n    const hours = Math.floor(ms / (1000 * 60 * 60));\\r\\n    timeLeft -= hours * (1000 * 60 * 60);\\r\\n    const minutes = Math.floor(timeLeft / (1000 * 60));\\r\\n    timeLeft -= minutes * (1000 * 60);\\r\\n    const seconds = Math.floor(timeLeft / 1000);\\r\\n    timeLeft -= seconds * 1000;\\r\\n    const milliseconds = timeLeft;\\r\\n    if (showms) {\\r\\n        if (hours > 0 || showfull)\\r\\n            return ns.sprintf(\\\"%02d:%02d:%02d.%03d\\\", hours, minutes, seconds, milliseconds);\\r\\n        if (minutes > 0)\\r\\n            return ns.sprintf(\\\"%02d:%02d.%03d\\\", minutes, seconds, milliseconds);\\r\\n        return ns.sprintf(\\\"%02d.%03d\\\", seconds, milliseconds);\\r\\n    }\\r\\n    else {\\r\\n        if (hours > 0 || showfull)\\r\\n            return ns.sprintf(\\\"%02d:%02d:%02d\\\", hours, minutes, seconds);\\r\\n        if (minutes > 0)\\r\\n            return ns.sprintf(\\\"%02d:%02d\\\", minutes, seconds);\\r\\n        return ns.sprintf(\\\"%02d\\\", seconds);\\r\\n    }\\r\\n}\\r\\nexport function stdFormat(ns, offset = 0, showms = false) {\\r\\n    const date = new Date(new Date().getTime() + offset);\\r\\n    if (showms) {\\r\\n        const ms = ns.sprintf(\\\"%03d\\\", date.getUTCMilliseconds());\\r\\n        return date.toLocaleTimeString(\\\"it-IT\\\") + \\\".\\\" + ms;\\r\\n    }\\r\\n    else {\\r\\n        return date.toLocaleTimeString(\\\"it-IT\\\");\\r\\n    }\\r\\n}\\r\\nexport async function doBackdoors(ns) {\\r\\n    //const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"w0r1d_d43m0n\\\", \\\"b-and-a\\\", \\\"ecorp\\\", \\\"fulcrumassets\\\", \\\"fulcrumtech\\\"];\\r\\n    //const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"omnitek\\\", \\\"kuai-gong\\\", \\\"megacorp\\\"];\\r\\n    const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"w0r1d_d43m0n\\\"];\\r\\n    const hosts = mapHosts(ns);\\r\\n    for (const [hostName, trail] of Object.entries(hosts)) {\\r\\n        const server = ns.getServer(hostName);\\r\\n        if (!targetHosts.includes(hostName) ||\\r\\n            server.backdoorInstalled ||\\r\\n            server.requiredHackingSkill > ns.getHackingLevel() ||\\r\\n            !server.hasAdminRights)\\r\\n            continue;\\r\\n        ns.print(hostName);\\r\\n        for (const hostHopName of trail) {\\r\\n            ns.connect(hostHopName);\\r\\n        }\\r\\n        await ns.installBackdoor();\\r\\n        ns.connect(\\\"home\\\");\\r\\n    }\\r\\n}\\r\\nexport function cleanLogs(ns) {\\r\\n    ns.disableLog(\\\"disableLog\\\");\\r\\n    ns.disableLog(\\\"ALL\\\");\\r\\n    // ns.disableLog(\\\"sleep\\\")\\r\\n    // ns.disableLog(\\\"exec\\\")\\r\\n    // ns.disableLog(\\\"getServerMaxRam\\\")\\r\\n    // ns.disableLog(\\\"getServerSecurityLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerMinSecurityLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerMaxMoney\\\")\\r\\n    // ns.disableLog(\\\"getHackingLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerRequiredHackingLevel\\\")\\r\\n    // ns.disableLog(\\\"scan\\\")\\r\\n    // ns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n    // ns.disableLog(\\\"getServerUsedRam\\\")\\r\\n}\\r\\nexport const ALL_FACTIONS = [\\r\\n    \\\"Illuminati\\\",\\r\\n    \\\"Daedalus\\\",\\r\\n    \\\"The Covenant\\\",\\r\\n    \\\"ECorp\\\",\\r\\n    \\\"MegaCorp\\\",\\r\\n    \\\"Bachman & Associates\\\",\\r\\n    \\\"Blade Industries\\\",\\r\\n    \\\"NWO\\\",\\r\\n    \\\"Clarke Incorporated\\\",\\r\\n    \\\"OmniTek Incorporated\\\",\\r\\n    \\\"Four Sigma\\\",\\r\\n    \\\"KuaiGong International\\\",\\r\\n    \\\"Fulcrum Secret Technologies\\\",\\r\\n    \\\"BitRunners\\\",\\r\\n    \\\"The Black Hand\\\",\\r\\n    \\\"NiteSec\\\",\\r\\n    \\\"Aevum\\\",\\r\\n    \\\"Chongqing\\\",\\r\\n    \\\"Ishima\\\",\\r\\n    \\\"New Tokyo\\\",\\r\\n    \\\"Sector-12\\\",\\r\\n    \\\"Volhaven\\\",\\r\\n    \\\"Speakers for the Dead\\\",\\r\\n    \\\"The Dark Army\\\",\\r\\n    \\\"The Syndicate\\\",\\r\\n    \\\"Silhouette\\\",\\r\\n    \\\"Tetrads\\\",\\r\\n    \\\"Slum Snakes\\\",\\r\\n    \\\"Netburners\\\",\\r\\n    \\\"Tian Di Hui\\\",\\r\\n    \\\"CyberSec\\\",\\r\\n    \\\"Bladeburners\\\",\\r\\n    \\\"Church of the Machine God\\\",\\r\\n];\\r\\nexport async function writeOut(ns, data, startTime, endTime, result, startSec, startCash) {\\r\\n    if (data.writeFile !== \\\"\\\") {\\r\\n        const outstr = ns.sprintf(\\\"%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\", data.target, data.uid, data.batchId, data.realTimeStart + data.offset, data.realTimeStart + data.finish, data.operationTime, startTime, endTime, endTime - startTime, startTime - (data.realTimeStart + data.offset), endTime - (data.realTimeStart + data.finish), endTime - startTime - data.operationTime, result, startSec.toFixed(2), ns.getServerSecurityLevel(data.target).toFixed(2), ns.nFormat(startCash, \\\"($0.000a)\\\"), ns.nFormat(ns.getServerMoneyAvailable(data.target), \\\"($0.000a)\\\"));\\r\\n        while (!await ns.tryWritePort(ReservedPorts.HACK_WRITE_INFO, [data.writeFile, outstr]))\\r\\n            ;\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi91dGlsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLE1BQU0sQ0FBTixJQUFZLGFBSVg7QUFKRCxXQUFZLGFBQWE7SUFDckIsaUVBQWdCLENBQUE7SUFDaEIsaUVBQVksQ0FBQTtJQUNaLHVFQUFlLENBQUE7QUFDbkIsQ0FBQyxFQUpXLGFBQWEsS0FBYixhQUFhLFFBSXhCO0FBRUQsTUFBTSxDQUFDLE1BQU0sUUFBUSxHQUFHLHFCQUFxQixDQUFDO0FBQzlDLE1BQU0sQ0FBQyxNQUFNLE1BQU0sR0FBRyxtQkFBbUIsQ0FBQztBQUMxQyxNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUcsbUJBQW1CLENBQUM7QUFDMUMsTUFBTSxDQUFDLE1BQU0sTUFBTSxHQUFHLGNBQWMsQ0FBQztBQUVyQyxNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUcsQ0FBQyxPQUFPLEVBQUUsV0FBVyxFQUFFLFdBQVcsRUFBRSxXQUFXLEVBQUUsUUFBUSxFQUFFLFVBQVUsQ0FBQyxDQUFDO0FBRTdGLE1BQU0sVUFBVSxJQUFJLENBQUMsRUFBTSxFQUFFLEdBQVcsRUFBRSxHQUFHLElBQXlCO0lBQ2xFLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEdBQUcsR0FBRyxFQUFFLElBQUksSUFBSSxFQUFFLENBQUMsa0JBQWtCLENBQUMsT0FBTyxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDO0FBQ3hGLENBQUM7QUFFRCxNQUFNLFVBQVUsWUFBWSxDQUFDLEVBQU0sRUFBRSxRQUFnQjtJQUNqRCxJQUFJLEVBQUUsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDNUIsT0FBTztLQUNWO0lBRUQsSUFBSSxLQUFLLEdBQUcsQ0FBQyxDQUFDO0lBQ2QsSUFBSSxFQUFFLENBQUMsVUFBVSxDQUFDLGNBQWMsRUFB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\",\"filename\":\"/lib/util.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":13.25,\"server\":\"n00dles\",\"moduleSequenceNumber\":83480,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"purchaseTor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"purchaseProgram\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"connect\",\"cost\":2},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.stanek.charge(ns.args[0], ns.args[1]);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hhcmdlLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL3N0YW5lay9jaGFyZ2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUM5QixPQUFPLElBQUksRUFBRTtRQUNULE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7S0FDakQ7QUFDTCxDQUFDIn0=\",\"filename\":\"/lib/stanek/charge.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/stanek/charge.js\",\"url\":\"blob:file:///80c8577d-4592-4efa-b4ca-ff566855b76d\",\"moduleSequenceNumber\":99856}],\"dependents\":[],\"ramUsage\":2,\"server\":\"n00dles\",\"moduleSequenceNumber\":99856,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.charge\",\"cost\":0.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":3,\"hackDifficulty\":3,\"minDifficulty\":1,\"moneyAvailable\":52500,\"moneyMax\":590625,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":3000,\"suppression\":0,\"activeSuppressionThreads\":[],\"suppressionIntervalID\":null,\"suppressionLastUpdateTime\":0}},\"foodnstuff\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"foodnstuff\",\"httpPortOpen\":false,\"ip\":\"59.6.8.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.grow(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLElBQUksR0FBdUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFFbkUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDdkIsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7UUFDeEMsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7S0FDM0MsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyJ9\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":83426,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.weaken(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxJQUFJLEdBQXVCLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO0lBRW5FLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFO1FBQ3pCLGtCQUFrQixFQUFFLElBQUksQ0FBQyxlQUFlO1FBQ3hDLGtCQUFrQixFQUFFLElBQUksQ0FBQyxlQUFlO0tBQzNDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///e1bdf8ab-0083-474f-b521-b0c18ccc14fa\",\"moduleSequenceNumber\":83487}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":83487,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.hack(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLElBQUksR0FBdUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFFbkUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDdkIsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7UUFDeEMsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7S0FDM0MsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyJ9\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":83430,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export var ReservedPorts;\\r\\n(function (ReservedPorts) {\\r\\n    ReservedPorts[ReservedPorts[\\\"HACKING_INFO\\\"] = 1] = \\\"HACKING_INFO\\\";\\r\\n    ReservedPorts[ReservedPorts[\\\"HACKNET_INFO\\\"] = 2] = \\\"HACKNET_INFO\\\";\\r\\n    ReservedPorts[ReservedPorts[\\\"HACK_WRITE_INFO\\\"] = 3] = \\\"HACK_WRITE_INFO\\\";\\r\\n})(ReservedPorts || (ReservedPorts = {}));\\r\\nexport const WEAKENJS = \\\"/lib/exec/weaken.js\\\";\\r\\nexport const GROWJS = \\\"/lib/exec/grow.js\\\";\\r\\nexport const HACKJS = \\\"/lib/exec/hack.js\\\";\\r\\nexport const UTILJS = \\\"/lib/util.js\\\";\\r\\nexport const CITIES = [\\\"Aevum\\\", \\\"Chongqing\\\", \\\"Sector-12\\\", \\\"New Tokyo\\\", \\\"Ishima\\\", \\\"Volhaven\\\"];\\r\\nexport function llog(ns, str, ...args) {\\r\\n    ns.print(ns.sprintf(\\\"%8s \\\" + str, new Date().toLocaleTimeString(\\\"it-IT\\\"), ...args));\\r\\n}\\r\\nexport function softenServer(ns, hostname) {\\r\\n    if (ns.hasRootAccess(hostname)) {\\r\\n        return;\\r\\n    }\\r\\n    let ports = 0;\\r\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n        ns.brutessh(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n        ns.ftpcrack(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n        ns.httpworm(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n        ns.relaysmtp(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n        ns.sqlinject(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ports >= ns.getServerNumPortsRequired(hostname)) {\\r\\n        ns.nuke(hostname);\\r\\n    }\\r\\n}\\r\\nexport function serverIsHackable(ns, hostname) {\\r\\n    return ns.hasRootAccess(hostname) && ns.getHackingLevel() >= ns.getServerRequiredHackingLevel(hostname);\\r\\n}\\r\\nexport function canExecuteOnServer(ns, hostname) {\\r\\n    return ns.hasRootAccess(hostname) && ns.getServerMaxRam(hostname) > 0;\\r\\n}\\r\\nexport function mapHosts(ns, hosts = {}, parents = [], current = \\\"home\\\") {\\r\\n    const newParents = parents.concat(current);\\r\\n    hosts[current] = newParents;\\r\\n    const children = ns.scan(current).filter((element) => !parents.includes(element));\\r\\n    for (const child of children) {\\r\\n        mapHosts(ns, hosts, newParents, child);\\r\\n    }\\r\\n    return hosts;\\r\\n}\\r\\nexport function allHosts(ns) {\\r\\n    return Object.keys(mapHosts(ns));\\r\\n}\\r\\nexport function doProgramBuys(ns) {\\r\\n    const player = ns.getPlayer();\\r\\n    if (!player.tor && player.money > 200e3)\\r\\n        ns.purchaseTor();\\r\\n    if (!ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\") && player.money > 500e3)\\r\\n        ns.purchaseProgram(\\\"BruteSSH.exe\\\");\\r\\n    if (!ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\") && player.money > 1500e3)\\r\\n        ns.purchaseProgram(\\\"FTPCrack.exe\\\");\\r\\n    if (!ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\") && player.money > 5e6)\\r\\n        ns.purchaseProgram(\\\"relaySMTP.exe\\\");\\r\\n    if (!ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\") && player.money > 30e6)\\r\\n        ns.purchaseProgram(\\\"HTTPWorm.exe\\\");\\r\\n    if (!ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\") && player.money > 250e6)\\r\\n        ns.purchaseProgram(\\\"SQLInject.exe\\\");\\r\\n}\\r\\nexport function doBuyAndSoftenAll(ns) {\\r\\n    doProgramBuys(ns);\\r\\n    for (const hostname of allHosts(ns)) {\\r\\n        softenServer(ns, hostname);\\r\\n    }\\r\\n}\\r\\nexport function stFormat(ns, ms, showms = false, showfull = false) {\\r\\n    let timeLeft = ms;\\r\\n    const hours = Math.floor(ms / (1000 * 60 * 60));\\r\\n    timeLeft -= hours * (1000 * 60 * 60);\\r\\n    const minutes = Math.floor(timeLeft / (1000 * 60));\\r\\n    timeLeft -= minutes * (1000 * 60);\\r\\n    const seconds = Math.floor(timeLeft / 1000);\\r\\n    timeLeft -= seconds * 1000;\\r\\n    const milliseconds = timeLeft;\\r\\n    if (showms) {\\r\\n        if (hours > 0 || showfull)\\r\\n            return ns.sprintf(\\\"%02d:%02d:%02d.%03d\\\", hours, minutes, seconds, milliseconds);\\r\\n        if (minutes > 0)\\r\\n            return ns.sprintf(\\\"%02d:%02d.%03d\\\", minutes, seconds, milliseconds);\\r\\n        return ns.sprintf(\\\"%02d.%03d\\\", seconds, milliseconds);\\r\\n    }\\r\\n    else {\\r\\n        if (hours > 0 || showfull)\\r\\n            return ns.sprintf(\\\"%02d:%02d:%02d\\\", hours, minutes, seconds);\\r\\n        if (minutes > 0)\\r\\n            return ns.sprintf(\\\"%02d:%02d\\\", minutes, seconds);\\r\\n        return ns.sprintf(\\\"%02d\\\", seconds);\\r\\n    }\\r\\n}\\r\\nexport function stdFormat(ns, offset = 0, showms = false) {\\r\\n    const date = new Date(new Date().getTime() + offset);\\r\\n    if (showms) {\\r\\n        const ms = ns.sprintf(\\\"%03d\\\", date.getUTCMilliseconds());\\r\\n        return date.toLocaleTimeString(\\\"it-IT\\\") + \\\".\\\" + ms;\\r\\n    }\\r\\n    else {\\r\\n        return date.toLocaleTimeString(\\\"it-IT\\\");\\r\\n    }\\r\\n}\\r\\nexport async function doBackdoors(ns) {\\r\\n    //const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"w0r1d_d43m0n\\\", \\\"b-and-a\\\", \\\"ecorp\\\", \\\"fulcrumassets\\\", \\\"fulcrumtech\\\"];\\r\\n    //const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"omnitek\\\", \\\"kuai-gong\\\", \\\"megacorp\\\"];\\r\\n    const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"w0r1d_d43m0n\\\"];\\r\\n    const hosts = mapHosts(ns);\\r\\n    for (const [hostName, trail] of Object.entries(hosts)) {\\r\\n        const server = ns.getServer(hostName);\\r\\n        if (!targetHosts.includes(hostName) ||\\r\\n            server.backdoorInstalled ||\\r\\n            server.requiredHackingSkill > ns.getHackingLevel() ||\\r\\n            !server.hasAdminRights)\\r\\n            continue;\\r\\n        ns.print(hostName);\\r\\n        for (const hostHopName of trail) {\\r\\n            ns.connect(hostHopName);\\r\\n        }\\r\\n        await ns.installBackdoor();\\r\\n        ns.connect(\\\"home\\\");\\r\\n    }\\r\\n}\\r\\nexport function cleanLogs(ns) {\\r\\n    ns.disableLog(\\\"disableLog\\\");\\r\\n    ns.disableLog(\\\"ALL\\\");\\r\\n    // ns.disableLog(\\\"sleep\\\")\\r\\n    // ns.disableLog(\\\"exec\\\")\\r\\n    // ns.disableLog(\\\"getServerMaxRam\\\")\\r\\n    // ns.disableLog(\\\"getServerSecurityLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerMinSecurityLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerMaxMoney\\\")\\r\\n    // ns.disableLog(\\\"getHackingLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerRequiredHackingLevel\\\")\\r\\n    // ns.disableLog(\\\"scan\\\")\\r\\n    // ns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n    // ns.disableLog(\\\"getServerUsedRam\\\")\\r\\n}\\r\\nexport const ALL_FACTIONS = [\\r\\n    \\\"Illuminati\\\",\\r\\n    \\\"Daedalus\\\",\\r\\n    \\\"The Covenant\\\",\\r\\n    \\\"ECorp\\\",\\r\\n    \\\"MegaCorp\\\",\\r\\n    \\\"Bachman & Associates\\\",\\r\\n    \\\"Blade Industries\\\",\\r\\n    \\\"NWO\\\",\\r\\n    \\\"Clarke Incorporated\\\",\\r\\n    \\\"OmniTek Incorporated\\\",\\r\\n    \\\"Four Sigma\\\",\\r\\n    \\\"KuaiGong International\\\",\\r\\n    \\\"Fulcrum Secret Technologies\\\",\\r\\n    \\\"BitRunners\\\",\\r\\n    \\\"The Black Hand\\\",\\r\\n    \\\"NiteSec\\\",\\r\\n    \\\"Aevum\\\",\\r\\n    \\\"Chongqing\\\",\\r\\n    \\\"Ishima\\\",\\r\\n    \\\"New Tokyo\\\",\\r\\n    \\\"Sector-12\\\",\\r\\n    \\\"Volhaven\\\",\\r\\n    \\\"Speakers for the Dead\\\",\\r\\n    \\\"The Dark Army\\\",\\r\\n    \\\"The Syndicate\\\",\\r\\n    \\\"Silhouette\\\",\\r\\n    \\\"Tetrads\\\",\\r\\n    \\\"Slum Snakes\\\",\\r\\n    \\\"Netburners\\\",\\r\\n    \\\"Tian Di Hui\\\",\\r\\n    \\\"CyberSec\\\",\\r\\n    \\\"Bladeburners\\\",\\r\\n    \\\"Church of the Machine God\\\",\\r\\n];\\r\\nexport async function writeOut(ns, data, startTime, endTime, result, startSec, startCash) {\\r\\n    if (data.writeFile !== \\\"\\\") {\\r\\n        const outstr = ns.sprintf(\\\"%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\", data.target, data.uid, data.batchId, data.realTimeStart + data.offset, data.realTimeStart + data.finish, data.operationTime, startTime, endTime, endTime - startTime, startTime - (data.realTimeStart + data.offset), endTime - (data.realTimeStart + data.finish), endTime - startTime - data.operationTime, result, startSec.toFixed(2), ns.getServerSecurityLevel(data.target).toFixed(2), ns.nFormat(startCash, \\\"($0.000a)\\\"), ns.nFormat(ns.getServerMoneyAvailable(data.target), \\\"($0.000a)\\\"));\\r\\n        while (!await ns.tryWritePort(ReservedPorts.HACK_WRITE_INFO, [data.writeFile, outstr]))\\r\\n            ;\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi91dGlsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLE1BQU0sQ0FBTixJQUFZLGFBSVg7QUFKRCxXQUFZLGFBQWE7SUFDckIsaUVBQWdCLENBQUE7SUFDaEIsaUVBQVksQ0FBQTtJQUNaLHVFQUFlLENBQUE7QUFDbkIsQ0FBQyxFQUpXLGFBQWEsS0FBYixhQUFhLFFBSXhCO0FBRUQsTUFBTSxDQUFDLE1BQU0sUUFBUSxHQUFHLHFCQUFxQixDQUFDO0FBQzlDLE1BQU0sQ0FBQyxNQUFNLE1BQU0sR0FBRyxtQkFBbUIsQ0FBQztBQUMxQyxNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUcsbUJBQW1CLENBQUM7QUFDMUMsTUFBTSxDQUFDLE1BQU0sTUFBTSxHQUFHLGNBQWMsQ0FBQztBQUVyQyxNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUcsQ0FBQyxPQUFPLEVBQUUsV0FBVyxFQUFFLFdBQVcsRUFBRSxXQUFXLEVBQUUsUUFBUSxFQUFFLFVBQVUsQ0FBQyxDQUFDO0FBRTdGLE1BQU0sVUFBVSxJQUFJLENBQUMsRUFBTSxFQUFFLEdBQVcsRUFBRSxHQUFHLElBQXlCO0lBQ2xFLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEdBQUcsR0FBRyxFQUFFLElBQUksSUFBSSxFQUFFLENBQUMsa0JBQWtCLENBQUMsT0FBTyxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDO0FBQ3hGLENBQUM7QUFFRCxNQUFNLFVBQVUsWUFBWSxDQUFDLEVBQU0sRUFBRSxRQUFnQjtJQUNqRCxJQUFJLEVBQUUsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDNUIsT0FBTztLQUNWO0lBRUQsSUFBSSxLQUFLLEdBQUcsQ0FBQyxDQUFDO0lBQ2QsSUFBSSxFQUFFLENBQUMsVUFBVSxDQUFDLGNBQWMsRUFB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\",\"filename\":\"/lib/util.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":13.25,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":83432,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"purchaseTor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"purchaseProgram\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"connect\",\"cost\":2},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.stanek.charge(ns.args[0], ns.args[1]);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hhcmdlLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL3N0YW5lay9jaGFyZ2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUM5QixPQUFPLElBQUksRUFBRTtRQUNULE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7S0FDakQ7QUFDTCxDQUFDIn0=\",\"filename\":\"/lib/stanek/charge.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/stanek/charge.js\",\"url\":\"blob:file:///74175979-0db8-49a8-ac68-8532c1516a79\",\"moduleSequenceNumber\":99857}],\"dependents\":[],\"ramUsage\":2,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":99857,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.charge\",\"cost\":0.4}]}}],\"serversOnNetwork\":[\"home\",\"max-hardware\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":10,\"minDifficulty\":10,\"moneyAvailable\":2892683.159236283,\"moneyMax\":16875000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":5,\"suppression\":0,\"activeSuppressionThreads\":[],\"suppressionIntervalID\":null,\"suppressionLastUpdateTime\":0}},\"sigma-cosmetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":false,\"ip\":\"52.3.4.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.grow(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLElBQUksR0FBdUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFFbkUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDdkIsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7UUFDeEMsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7S0FDM0MsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyJ9\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":83434,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.weaken(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxJQUFJLEdBQXVCLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO0lBRW5FLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFO1FBQ3pCLGtCQUFrQixFQUFFLElBQUksQ0FBQyxlQUFlO1FBQ3hDLGtCQUFrQixFQUFFLElBQUksQ0FBQyxlQUFlO0tBQzNDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///be62b08a-a2db-4d01-9d0c-e34282b0a3c2\",\"moduleSequenceNumber\":83486}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":83486,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.hack(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLElBQUksR0FBdUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFFbkUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDdkIsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7UUFDeEMsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7S0FDM0MsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyJ9\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":83438,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export var ReservedPorts;\\r\\n(function (ReservedPorts) {\\r\\n    ReservedPorts[ReservedPorts[\\\"HACKING_INFO\\\"] = 1] = \\\"HACKING_INFO\\\";\\r\\n    ReservedPorts[ReservedPorts[\\\"HACKNET_INFO\\\"] = 2] = \\\"HACKNET_INFO\\\";\\r\\n    ReservedPorts[ReservedPorts[\\\"HACK_WRITE_INFO\\\"] = 3] = \\\"HACK_WRITE_INFO\\\";\\r\\n})(ReservedPorts || (ReservedPorts = {}));\\r\\nexport const WEAKENJS = \\\"/lib/exec/weaken.js\\\";\\r\\nexport const GROWJS = \\\"/lib/exec/grow.js\\\";\\r\\nexport const HACKJS = \\\"/lib/exec/hack.js\\\";\\r\\nexport const UTILJS = \\\"/lib/util.js\\\";\\r\\nexport const CITIES = [\\\"Aevum\\\", \\\"Chongqing\\\", \\\"Sector-12\\\", \\\"New Tokyo\\\", \\\"Ishima\\\", \\\"Volhaven\\\"];\\r\\nexport function llog(ns, str, ...args) {\\r\\n    ns.print(ns.sprintf(\\\"%8s \\\" + str, new Date().toLocaleTimeString(\\\"it-IT\\\"), ...args));\\r\\n}\\r\\nexport function softenServer(ns, hostname) {\\r\\n    if (ns.hasRootAccess(hostname)) {\\r\\n        return;\\r\\n    }\\r\\n    let ports = 0;\\r\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n        ns.brutessh(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n        ns.ftpcrack(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n        ns.httpworm(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n        ns.relaysmtp(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n        ns.sqlinject(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ports >= ns.getServerNumPortsRequired(hostname)) {\\r\\n        ns.nuke(hostname);\\r\\n    }\\r\\n}\\r\\nexport function serverIsHackable(ns, hostname) {\\r\\n    return ns.hasRootAccess(hostname) && ns.getHackingLevel() >= ns.getServerRequiredHackingLevel(hostname);\\r\\n}\\r\\nexport function canExecuteOnServer(ns, hostname) {\\r\\n    return ns.hasRootAccess(hostname) && ns.getServerMaxRam(hostname) > 0;\\r\\n}\\r\\nexport function mapHosts(ns, hosts = {}, parents = [], current = \\\"home\\\") {\\r\\n    const newParents = parents.concat(current);\\r\\n    hosts[current] = newParents;\\r\\n    const children = ns.scan(current).filter((element) => !parents.includes(element));\\r\\n    for (const child of children) {\\r\\n        mapHosts(ns, hosts, newParents, child);\\r\\n    }\\r\\n    return hosts;\\r\\n}\\r\\nexport function allHosts(ns) {\\r\\n    return Object.keys(mapHosts(ns));\\r\\n}\\r\\nexport function doProgramBuys(ns) {\\r\\n    const player = ns.getPlayer();\\r\\n    if (!player.tor && player.money > 200e3)\\r\\n        ns.purchaseTor();\\r\\n    if (!ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\") && player.money > 500e3)\\r\\n        ns.purchaseProgram(\\\"BruteSSH.exe\\\");\\r\\n    if (!ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\") && player.money > 1500e3)\\r\\n        ns.purchaseProgram(\\\"FTPCrack.exe\\\");\\r\\n    if (!ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\") && player.money > 5e6)\\r\\n        ns.purchaseProgram(\\\"relaySMTP.exe\\\");\\r\\n    if (!ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\") && player.money > 30e6)\\r\\n        ns.purchaseProgram(\\\"HTTPWorm.exe\\\");\\r\\n    if (!ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\") && player.money > 250e6)\\r\\n        ns.purchaseProgram(\\\"SQLInject.exe\\\");\\r\\n}\\r\\nexport function doBuyAndSoftenAll(ns) {\\r\\n    doProgramBuys(ns);\\r\\n    for (const hostname of allHosts(ns)) {\\r\\n        softenServer(ns, hostname);\\r\\n    }\\r\\n}\\r\\nexport function stFormat(ns, ms, showms = false, showfull = false) {\\r\\n    let timeLeft = ms;\\r\\n    const hours = Math.floor(ms / (1000 * 60 * 60));\\r\\n    timeLeft -= hours * (1000 * 60 * 60);\\r\\n    const minutes = Math.floor(timeLeft / (1000 * 60));\\r\\n    timeLeft -= minutes * (1000 * 60);\\r\\n    const seconds = Math.floor(timeLeft / 1000);\\r\\n    timeLeft -= seconds * 1000;\\r\\n    const milliseconds = timeLeft;\\r\\n    if (showms) {\\r\\n        if (hours > 0 || showfull)\\r\\n            return ns.sprintf(\\\"%02d:%02d:%02d.%03d\\\", hours, minutes, seconds, milliseconds);\\r\\n        if (minutes > 0)\\r\\n            return ns.sprintf(\\\"%02d:%02d.%03d\\\", minutes, seconds, milliseconds);\\r\\n        return ns.sprintf(\\\"%02d.%03d\\\", seconds, milliseconds);\\r\\n    }\\r\\n    else {\\r\\n        if (hours > 0 || showfull)\\r\\n            return ns.sprintf(\\\"%02d:%02d:%02d\\\", hours, minutes, seconds);\\r\\n        if (minutes > 0)\\r\\n            return ns.sprintf(\\\"%02d:%02d\\\", minutes, seconds);\\r\\n        return ns.sprintf(\\\"%02d\\\", seconds);\\r\\n    }\\r\\n}\\r\\nexport function stdFormat(ns, offset = 0, showms = false) {\\r\\n    const date = new Date(new Date().getTime() + offset);\\r\\n    if (showms) {\\r\\n        const ms = ns.sprintf(\\\"%03d\\\", date.getUTCMilliseconds());\\r\\n        return date.toLocaleTimeString(\\\"it-IT\\\") + \\\".\\\" + ms;\\r\\n    }\\r\\n    else {\\r\\n        return date.toLocaleTimeString(\\\"it-IT\\\");\\r\\n    }\\r\\n}\\r\\nexport async function doBackdoors(ns) {\\r\\n    //const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"w0r1d_d43m0n\\\", \\\"b-and-a\\\", \\\"ecorp\\\", \\\"fulcrumassets\\\", \\\"fulcrumtech\\\"];\\r\\n    //const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"omnitek\\\", \\\"kuai-gong\\\", \\\"megacorp\\\"];\\r\\n    const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"w0r1d_d43m0n\\\"];\\r\\n    const hosts = mapHosts(ns);\\r\\n    for (const [hostName, trail] of Object.entries(hosts)) {\\r\\n        const server = ns.getServer(hostName);\\r\\n        if (!targetHosts.includes(hostName) ||\\r\\n            server.backdoorInstalled ||\\r\\n            server.requiredHackingSkill > ns.getHackingLevel() ||\\r\\n            !server.hasAdminRights)\\r\\n            continue;\\r\\n        ns.print(hostName);\\r\\n        for (const hostHopName of trail) {\\r\\n            ns.connect(hostHopName);\\r\\n        }\\r\\n        await ns.installBackdoor();\\r\\n        ns.connect(\\\"home\\\");\\r\\n    }\\r\\n}\\r\\nexport function cleanLogs(ns) {\\r\\n    ns.disableLog(\\\"disableLog\\\");\\r\\n    ns.disableLog(\\\"ALL\\\");\\r\\n    // ns.disableLog(\\\"sleep\\\")\\r\\n    // ns.disableLog(\\\"exec\\\")\\r\\n    // ns.disableLog(\\\"getServerMaxRam\\\")\\r\\n    // ns.disableLog(\\\"getServerSecurityLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerMinSecurityLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerMaxMoney\\\")\\r\\n    // ns.disableLog(\\\"getHackingLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerRequiredHackingLevel\\\")\\r\\n    // ns.disableLog(\\\"scan\\\")\\r\\n    // ns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n    // ns.disableLog(\\\"getServerUsedRam\\\")\\r\\n}\\r\\nexport const ALL_FACTIONS = [\\r\\n    \\\"Illuminati\\\",\\r\\n    \\\"Daedalus\\\",\\r\\n    \\\"The Covenant\\\",\\r\\n    \\\"ECorp\\\",\\r\\n    \\\"MegaCorp\\\",\\r\\n    \\\"Bachman & Associates\\\",\\r\\n    \\\"Blade Industries\\\",\\r\\n    \\\"NWO\\\",\\r\\n    \\\"Clarke Incorporated\\\",\\r\\n    \\\"OmniTek Incorporated\\\",\\r\\n    \\\"Four Sigma\\\",\\r\\n    \\\"KuaiGong International\\\",\\r\\n    \\\"Fulcrum Secret Technologies\\\",\\r\\n    \\\"BitRunners\\\",\\r\\n    \\\"The Black Hand\\\",\\r\\n    \\\"NiteSec\\\",\\r\\n    \\\"Aevum\\\",\\r\\n    \\\"Chongqing\\\",\\r\\n    \\\"Ishima\\\",\\r\\n    \\\"New Tokyo\\\",\\r\\n    \\\"Sector-12\\\",\\r\\n    \\\"Volhaven\\\",\\r\\n    \\\"Speakers for the Dead\\\",\\r\\n    \\\"The Dark Army\\\",\\r\\n    \\\"The Syndicate\\\",\\r\\n    \\\"Silhouette\\\",\\r\\n    \\\"Tetrads\\\",\\r\\n    \\\"Slum Snakes\\\",\\r\\n    \\\"Netburners\\\",\\r\\n    \\\"Tian Di Hui\\\",\\r\\n    \\\"CyberSec\\\",\\r\\n    \\\"Bladeburners\\\",\\r\\n    \\\"Church of the Machine God\\\",\\r\\n];\\r\\nexport async function writeOut(ns, data, startTime, endTime, result, startSec, startCash) {\\r\\n    if (data.writeFile !== \\\"\\\") {\\r\\n        const outstr = ns.sprintf(\\\"%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\", data.target, data.uid, data.batchId, data.realTimeStart + data.offset, data.realTimeStart + data.finish, data.operationTime, startTime, endTime, endTime - startTime, startTime - (data.realTimeStart + data.offset), endTime - (data.realTimeStart + data.finish), endTime - startTime - data.operationTime, result, startSec.toFixed(2), ns.getServerSecurityLevel(data.target).toFixed(2), ns.nFormat(startCash, \\\"($0.000a)\\\"), ns.nFormat(ns.getServerMoneyAvailable(data.target), \\\"($0.000a)\\\"));\\r\\n        while (!await ns.tryWritePort(ReservedPorts.HACK_WRITE_INFO, [data.writeFile, outstr]))\\r\\n            ;\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi91dGlsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLE1BQU0sQ0FBTixJQUFZLGFBSVg7QUFKRCxXQUFZLGFBQWE7SUFDckIsaUVBQWdCLENBQUE7SUFDaEIsaUVBQVksQ0FBQTtJQUNaLHVFQUFlLENBQUE7QUFDbkIsQ0FBQyxFQUpXLGFBQWEsS0FBYixhQUFhLFFBSXhCO0FBRUQsTUFBTSxDQUFDLE1BQU0sUUFBUSxHQUFHLHFCQUFxQixDQUFDO0FBQzlDLE1BQU0sQ0FBQyxNQUFNLE1BQU0sR0FBRyxtQkFBbUIsQ0FBQztBQUMxQyxNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUcsbUJBQW1CLENBQUM7QUFDMUMsTUFBTSxDQUFDLE1BQU0sTUFBTSxHQUFHLGNBQWMsQ0FBQztBQUVyQyxNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUcsQ0FBQyxPQUFPLEVBQUUsV0FBVyxFQUFFLFdBQVcsRUFBRSxXQUFXLEVBQUUsUUFBUSxFQUFFLFVBQVUsQ0FBQyxDQUFDO0FBRTdGLE1BQU0sVUFBVSxJQUFJLENBQUMsRUFBTSxFQUFFLEdBQVcsRUFBRSxHQUFHLElBQXlCO0lBQ2xFLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEdBQUcsR0FBRyxFQUFFLElBQUksSUFBSSxFQUFFLENBQUMsa0JBQWtCLENBQUMsT0FBTyxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDO0FBQ3hGLENBQUM7QUFFRCxNQUFNLFVBQVUsWUFBWSxDQUFDLEVBQU0sRUFBRSxRQUFnQjtJQUNqRCxJQUFJLEVBQUUsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDNUIsT0FBTztLQUNWO0lBRUQsSUFBSSxLQUFLLEdBQUcsQ0FBQyxDQUFDO0lBQ2QsSUFBSSxFQUFFLENBQUMsVUFBVSxDQUFDLGNBQWMsRUFB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\",\"filename\":\"/lib/util.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":13.25,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":83440,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"purchaseTor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"purchaseProgram\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"connect\",\"cost\":2},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.stanek.charge(ns.args[0], ns.args[1]);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hhcmdlLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL3N0YW5lay9jaGFyZ2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUM5QixPQUFPLElBQUksRUFBRTtRQUNULE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7S0FDakQ7QUFDTCxDQUFDIn0=\",\"filename\":\"/lib/stanek/charge.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/stanek/charge.js\",\"url\":\"blob:file:///35e0f87e-49b4-4590-bcc4-0e1b3fe194c6\",\"moduleSequenceNumber\":99888}],\"dependents\":[],\"ramUsage\":2,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":99888,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.charge\",\"cost\":0.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":30,\"minDifficulty\":10,\"moneyAvailable\":1725000,\"moneyMax\":19406250,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":5,\"serverGrowth\":10,\"suppression\":0,\"activeSuppressionThreads\":[],\"suppressionIntervalID\":null,\"suppressionLastUpdateTime\":0}},\"joesguns\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"joesguns\",\"httpPortOpen\":false,\"ip\":\"38.2.3.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.grow(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLElBQUksR0FBdUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFFbkUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDdkIsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7UUFDeEMsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7S0FDM0MsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyJ9\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"joesguns\",\"moduleSequenceNumber\":83442,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.weaken(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxJQUFJLEdBQXVCLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO0lBRW5FLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFO1FBQ3pCLGtCQUFrQixFQUFFLElBQUksQ0FBQyxlQUFlO1FBQ3hDLGtCQUFrQixFQUFFLElBQUksQ0FBQyxlQUFlO0tBQzNDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///00cf3dae-33e0-4ebc-8c90-1287b7c2d5d7\",\"moduleSequenceNumber\":83485}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"joesguns\",\"moduleSequenceNumber\":83485,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.hack(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLElBQUksR0FBdUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFFbkUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDdkIsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7UUFDeEMsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7S0FDM0MsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyJ9\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"joesguns\",\"moduleSequenceNumber\":83446,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export var ReservedPorts;\\r\\n(function (ReservedPorts) {\\r\\n    ReservedPorts[ReservedPorts[\\\"HACKING_INFO\\\"] = 1] = \\\"HACKING_INFO\\\";\\r\\n    ReservedPorts[ReservedPorts[\\\"HACKNET_INFO\\\"] = 2] = \\\"HACKNET_INFO\\\";\\r\\n    ReservedPorts[ReservedPorts[\\\"HACK_WRITE_INFO\\\"] = 3] = \\\"HACK_WRITE_INFO\\\";\\r\\n})(ReservedPorts || (ReservedPorts = {}));\\r\\nexport const WEAKENJS = \\\"/lib/exec/weaken.js\\\";\\r\\nexport const GROWJS = \\\"/lib/exec/grow.js\\\";\\r\\nexport const HACKJS = \\\"/lib/exec/hack.js\\\";\\r\\nexport const UTILJS = \\\"/lib/util.js\\\";\\r\\nexport const CITIES = [\\\"Aevum\\\", \\\"Chongqing\\\", \\\"Sector-12\\\", \\\"New Tokyo\\\", \\\"Ishima\\\", \\\"Volhaven\\\"];\\r\\nexport function llog(ns, str, ...args) {\\r\\n    ns.print(ns.sprintf(\\\"%8s \\\" + str, new Date().toLocaleTimeString(\\\"it-IT\\\"), ...args));\\r\\n}\\r\\nexport function softenServer(ns, hostname) {\\r\\n    if (ns.hasRootAccess(hostname)) {\\r\\n        return;\\r\\n    }\\r\\n    let ports = 0;\\r\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n        ns.brutessh(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n        ns.ftpcrack(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n        ns.httpworm(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n        ns.relaysmtp(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n        ns.sqlinject(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ports >= ns.getServerNumPortsRequired(hostname)) {\\r\\n        ns.nuke(hostname);\\r\\n    }\\r\\n}\\r\\nexport function serverIsHackable(ns, hostname) {\\r\\n    return ns.hasRootAccess(hostname) && ns.getHackingLevel() >= ns.getServerRequiredHackingLevel(hostname);\\r\\n}\\r\\nexport function canExecuteOnServer(ns, hostname) {\\r\\n    return ns.hasRootAccess(hostname) && ns.getServerMaxRam(hostname) > 0;\\r\\n}\\r\\nexport function mapHosts(ns, hosts = {}, parents = [], current = \\\"home\\\") {\\r\\n    const newParents = parents.concat(current);\\r\\n    hosts[current] = newParents;\\r\\n    const children = ns.scan(current).filter((element) => !parents.includes(element));\\r\\n    for (const child of children) {\\r\\n        mapHosts(ns, hosts, newParents, child);\\r\\n    }\\r\\n    return hosts;\\r\\n}\\r\\nexport function allHosts(ns) {\\r\\n    return Object.keys(mapHosts(ns));\\r\\n}\\r\\nexport function doProgramBuys(ns) {\\r\\n    const player = ns.getPlayer();\\r\\n    if (!player.tor && player.money > 200e3)\\r\\n        ns.purchaseTor();\\r\\n    if (!ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\") && player.money > 500e3)\\r\\n        ns.purchaseProgram(\\\"BruteSSH.exe\\\");\\r\\n    if (!ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\") && player.money > 1500e3)\\r\\n        ns.purchaseProgram(\\\"FTPCrack.exe\\\");\\r\\n    if (!ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\") && player.money > 5e6)\\r\\n        ns.purchaseProgram(\\\"relaySMTP.exe\\\");\\r\\n    if (!ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\") && player.money > 30e6)\\r\\n        ns.purchaseProgram(\\\"HTTPWorm.exe\\\");\\r\\n    if (!ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\") && player.money > 250e6)\\r\\n        ns.purchaseProgram(\\\"SQLInject.exe\\\");\\r\\n}\\r\\nexport function doBuyAndSoftenAll(ns) {\\r\\n    doProgramBuys(ns);\\r\\n    for (const hostname of allHosts(ns)) {\\r\\n        softenServer(ns, hostname);\\r\\n    }\\r\\n}\\r\\nexport function stFormat(ns, ms, showms = false, showfull = false) {\\r\\n    let timeLeft = ms;\\r\\n    const hours = Math.floor(ms / (1000 * 60 * 60));\\r\\n    timeLeft -= hours * (1000 * 60 * 60);\\r\\n    const minutes = Math.floor(timeLeft / (1000 * 60));\\r\\n    timeLeft -= minutes * (1000 * 60);\\r\\n    const seconds = Math.floor(timeLeft / 1000);\\r\\n    timeLeft -= seconds * 1000;\\r\\n    const milliseconds = timeLeft;\\r\\n    if (showms) {\\r\\n        if (hours > 0 || showfull)\\r\\n            return ns.sprintf(\\\"%02d:%02d:%02d.%03d\\\", hours, minutes, seconds, milliseconds);\\r\\n        if (minutes > 0)\\r\\n            return ns.sprintf(\\\"%02d:%02d.%03d\\\", minutes, seconds, milliseconds);\\r\\n        return ns.sprintf(\\\"%02d.%03d\\\", seconds, milliseconds);\\r\\n    }\\r\\n    else {\\r\\n        if (hours > 0 || showfull)\\r\\n            return ns.sprintf(\\\"%02d:%02d:%02d\\\", hours, minutes, seconds);\\r\\n        if (minutes > 0)\\r\\n            return ns.sprintf(\\\"%02d:%02d\\\", minutes, seconds);\\r\\n        return ns.sprintf(\\\"%02d\\\", seconds);\\r\\n    }\\r\\n}\\r\\nexport function stdFormat(ns, offset = 0, showms = false) {\\r\\n    const date = new Date(new Date().getTime() + offset);\\r\\n    if (showms) {\\r\\n        const ms = ns.sprintf(\\\"%03d\\\", date.getUTCMilliseconds());\\r\\n        return date.toLocaleTimeString(\\\"it-IT\\\") + \\\".\\\" + ms;\\r\\n    }\\r\\n    else {\\r\\n        return date.toLocaleTimeString(\\\"it-IT\\\");\\r\\n    }\\r\\n}\\r\\nexport async function doBackdoors(ns) {\\r\\n    //const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"w0r1d_d43m0n\\\", \\\"b-and-a\\\", \\\"ecorp\\\", \\\"fulcrumassets\\\", \\\"fulcrumtech\\\"];\\r\\n    //const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"omnitek\\\", \\\"kuai-gong\\\", \\\"megacorp\\\"];\\r\\n    const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"w0r1d_d43m0n\\\"];\\r\\n    const hosts = mapHosts(ns);\\r\\n    for (const [hostName, trail] of Object.entries(hosts)) {\\r\\n        const server = ns.getServer(hostName);\\r\\n        if (!targetHosts.includes(hostName) ||\\r\\n            server.backdoorInstalled ||\\r\\n            server.requiredHackingSkill > ns.getHackingLevel() ||\\r\\n            !server.hasAdminRights)\\r\\n            continue;\\r\\n        ns.print(hostName);\\r\\n        for (const hostHopName of trail) {\\r\\n            ns.connect(hostHopName);\\r\\n        }\\r\\n        await ns.installBackdoor();\\r\\n        ns.connect(\\\"home\\\");\\r\\n    }\\r\\n}\\r\\nexport function cleanLogs(ns) {\\r\\n    ns.disableLog(\\\"disableLog\\\");\\r\\n    ns.disableLog(\\\"ALL\\\");\\r\\n    // ns.disableLog(\\\"sleep\\\")\\r\\n    // ns.disableLog(\\\"exec\\\")\\r\\n    // ns.disableLog(\\\"getServerMaxRam\\\")\\r\\n    // ns.disableLog(\\\"getServerSecurityLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerMinSecurityLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerMaxMoney\\\")\\r\\n    // ns.disableLog(\\\"getHackingLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerRequiredHackingLevel\\\")\\r\\n    // ns.disableLog(\\\"scan\\\")\\r\\n    // ns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n    // ns.disableLog(\\\"getServerUsedRam\\\")\\r\\n}\\r\\nexport const ALL_FACTIONS = [\\r\\n    \\\"Illuminati\\\",\\r\\n    \\\"Daedalus\\\",\\r\\n    \\\"The Covenant\\\",\\r\\n    \\\"ECorp\\\",\\r\\n    \\\"MegaCorp\\\",\\r\\n    \\\"Bachman & Associates\\\",\\r\\n    \\\"Blade Industries\\\",\\r\\n    \\\"NWO\\\",\\r\\n    \\\"Clarke Incorporated\\\",\\r\\n    \\\"OmniTek Incorporated\\\",\\r\\n    \\\"Four Sigma\\\",\\r\\n    \\\"KuaiGong International\\\",\\r\\n    \\\"Fulcrum Secret Technologies\\\",\\r\\n    \\\"BitRunners\\\",\\r\\n    \\\"The Black Hand\\\",\\r\\n    \\\"NiteSec\\\",\\r\\n    \\\"Aevum\\\",\\r\\n    \\\"Chongqing\\\",\\r\\n    \\\"Ishima\\\",\\r\\n    \\\"New Tokyo\\\",\\r\\n    \\\"Sector-12\\\",\\r\\n    \\\"Volhaven\\\",\\r\\n    \\\"Speakers for the Dead\\\",\\r\\n    \\\"The Dark Army\\\",\\r\\n    \\\"The Syndicate\\\",\\r\\n    \\\"Silhouette\\\",\\r\\n    \\\"Tetrads\\\",\\r\\n    \\\"Slum Snakes\\\",\\r\\n    \\\"Netburners\\\",\\r\\n    \\\"Tian Di Hui\\\",\\r\\n    \\\"CyberSec\\\",\\r\\n    \\\"Bladeburners\\\",\\r\\n    \\\"Church of the Machine God\\\",\\r\\n];\\r\\nexport async function writeOut(ns, data, startTime, endTime, result, startSec, startCash) {\\r\\n    if (data.writeFile !== \\\"\\\") {\\r\\n        const outstr = ns.sprintf(\\\"%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\", data.target, data.uid, data.batchId, data.realTimeStart + data.offset, data.realTimeStart + data.finish, data.operationTime, startTime, endTime, endTime - startTime, startTime - (data.realTimeStart + data.offset), endTime - (data.realTimeStart + data.finish), endTime - startTime - data.operationTime, result, startSec.toFixed(2), ns.getServerSecurityLevel(data.target).toFixed(2), ns.nFormat(startCash, \\\"($0.000a)\\\"), ns.nFormat(ns.getServerMoneyAvailable(data.target), \\\"($0.000a)\\\"));\\r\\n        while (!await ns.tryWritePort(ReservedPorts.HACK_WRITE_INFO, [data.writeFile, outstr]))\\r\\n            ;\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi91dGlsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLE1BQU0sQ0FBTixJQUFZLGFBSVg7QUFKRCxXQUFZLGFBQWE7SUFDckIsaUVBQWdCLENBQUE7SUFDaEIsaUVBQVksQ0FBQTtJQUNaLHVFQUFlLENBQUE7QUFDbkIsQ0FBQyxFQUpXLGFBQWEsS0FBYixhQUFhLFFBSXhCO0FBRUQsTUFBTSxDQUFDLE1BQU0sUUFBUSxHQUFHLHFCQUFxQixDQUFDO0FBQzlDLE1BQU0sQ0FBQyxNQUFNLE1BQU0sR0FBRyxtQkFBbUIsQ0FBQztBQUMxQyxNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUcsbUJBQW1CLENBQUM7QUFDMUMsTUFBTSxDQUFDLE1BQU0sTUFBTSxHQUFHLGNBQWMsQ0FBQztBQUVyQyxNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUcsQ0FBQyxPQUFPLEVBQUUsV0FBVyxFQUFFLFdBQVcsRUFBRSxXQUFXLEVBQUUsUUFBUSxFQUFFLFVBQVUsQ0FBQyxDQUFDO0FBRTdGLE1BQU0sVUFBVSxJQUFJLENBQUMsRUFBTSxFQUFFLEdBQVcsRUFBRSxHQUFHLElBQXlCO0lBQ2xFLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEdBQUcsR0FBRyxFQUFFLElBQUksSUFBSSxFQUFFLENBQUMsa0JBQWtCLENBQUMsT0FBTyxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDO0FBQ3hGLENBQUM7QUFFRCxNQUFNLFVBQVUsWUFBWSxDQUFDLEVBQU0sRUFBRSxRQUFnQjtJQUNqRCxJQUFJLEVBQUUsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDNUIsT0FBTztLQUNWO0lBRUQsSUFBSSxLQUFLLEdBQUcsQ0FBQyxDQUFDO0lBQ2QsSUFBSSxFQUFFLENBQUMsVUFBVSxDQUFDLGNBQWMsRUFB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\",\"filename\":\"/lib/util.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":13.25,\"server\":\"joesguns\",\"moduleSequenceNumber\":83448,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"purchaseTor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"purchaseProgram\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"connect\",\"cost\":2},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.stanek.charge(ns.args[0], ns.args[1]);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hhcmdlLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL3N0YW5lay9jaGFyZ2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUM5QixPQUFPLElBQUksRUFBRTtRQUNULE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7S0FDakQ7QUFDTCxDQUFDIn0=\",\"filename\":\"/lib/stanek/charge.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/stanek/charge.js\",\"url\":\"blob:file:///ff80aa03-f8c9-4854-bd85-6a3dec68872f\",\"moduleSequenceNumber\":99889}],\"dependents\":[],\"ramUsage\":2,\"server\":\"joesguns\",\"moduleSequenceNumber\":99889,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.charge\",\"cost\":0.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":45,\"hackDifficulty\":45,\"minDifficulty\":15,\"moneyAvailable\":1875000,\"moneyMax\":21093750,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":10,\"serverGrowth\":20,\"suppression\":0,\"activeSuppressionThreads\":[],\"suppressionIntervalID\":null,\"suppressionLastUpdateTime\":0}},\"zer0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zer0\",\"httpPortOpen\":false,\"ip\":\"0.0.8.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.grow(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLElBQUksR0FBdUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFFbkUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDdkIsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7UUFDeEMsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7S0FDM0MsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyJ9\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///888ce7c6-c1e0-4a1b-a92b-c552166b362c\",\"moduleSequenceNumber\":86740}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zer0\",\"moduleSequenceNumber\":86740,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.weaken(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxJQUFJLEdBQXVCLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO0lBRW5FLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFO1FBQ3pCLGtCQUFrQixFQUFFLElBQUksQ0FBQyxlQUFlO1FBQ3hDLGtCQUFrQixFQUFFLElBQUksQ0FBQyxlQUFlO0tBQzNDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///034bbd47-b1f4-48d5-9a97-12c8475065f3\",\"moduleSequenceNumber\":83846}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zer0\",\"moduleSequenceNumber\":83846,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.hack(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLElBQUksR0FBdUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFFbkUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDdkIsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7UUFDeEMsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7S0FDM0MsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyJ9\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"zer0\",\"moduleSequenceNumber\":83789,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export var ReservedPorts;\\r\\n(function (ReservedPorts) {\\r\\n    ReservedPorts[ReservedPorts[\\\"HACKING_INFO\\\"] = 1] = \\\"HACKING_INFO\\\";\\r\\n    ReservedPorts[ReservedPorts[\\\"HACKNET_INFO\\\"] = 2] = \\\"HACKNET_INFO\\\";\\r\\n    ReservedPorts[ReservedPorts[\\\"HACK_WRITE_INFO\\\"] = 3] = \\\"HACK_WRITE_INFO\\\";\\r\\n})(ReservedPorts || (ReservedPorts = {}));\\r\\nexport const WEAKENJS = \\\"/lib/exec/weaken.js\\\";\\r\\nexport const GROWJS = \\\"/lib/exec/grow.js\\\";\\r\\nexport const HACKJS = \\\"/lib/exec/hack.js\\\";\\r\\nexport const UTILJS = \\\"/lib/util.js\\\";\\r\\nexport const CITIES = [\\\"Aevum\\\", \\\"Chongqing\\\", \\\"Sector-12\\\", \\\"New Tokyo\\\", \\\"Ishima\\\", \\\"Volhaven\\\"];\\r\\nexport function llog(ns, str, ...args) {\\r\\n    ns.print(ns.sprintf(\\\"%8s \\\" + str, new Date().toLocaleTimeString(\\\"it-IT\\\"), ...args));\\r\\n}\\r\\nexport function softenServer(ns, hostname) {\\r\\n    if (ns.hasRootAccess(hostname)) {\\r\\n        return;\\r\\n    }\\r\\n    let ports = 0;\\r\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n        ns.brutessh(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n        ns.ftpcrack(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n        ns.httpworm(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n        ns.relaysmtp(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n        ns.sqlinject(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ports >= ns.getServerNumPortsRequired(hostname)) {\\r\\n        ns.nuke(hostname);\\r\\n    }\\r\\n}\\r\\nexport function serverIsHackable(ns, hostname) {\\r\\n    return ns.hasRootAccess(hostname) && ns.getHackingLevel() >= ns.getServerRequiredHackingLevel(hostname);\\r\\n}\\r\\nexport function canExecuteOnServer(ns, hostname) {\\r\\n    return ns.hasRootAccess(hostname) && ns.getServerMaxRam(hostname) > 0;\\r\\n}\\r\\nexport function mapHosts(ns, hosts = {}, parents = [], current = \\\"home\\\") {\\r\\n    const newParents = parents.concat(current);\\r\\n    hosts[current] = newParents;\\r\\n    const children = ns.scan(current).filter((element) => !parents.includes(element));\\r\\n    for (const child of children) {\\r\\n        mapHosts(ns, hosts, newParents, child);\\r\\n    }\\r\\n    return hosts;\\r\\n}\\r\\nexport function allHosts(ns) {\\r\\n    return Object.keys(mapHosts(ns));\\r\\n}\\r\\nexport function doProgramBuys(ns) {\\r\\n    const player = ns.getPlayer();\\r\\n    if (!player.tor && player.money > 200e3)\\r\\n        ns.purchaseTor();\\r\\n    if (!ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\") && player.money > 500e3)\\r\\n        ns.purchaseProgram(\\\"BruteSSH.exe\\\");\\r\\n    if (!ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\") && player.money > 1500e3)\\r\\n        ns.purchaseProgram(\\\"FTPCrack.exe\\\");\\r\\n    if (!ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\") && player.money > 5e6)\\r\\n        ns.purchaseProgram(\\\"relaySMTP.exe\\\");\\r\\n    if (!ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\") && player.money > 30e6)\\r\\n        ns.purchaseProgram(\\\"HTTPWorm.exe\\\");\\r\\n    if (!ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\") && player.money > 250e6)\\r\\n        ns.purchaseProgram(\\\"SQLInject.exe\\\");\\r\\n}\\r\\nexport function doBuyAndSoftenAll(ns) {\\r\\n    doProgramBuys(ns);\\r\\n    for (const hostname of allHosts(ns)) {\\r\\n        softenServer(ns, hostname);\\r\\n    }\\r\\n}\\r\\nexport function stFormat(ns, ms, showms = false, showfull = false) {\\r\\n    let timeLeft = ms;\\r\\n    const hours = Math.floor(ms / (1000 * 60 * 60));\\r\\n    timeLeft -= hours * (1000 * 60 * 60);\\r\\n    const minutes = Math.floor(timeLeft / (1000 * 60));\\r\\n    timeLeft -= minutes * (1000 * 60);\\r\\n    const seconds = Math.floor(timeLeft / 1000);\\r\\n    timeLeft -= seconds * 1000;\\r\\n    const milliseconds = timeLeft;\\r\\n    if (showms) {\\r\\n        if (hours > 0 || showfull)\\r\\n            return ns.sprintf(\\\"%02d:%02d:%02d.%03d\\\", hours, minutes, seconds, milliseconds);\\r\\n        if (minutes > 0)\\r\\n            return ns.sprintf(\\\"%02d:%02d.%03d\\\", minutes, seconds, milliseconds);\\r\\n        return ns.sprintf(\\\"%02d.%03d\\\", seconds, milliseconds);\\r\\n    }\\r\\n    else {\\r\\n        if (hours > 0 || showfull)\\r\\n            return ns.sprintf(\\\"%02d:%02d:%02d\\\", hours, minutes, seconds);\\r\\n        if (minutes > 0)\\r\\n            return ns.sprintf(\\\"%02d:%02d\\\", minutes, seconds);\\r\\n        return ns.sprintf(\\\"%02d\\\", seconds);\\r\\n    }\\r\\n}\\r\\nexport function stdFormat(ns, offset = 0, showms = false) {\\r\\n    const date = new Date(new Date().getTime() + offset);\\r\\n    if (showms) {\\r\\n        const ms = ns.sprintf(\\\"%03d\\\", date.getUTCMilliseconds());\\r\\n        return date.toLocaleTimeString(\\\"it-IT\\\") + \\\".\\\" + ms;\\r\\n    }\\r\\n    else {\\r\\n        return date.toLocaleTimeString(\\\"it-IT\\\");\\r\\n    }\\r\\n}\\r\\nexport async function doBackdoors(ns) {\\r\\n    //const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"w0r1d_d43m0n\\\", \\\"b-and-a\\\", \\\"ecorp\\\", \\\"fulcrumassets\\\", \\\"fulcrumtech\\\"];\\r\\n    //const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"omnitek\\\", \\\"kuai-gong\\\", \\\"megacorp\\\"];\\r\\n    const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"w0r1d_d43m0n\\\"];\\r\\n    const hosts = mapHosts(ns);\\r\\n    for (const [hostName, trail] of Object.entries(hosts)) {\\r\\n        const server = ns.getServer(hostName);\\r\\n        if (!targetHosts.includes(hostName) ||\\r\\n            server.backdoorInstalled ||\\r\\n            server.requiredHackingSkill > ns.getHackingLevel() ||\\r\\n            !server.hasAdminRights)\\r\\n            continue;\\r\\n        ns.print(hostName);\\r\\n        for (const hostHopName of trail) {\\r\\n            ns.connect(hostHopName);\\r\\n        }\\r\\n        await ns.installBackdoor();\\r\\n        ns.connect(\\\"home\\\");\\r\\n    }\\r\\n}\\r\\nexport function cleanLogs(ns) {\\r\\n    ns.disableLog(\\\"disableLog\\\");\\r\\n    ns.disableLog(\\\"ALL\\\");\\r\\n    // ns.disableLog(\\\"sleep\\\")\\r\\n    // ns.disableLog(\\\"exec\\\")\\r\\n    // ns.disableLog(\\\"getServerMaxRam\\\")\\r\\n    // ns.disableLog(\\\"getServerSecurityLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerMinSecurityLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerMaxMoney\\\")\\r\\n    // ns.disableLog(\\\"getHackingLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerRequiredHackingLevel\\\")\\r\\n    // ns.disableLog(\\\"scan\\\")\\r\\n    // ns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n    // ns.disableLog(\\\"getServerUsedRam\\\")\\r\\n}\\r\\nexport const ALL_FACTIONS = [\\r\\n    \\\"Illuminati\\\",\\r\\n    \\\"Daedalus\\\",\\r\\n    \\\"The Covenant\\\",\\r\\n    \\\"ECorp\\\",\\r\\n    \\\"MegaCorp\\\",\\r\\n    \\\"Bachman & Associates\\\",\\r\\n    \\\"Blade Industries\\\",\\r\\n    \\\"NWO\\\",\\r\\n    \\\"Clarke Incorporated\\\",\\r\\n    \\\"OmniTek Incorporated\\\",\\r\\n    \\\"Four Sigma\\\",\\r\\n    \\\"KuaiGong International\\\",\\r\\n    \\\"Fulcrum Secret Technologies\\\",\\r\\n    \\\"BitRunners\\\",\\r\\n    \\\"The Black Hand\\\",\\r\\n    \\\"NiteSec\\\",\\r\\n    \\\"Aevum\\\",\\r\\n    \\\"Chongqing\\\",\\r\\n    \\\"Ishima\\\",\\r\\n    \\\"New Tokyo\\\",\\r\\n    \\\"Sector-12\\\",\\r\\n    \\\"Volhaven\\\",\\r\\n    \\\"Speakers for the Dead\\\",\\r\\n    \\\"The Dark Army\\\",\\r\\n    \\\"The Syndicate\\\",\\r\\n    \\\"Silhouette\\\",\\r\\n    \\\"Tetrads\\\",\\r\\n    \\\"Slum Snakes\\\",\\r\\n    \\\"Netburners\\\",\\r\\n    \\\"Tian Di Hui\\\",\\r\\n    \\\"CyberSec\\\",\\r\\n    \\\"Bladeburners\\\",\\r\\n    \\\"Church of the Machine God\\\",\\r\\n];\\r\\nexport async function writeOut(ns, data, startTime, endTime, result, startSec, startCash) {\\r\\n    if (data.writeFile !== \\\"\\\") {\\r\\n        const outstr = ns.sprintf(\\\"%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\", data.target, data.uid, data.batchId, data.realTimeStart + data.offset, data.realTimeStart + data.finish, data.operationTime, startTime, endTime, endTime - startTime, startTime - (data.realTimeStart + data.offset), endTime - (data.realTimeStart + data.finish), endTime - startTime - data.operationTime, result, startSec.toFixed(2), ns.getServerSecurityLevel(data.target).toFixed(2), ns.nFormat(startCash, \\\"($0.000a)\\\"), ns.nFormat(ns.getServerMoneyAvailable(data.target), \\\"($0.000a)\\\"));\\r\\n        while (!await ns.tryWritePort(ReservedPorts.HACK_WRITE_INFO, [data.writeFile, outstr]))\\r\\n            ;\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi91dGlsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLE1BQU0sQ0FBTixJQUFZLGFBSVg7QUFKRCxXQUFZLGFBQWE7SUFDckIsaUVBQWdCLENBQUE7SUFDaEIsaUVBQVksQ0FBQTtJQUNaLHVFQUFlLENBQUE7QUFDbkIsQ0FBQyxFQUpXLGFBQWEsS0FBYixhQUFhLFFBSXhCO0FBRUQsTUFBTSxDQUFDLE1BQU0sUUFBUSxHQUFHLHFCQUFxQixDQUFDO0FBQzlDLE1BQU0sQ0FBQyxNQUFNLE1BQU0sR0FBRyxtQkFBbUIsQ0FBQztBQUMxQyxNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUcsbUJBQW1CLENBQUM7QUFDMUMsTUFBTSxDQUFDLE1BQU0sTUFBTSxHQUFHLGNBQWMsQ0FBQztBQUVyQyxNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUcsQ0FBQyxPQUFPLEVBQUUsV0FBVyxFQUFFLFdBQVcsRUFBRSxXQUFXLEVBQUUsUUFBUSxFQUFFLFVBQVUsQ0FBQyxDQUFDO0FBRTdGLE1BQU0sVUFBVSxJQUFJLENBQUMsRUFBTSxFQUFFLEdBQVcsRUFBRSxHQUFHLElBQXlCO0lBQ2xFLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEdBQUcsR0FBRyxFQUFFLElBQUksSUFBSSxFQUFFLENBQUMsa0JBQWtCLENBQUMsT0FBTyxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDO0FBQ3hGLENBQUM7QUFFRCxNQUFNLFVBQVUsWUFBWSxDQUFDLEVBQU0sRUFBRSxRQUFnQjtJQUNqRCxJQUFJLEVBQUUsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDNUIsT0FBTztLQUNWO0lBRUQsSUFBSSxLQUFLLEdBQUcsQ0FBQyxDQUFDO0lBQ2QsSUFBSSxFQUFFLENBQUMsVUFBVSxDQUFDLGNBQWMsRUFB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\",\"filename\":\"/lib/util.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":13.25,\"server\":\"zer0\",\"moduleSequenceNumber\":83791,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"purchaseTor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"purchaseProgram\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"connect\",\"cost\":2},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.stanek.charge(ns.args[0], ns.args[1]);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hhcmdlLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL3N0YW5lay9jaGFyZ2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUM5QixPQUFPLElBQUksRUFBRTtRQUNULE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7S0FDakQ7QUFDTCxDQUFDIn0=\",\"filename\":\"/lib/stanek/charge.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/stanek/charge.js\",\"url\":\"blob:file:///49785588-f91a-449f-85e6-c88656aa22f4\",\"moduleSequenceNumber\":99891}],\"dependents\":[],\"ramUsage\":2,\"server\":\"zer0\",\"moduleSequenceNumber\":99891,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.charge\",\"cost\":0.4}]}}],\"serversOnNetwork\":[\"hong-fang-tea\",\"neo-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":75,\"minDifficulty\":25,\"moneyAvailable\":5625000,\"moneyMax\":63281250,\"numOpenPortsRequired\":1,\"openPortCount\":2,\"requiredHackingSkill\":75,\"serverGrowth\":40,\"suppression\":0,\"activeSuppressionThreads\":[],\"suppressionIntervalID\":null,\"suppressionLastUpdateTime\":0}},\"nectar-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"nectar-net\",\"httpPortOpen\":false,\"ip\":\"85.3.2.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.grow(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLElBQUksR0FBdUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFFbkUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDdkIsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7UUFDeEMsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7S0FDM0MsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyJ9\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nectar-net\",\"moduleSequenceNumber\":83466,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.weaken(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxJQUFJLEdBQXVCLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO0lBRW5FLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFO1FBQ3pCLGtCQUFrQixFQUFFLElBQUksQ0FBQyxlQUFlO1FBQ3hDLGtCQUFrQixFQUFFLElBQUksQ0FBQyxlQUFlO0tBQzNDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///abe4c98b-dd3e-4014-a71e-c42b7f3e2e70\",\"moduleSequenceNumber\":83482}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nectar-net\",\"moduleSequenceNumber\":83482,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.hack(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLElBQUksR0FBdUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFFbkUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDdkIsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7UUFDeEMsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7S0FDM0MsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyJ9\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"nectar-net\",\"moduleSequenceNumber\":83470,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export var ReservedPorts;\\r\\n(function (ReservedPorts) {\\r\\n    ReservedPorts[ReservedPorts[\\\"HACKING_INFO\\\"] = 1] = \\\"HACKING_INFO\\\";\\r\\n    ReservedPorts[ReservedPorts[\\\"HACKNET_INFO\\\"] = 2] = \\\"HACKNET_INFO\\\";\\r\\n    ReservedPorts[ReservedPorts[\\\"HACK_WRITE_INFO\\\"] = 3] = \\\"HACK_WRITE_INFO\\\";\\r\\n})(ReservedPorts || (ReservedPorts = {}));\\r\\nexport const WEAKENJS = \\\"/lib/exec/weaken.js\\\";\\r\\nexport const GROWJS = \\\"/lib/exec/grow.js\\\";\\r\\nexport const HACKJS = \\\"/lib/exec/hack.js\\\";\\r\\nexport const UTILJS = \\\"/lib/util.js\\\";\\r\\nexport const CITIES = [\\\"Aevum\\\", \\\"Chongqing\\\", \\\"Sector-12\\\", \\\"New Tokyo\\\", \\\"Ishima\\\", \\\"Volhaven\\\"];\\r\\nexport function llog(ns, str, ...args) {\\r\\n    ns.print(ns.sprintf(\\\"%8s \\\" + str, new Date().toLocaleTimeString(\\\"it-IT\\\"), ...args));\\r\\n}\\r\\nexport function softenServer(ns, hostname) {\\r\\n    if (ns.hasRootAccess(hostname)) {\\r\\n        return;\\r\\n    }\\r\\n    let ports = 0;\\r\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n        ns.brutessh(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n        ns.ftpcrack(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n        ns.httpworm(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n        ns.relaysmtp(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n        ns.sqlinject(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ports >= ns.getServerNumPortsRequired(hostname)) {\\r\\n        ns.nuke(hostname);\\r\\n    }\\r\\n}\\r\\nexport function serverIsHackable(ns, hostname) {\\r\\n    return ns.hasRootAccess(hostname) && ns.getHackingLevel() >= ns.getServerRequiredHackingLevel(hostname);\\r\\n}\\r\\nexport function canExecuteOnServer(ns, hostname) {\\r\\n    return ns.hasRootAccess(hostname) && ns.getServerMaxRam(hostname) > 0;\\r\\n}\\r\\nexport function mapHosts(ns, hosts = {}, parents = [], current = \\\"home\\\") {\\r\\n    const newParents = parents.concat(current);\\r\\n    hosts[current] = newParents;\\r\\n    const children = ns.scan(current).filter((element) => !parents.includes(element));\\r\\n    for (const child of children) {\\r\\n        mapHosts(ns, hosts, newParents, child);\\r\\n    }\\r\\n    return hosts;\\r\\n}\\r\\nexport function allHosts(ns) {\\r\\n    return Object.keys(mapHosts(ns));\\r\\n}\\r\\nexport function doProgramBuys(ns) {\\r\\n    const player = ns.getPlayer();\\r\\n    if (!player.tor && player.money > 200e3)\\r\\n        ns.purchaseTor();\\r\\n    if (!ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\") && player.money > 500e3)\\r\\n        ns.purchaseProgram(\\\"BruteSSH.exe\\\");\\r\\n    if (!ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\") && player.money > 1500e3)\\r\\n        ns.purchaseProgram(\\\"FTPCrack.exe\\\");\\r\\n    if (!ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\") && player.money > 5e6)\\r\\n        ns.purchaseProgram(\\\"relaySMTP.exe\\\");\\r\\n    if (!ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\") && player.money > 30e6)\\r\\n        ns.purchaseProgram(\\\"HTTPWorm.exe\\\");\\r\\n    if (!ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\") && player.money > 250e6)\\r\\n        ns.purchaseProgram(\\\"SQLInject.exe\\\");\\r\\n}\\r\\nexport function doBuyAndSoftenAll(ns) {\\r\\n    doProgramBuys(ns);\\r\\n    for (const hostname of allHosts(ns)) {\\r\\n        softenServer(ns, hostname);\\r\\n    }\\r\\n}\\r\\nexport function stFormat(ns, ms, showms = false, showfull = false) {\\r\\n    let timeLeft = ms;\\r\\n    const hours = Math.floor(ms / (1000 * 60 * 60));\\r\\n    timeLeft -= hours * (1000 * 60 * 60);\\r\\n    const minutes = Math.floor(timeLeft / (1000 * 60));\\r\\n    timeLeft -= minutes * (1000 * 60);\\r\\n    const seconds = Math.floor(timeLeft / 1000);\\r\\n    timeLeft -= seconds * 1000;\\r\\n    const milliseconds = timeLeft;\\r\\n    if (showms) {\\r\\n        if (hours > 0 || showfull)\\r\\n            return ns.sprintf(\\\"%02d:%02d:%02d.%03d\\\", hours, minutes, seconds, milliseconds);\\r\\n        if (minutes > 0)\\r\\n            return ns.sprintf(\\\"%02d:%02d.%03d\\\", minutes, seconds, milliseconds);\\r\\n        return ns.sprintf(\\\"%02d.%03d\\\", seconds, milliseconds);\\r\\n    }\\r\\n    else {\\r\\n        if (hours > 0 || showfull)\\r\\n            return ns.sprintf(\\\"%02d:%02d:%02d\\\", hours, minutes, seconds);\\r\\n        if (minutes > 0)\\r\\n            return ns.sprintf(\\\"%02d:%02d\\\", minutes, seconds);\\r\\n        return ns.sprintf(\\\"%02d\\\", seconds);\\r\\n    }\\r\\n}\\r\\nexport function stdFormat(ns, offset = 0, showms = false) {\\r\\n    const date = new Date(new Date().getTime() + offset);\\r\\n    if (showms) {\\r\\n        const ms = ns.sprintf(\\\"%03d\\\", date.getUTCMilliseconds());\\r\\n        return date.toLocaleTimeString(\\\"it-IT\\\") + \\\".\\\" + ms;\\r\\n    }\\r\\n    else {\\r\\n        return date.toLocaleTimeString(\\\"it-IT\\\");\\r\\n    }\\r\\n}\\r\\nexport async function doBackdoors(ns) {\\r\\n    //const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"w0r1d_d43m0n\\\", \\\"b-and-a\\\", \\\"ecorp\\\", \\\"fulcrumassets\\\", \\\"fulcrumtech\\\"];\\r\\n    //const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"omnitek\\\", \\\"kuai-gong\\\", \\\"megacorp\\\"];\\r\\n    const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"w0r1d_d43m0n\\\"];\\r\\n    const hosts = mapHosts(ns);\\r\\n    for (const [hostName, trail] of Object.entries(hosts)) {\\r\\n        const server = ns.getServer(hostName);\\r\\n        if (!targetHosts.includes(hostName) ||\\r\\n            server.backdoorInstalled ||\\r\\n            server.requiredHackingSkill > ns.getHackingLevel() ||\\r\\n            !server.hasAdminRights)\\r\\n            continue;\\r\\n        ns.print(hostName);\\r\\n        for (const hostHopName of trail) {\\r\\n            ns.connect(hostHopName);\\r\\n        }\\r\\n        await ns.installBackdoor();\\r\\n        ns.connect(\\\"home\\\");\\r\\n    }\\r\\n}\\r\\nexport function cleanLogs(ns) {\\r\\n    ns.disableLog(\\\"disableLog\\\");\\r\\n    ns.disableLog(\\\"ALL\\\");\\r\\n    // ns.disableLog(\\\"sleep\\\")\\r\\n    // ns.disableLog(\\\"exec\\\")\\r\\n    // ns.disableLog(\\\"getServerMaxRam\\\")\\r\\n    // ns.disableLog(\\\"getServerSecurityLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerMinSecurityLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerMaxMoney\\\")\\r\\n    // ns.disableLog(\\\"getHackingLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerRequiredHackingLevel\\\")\\r\\n    // ns.disableLog(\\\"scan\\\")\\r\\n    // ns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n    // ns.disableLog(\\\"getServerUsedRam\\\")\\r\\n}\\r\\nexport const ALL_FACTIONS = [\\r\\n    \\\"Illuminati\\\",\\r\\n    \\\"Daedalus\\\",\\r\\n    \\\"The Covenant\\\",\\r\\n    \\\"ECorp\\\",\\r\\n    \\\"MegaCorp\\\",\\r\\n    \\\"Bachman & Associates\\\",\\r\\n    \\\"Blade Industries\\\",\\r\\n    \\\"NWO\\\",\\r\\n    \\\"Clarke Incorporated\\\",\\r\\n    \\\"OmniTek Incorporated\\\",\\r\\n    \\\"Four Sigma\\\",\\r\\n    \\\"KuaiGong International\\\",\\r\\n    \\\"Fulcrum Secret Technologies\\\",\\r\\n    \\\"BitRunners\\\",\\r\\n    \\\"The Black Hand\\\",\\r\\n    \\\"NiteSec\\\",\\r\\n    \\\"Aevum\\\",\\r\\n    \\\"Chongqing\\\",\\r\\n    \\\"Ishima\\\",\\r\\n    \\\"New Tokyo\\\",\\r\\n    \\\"Sector-12\\\",\\r\\n    \\\"Volhaven\\\",\\r\\n    \\\"Speakers for the Dead\\\",\\r\\n    \\\"The Dark Army\\\",\\r\\n    \\\"The Syndicate\\\",\\r\\n    \\\"Silhouette\\\",\\r\\n    \\\"Tetrads\\\",\\r\\n    \\\"Slum Snakes\\\",\\r\\n    \\\"Netburners\\\",\\r\\n    \\\"Tian Di Hui\\\",\\r\\n    \\\"CyberSec\\\",\\r\\n    \\\"Bladeburners\\\",\\r\\n    \\\"Church of the Machine God\\\",\\r\\n];\\r\\nexport async function writeOut(ns, data, startTime, endTime, result, startSec, startCash) {\\r\\n    if (data.writeFile !== \\\"\\\") {\\r\\n        const outstr = ns.sprintf(\\\"%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\", data.target, data.uid, data.batchId, data.realTimeStart + data.offset, data.realTimeStart + data.finish, data.operationTime, startTime, endTime, endTime - startTime, startTime - (data.realTimeStart + data.offset), endTime - (data.realTimeStart + data.finish), endTime - startTime - data.operationTime, result, startSec.toFixed(2), ns.getServerSecurityLevel(data.target).toFixed(2), ns.nFormat(startCash, \\\"($0.000a)\\\"), ns.nFormat(ns.getServerMoneyAvailable(data.target), \\\"($0.000a)\\\"));\\r\\n        while (!await ns.tryWritePort(ReservedPorts.HACK_WRITE_INFO, [data.writeFile, outstr]))\\r\\n            ;\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi91dGlsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLE1BQU0sQ0FBTixJQUFZLGFBSVg7QUFKRCxXQUFZLGFBQWE7SUFDckIsaUVBQWdCLENBQUE7SUFDaEIsaUVBQVksQ0FBQTtJQUNaLHVFQUFlLENBQUE7QUFDbkIsQ0FBQyxFQUpXLGFBQWEsS0FBYixhQUFhLFFBSXhCO0FBRUQsTUFBTSxDQUFDLE1BQU0sUUFBUSxHQUFHLHFCQUFxQixDQUFDO0FBQzlDLE1BQU0sQ0FBQyxNQUFNLE1BQU0sR0FBRyxtQkFBbUIsQ0FBQztBQUMxQyxNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUcsbUJBQW1CLENBQUM7QUFDMUMsTUFBTSxDQUFDLE1BQU0sTUFBTSxHQUFHLGNBQWMsQ0FBQztBQUVyQyxNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUcsQ0FBQyxPQUFPLEVBQUUsV0FBVyxFQUFFLFdBQVcsRUFBRSxXQUFXLEVBQUUsUUFBUSxFQUFFLFVBQVUsQ0FBQyxDQUFDO0FBRTdGLE1BQU0sVUFBVSxJQUFJLENBQUMsRUFBTSxFQUFFLEdBQVcsRUFBRSxHQUFHLElBQXlCO0lBQ2xFLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEdBQUcsR0FBRyxFQUFFLElBQUksSUFBSSxFQUFFLENBQUMsa0JBQWtCLENBQUMsT0FBTyxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDO0FBQ3hGLENBQUM7QUFFRCxNQUFNLFVBQVUsWUFBWSxDQUFDLEVBQU0sRUFBRSxRQUFnQjtJQUNqRCxJQUFJLEVBQUUsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDNUIsT0FBTztLQUNWO0lBRUQsSUFBSSxLQUFLLEdBQUcsQ0FBQyxDQUFDO0lBQ2QsSUFBSSxFQUFFLENBQUMsVUFBVSxDQUFDLGNBQWMsRUFB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\",\"filename\":\"/lib/util.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":13.25,\"server\":\"nectar-net\",\"moduleSequenceNumber\":83472,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"purchaseTor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"purchaseProgram\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"connect\",\"cost\":2},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.stanek.charge(ns.args[0], ns.args[1]);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hhcmdlLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL3N0YW5lay9jaGFyZ2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUM5QixPQUFPLElBQUksRUFBRTtRQUNULE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7S0FDakQ7QUFDTCxDQUFDIn0=\",\"filename\":\"/lib/stanek/charge.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/stanek/charge.js\",\"url\":\"blob:file:///4b8e4cee-8436-4a7d-9397-c5d9b5584a27\",\"moduleSequenceNumber\":99895}],\"dependents\":[],\"ramUsage\":2,\"server\":\"nectar-net\",\"moduleSequenceNumber\":99895,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.charge\",\"cost\":0.4}]}}],\"serversOnNetwork\":[\"harakiri-sushi\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":60,\"hackDifficulty\":60,\"minDifficulty\":20,\"moneyAvailable\":2062500,\"moneyMax\":23203125,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":20,\"serverGrowth\":25,\"suppression\":0,\"activeSuppressionThreads\":[],\"suppressionIntervalID\":null,\"suppressionLastUpdateTime\":0}},\"neo-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"neo-net\",\"httpPortOpen\":false,\"ip\":\"21.3.6.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.grow(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLElBQUksR0FBdUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFFbkUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDdkIsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7UUFDeEMsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7S0FDM0MsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyJ9\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///a623250d-6b60-4aa8-b231-1a8a8398b663\",\"moduleSequenceNumber\":86739}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"neo-net\",\"moduleSequenceNumber\":86739,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.weaken(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxJQUFJLEdBQXVCLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO0lBRW5FLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFO1FBQ3pCLGtCQUFrQixFQUFFLElBQUksQ0FBQyxlQUFlO1FBQ3hDLGtCQUFrQixFQUFFLElBQUksQ0FBQyxlQUFlO0tBQzNDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///a4592d41-08d2-43a2-96d6-3627a1422c0a\",\"moduleSequenceNumber\":83845}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"neo-net\",\"moduleSequenceNumber\":83845,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.hack(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLElBQUksR0FBdUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFFbkUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDdkIsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7UUFDeEMsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7S0FDM0MsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyJ9\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"neo-net\",\"moduleSequenceNumber\":83797,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export var ReservedPorts;\\r\\n(function (ReservedPorts) {\\r\\n    ReservedPorts[ReservedPorts[\\\"HACKING_INFO\\\"] = 1] = \\\"HACKING_INFO\\\";\\r\\n    ReservedPorts[ReservedPorts[\\\"HACKNET_INFO\\\"] = 2] = \\\"HACKNET_INFO\\\";\\r\\n    ReservedPorts[ReservedPorts[\\\"HACK_WRITE_INFO\\\"] = 3] = \\\"HACK_WRITE_INFO\\\";\\r\\n})(ReservedPorts || (ReservedPorts = {}));\\r\\nexport const WEAKENJS = \\\"/lib/exec/weaken.js\\\";\\r\\nexport const GROWJS = \\\"/lib/exec/grow.js\\\";\\r\\nexport const HACKJS = \\\"/lib/exec/hack.js\\\";\\r\\nexport const UTILJS = \\\"/lib/util.js\\\";\\r\\nexport const CITIES = [\\\"Aevum\\\", \\\"Chongqing\\\", \\\"Sector-12\\\", \\\"New Tokyo\\\", \\\"Ishima\\\", \\\"Volhaven\\\"];\\r\\nexport function llog(ns, str, ...args) {\\r\\n    ns.print(ns.sprintf(\\\"%8s \\\" + str, new Date().toLocaleTimeString(\\\"it-IT\\\"), ...args));\\r\\n}\\r\\nexport function softenServer(ns, hostname) {\\r\\n    if (ns.hasRootAccess(hostname)) {\\r\\n        return;\\r\\n    }\\r\\n    let ports = 0;\\r\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n        ns.brutessh(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n        ns.ftpcrack(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n        ns.httpworm(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n        ns.relaysmtp(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n        ns.sqlinject(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ports >= ns.getServerNumPortsRequired(hostname)) {\\r\\n        ns.nuke(hostname);\\r\\n    }\\r\\n}\\r\\nexport function serverIsHackable(ns, hostname) {\\r\\n    return ns.hasRootAccess(hostname) && ns.getHackingLevel() >= ns.getServerRequiredHackingLevel(hostname);\\r\\n}\\r\\nexport function canExecuteOnServer(ns, hostname) {\\r\\n    return ns.hasRootAccess(hostname) && ns.getServerMaxRam(hostname) > 0;\\r\\n}\\r\\nexport function mapHosts(ns, hosts = {}, parents = [], current = \\\"home\\\") {\\r\\n    const newParents = parents.concat(current);\\r\\n    hosts[current] = newParents;\\r\\n    const children = ns.scan(current).filter((element) => !parents.includes(element));\\r\\n    for (const child of children) {\\r\\n        mapHosts(ns, hosts, newParents, child);\\r\\n    }\\r\\n    return hosts;\\r\\n}\\r\\nexport function allHosts(ns) {\\r\\n    return Object.keys(mapHosts(ns));\\r\\n}\\r\\nexport function doProgramBuys(ns) {\\r\\n    const player = ns.getPlayer();\\r\\n    if (!player.tor && player.money > 200e3)\\r\\n        ns.purchaseTor();\\r\\n    if (!ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\") && player.money > 500e3)\\r\\n        ns.purchaseProgram(\\\"BruteSSH.exe\\\");\\r\\n    if (!ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\") && player.money > 1500e3)\\r\\n        ns.purchaseProgram(\\\"FTPCrack.exe\\\");\\r\\n    if (!ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\") && player.money > 5e6)\\r\\n        ns.purchaseProgram(\\\"relaySMTP.exe\\\");\\r\\n    if (!ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\") && player.money > 30e6)\\r\\n        ns.purchaseProgram(\\\"HTTPWorm.exe\\\");\\r\\n    if (!ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\") && player.money > 250e6)\\r\\n        ns.purchaseProgram(\\\"SQLInject.exe\\\");\\r\\n}\\r\\nexport function doBuyAndSoftenAll(ns) {\\r\\n    doProgramBuys(ns);\\r\\n    for (const hostname of allHosts(ns)) {\\r\\n        softenServer(ns, hostname);\\r\\n    }\\r\\n}\\r\\nexport function stFormat(ns, ms, showms = false, showfull = false) {\\r\\n    let timeLeft = ms;\\r\\n    const hours = Math.floor(ms / (1000 * 60 * 60));\\r\\n    timeLeft -= hours * (1000 * 60 * 60);\\r\\n    const minutes = Math.floor(timeLeft / (1000 * 60));\\r\\n    timeLeft -= minutes * (1000 * 60);\\r\\n    const seconds = Math.floor(timeLeft / 1000);\\r\\n    timeLeft -= seconds * 1000;\\r\\n    const milliseconds = timeLeft;\\r\\n    if (showms) {\\r\\n        if (hours > 0 || showfull)\\r\\n            return ns.sprintf(\\\"%02d:%02d:%02d.%03d\\\", hours, minutes, seconds, milliseconds);\\r\\n        if (minutes > 0)\\r\\n            return ns.sprintf(\\\"%02d:%02d.%03d\\\", minutes, seconds, milliseconds);\\r\\n        return ns.sprintf(\\\"%02d.%03d\\\", seconds, milliseconds);\\r\\n    }\\r\\n    else {\\r\\n        if (hours > 0 || showfull)\\r\\n            return ns.sprintf(\\\"%02d:%02d:%02d\\\", hours, minutes, seconds);\\r\\n        if (minutes > 0)\\r\\n            return ns.sprintf(\\\"%02d:%02d\\\", minutes, seconds);\\r\\n        return ns.sprintf(\\\"%02d\\\", seconds);\\r\\n    }\\r\\n}\\r\\nexport function stdFormat(ns, offset = 0, showms = false) {\\r\\n    const date = new Date(new Date().getTime() + offset);\\r\\n    if (showms) {\\r\\n        const ms = ns.sprintf(\\\"%03d\\\", date.getUTCMilliseconds());\\r\\n        return date.toLocaleTimeString(\\\"it-IT\\\") + \\\".\\\" + ms;\\r\\n    }\\r\\n    else {\\r\\n        return date.toLocaleTimeString(\\\"it-IT\\\");\\r\\n    }\\r\\n}\\r\\nexport async function doBackdoors(ns) {\\r\\n    //const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"w0r1d_d43m0n\\\", \\\"b-and-a\\\", \\\"ecorp\\\", \\\"fulcrumassets\\\", \\\"fulcrumtech\\\"];\\r\\n    //const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"omnitek\\\", \\\"kuai-gong\\\", \\\"megacorp\\\"];\\r\\n    const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"w0r1d_d43m0n\\\"];\\r\\n    const hosts = mapHosts(ns);\\r\\n    for (const [hostName, trail] of Object.entries(hosts)) {\\r\\n        const server = ns.getServer(hostName);\\r\\n        if (!targetHosts.includes(hostName) ||\\r\\n            server.backdoorInstalled ||\\r\\n            server.requiredHackingSkill > ns.getHackingLevel() ||\\r\\n            !server.hasAdminRights)\\r\\n            continue;\\r\\n        ns.print(hostName);\\r\\n        for (const hostHopName of trail) {\\r\\n            ns.connect(hostHopName);\\r\\n        }\\r\\n        await ns.installBackdoor();\\r\\n        ns.connect(\\\"home\\\");\\r\\n    }\\r\\n}\\r\\nexport function cleanLogs(ns) {\\r\\n    ns.disableLog(\\\"disableLog\\\");\\r\\n    ns.disableLog(\\\"ALL\\\");\\r\\n    // ns.disableLog(\\\"sleep\\\")\\r\\n    // ns.disableLog(\\\"exec\\\")\\r\\n    // ns.disableLog(\\\"getServerMaxRam\\\")\\r\\n    // ns.disableLog(\\\"getServerSecurityLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerMinSecurityLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerMaxMoney\\\")\\r\\n    // ns.disableLog(\\\"getHackingLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerRequiredHackingLevel\\\")\\r\\n    // ns.disableLog(\\\"scan\\\")\\r\\n    // ns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n    // ns.disableLog(\\\"getServerUsedRam\\\")\\r\\n}\\r\\nexport const ALL_FACTIONS = [\\r\\n    \\\"Illuminati\\\",\\r\\n    \\\"Daedalus\\\",\\r\\n    \\\"The Covenant\\\",\\r\\n    \\\"ECorp\\\",\\r\\n    \\\"MegaCorp\\\",\\r\\n    \\\"Bachman & Associates\\\",\\r\\n    \\\"Blade Industries\\\",\\r\\n    \\\"NWO\\\",\\r\\n    \\\"Clarke Incorporated\\\",\\r\\n    \\\"OmniTek Incorporated\\\",\\r\\n    \\\"Four Sigma\\\",\\r\\n    \\\"KuaiGong International\\\",\\r\\n    \\\"Fulcrum Secret Technologies\\\",\\r\\n    \\\"BitRunners\\\",\\r\\n    \\\"The Black Hand\\\",\\r\\n    \\\"NiteSec\\\",\\r\\n    \\\"Aevum\\\",\\r\\n    \\\"Chongqing\\\",\\r\\n    \\\"Ishima\\\",\\r\\n    \\\"New Tokyo\\\",\\r\\n    \\\"Sector-12\\\",\\r\\n    \\\"Volhaven\\\",\\r\\n    \\\"Speakers for the Dead\\\",\\r\\n    \\\"The Dark Army\\\",\\r\\n    \\\"The Syndicate\\\",\\r\\n    \\\"Silhouette\\\",\\r\\n    \\\"Tetrads\\\",\\r\\n    \\\"Slum Snakes\\\",\\r\\n    \\\"Netburners\\\",\\r\\n    \\\"Tian Di Hui\\\",\\r\\n    \\\"CyberSec\\\",\\r\\n    \\\"Bladeburners\\\",\\r\\n    \\\"Church of the Machine God\\\",\\r\\n];\\r\\nexport async function writeOut(ns, data, startTime, endTime, result, startSec, startCash) {\\r\\n    if (data.writeFile !== \\\"\\\") {\\r\\n        const outstr = ns.sprintf(\\\"%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\", data.target, data.uid, data.batchId, data.realTimeStart + data.offset, data.realTimeStart + data.finish, data.operationTime, startTime, endTime, endTime - startTime, startTime - (data.realTimeStart + data.offset), endTime - (data.realTimeStart + data.finish), endTime - startTime - data.operationTime, result, startSec.toFixed(2), ns.getServerSecurityLevel(data.target).toFixed(2), ns.nFormat(startCash, \\\"($0.000a)\\\"), ns.nFormat(ns.getServerMoneyAvailable(data.target), \\\"($0.000a)\\\"));\\r\\n        while (!await ns.tryWritePort(ReservedPorts.HACK_WRITE_INFO, [data.writeFile, outstr]))\\r\\n            ;\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi91dGlsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLE1BQU0sQ0FBTixJQUFZLGFBSVg7QUFKRCxXQUFZLGFBQWE7SUFDckIsaUVBQWdCLENBQUE7SUFDaEIsaUVBQVksQ0FBQTtJQUNaLHVFQUFlLENBQUE7QUFDbkIsQ0FBQyxFQUpXLGFBQWEsS0FBYixhQUFhLFFBSXhCO0FBRUQsTUFBTSxDQUFDLE1BQU0sUUFBUSxHQUFHLHFCQUFxQixDQUFDO0FBQzlDLE1BQU0sQ0FBQyxNQUFNLE1BQU0sR0FBRyxtQkFBbUIsQ0FBQztBQUMxQyxNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUcsbUJBQW1CLENBQUM7QUFDMUMsTUFBTSxDQUFDLE1BQU0sTUFBTSxHQUFHLGNBQWMsQ0FBQztBQUVyQyxNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUcsQ0FBQyxPQUFPLEVBQUUsV0FBVyxFQUFFLFdBQVcsRUFBRSxXQUFXLEVBQUUsUUFBUSxFQUFFLFVBQVUsQ0FBQyxDQUFDO0FBRTdGLE1BQU0sVUFBVSxJQUFJLENBQUMsRUFBTSxFQUFFLEdBQVcsRUFBRSxHQUFHLElBQXlCO0lBQ2xFLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEdBQUcsR0FBRyxFQUFFLElBQUksSUFBSSxFQUFFLENBQUMsa0JBQWtCLENBQUMsT0FBTyxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDO0FBQ3hGLENBQUM7QUFFRCxNQUFNLFVBQVUsWUFBWSxDQUFDLEVBQU0sRUFBRSxRQUFnQjtJQUNqRCxJQUFJLEVBQUUsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDNUIsT0FBTztLQUNWO0lBRUQsSUFBSSxLQUFLLEdBQUcsQ0FBQyxDQUFDO0lBQ2QsSUFBSSxFQUFFLENBQUMsVUFBVSxDQUFDLGNBQWMsRUFB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\",\"filename\":\"/lib/util.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":13.25,\"server\":\"neo-net\",\"moduleSequenceNumber\":83799,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"purchaseTor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"purchaseProgram\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"connect\",\"cost\":2},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.stanek.charge(ns.args[0], ns.args[1]);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hhcmdlLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL3N0YW5lay9jaGFyZ2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUM5QixPQUFPLElBQUksRUFBRTtRQUNULE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7S0FDakQ7QUFDTCxDQUFDIn0=\",\"filename\":\"/lib/stanek/charge.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/stanek/charge.js\",\"url\":\"blob:file:///84ddadcc-2098-447a-9472-1e0dfd16c5c0\",\"moduleSequenceNumber\":99892}],\"dependents\":[],\"ramUsage\":2,\"server\":\"neo-net\",\"moduleSequenceNumber\":99892,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.charge\",\"cost\":0.4}]}}],\"serversOnNetwork\":[\"zer0\",\"the-hub\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":75,\"minDifficulty\":25,\"moneyAvailable\":3750000,\"moneyMax\":42187500,\"numOpenPortsRequired\":1,\"openPortCount\":2,\"requiredHackingSkill\":50,\"serverGrowth\":25,\"suppression\":0,\"activeSuppressionThreads\":[],\"suppressionIntervalID\":null,\"suppressionLastUpdateTime\":0}},\"silver-helix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"silver-helix\",\"httpPortOpen\":false,\"ip\":\"19.9.1.7\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.grow(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLElBQUksR0FBdUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFFbkUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDdkIsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7UUFDeEMsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7S0FDM0MsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyJ9\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///26de50c3-6791-43b9-a72e-1eb3a568123a\",\"moduleSequenceNumber\":86751}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"silver-helix\",\"moduleSequenceNumber\":86751,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.weaken(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxJQUFJLEdBQXVCLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO0lBRW5FLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFO1FBQ3pCLGtCQUFrQixFQUFFLElBQUksQ0FBQyxlQUFlO1FBQ3hDLGtCQUFrQixFQUFFLElBQUksQ0FBQyxlQUFlO0tBQzNDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///3011880a-15cf-4410-9108-a1a1c7520bd9\",\"moduleSequenceNumber\":83849}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"silver-helix\",\"moduleSequenceNumber\":83849,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.hack(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLElBQUksR0FBdUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFFbkUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDdkIsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7UUFDeEMsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7S0FDM0MsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyJ9\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"silver-helix\",\"moduleSequenceNumber\":83765,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export var ReservedPorts;\\r\\n(function (ReservedPorts) {\\r\\n    ReservedPorts[ReservedPorts[\\\"HACKING_INFO\\\"] = 1] = \\\"HACKING_INFO\\\";\\r\\n    ReservedPorts[ReservedPorts[\\\"HACKNET_INFO\\\"] = 2] = \\\"HACKNET_INFO\\\";\\r\\n    ReservedPorts[ReservedPorts[\\\"HACK_WRITE_INFO\\\"] = 3] = \\\"HACK_WRITE_INFO\\\";\\r\\n})(ReservedPorts || (ReservedPorts = {}));\\r\\nexport const WEAKENJS = \\\"/lib/exec/weaken.js\\\";\\r\\nexport const GROWJS = \\\"/lib/exec/grow.js\\\";\\r\\nexport const HACKJS = \\\"/lib/exec/hack.js\\\";\\r\\nexport const UTILJS = \\\"/lib/util.js\\\";\\r\\nexport const CITIES = [\\\"Aevum\\\", \\\"Chongqing\\\", \\\"Sector-12\\\", \\\"New Tokyo\\\", \\\"Ishima\\\", \\\"Volhaven\\\"];\\r\\nexport function llog(ns, str, ...args) {\\r\\n    ns.print(ns.sprintf(\\\"%8s \\\" + str, new Date().toLocaleTimeString(\\\"it-IT\\\"), ...args));\\r\\n}\\r\\nexport function softenServer(ns, hostname) {\\r\\n    if (ns.hasRootAccess(hostname)) {\\r\\n        return;\\r\\n    }\\r\\n    let ports = 0;\\r\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n        ns.brutessh(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n        ns.ftpcrack(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n        ns.httpworm(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n        ns.relaysmtp(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n        ns.sqlinject(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ports >= ns.getServerNumPortsRequired(hostname)) {\\r\\n        ns.nuke(hostname);\\r\\n    }\\r\\n}\\r\\nexport function serverIsHackable(ns, hostname) {\\r\\n    return ns.hasRootAccess(hostname) && ns.getHackingLevel() >= ns.getServerRequiredHackingLevel(hostname);\\r\\n}\\r\\nexport function canExecuteOnServer(ns, hostname) {\\r\\n    return ns.hasRootAccess(hostname) && ns.getServerMaxRam(hostname) > 0;\\r\\n}\\r\\nexport function mapHosts(ns, hosts = {}, parents = [], current = \\\"home\\\") {\\r\\n    const newParents = parents.concat(current);\\r\\n    hosts[current] = newParents;\\r\\n    const children = ns.scan(current).filter((element) => !parents.includes(element));\\r\\n    for (const child of children) {\\r\\n        mapHosts(ns, hosts, newParents, child);\\r\\n    }\\r\\n    return hosts;\\r\\n}\\r\\nexport function allHosts(ns) {\\r\\n    return Object.keys(mapHosts(ns));\\r\\n}\\r\\nexport function doProgramBuys(ns) {\\r\\n    const player = ns.getPlayer();\\r\\n    if (!player.tor && player.money > 200e3)\\r\\n        ns.purchaseTor();\\r\\n    if (!ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\") && player.money > 500e3)\\r\\n        ns.purchaseProgram(\\\"BruteSSH.exe\\\");\\r\\n    if (!ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\") && player.money > 1500e3)\\r\\n        ns.purchaseProgram(\\\"FTPCrack.exe\\\");\\r\\n    if (!ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\") && player.money > 5e6)\\r\\n        ns.purchaseProgram(\\\"relaySMTP.exe\\\");\\r\\n    if (!ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\") && player.money > 30e6)\\r\\n        ns.purchaseProgram(\\\"HTTPWorm.exe\\\");\\r\\n    if (!ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\") && player.money > 250e6)\\r\\n        ns.purchaseProgram(\\\"SQLInject.exe\\\");\\r\\n}\\r\\nexport function doBuyAndSoftenAll(ns) {\\r\\n    doProgramBuys(ns);\\r\\n    for (const hostname of allHosts(ns)) {\\r\\n        softenServer(ns, hostname);\\r\\n    }\\r\\n}\\r\\nexport function stFormat(ns, ms, showms = false, showfull = false) {\\r\\n    let timeLeft = ms;\\r\\n    const hours = Math.floor(ms / (1000 * 60 * 60));\\r\\n    timeLeft -= hours * (1000 * 60 * 60);\\r\\n    const minutes = Math.floor(timeLeft / (1000 * 60));\\r\\n    timeLeft -= minutes * (1000 * 60);\\r\\n    const seconds = Math.floor(timeLeft / 1000);\\r\\n    timeLeft -= seconds * 1000;\\r\\n    const milliseconds = timeLeft;\\r\\n    if (showms) {\\r\\n        if (hours > 0 || showfull)\\r\\n            return ns.sprintf(\\\"%02d:%02d:%02d.%03d\\\", hours, minutes, seconds, milliseconds);\\r\\n        if (minutes > 0)\\r\\n            return ns.sprintf(\\\"%02d:%02d.%03d\\\", minutes, seconds, milliseconds);\\r\\n        return ns.sprintf(\\\"%02d.%03d\\\", seconds, milliseconds);\\r\\n    }\\r\\n    else {\\r\\n        if (hours > 0 || showfull)\\r\\n            return ns.sprintf(\\\"%02d:%02d:%02d\\\", hours, minutes, seconds);\\r\\n        if (minutes > 0)\\r\\n            return ns.sprintf(\\\"%02d:%02d\\\", minutes, seconds);\\r\\n        return ns.sprintf(\\\"%02d\\\", seconds);\\r\\n    }\\r\\n}\\r\\nexport function stdFormat(ns, offset = 0, showms = false) {\\r\\n    const date = new Date(new Date().getTime() + offset);\\r\\n    if (showms) {\\r\\n        const ms = ns.sprintf(\\\"%03d\\\", date.getUTCMilliseconds());\\r\\n        return date.toLocaleTimeString(\\\"it-IT\\\") + \\\".\\\" + ms;\\r\\n    }\\r\\n    else {\\r\\n        return date.toLocaleTimeString(\\\"it-IT\\\");\\r\\n    }\\r\\n}\\r\\nexport async function doBackdoors(ns) {\\r\\n    //const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"w0r1d_d43m0n\\\", \\\"b-and-a\\\", \\\"ecorp\\\", \\\"fulcrumassets\\\", \\\"fulcrumtech\\\"];\\r\\n    //const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"omnitek\\\", \\\"kuai-gong\\\", \\\"megacorp\\\"];\\r\\n    const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"w0r1d_d43m0n\\\"];\\r\\n    const hosts = mapHosts(ns);\\r\\n    for (const [hostName, trail] of Object.entries(hosts)) {\\r\\n        const server = ns.getServer(hostName);\\r\\n        if (!targetHosts.includes(hostName) ||\\r\\n            server.backdoorInstalled ||\\r\\n            server.requiredHackingSkill > ns.getHackingLevel() ||\\r\\n            !server.hasAdminRights)\\r\\n            continue;\\r\\n        ns.print(hostName);\\r\\n        for (const hostHopName of trail) {\\r\\n            ns.connect(hostHopName);\\r\\n        }\\r\\n        await ns.installBackdoor();\\r\\n        ns.connect(\\\"home\\\");\\r\\n    }\\r\\n}\\r\\nexport function cleanLogs(ns) {\\r\\n    ns.disableLog(\\\"disableLog\\\");\\r\\n    ns.disableLog(\\\"ALL\\\");\\r\\n    // ns.disableLog(\\\"sleep\\\")\\r\\n    // ns.disableLog(\\\"exec\\\")\\r\\n    // ns.disableLog(\\\"getServerMaxRam\\\")\\r\\n    // ns.disableLog(\\\"getServerSecurityLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerMinSecurityLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerMaxMoney\\\")\\r\\n    // ns.disableLog(\\\"getHackingLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerRequiredHackingLevel\\\")\\r\\n    // ns.disableLog(\\\"scan\\\")\\r\\n    // ns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n    // ns.disableLog(\\\"getServerUsedRam\\\")\\r\\n}\\r\\nexport const ALL_FACTIONS = [\\r\\n    \\\"Illuminati\\\",\\r\\n    \\\"Daedalus\\\",\\r\\n    \\\"The Covenant\\\",\\r\\n    \\\"ECorp\\\",\\r\\n    \\\"MegaCorp\\\",\\r\\n    \\\"Bachman & Associates\\\",\\r\\n    \\\"Blade Industries\\\",\\r\\n    \\\"NWO\\\",\\r\\n    \\\"Clarke Incorporated\\\",\\r\\n    \\\"OmniTek Incorporated\\\",\\r\\n    \\\"Four Sigma\\\",\\r\\n    \\\"KuaiGong International\\\",\\r\\n    \\\"Fulcrum Secret Technologies\\\",\\r\\n    \\\"BitRunners\\\",\\r\\n    \\\"The Black Hand\\\",\\r\\n    \\\"NiteSec\\\",\\r\\n    \\\"Aevum\\\",\\r\\n    \\\"Chongqing\\\",\\r\\n    \\\"Ishima\\\",\\r\\n    \\\"New Tokyo\\\",\\r\\n    \\\"Sector-12\\\",\\r\\n    \\\"Volhaven\\\",\\r\\n    \\\"Speakers for the Dead\\\",\\r\\n    \\\"The Dark Army\\\",\\r\\n    \\\"The Syndicate\\\",\\r\\n    \\\"Silhouette\\\",\\r\\n    \\\"Tetrads\\\",\\r\\n    \\\"Slum Snakes\\\",\\r\\n    \\\"Netburners\\\",\\r\\n    \\\"Tian Di Hui\\\",\\r\\n    \\\"CyberSec\\\",\\r\\n    \\\"Bladeburners\\\",\\r\\n    \\\"Church of the Machine God\\\",\\r\\n];\\r\\nexport async function writeOut(ns, data, startTime, endTime, result, startSec, startCash) {\\r\\n    if (data.writeFile !== \\\"\\\") {\\r\\n        const outstr = ns.sprintf(\\\"%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\", data.target, data.uid, data.batchId, data.realTimeStart + data.offset, data.realTimeStart + data.finish, data.operationTime, startTime, endTime, endTime - startTime, startTime - (data.realTimeStart + data.offset), endTime - (data.realTimeStart + data.finish), endTime - startTime - data.operationTime, result, startSec.toFixed(2), ns.getServerSecurityLevel(data.target).toFixed(2), ns.nFormat(startCash, \\\"($0.000a)\\\"), ns.nFormat(ns.getServerMoneyAvailable(data.target), \\\"($0.000a)\\\"));\\r\\n        while (!await ns.tryWritePort(ReservedPorts.HACK_WRITE_INFO, [data.writeFile, outstr]))\\r\\n            ;\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi91dGlsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLE1BQU0sQ0FBTixJQUFZLGFBSVg7QUFKRCxXQUFZLGFBQWE7SUFDckIsaUVBQWdCLENBQUE7SUFDaEIsaUVBQVksQ0FBQTtJQUNaLHVFQUFlLENBQUE7QUFDbkIsQ0FBQyxFQUpXLGFBQWEsS0FBYixhQUFhLFFBSXhCO0FBRUQsTUFBTSxDQUFDLE1BQU0sUUFBUSxHQUFHLHFCQUFxQixDQUFDO0FBQzlDLE1BQU0sQ0FBQyxNQUFNLE1BQU0sR0FBRyxtQkFBbUIsQ0FBQztBQUMxQyxNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUcsbUJBQW1CLENBQUM7QUFDMUMsTUFBTSxDQUFDLE1BQU0sTUFBTSxHQUFHLGNBQWMsQ0FBQztBQUVyQyxNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUcsQ0FBQyxPQUFPLEVBQUUsV0FBVyxFQUFFLFdBQVcsRUFBRSxXQUFXLEVBQUUsUUFBUSxFQUFFLFVBQVUsQ0FBQyxDQUFDO0FBRTdGLE1BQU0sVUFBVSxJQUFJLENBQUMsRUFBTSxFQUFFLEdBQVcsRUFBRSxHQUFHLElBQXlCO0lBQ2xFLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEdBQUcsR0FBRyxFQUFFLElBQUksSUFBSSxFQUFFLENBQUMsa0JBQWtCLENBQUMsT0FBTyxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDO0FBQ3hGLENBQUM7QUFFRCxNQUFNLFVBQVUsWUFBWSxDQUFDLEVBQU0sRUFBRSxRQUFnQjtJQUNqRCxJQUFJLEVBQUUsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDNUIsT0FBTztLQUNWO0lBRUQsSUFBSSxLQUFLLEdBQUcsQ0FBQyxDQUFDO0lBQ2QsSUFBSSxFQUFFLENBQUMsVUFBVSxDQUFDLGNBQWMsRUFB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\",\"filename\":\"/lib/util.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":13.25,\"server\":\"silver-helix\",\"moduleSequenceNumber\":83767,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"purchaseTor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"purchaseProgram\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"connect\",\"cost\":2},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.stanek.charge(ns.args[0], ns.args[1]);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hhcmdlLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL3N0YW5lay9jaGFyZ2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUM5QixPQUFPLElBQUksRUFBRTtRQUNULE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7S0FDakQ7QUFDTCxDQUFDIn0=\",\"filename\":\"/lib/stanek/charge.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/stanek/charge.js\",\"url\":\"blob:file:///5b562913-4cb7-41ce-bded-396120fd1a32\",\"moduleSequenceNumber\":99859}],\"dependents\":[],\"ramUsage\":2,\"server\":\"silver-helix\",\"moduleSequenceNumber\":99859,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.charge\",\"cost\":0.4}]}}],\"serversOnNetwork\":[\"max-hardware\",\"netlink\",\"avmnite-02h\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":90,\"hackDifficulty\":90,\"minDifficulty\":30,\"moneyAvailable\":33750000,\"moneyMax\":379687500,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":150,\"serverGrowth\":30,\"suppression\":0,\"activeSuppressionThreads\":[],\"suppressionIntervalID\":null,\"suppressionLastUpdateTime\":0}},\"hong-fang-tea\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-411951.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":494965906,\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":false,\"ip\":\"43.2.2.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.grow(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLElBQUksR0FBdUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFFbkUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDdkIsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7UUFDeEMsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7S0FDM0MsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyJ9\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":83450,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.weaken(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxJQUFJLEdBQXVCLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO0lBRW5FLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFO1FBQ3pCLGtCQUFrQixFQUFFLElBQUksQ0FBQyxlQUFlO1FBQ3hDLGtCQUFrQixFQUFFLElBQUksQ0FBQyxlQUFlO0tBQzNDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///69ebf1c9-19d5-4558-aa6e-5a7fe2066abf\",\"moduleSequenceNumber\":83484}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":83484,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.hack(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLElBQUksR0FBdUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFFbkUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDdkIsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7UUFDeEMsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7S0FDM0MsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyJ9\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":83454,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export var ReservedPorts;\\r\\n(function (ReservedPorts) {\\r\\n    ReservedPorts[ReservedPorts[\\\"HACKING_INFO\\\"] = 1] = \\\"HACKING_INFO\\\";\\r\\n    ReservedPorts[ReservedPorts[\\\"HACKNET_INFO\\\"] = 2] = \\\"HACKNET_INFO\\\";\\r\\n    ReservedPorts[ReservedPorts[\\\"HACK_WRITE_INFO\\\"] = 3] = \\\"HACK_WRITE_INFO\\\";\\r\\n})(ReservedPorts || (ReservedPorts = {}));\\r\\nexport const WEAKENJS = \\\"/lib/exec/weaken.js\\\";\\r\\nexport const GROWJS = \\\"/lib/exec/grow.js\\\";\\r\\nexport const HACKJS = \\\"/lib/exec/hack.js\\\";\\r\\nexport const UTILJS = \\\"/lib/util.js\\\";\\r\\nexport const CITIES = [\\\"Aevum\\\", \\\"Chongqing\\\", \\\"Sector-12\\\", \\\"New Tokyo\\\", \\\"Ishima\\\", \\\"Volhaven\\\"];\\r\\nexport function llog(ns, str, ...args) {\\r\\n    ns.print(ns.sprintf(\\\"%8s \\\" + str, new Date().toLocaleTimeString(\\\"it-IT\\\"), ...args));\\r\\n}\\r\\nexport function softenServer(ns, hostname) {\\r\\n    if (ns.hasRootAccess(hostname)) {\\r\\n        return;\\r\\n    }\\r\\n    let ports = 0;\\r\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n        ns.brutessh(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n        ns.ftpcrack(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n        ns.httpworm(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n        ns.relaysmtp(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n        ns.sqlinject(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ports >= ns.getServerNumPortsRequired(hostname)) {\\r\\n        ns.nuke(hostname);\\r\\n    }\\r\\n}\\r\\nexport function serverIsHackable(ns, hostname) {\\r\\n    return ns.hasRootAccess(hostname) && ns.getHackingLevel() >= ns.getServerRequiredHackingLevel(hostname);\\r\\n}\\r\\nexport function canExecuteOnServer(ns, hostname) {\\r\\n    return ns.hasRootAccess(hostname) && ns.getServerMaxRam(hostname) > 0;\\r\\n}\\r\\nexport function mapHosts(ns, hosts = {}, parents = [], current = \\\"home\\\") {\\r\\n    const newParents = parents.concat(current);\\r\\n    hosts[current] = newParents;\\r\\n    const children = ns.scan(current).filter((element) => !parents.includes(element));\\r\\n    for (const child of children) {\\r\\n        mapHosts(ns, hosts, newParents, child);\\r\\n    }\\r\\n    return hosts;\\r\\n}\\r\\nexport function allHosts(ns) {\\r\\n    return Object.keys(mapHosts(ns));\\r\\n}\\r\\nexport function doProgramBuys(ns) {\\r\\n    const player = ns.getPlayer();\\r\\n    if (!player.tor && player.money > 200e3)\\r\\n        ns.purchaseTor();\\r\\n    if (!ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\") && player.money > 500e3)\\r\\n        ns.purchaseProgram(\\\"BruteSSH.exe\\\");\\r\\n    if (!ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\") && player.money > 1500e3)\\r\\n        ns.purchaseProgram(\\\"FTPCrack.exe\\\");\\r\\n    if (!ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\") && player.money > 5e6)\\r\\n        ns.purchaseProgram(\\\"relaySMTP.exe\\\");\\r\\n    if (!ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\") && player.money > 30e6)\\r\\n        ns.purchaseProgram(\\\"HTTPWorm.exe\\\");\\r\\n    if (!ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\") && player.money > 250e6)\\r\\n        ns.purchaseProgram(\\\"SQLInject.exe\\\");\\r\\n}\\r\\nexport function doBuyAndSoftenAll(ns) {\\r\\n    doProgramBuys(ns);\\r\\n    for (const hostname of allHosts(ns)) {\\r\\n        softenServer(ns, hostname);\\r\\n    }\\r\\n}\\r\\nexport function stFormat(ns, ms, showms = false, showfull = false) {\\r\\n    let timeLeft = ms;\\r\\n    const hours = Math.floor(ms / (1000 * 60 * 60));\\r\\n    timeLeft -= hours * (1000 * 60 * 60);\\r\\n    const minutes = Math.floor(timeLeft / (1000 * 60));\\r\\n    timeLeft -= minutes * (1000 * 60);\\r\\n    const seconds = Math.floor(timeLeft / 1000);\\r\\n    timeLeft -= seconds * 1000;\\r\\n    const milliseconds = timeLeft;\\r\\n    if (showms) {\\r\\n        if (hours > 0 || showfull)\\r\\n            return ns.sprintf(\\\"%02d:%02d:%02d.%03d\\\", hours, minutes, seconds, milliseconds);\\r\\n        if (minutes > 0)\\r\\n            return ns.sprintf(\\\"%02d:%02d.%03d\\\", minutes, seconds, milliseconds);\\r\\n        return ns.sprintf(\\\"%02d.%03d\\\", seconds, milliseconds);\\r\\n    }\\r\\n    else {\\r\\n        if (hours > 0 || showfull)\\r\\n            return ns.sprintf(\\\"%02d:%02d:%02d\\\", hours, minutes, seconds);\\r\\n        if (minutes > 0)\\r\\n            return ns.sprintf(\\\"%02d:%02d\\\", minutes, seconds);\\r\\n        return ns.sprintf(\\\"%02d\\\", seconds);\\r\\n    }\\r\\n}\\r\\nexport function stdFormat(ns, offset = 0, showms = false) {\\r\\n    const date = new Date(new Date().getTime() + offset);\\r\\n    if (showms) {\\r\\n        const ms = ns.sprintf(\\\"%03d\\\", date.getUTCMilliseconds());\\r\\n        return date.toLocaleTimeString(\\\"it-IT\\\") + \\\".\\\" + ms;\\r\\n    }\\r\\n    else {\\r\\n        return date.toLocaleTimeString(\\\"it-IT\\\");\\r\\n    }\\r\\n}\\r\\nexport async function doBackdoors(ns) {\\r\\n    //const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"w0r1d_d43m0n\\\", \\\"b-and-a\\\", \\\"ecorp\\\", \\\"fulcrumassets\\\", \\\"fulcrumtech\\\"];\\r\\n    //const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"omnitek\\\", \\\"kuai-gong\\\", \\\"megacorp\\\"];\\r\\n    const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"w0r1d_d43m0n\\\"];\\r\\n    const hosts = mapHosts(ns);\\r\\n    for (const [hostName, trail] of Object.entries(hosts)) {\\r\\n        const server = ns.getServer(hostName);\\r\\n        if (!targetHosts.includes(hostName) ||\\r\\n            server.backdoorInstalled ||\\r\\n            server.requiredHackingSkill > ns.getHackingLevel() ||\\r\\n            !server.hasAdminRights)\\r\\n            continue;\\r\\n        ns.print(hostName);\\r\\n        for (const hostHopName of trail) {\\r\\n            ns.connect(hostHopName);\\r\\n        }\\r\\n        await ns.installBackdoor();\\r\\n        ns.connect(\\\"home\\\");\\r\\n    }\\r\\n}\\r\\nexport function cleanLogs(ns) {\\r\\n    ns.disableLog(\\\"disableLog\\\");\\r\\n    ns.disableLog(\\\"ALL\\\");\\r\\n    // ns.disableLog(\\\"sleep\\\")\\r\\n    // ns.disableLog(\\\"exec\\\")\\r\\n    // ns.disableLog(\\\"getServerMaxRam\\\")\\r\\n    // ns.disableLog(\\\"getServerSecurityLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerMinSecurityLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerMaxMoney\\\")\\r\\n    // ns.disableLog(\\\"getHackingLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerRequiredHackingLevel\\\")\\r\\n    // ns.disableLog(\\\"scan\\\")\\r\\n    // ns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n    // ns.disableLog(\\\"getServerUsedRam\\\")\\r\\n}\\r\\nexport const ALL_FACTIONS = [\\r\\n    \\\"Illuminati\\\",\\r\\n    \\\"Daedalus\\\",\\r\\n    \\\"The Covenant\\\",\\r\\n    \\\"ECorp\\\",\\r\\n    \\\"MegaCorp\\\",\\r\\n    \\\"Bachman & Associates\\\",\\r\\n    \\\"Blade Industries\\\",\\r\\n    \\\"NWO\\\",\\r\\n    \\\"Clarke Incorporated\\\",\\r\\n    \\\"OmniTek Incorporated\\\",\\r\\n    \\\"Four Sigma\\\",\\r\\n    \\\"KuaiGong International\\\",\\r\\n    \\\"Fulcrum Secret Technologies\\\",\\r\\n    \\\"BitRunners\\\",\\r\\n    \\\"The Black Hand\\\",\\r\\n    \\\"NiteSec\\\",\\r\\n    \\\"Aevum\\\",\\r\\n    \\\"Chongqing\\\",\\r\\n    \\\"Ishima\\\",\\r\\n    \\\"New Tokyo\\\",\\r\\n    \\\"Sector-12\\\",\\r\\n    \\\"Volhaven\\\",\\r\\n    \\\"Speakers for the Dead\\\",\\r\\n    \\\"The Dark Army\\\",\\r\\n    \\\"The Syndicate\\\",\\r\\n    \\\"Silhouette\\\",\\r\\n    \\\"Tetrads\\\",\\r\\n    \\\"Slum Snakes\\\",\\r\\n    \\\"Netburners\\\",\\r\\n    \\\"Tian Di Hui\\\",\\r\\n    \\\"CyberSec\\\",\\r\\n    \\\"Bladeburners\\\",\\r\\n    \\\"Church of the Machine God\\\",\\r\\n];\\r\\nexport async function writeOut(ns, data, startTime, endTime, result, startSec, startCash) {\\r\\n    if (data.writeFile !== \\\"\\\") {\\r\\n        const outstr = ns.sprintf(\\\"%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\", data.target, data.uid, data.batchId, data.realTimeStart + data.offset, data.realTimeStart + data.finish, data.operationTime, startTime, endTime, endTime - startTime, startTime - (data.realTimeStart + data.offset), endTime - (data.realTimeStart + data.finish), endTime - startTime - data.operationTime, result, startSec.toFixed(2), ns.getServerSecurityLevel(data.target).toFixed(2), ns.nFormat(startCash, \\\"($0.000a)\\\"), ns.nFormat(ns.getServerMoneyAvailable(data.target), \\\"($0.000a)\\\"));\\r\\n        while (!await ns.tryWritePort(ReservedPorts.HACK_WRITE_INFO, [data.writeFile, outstr]))\\r\\n            ;\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi91dGlsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLE1BQU0sQ0FBTixJQUFZLGFBSVg7QUFKRCxXQUFZLGFBQWE7SUFDckIsaUVBQWdCLENBQUE7SUFDaEIsaUVBQVksQ0FBQTtJQUNaLHVFQUFlLENBQUE7QUFDbkIsQ0FBQyxFQUpXLGFBQWEsS0FBYixhQUFhLFFBSXhCO0FBRUQsTUFBTSxDQUFDLE1BQU0sUUFBUSxHQUFHLHFCQUFxQixDQUFDO0FBQzlDLE1BQU0sQ0FBQyxNQUFNLE1BQU0sR0FBRyxtQkFBbUIsQ0FBQztBQUMxQyxNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUcsbUJBQW1CLENBQUM7QUFDMUMsTUFBTSxDQUFDLE1BQU0sTUFBTSxHQUFHLGNBQWMsQ0FBQztBQUVyQyxNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUcsQ0FBQyxPQUFPLEVBQUUsV0FBVyxFQUFFLFdBQVcsRUFBRSxXQUFXLEVBQUUsUUFBUSxFQUFFLFVBQVUsQ0FBQyxDQUFDO0FBRTdGLE1BQU0sVUFBVSxJQUFJLENBQUMsRUFBTSxFQUFFLEdBQVcsRUFBRSxHQUFHLElBQXlCO0lBQ2xFLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEdBQUcsR0FBRyxFQUFFLElBQUksSUFBSSxFQUFFLENBQUMsa0JBQWtCLENBQUMsT0FBTyxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDO0FBQ3hGLENBQUM7QUFFRCxNQUFNLFVBQVUsWUFBWSxDQUFDLEVBQU0sRUFBRSxRQUFnQjtJQUNqRCxJQUFJLEVBQUUsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDNUIsT0FBTztLQUNWO0lBRUQsSUFBSSxLQUFLLEdBQUcsQ0FBQyxDQUFDO0lBQ2QsSUFBSSxFQUFFLENBQUMsVUFBVSxDQUFDLGNBQWMsRUFB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\",\"filename\":\"/lib/util.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":13.25,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":83456,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"purchaseTor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"purchaseProgram\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"connect\",\"cost\":2},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.stanek.charge(ns.args[0], ns.args[1]);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hhcmdlLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL3N0YW5lay9jaGFyZ2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUM5QixPQUFPLElBQUksRUFBRTtRQUNULE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7S0FDakQ7QUFDTCxDQUFDIn0=\",\"filename\":\"/lib/stanek/charge.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/stanek/charge.js\",\"url\":\"blob:file:///2d51d7b2-b367-422a-8ca5-252ba04a1828\",\"moduleSequenceNumber\":99890}],\"dependents\":[],\"ramUsage\":2,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":99890,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.charge\",\"cost\":0.4}]}}],\"serversOnNetwork\":[\"home\",\"zer0\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":45,\"hackDifficulty\":45,\"minDifficulty\":15,\"moneyAvailable\":2250000,\"moneyMax\":25312500,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":30,\"serverGrowth\":20,\"suppression\":0,\"activeSuppressionThreads\":[],\"suppressionIntervalID\":null,\"suppressionLastUpdateTime\":0}},\"harakiri-sushi\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":false,\"ip\":\"50.4.2.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.grow(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLElBQUksR0FBdUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFFbkUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDdkIsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7UUFDeEMsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7S0FDM0MsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyJ9\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":83458,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.weaken(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxJQUFJLEdBQXVCLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO0lBRW5FLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFO1FBQ3pCLGtCQUFrQixFQUFFLElBQUksQ0FBQyxlQUFlO1FBQ3hDLGtCQUFrQixFQUFFLElBQUksQ0FBQyxlQUFlO0tBQzNDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///941b84b8-3609-422b-a8b1-777d1513f08d\",\"moduleSequenceNumber\":83483}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":83483,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.hack(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLElBQUksR0FBdUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFFbkUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDdkIsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7UUFDeEMsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7S0FDM0MsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyJ9\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":83462,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export var ReservedPorts;\\r\\n(function (ReservedPorts) {\\r\\n    ReservedPorts[ReservedPorts[\\\"HACKING_INFO\\\"] = 1] = \\\"HACKING_INFO\\\";\\r\\n    ReservedPorts[ReservedPorts[\\\"HACKNET_INFO\\\"] = 2] = \\\"HACKNET_INFO\\\";\\r\\n    ReservedPorts[ReservedPorts[\\\"HACK_WRITE_INFO\\\"] = 3] = \\\"HACK_WRITE_INFO\\\";\\r\\n})(ReservedPorts || (ReservedPorts = {}));\\r\\nexport const WEAKENJS = \\\"/lib/exec/weaken.js\\\";\\r\\nexport const GROWJS = \\\"/lib/exec/grow.js\\\";\\r\\nexport const HACKJS = \\\"/lib/exec/hack.js\\\";\\r\\nexport const UTILJS = \\\"/lib/util.js\\\";\\r\\nexport const CITIES = [\\\"Aevum\\\", \\\"Chongqing\\\", \\\"Sector-12\\\", \\\"New Tokyo\\\", \\\"Ishima\\\", \\\"Volhaven\\\"];\\r\\nexport function llog(ns, str, ...args) {\\r\\n    ns.print(ns.sprintf(\\\"%8s \\\" + str, new Date().toLocaleTimeString(\\\"it-IT\\\"), ...args));\\r\\n}\\r\\nexport function softenServer(ns, hostname) {\\r\\n    if (ns.hasRootAccess(hostname)) {\\r\\n        return;\\r\\n    }\\r\\n    let ports = 0;\\r\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n        ns.brutessh(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n        ns.ftpcrack(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n        ns.httpworm(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n        ns.relaysmtp(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n        ns.sqlinject(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ports >= ns.getServerNumPortsRequired(hostname)) {\\r\\n        ns.nuke(hostname);\\r\\n    }\\r\\n}\\r\\nexport function serverIsHackable(ns, hostname) {\\r\\n    return ns.hasRootAccess(hostname) && ns.getHackingLevel() >= ns.getServerRequiredHackingLevel(hostname);\\r\\n}\\r\\nexport function canExecuteOnServer(ns, hostname) {\\r\\n    return ns.hasRootAccess(hostname) && ns.getServerMaxRam(hostname) > 0;\\r\\n}\\r\\nexport function mapHosts(ns, hosts = {}, parents = [], current = \\\"home\\\") {\\r\\n    const newParents = parents.concat(current);\\r\\n    hosts[current] = newParents;\\r\\n    const children = ns.scan(current).filter((element) => !parents.includes(element));\\r\\n    for (const child of children) {\\r\\n        mapHosts(ns, hosts, newParents, child);\\r\\n    }\\r\\n    return hosts;\\r\\n}\\r\\nexport function allHosts(ns) {\\r\\n    return Object.keys(mapHosts(ns));\\r\\n}\\r\\nexport function doProgramBuys(ns) {\\r\\n    const player = ns.getPlayer();\\r\\n    if (!player.tor && player.money > 200e3)\\r\\n        ns.purchaseTor();\\r\\n    if (!ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\") && player.money > 500e3)\\r\\n        ns.purchaseProgram(\\\"BruteSSH.exe\\\");\\r\\n    if (!ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\") && player.money > 1500e3)\\r\\n        ns.purchaseProgram(\\\"FTPCrack.exe\\\");\\r\\n    if (!ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\") && player.money > 5e6)\\r\\n        ns.purchaseProgram(\\\"relaySMTP.exe\\\");\\r\\n    if (!ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\") && player.money > 30e6)\\r\\n        ns.purchaseProgram(\\\"HTTPWorm.exe\\\");\\r\\n    if (!ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\") && player.money > 250e6)\\r\\n        ns.purchaseProgram(\\\"SQLInject.exe\\\");\\r\\n}\\r\\nexport function doBuyAndSoftenAll(ns) {\\r\\n    doProgramBuys(ns);\\r\\n    for (const hostname of allHosts(ns)) {\\r\\n        softenServer(ns, hostname);\\r\\n    }\\r\\n}\\r\\nexport function stFormat(ns, ms, showms = false, showfull = false) {\\r\\n    let timeLeft = ms;\\r\\n    const hours = Math.floor(ms / (1000 * 60 * 60));\\r\\n    timeLeft -= hours * (1000 * 60 * 60);\\r\\n    const minutes = Math.floor(timeLeft / (1000 * 60));\\r\\n    timeLeft -= minutes * (1000 * 60);\\r\\n    const seconds = Math.floor(timeLeft / 1000);\\r\\n    timeLeft -= seconds * 1000;\\r\\n    const milliseconds = timeLeft;\\r\\n    if (showms) {\\r\\n        if (hours > 0 || showfull)\\r\\n            return ns.sprintf(\\\"%02d:%02d:%02d.%03d\\\", hours, minutes, seconds, milliseconds);\\r\\n        if (minutes > 0)\\r\\n            return ns.sprintf(\\\"%02d:%02d.%03d\\\", minutes, seconds, milliseconds);\\r\\n        return ns.sprintf(\\\"%02d.%03d\\\", seconds, milliseconds);\\r\\n    }\\r\\n    else {\\r\\n        if (hours > 0 || showfull)\\r\\n            return ns.sprintf(\\\"%02d:%02d:%02d\\\", hours, minutes, seconds);\\r\\n        if (minutes > 0)\\r\\n            return ns.sprintf(\\\"%02d:%02d\\\", minutes, seconds);\\r\\n        return ns.sprintf(\\\"%02d\\\", seconds);\\r\\n    }\\r\\n}\\r\\nexport function stdFormat(ns, offset = 0, showms = false) {\\r\\n    const date = new Date(new Date().getTime() + offset);\\r\\n    if (showms) {\\r\\n        const ms = ns.sprintf(\\\"%03d\\\", date.getUTCMilliseconds());\\r\\n        return date.toLocaleTimeString(\\\"it-IT\\\") + \\\".\\\" + ms;\\r\\n    }\\r\\n    else {\\r\\n        return date.toLocaleTimeString(\\\"it-IT\\\");\\r\\n    }\\r\\n}\\r\\nexport async function doBackdoors(ns) {\\r\\n    //const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"w0r1d_d43m0n\\\", \\\"b-and-a\\\", \\\"ecorp\\\", \\\"fulcrumassets\\\", \\\"fulcrumtech\\\"];\\r\\n    //const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"omnitek\\\", \\\"kuai-gong\\\", \\\"megacorp\\\"];\\r\\n    const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"w0r1d_d43m0n\\\"];\\r\\n    const hosts = mapHosts(ns);\\r\\n    for (const [hostName, trail] of Object.entries(hosts)) {\\r\\n        const server = ns.getServer(hostName);\\r\\n        if (!targetHosts.includes(hostName) ||\\r\\n            server.backdoorInstalled ||\\r\\n            server.requiredHackingSkill > ns.getHackingLevel() ||\\r\\n            !server.hasAdminRights)\\r\\n            continue;\\r\\n        ns.print(hostName);\\r\\n        for (const hostHopName of trail) {\\r\\n            ns.connect(hostHopName);\\r\\n        }\\r\\n        await ns.installBackdoor();\\r\\n        ns.connect(\\\"home\\\");\\r\\n    }\\r\\n}\\r\\nexport function cleanLogs(ns) {\\r\\n    ns.disableLog(\\\"disableLog\\\");\\r\\n    ns.disableLog(\\\"ALL\\\");\\r\\n    // ns.disableLog(\\\"sleep\\\")\\r\\n    // ns.disableLog(\\\"exec\\\")\\r\\n    // ns.disableLog(\\\"getServerMaxRam\\\")\\r\\n    // ns.disableLog(\\\"getServerSecurityLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerMinSecurityLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerMaxMoney\\\")\\r\\n    // ns.disableLog(\\\"getHackingLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerRequiredHackingLevel\\\")\\r\\n    // ns.disableLog(\\\"scan\\\")\\r\\n    // ns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n    // ns.disableLog(\\\"getServerUsedRam\\\")\\r\\n}\\r\\nexport const ALL_FACTIONS = [\\r\\n    \\\"Illuminati\\\",\\r\\n    \\\"Daedalus\\\",\\r\\n    \\\"The Covenant\\\",\\r\\n    \\\"ECorp\\\",\\r\\n    \\\"MegaCorp\\\",\\r\\n    \\\"Bachman & Associates\\\",\\r\\n    \\\"Blade Industries\\\",\\r\\n    \\\"NWO\\\",\\r\\n    \\\"Clarke Incorporated\\\",\\r\\n    \\\"OmniTek Incorporated\\\",\\r\\n    \\\"Four Sigma\\\",\\r\\n    \\\"KuaiGong International\\\",\\r\\n    \\\"Fulcrum Secret Technologies\\\",\\r\\n    \\\"BitRunners\\\",\\r\\n    \\\"The Black Hand\\\",\\r\\n    \\\"NiteSec\\\",\\r\\n    \\\"Aevum\\\",\\r\\n    \\\"Chongqing\\\",\\r\\n    \\\"Ishima\\\",\\r\\n    \\\"New Tokyo\\\",\\r\\n    \\\"Sector-12\\\",\\r\\n    \\\"Volhaven\\\",\\r\\n    \\\"Speakers for the Dead\\\",\\r\\n    \\\"The Dark Army\\\",\\r\\n    \\\"The Syndicate\\\",\\r\\n    \\\"Silhouette\\\",\\r\\n    \\\"Tetrads\\\",\\r\\n    \\\"Slum Snakes\\\",\\r\\n    \\\"Netburners\\\",\\r\\n    \\\"Tian Di Hui\\\",\\r\\n    \\\"CyberSec\\\",\\r\\n    \\\"Bladeburners\\\",\\r\\n    \\\"Church of the Machine God\\\",\\r\\n];\\r\\nexport async function writeOut(ns, data, startTime, endTime, result, startSec, startCash) {\\r\\n    if (data.writeFile !== \\\"\\\") {\\r\\n        const outstr = ns.sprintf(\\\"%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\", data.target, data.uid, data.batchId, data.realTimeStart + data.offset, data.realTimeStart + data.finish, data.operationTime, startTime, endTime, endTime - startTime, startTime - (data.realTimeStart + data.offset), endTime - (data.realTimeStart + data.finish), endTime - startTime - data.operationTime, result, startSec.toFixed(2), ns.getServerSecurityLevel(data.target).toFixed(2), ns.nFormat(startCash, \\\"($0.000a)\\\"), ns.nFormat(ns.getServerMoneyAvailable(data.target), \\\"($0.000a)\\\"));\\r\\n        while (!await ns.tryWritePort(ReservedPorts.HACK_WRITE_INFO, [data.writeFile, outstr]))\\r\\n            ;\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi91dGlsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLE1BQU0sQ0FBTixJQUFZLGFBSVg7QUFKRCxXQUFZLGFBQWE7SUFDckIsaUVBQWdCLENBQUE7SUFDaEIsaUVBQVksQ0FBQTtJQUNaLHVFQUFlLENBQUE7QUFDbkIsQ0FBQyxFQUpXLGFBQWEsS0FBYixhQUFhLFFBSXhCO0FBRUQsTUFBTSxDQUFDLE1BQU0sUUFBUSxHQUFHLHFCQUFxQixDQUFDO0FBQzlDLE1BQU0sQ0FBQyxNQUFNLE1BQU0sR0FBRyxtQkFBbUIsQ0FBQztBQUMxQyxNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUcsbUJBQW1CLENBQUM7QUFDMUMsTUFBTSxDQUFDLE1BQU0sTUFBTSxHQUFHLGNBQWMsQ0FBQztBQUVyQyxNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUcsQ0FBQyxPQUFPLEVBQUUsV0FBVyxFQUFFLFdBQVcsRUFBRSxXQUFXLEVBQUUsUUFBUSxFQUFFLFVBQVUsQ0FBQyxDQUFDO0FBRTdGLE1BQU0sVUFBVSxJQUFJLENBQUMsRUFBTSxFQUFFLEdBQVcsRUFBRSxHQUFHLElBQXlCO0lBQ2xFLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEdBQUcsR0FBRyxFQUFFLElBQUksSUFBSSxFQUFFLENBQUMsa0JBQWtCLENBQUMsT0FBTyxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDO0FBQ3hGLENBQUM7QUFFRCxNQUFNLFVBQVUsWUFBWSxDQUFDLEVBQU0sRUFBRSxRQUFnQjtJQUNqRCxJQUFJLEVBQUUsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDNUIsT0FBTztLQUNWO0lBRUQsSUFBSSxLQUFLLEdBQUcsQ0FBQyxDQUFDO0lBQ2QsSUFBSSxFQUFFLENBQUMsVUFBVSxDQUFDLGNBQWMsRUFB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\",\"filename\":\"/lib/util.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":13.25,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":83464,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"purchaseTor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"purchaseProgram\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"connect\",\"cost\":2},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.stanek.charge(ns.args[0], ns.args[1]);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hhcmdlLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL3N0YW5lay9jaGFyZ2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUM5QixPQUFPLElBQUksRUFBRTtRQUNULE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7S0FDakQ7QUFDTCxDQUFDIn0=\",\"filename\":\"/lib/stanek/charge.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/stanek/charge.js\",\"url\":\"blob:file:///9380837d-fe28-46f4-be08-431520f97ecf\",\"moduleSequenceNumber\":99894}],\"dependents\":[],\"ramUsage\":2,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":99894,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.charge\",\"cost\":0.4}]}}],\"serversOnNetwork\":[\"home\",\"nectar-net\",\"CSEC\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":45,\"hackDifficulty\":15,\"minDifficulty\":15,\"moneyAvailable\":33750000,\"moneyMax\":33750000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":40,\"serverGrowth\":40,\"suppression\":0,\"activeSuppressionThreads\":[],\"suppressionIntervalID\":null,\"suppressionLastUpdateTime\":0}},\"phantasy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"phantasy\",\"httpPortOpen\":false,\"ip\":\"94.7.5.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.grow(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLElBQUksR0FBdUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFFbkUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDdkIsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7UUFDeEMsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7S0FDM0MsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyJ9\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"phantasy\",\"moduleSequenceNumber\":83809,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.weaken(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxJQUFJLEdBQXVCLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO0lBRW5FLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFO1FBQ3pCLGtCQUFrQixFQUFFLElBQUksQ0FBQyxlQUFlO1FBQ3hDLGtCQUFrQixFQUFFLElBQUksQ0FBQyxlQUFlO0tBQzNDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///4f5b664c-6253-4d61-a74e-0d2f20b2a7ed\",\"moduleSequenceNumber\":83843}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"phantasy\",\"moduleSequenceNumber\":83843,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.hack(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLElBQUksR0FBdUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFFbkUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDdkIsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7UUFDeEMsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7S0FDM0MsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyJ9\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"phantasy\",\"moduleSequenceNumber\":83813,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export var ReservedPorts;\\r\\n(function (ReservedPorts) {\\r\\n    ReservedPorts[ReservedPorts[\\\"HACKING_INFO\\\"] = 1] = \\\"HACKING_INFO\\\";\\r\\n    ReservedPorts[ReservedPorts[\\\"HACKNET_INFO\\\"] = 2] = \\\"HACKNET_INFO\\\";\\r\\n    ReservedPorts[ReservedPorts[\\\"HACK_WRITE_INFO\\\"] = 3] = \\\"HACK_WRITE_INFO\\\";\\r\\n})(ReservedPorts || (ReservedPorts = {}));\\r\\nexport const WEAKENJS = \\\"/lib/exec/weaken.js\\\";\\r\\nexport const GROWJS = \\\"/lib/exec/grow.js\\\";\\r\\nexport const HACKJS = \\\"/lib/exec/hack.js\\\";\\r\\nexport const UTILJS = \\\"/lib/util.js\\\";\\r\\nexport const CITIES = [\\\"Aevum\\\", \\\"Chongqing\\\", \\\"Sector-12\\\", \\\"New Tokyo\\\", \\\"Ishima\\\", \\\"Volhaven\\\"];\\r\\nexport function llog(ns, str, ...args) {\\r\\n    ns.print(ns.sprintf(\\\"%8s \\\" + str, new Date().toLocaleTimeString(\\\"it-IT\\\"), ...args));\\r\\n}\\r\\nexport function softenServer(ns, hostname) {\\r\\n    if (ns.hasRootAccess(hostname)) {\\r\\n        return;\\r\\n    }\\r\\n    let ports = 0;\\r\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n        ns.brutessh(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n        ns.ftpcrack(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n        ns.httpworm(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n        ns.relaysmtp(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n        ns.sqlinject(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ports >= ns.getServerNumPortsRequired(hostname)) {\\r\\n        ns.nuke(hostname);\\r\\n    }\\r\\n}\\r\\nexport function serverIsHackable(ns, hostname) {\\r\\n    return ns.hasRootAccess(hostname) && ns.getHackingLevel() >= ns.getServerRequiredHackingLevel(hostname);\\r\\n}\\r\\nexport function canExecuteOnServer(ns, hostname) {\\r\\n    return ns.hasRootAccess(hostname) && ns.getServerMaxRam(hostname) > 0;\\r\\n}\\r\\nexport function mapHosts(ns, hosts = {}, parents = [], current = \\\"home\\\") {\\r\\n    const newParents = parents.concat(current);\\r\\n    hosts[current] = newParents;\\r\\n    const children = ns.scan(current).filter((element) => !parents.includes(element));\\r\\n    for (const child of children) {\\r\\n        mapHosts(ns, hosts, newParents, child);\\r\\n    }\\r\\n    return hosts;\\r\\n}\\r\\nexport function allHosts(ns) {\\r\\n    return Object.keys(mapHosts(ns));\\r\\n}\\r\\nexport function doProgramBuys(ns) {\\r\\n    const player = ns.getPlayer();\\r\\n    if (!player.tor && player.money > 200e3)\\r\\n        ns.purchaseTor();\\r\\n    if (!ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\") && player.money > 500e3)\\r\\n        ns.purchaseProgram(\\\"BruteSSH.exe\\\");\\r\\n    if (!ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\") && player.money > 1500e3)\\r\\n        ns.purchaseProgram(\\\"FTPCrack.exe\\\");\\r\\n    if (!ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\") && player.money > 5e6)\\r\\n        ns.purchaseProgram(\\\"relaySMTP.exe\\\");\\r\\n    if (!ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\") && player.money > 30e6)\\r\\n        ns.purchaseProgram(\\\"HTTPWorm.exe\\\");\\r\\n    if (!ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\") && player.money > 250e6)\\r\\n        ns.purchaseProgram(\\\"SQLInject.exe\\\");\\r\\n}\\r\\nexport function doBuyAndSoftenAll(ns) {\\r\\n    doProgramBuys(ns);\\r\\n    for (const hostname of allHosts(ns)) {\\r\\n        softenServer(ns, hostname);\\r\\n    }\\r\\n}\\r\\nexport function stFormat(ns, ms, showms = false, showfull = false) {\\r\\n    let timeLeft = ms;\\r\\n    const hours = Math.floor(ms / (1000 * 60 * 60));\\r\\n    timeLeft -= hours * (1000 * 60 * 60);\\r\\n    const minutes = Math.floor(timeLeft / (1000 * 60));\\r\\n    timeLeft -= minutes * (1000 * 60);\\r\\n    const seconds = Math.floor(timeLeft / 1000);\\r\\n    timeLeft -= seconds * 1000;\\r\\n    const milliseconds = timeLeft;\\r\\n    if (showms) {\\r\\n        if (hours > 0 || showfull)\\r\\n            return ns.sprintf(\\\"%02d:%02d:%02d.%03d\\\", hours, minutes, seconds, milliseconds);\\r\\n        if (minutes > 0)\\r\\n            return ns.sprintf(\\\"%02d:%02d.%03d\\\", minutes, seconds, milliseconds);\\r\\n        return ns.sprintf(\\\"%02d.%03d\\\", seconds, milliseconds);\\r\\n    }\\r\\n    else {\\r\\n        if (hours > 0 || showfull)\\r\\n            return ns.sprintf(\\\"%02d:%02d:%02d\\\", hours, minutes, seconds);\\r\\n        if (minutes > 0)\\r\\n            return ns.sprintf(\\\"%02d:%02d\\\", minutes, seconds);\\r\\n        return ns.sprintf(\\\"%02d\\\", seconds);\\r\\n    }\\r\\n}\\r\\nexport function stdFormat(ns, offset = 0, showms = false) {\\r\\n    const date = new Date(new Date().getTime() + offset);\\r\\n    if (showms) {\\r\\n        const ms = ns.sprintf(\\\"%03d\\\", date.getUTCMilliseconds());\\r\\n        return date.toLocaleTimeString(\\\"it-IT\\\") + \\\".\\\" + ms;\\r\\n    }\\r\\n    else {\\r\\n        return date.toLocaleTimeString(\\\"it-IT\\\");\\r\\n    }\\r\\n}\\r\\nexport async function doBackdoors(ns) {\\r\\n    //const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"w0r1d_d43m0n\\\", \\\"b-and-a\\\", \\\"ecorp\\\", \\\"fulcrumassets\\\", \\\"fulcrumtech\\\"];\\r\\n    //const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"omnitek\\\", \\\"kuai-gong\\\", \\\"megacorp\\\"];\\r\\n    const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"w0r1d_d43m0n\\\"];\\r\\n    const hosts = mapHosts(ns);\\r\\n    for (const [hostName, trail] of Object.entries(hosts)) {\\r\\n        const server = ns.getServer(hostName);\\r\\n        if (!targetHosts.includes(hostName) ||\\r\\n            server.backdoorInstalled ||\\r\\n            server.requiredHackingSkill > ns.getHackingLevel() ||\\r\\n            !server.hasAdminRights)\\r\\n            continue;\\r\\n        ns.print(hostName);\\r\\n        for (const hostHopName of trail) {\\r\\n            ns.connect(hostHopName);\\r\\n        }\\r\\n        await ns.installBackdoor();\\r\\n        ns.connect(\\\"home\\\");\\r\\n    }\\r\\n}\\r\\nexport function cleanLogs(ns) {\\r\\n    ns.disableLog(\\\"disableLog\\\");\\r\\n    ns.disableLog(\\\"ALL\\\");\\r\\n    // ns.disableLog(\\\"sleep\\\")\\r\\n    // ns.disableLog(\\\"exec\\\")\\r\\n    // ns.disableLog(\\\"getServerMaxRam\\\")\\r\\n    // ns.disableLog(\\\"getServerSecurityLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerMinSecurityLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerMaxMoney\\\")\\r\\n    // ns.disableLog(\\\"getHackingLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerRequiredHackingLevel\\\")\\r\\n    // ns.disableLog(\\\"scan\\\")\\r\\n    // ns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n    // ns.disableLog(\\\"getServerUsedRam\\\")\\r\\n}\\r\\nexport const ALL_FACTIONS = [\\r\\n    \\\"Illuminati\\\",\\r\\n    \\\"Daedalus\\\",\\r\\n    \\\"The Covenant\\\",\\r\\n    \\\"ECorp\\\",\\r\\n    \\\"MegaCorp\\\",\\r\\n    \\\"Bachman & Associates\\\",\\r\\n    \\\"Blade Industries\\\",\\r\\n    \\\"NWO\\\",\\r\\n    \\\"Clarke Incorporated\\\",\\r\\n    \\\"OmniTek Incorporated\\\",\\r\\n    \\\"Four Sigma\\\",\\r\\n    \\\"KuaiGong International\\\",\\r\\n    \\\"Fulcrum Secret Technologies\\\",\\r\\n    \\\"BitRunners\\\",\\r\\n    \\\"The Black Hand\\\",\\r\\n    \\\"NiteSec\\\",\\r\\n    \\\"Aevum\\\",\\r\\n    \\\"Chongqing\\\",\\r\\n    \\\"Ishima\\\",\\r\\n    \\\"New Tokyo\\\",\\r\\n    \\\"Sector-12\\\",\\r\\n    \\\"Volhaven\\\",\\r\\n    \\\"Speakers for the Dead\\\",\\r\\n    \\\"The Dark Army\\\",\\r\\n    \\\"The Syndicate\\\",\\r\\n    \\\"Silhouette\\\",\\r\\n    \\\"Tetrads\\\",\\r\\n    \\\"Slum Snakes\\\",\\r\\n    \\\"Netburners\\\",\\r\\n    \\\"Tian Di Hui\\\",\\r\\n    \\\"CyberSec\\\",\\r\\n    \\\"Bladeburners\\\",\\r\\n    \\\"Church of the Machine God\\\",\\r\\n];\\r\\nexport async function writeOut(ns, data, startTime, endTime, result, startSec, startCash) {\\r\\n    if (data.writeFile !== \\\"\\\") {\\r\\n        const outstr = ns.sprintf(\\\"%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\", data.target, data.uid, data.batchId, data.realTimeStart + data.offset, data.realTimeStart + data.finish, data.operationTime, startTime, endTime, endTime - startTime, startTime - (data.realTimeStart + data.offset), endTime - (data.realTimeStart + data.finish), endTime - startTime - data.operationTime, result, startSec.toFixed(2), ns.getServerSecurityLevel(data.target).toFixed(2), ns.nFormat(startCash, \\\"($0.000a)\\\"), ns.nFormat(ns.getServerMoneyAvailable(data.target), \\\"($0.000a)\\\"));\\r\\n        while (!await ns.tryWritePort(ReservedPorts.HACK_WRITE_INFO, [data.writeFile, outstr]))\\r\\n            ;\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi91dGlsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLE1BQU0sQ0FBTixJQUFZLGFBSVg7QUFKRCxXQUFZLGFBQWE7SUFDckIsaUVBQWdCLENBQUE7SUFDaEIsaUVBQVksQ0FBQTtJQUNaLHVFQUFlLENBQUE7QUFDbkIsQ0FBQyxFQUpXLGFBQWEsS0FBYixhQUFhLFFBSXhCO0FBRUQsTUFBTSxDQUFDLE1BQU0sUUFBUSxHQUFHLHFCQUFxQixDQUFDO0FBQzlDLE1BQU0sQ0FBQyxNQUFNLE1BQU0sR0FBRyxtQkFBbUIsQ0FBQztBQUMxQyxNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUcsbUJBQW1CLENBQUM7QUFDMUMsTUFBTSxDQUFDLE1BQU0sTUFBTSxHQUFHLGNBQWMsQ0FBQztBQUVyQyxNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUcsQ0FBQyxPQUFPLEVBQUUsV0FBVyxFQUFFLFdBQVcsRUFBRSxXQUFXLEVBQUUsUUFBUSxFQUFFLFVBQVUsQ0FBQyxDQUFDO0FBRTdGLE1BQU0sVUFBVSxJQUFJLENBQUMsRUFBTSxFQUFFLEdBQVcsRUFBRSxHQUFHLElBQXlCO0lBQ2xFLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEdBQUcsR0FBRyxFQUFFLElBQUksSUFBSSxFQUFFLENBQUMsa0JBQWtCLENBQUMsT0FBTyxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDO0FBQ3hGLENBQUM7QUFFRCxNQUFNLFVBQVUsWUFBWSxDQUFDLEVBQU0sRUFBRSxRQUFnQjtJQUNqRCxJQUFJLEVBQUUsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDNUIsT0FBTztLQUNWO0lBRUQsSUFBSSxLQUFLLEdBQUcsQ0FBQyxDQUFDO0lBQ2QsSUFBSSxFQUFFLENBQUMsVUFBVSxDQUFDLGNBQWMsRUFB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\",\"filename\":\"/lib/util.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":13.25,\"server\":\"phantasy\",\"moduleSequenceNumber\":83815,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"purchaseTor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"purchaseProgram\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"connect\",\"cost\":2},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.stanek.charge(ns.args[0], ns.args[1]);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hhcmdlLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL3N0YW5lay9jaGFyZ2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUM5QixPQUFPLElBQUksRUFBRTtRQUNULE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7S0FDakQ7QUFDTCxDQUFDIn0=\",\"filename\":\"/lib/stanek/charge.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/stanek/charge.js\",\"url\":\"blob:file:///46ca7fd6-02da-4c1c-932c-c2f24434ebab\",\"moduleSequenceNumber\":99897}],\"dependents\":[],\"ramUsage\":2,\"server\":\"phantasy\",\"moduleSequenceNumber\":99897,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.charge\",\"cost\":0.4}]}}],\"serversOnNetwork\":[\"CSEC\",\"crush-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":60,\"hackDifficulty\":20,\"minDifficulty\":20,\"moneyAvailable\":181748486.75861073,\"moneyMax\":202500000,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":100,\"serverGrowth\":35,\"suppression\":0,\"activeSuppressionThreads\":[],\"suppressionIntervalID\":null,\"suppressionLastUpdateTime\":0}},\"max-hardware\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"max-hardware\",\"httpPortOpen\":false,\"ip\":\"92.8.6.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.grow(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLElBQUksR0FBdUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFFbkUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDdkIsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7UUFDeEMsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7S0FDM0MsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyJ9\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///1a36bf4c-023d-47d3-82c8-330740a1b688\",\"moduleSequenceNumber\":86746}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"max-hardware\",\"moduleSequenceNumber\":86746,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.weaken(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxJQUFJLEdBQXVCLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO0lBRW5FLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFO1FBQ3pCLGtCQUFrQixFQUFFLElBQUksQ0FBQyxlQUFlO1FBQ3hDLGtCQUFrQixFQUFFLElBQUksQ0FBQyxlQUFlO0tBQzNDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///0a8cad9f-36f7-4563-84ec-4831051b7d7d\",\"moduleSequenceNumber\":83848}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"max-hardware\",\"moduleSequenceNumber\":83848,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.hack(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLElBQUksR0FBdUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFFbkUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDdkIsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7UUFDeEMsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7S0FDM0MsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyJ9\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"max-hardware\",\"moduleSequenceNumber\":83773,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export var ReservedPorts;\\r\\n(function (ReservedPorts) {\\r\\n    ReservedPorts[ReservedPorts[\\\"HACKING_INFO\\\"] = 1] = \\\"HACKING_INFO\\\";\\r\\n    ReservedPorts[ReservedPorts[\\\"HACKNET_INFO\\\"] = 2] = \\\"HACKNET_INFO\\\";\\r\\n    ReservedPorts[ReservedPorts[\\\"HACK_WRITE_INFO\\\"] = 3] = \\\"HACK_WRITE_INFO\\\";\\r\\n})(ReservedPorts || (ReservedPorts = {}));\\r\\nexport const WEAKENJS = \\\"/lib/exec/weaken.js\\\";\\r\\nexport const GROWJS = \\\"/lib/exec/grow.js\\\";\\r\\nexport const HACKJS = \\\"/lib/exec/hack.js\\\";\\r\\nexport const UTILJS = \\\"/lib/util.js\\\";\\r\\nexport const CITIES = [\\\"Aevum\\\", \\\"Chongqing\\\", \\\"Sector-12\\\", \\\"New Tokyo\\\", \\\"Ishima\\\", \\\"Volhaven\\\"];\\r\\nexport function llog(ns, str, ...args) {\\r\\n    ns.print(ns.sprintf(\\\"%8s \\\" + str, new Date().toLocaleTimeString(\\\"it-IT\\\"), ...args));\\r\\n}\\r\\nexport function softenServer(ns, hostname) {\\r\\n    if (ns.hasRootAccess(hostname)) {\\r\\n        return;\\r\\n    }\\r\\n    let ports = 0;\\r\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n        ns.brutessh(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n        ns.ftpcrack(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n        ns.httpworm(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n        ns.relaysmtp(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n        ns.sqlinject(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ports >= ns.getServerNumPortsRequired(hostname)) {\\r\\n        ns.nuke(hostname);\\r\\n    }\\r\\n}\\r\\nexport function serverIsHackable(ns, hostname) {\\r\\n    return ns.hasRootAccess(hostname) && ns.getHackingLevel() >= ns.getServerRequiredHackingLevel(hostname);\\r\\n}\\r\\nexport function canExecuteOnServer(ns, hostname) {\\r\\n    return ns.hasRootAccess(hostname) && ns.getServerMaxRam(hostname) > 0;\\r\\n}\\r\\nexport function mapHosts(ns, hosts = {}, parents = [], current = \\\"home\\\") {\\r\\n    const newParents = parents.concat(current);\\r\\n    hosts[current] = newParents;\\r\\n    const children = ns.scan(current).filter((element) => !parents.includes(element));\\r\\n    for (const child of children) {\\r\\n        mapHosts(ns, hosts, newParents, child);\\r\\n    }\\r\\n    return hosts;\\r\\n}\\r\\nexport function allHosts(ns) {\\r\\n    return Object.keys(mapHosts(ns));\\r\\n}\\r\\nexport function doProgramBuys(ns) {\\r\\n    const player = ns.getPlayer();\\r\\n    if (!player.tor && player.money > 200e3)\\r\\n        ns.purchaseTor();\\r\\n    if (!ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\") && player.money > 500e3)\\r\\n        ns.purchaseProgram(\\\"BruteSSH.exe\\\");\\r\\n    if (!ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\") && player.money > 1500e3)\\r\\n        ns.purchaseProgram(\\\"FTPCrack.exe\\\");\\r\\n    if (!ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\") && player.money > 5e6)\\r\\n        ns.purchaseProgram(\\\"relaySMTP.exe\\\");\\r\\n    if (!ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\") && player.money > 30e6)\\r\\n        ns.purchaseProgram(\\\"HTTPWorm.exe\\\");\\r\\n    if (!ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\") && player.money > 250e6)\\r\\n        ns.purchaseProgram(\\\"SQLInject.exe\\\");\\r\\n}\\r\\nexport function doBuyAndSoftenAll(ns) {\\r\\n    doProgramBuys(ns);\\r\\n    for (const hostname of allHosts(ns)) {\\r\\n        softenServer(ns, hostname);\\r\\n    }\\r\\n}\\r\\nexport function stFormat(ns, ms, showms = false, showfull = false) {\\r\\n    let timeLeft = ms;\\r\\n    const hours = Math.floor(ms / (1000 * 60 * 60));\\r\\n    timeLeft -= hours * (1000 * 60 * 60);\\r\\n    const minutes = Math.floor(timeLeft / (1000 * 60));\\r\\n    timeLeft -= minutes * (1000 * 60);\\r\\n    const seconds = Math.floor(timeLeft / 1000);\\r\\n    timeLeft -= seconds * 1000;\\r\\n    const milliseconds = timeLeft;\\r\\n    if (showms) {\\r\\n        if (hours > 0 || showfull)\\r\\n            return ns.sprintf(\\\"%02d:%02d:%02d.%03d\\\", hours, minutes, seconds, milliseconds);\\r\\n        if (minutes > 0)\\r\\n            return ns.sprintf(\\\"%02d:%02d.%03d\\\", minutes, seconds, milliseconds);\\r\\n        return ns.sprintf(\\\"%02d.%03d\\\", seconds, milliseconds);\\r\\n    }\\r\\n    else {\\r\\n        if (hours > 0 || showfull)\\r\\n            return ns.sprintf(\\\"%02d:%02d:%02d\\\", hours, minutes, seconds);\\r\\n        if (minutes > 0)\\r\\n            return ns.sprintf(\\\"%02d:%02d\\\", minutes, seconds);\\r\\n        return ns.sprintf(\\\"%02d\\\", seconds);\\r\\n    }\\r\\n}\\r\\nexport function stdFormat(ns, offset = 0, showms = false) {\\r\\n    const date = new Date(new Date().getTime() + offset);\\r\\n    if (showms) {\\r\\n        const ms = ns.sprintf(\\\"%03d\\\", date.getUTCMilliseconds());\\r\\n        return date.toLocaleTimeString(\\\"it-IT\\\") + \\\".\\\" + ms;\\r\\n    }\\r\\n    else {\\r\\n        return date.toLocaleTimeString(\\\"it-IT\\\");\\r\\n    }\\r\\n}\\r\\nexport async function doBackdoors(ns) {\\r\\n    //const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"w0r1d_d43m0n\\\", \\\"b-and-a\\\", \\\"ecorp\\\", \\\"fulcrumassets\\\", \\\"fulcrumtech\\\"];\\r\\n    //const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"omnitek\\\", \\\"kuai-gong\\\", \\\"megacorp\\\"];\\r\\n    const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"w0r1d_d43m0n\\\"];\\r\\n    const hosts = mapHosts(ns);\\r\\n    for (const [hostName, trail] of Object.entries(hosts)) {\\r\\n        const server = ns.getServer(hostName);\\r\\n        if (!targetHosts.includes(hostName) ||\\r\\n            server.backdoorInstalled ||\\r\\n            server.requiredHackingSkill > ns.getHackingLevel() ||\\r\\n            !server.hasAdminRights)\\r\\n            continue;\\r\\n        ns.print(hostName);\\r\\n        for (const hostHopName of trail) {\\r\\n            ns.connect(hostHopName);\\r\\n        }\\r\\n        await ns.installBackdoor();\\r\\n        ns.connect(\\\"home\\\");\\r\\n    }\\r\\n}\\r\\nexport function cleanLogs(ns) {\\r\\n    ns.disableLog(\\\"disableLog\\\");\\r\\n    ns.disableLog(\\\"ALL\\\");\\r\\n    // ns.disableLog(\\\"sleep\\\")\\r\\n    // ns.disableLog(\\\"exec\\\")\\r\\n    // ns.disableLog(\\\"getServerMaxRam\\\")\\r\\n    // ns.disableLog(\\\"getServerSecurityLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerMinSecurityLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerMaxMoney\\\")\\r\\n    // ns.disableLog(\\\"getHackingLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerRequiredHackingLevel\\\")\\r\\n    // ns.disableLog(\\\"scan\\\")\\r\\n    // ns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n    // ns.disableLog(\\\"getServerUsedRam\\\")\\r\\n}\\r\\nexport const ALL_FACTIONS = [\\r\\n    \\\"Illuminati\\\",\\r\\n    \\\"Daedalus\\\",\\r\\n    \\\"The Covenant\\\",\\r\\n    \\\"ECorp\\\",\\r\\n    \\\"MegaCorp\\\",\\r\\n    \\\"Bachman & Associates\\\",\\r\\n    \\\"Blade Industries\\\",\\r\\n    \\\"NWO\\\",\\r\\n    \\\"Clarke Incorporated\\\",\\r\\n    \\\"OmniTek Incorporated\\\",\\r\\n    \\\"Four Sigma\\\",\\r\\n    \\\"KuaiGong International\\\",\\r\\n    \\\"Fulcrum Secret Technologies\\\",\\r\\n    \\\"BitRunners\\\",\\r\\n    \\\"The Black Hand\\\",\\r\\n    \\\"NiteSec\\\",\\r\\n    \\\"Aevum\\\",\\r\\n    \\\"Chongqing\\\",\\r\\n    \\\"Ishima\\\",\\r\\n    \\\"New Tokyo\\\",\\r\\n    \\\"Sector-12\\\",\\r\\n    \\\"Volhaven\\\",\\r\\n    \\\"Speakers for the Dead\\\",\\r\\n    \\\"The Dark Army\\\",\\r\\n    \\\"The Syndicate\\\",\\r\\n    \\\"Silhouette\\\",\\r\\n    \\\"Tetrads\\\",\\r\\n    \\\"Slum Snakes\\\",\\r\\n    \\\"Netburners\\\",\\r\\n    \\\"Tian Di Hui\\\",\\r\\n    \\\"CyberSec\\\",\\r\\n    \\\"Bladeburners\\\",\\r\\n    \\\"Church of the Machine God\\\",\\r\\n];\\r\\nexport async function writeOut(ns, data, startTime, endTime, result, startSec, startCash) {\\r\\n    if (data.writeFile !== \\\"\\\") {\\r\\n        const outstr = ns.sprintf(\\\"%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\", data.target, data.uid, data.batchId, data.realTimeStart + data.offset, data.realTimeStart + data.finish, data.operationTime, startTime, endTime, endTime - startTime, startTime - (data.realTimeStart + data.offset), endTime - (data.realTimeStart + data.finish), endTime - startTime - data.operationTime, result, startSec.toFixed(2), ns.getServerSecurityLevel(data.target).toFixed(2), ns.nFormat(startCash, \\\"($0.000a)\\\"), ns.nFormat(ns.getServerMoneyAvailable(data.target), \\\"($0.000a)\\\"));\\r\\n        while (!await ns.tryWritePort(ReservedPorts.HACK_WRITE_INFO, [data.writeFile, outstr]))\\r\\n            ;\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi91dGlsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLE1BQU0sQ0FBTixJQUFZLGFBSVg7QUFKRCxXQUFZLGFBQWE7SUFDckIsaUVBQWdCLENBQUE7SUFDaEIsaUVBQVksQ0FBQTtJQUNaLHVFQUFlLENBQUE7QUFDbkIsQ0FBQyxFQUpXLGFBQWEsS0FBYixhQUFhLFFBSXhCO0FBRUQsTUFBTSxDQUFDLE1BQU0sUUFBUSxHQUFHLHFCQUFxQixDQUFDO0FBQzlDLE1BQU0sQ0FBQyxNQUFNLE1BQU0sR0FBRyxtQkFBbUIsQ0FBQztBQUMxQyxNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUcsbUJBQW1CLENBQUM7QUFDMUMsTUFBTSxDQUFDLE1BQU0sTUFBTSxHQUFHLGNBQWMsQ0FBQztBQUVyQyxNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUcsQ0FBQyxPQUFPLEVBQUUsV0FBVyxFQUFFLFdBQVcsRUFBRSxXQUFXLEVBQUUsUUFBUSxFQUFFLFVBQVUsQ0FBQyxDQUFDO0FBRTdGLE1BQU0sVUFBVSxJQUFJLENBQUMsRUFBTSxFQUFFLEdBQVcsRUFBRSxHQUFHLElBQXlCO0lBQ2xFLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEdBQUcsR0FBRyxFQUFFLElBQUksSUFBSSxFQUFFLENBQUMsa0JBQWtCLENBQUMsT0FBTyxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDO0FBQ3hGLENBQUM7QUFFRCxNQUFNLFVBQVUsWUFBWSxDQUFDLEVBQU0sRUFBRSxRQUFnQjtJQUNqRCxJQUFJLEVBQUUsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDNUIsT0FBTztLQUNWO0lBRUQsSUFBSSxLQUFLLEdBQUcsQ0FBQyxDQUFDO0lBQ2QsSUFBSSxFQUFFLENBQUMsVUFBVSxDQUFDLGNBQWMsRUFB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\",\"filename\":\"/lib/util.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":13.25,\"server\":\"max-hardware\",\"moduleSequenceNumber\":83775,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"purchaseTor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"purchaseProgram\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"connect\",\"cost\":2},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.stanek.charge(ns.args[0], ns.args[1]);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hhcmdlLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL3N0YW5lay9jaGFyZ2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUM5QixPQUFPLElBQUksRUFBRTtRQUNULE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7S0FDakQ7QUFDTCxDQUFDIn0=\",\"filename\":\"/lib/stanek/charge.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/stanek/charge.js\",\"url\":\"blob:file:///aa9cf935-e106-4686-8bd2-df6bd14c215e\",\"moduleSequenceNumber\":99858}],\"dependents\":[],\"ramUsage\":2,\"server\":\"max-hardware\",\"moduleSequenceNumber\":99858,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.charge\",\"cost\":0.4}]}}],\"serversOnNetwork\":[\"foodnstuff\",\"silver-helix\",\"omega-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":45,\"hackDifficulty\":15,\"minDifficulty\":15,\"moneyAvailable\":84375000,\"moneyMax\":84375000,\"numOpenPortsRequired\":1,\"openPortCount\":2,\"requiredHackingSkill\":80,\"serverGrowth\":30,\"suppression\":0,\"activeSuppressionThreads\":[],\"suppressionIntervalID\":null,\"suppressionLastUpdateTime\":0}},\"omega-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-441930.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,0,0],[0,1,0,1],[0,0,0,0],[0,0,0,1],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,1],[0,1,1,0]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omega-net\",\"httpPortOpen\":false,\"ip\":\"16.9.5.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.grow(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLElBQUksR0FBdUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFFbkUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDdkIsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7UUFDeEMsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7S0FDM0MsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyJ9\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///c8ea9993-db42-4981-84fd-5a6e919b2a79\",\"moduleSequenceNumber\":86743}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omega-net\",\"moduleSequenceNumber\":86743,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.weaken(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxJQUFJLEdBQXVCLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO0lBRW5FLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFO1FBQ3pCLGtCQUFrQixFQUFFLElBQUksQ0FBQyxlQUFlO1FBQ3hDLGtCQUFrQixFQUFFLElBQUksQ0FBQyxlQUFlO0tBQzNDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///ad36e2f4-5005-4f3c-93c8-1aca1b5e1ca6\",\"moduleSequenceNumber\":83847}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omega-net\",\"moduleSequenceNumber\":83847,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.hack(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLElBQUksR0FBdUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFFbkUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDdkIsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7UUFDeEMsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7S0FDM0MsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyJ9\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"omega-net\",\"moduleSequenceNumber\":83781,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export var ReservedPorts;\\r\\n(function (ReservedPorts) {\\r\\n    ReservedPorts[ReservedPorts[\\\"HACKING_INFO\\\"] = 1] = \\\"HACKING_INFO\\\";\\r\\n    ReservedPorts[ReservedPorts[\\\"HACKNET_INFO\\\"] = 2] = \\\"HACKNET_INFO\\\";\\r\\n    ReservedPorts[ReservedPorts[\\\"HACK_WRITE_INFO\\\"] = 3] = \\\"HACK_WRITE_INFO\\\";\\r\\n})(ReservedPorts || (ReservedPorts = {}));\\r\\nexport const WEAKENJS = \\\"/lib/exec/weaken.js\\\";\\r\\nexport const GROWJS = \\\"/lib/exec/grow.js\\\";\\r\\nexport const HACKJS = \\\"/lib/exec/hack.js\\\";\\r\\nexport const UTILJS = \\\"/lib/util.js\\\";\\r\\nexport const CITIES = [\\\"Aevum\\\", \\\"Chongqing\\\", \\\"Sector-12\\\", \\\"New Tokyo\\\", \\\"Ishima\\\", \\\"Volhaven\\\"];\\r\\nexport function llog(ns, str, ...args) {\\r\\n    ns.print(ns.sprintf(\\\"%8s \\\" + str, new Date().toLocaleTimeString(\\\"it-IT\\\"), ...args));\\r\\n}\\r\\nexport function softenServer(ns, hostname) {\\r\\n    if (ns.hasRootAccess(hostname)) {\\r\\n        return;\\r\\n    }\\r\\n    let ports = 0;\\r\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n        ns.brutessh(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n        ns.ftpcrack(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n        ns.httpworm(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n        ns.relaysmtp(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n        ns.sqlinject(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ports >= ns.getServerNumPortsRequired(hostname)) {\\r\\n        ns.nuke(hostname);\\r\\n    }\\r\\n}\\r\\nexport function serverIsHackable(ns, hostname) {\\r\\n    return ns.hasRootAccess(hostname) && ns.getHackingLevel() >= ns.getServerRequiredHackingLevel(hostname);\\r\\n}\\r\\nexport function canExecuteOnServer(ns, hostname) {\\r\\n    return ns.hasRootAccess(hostname) && ns.getServerMaxRam(hostname) > 0;\\r\\n}\\r\\nexport function mapHosts(ns, hosts = {}, parents = [], current = \\\"home\\\") {\\r\\n    const newParents = parents.concat(current);\\r\\n    hosts[current] = newParents;\\r\\n    const children = ns.scan(current).filter((element) => !parents.includes(element));\\r\\n    for (const child of children) {\\r\\n        mapHosts(ns, hosts, newParents, child);\\r\\n    }\\r\\n    return hosts;\\r\\n}\\r\\nexport function allHosts(ns) {\\r\\n    return Object.keys(mapHosts(ns));\\r\\n}\\r\\nexport function doProgramBuys(ns) {\\r\\n    const player = ns.getPlayer();\\r\\n    if (!player.tor && player.money > 200e3)\\r\\n        ns.purchaseTor();\\r\\n    if (!ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\") && player.money > 500e3)\\r\\n        ns.purchaseProgram(\\\"BruteSSH.exe\\\");\\r\\n    if (!ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\") && player.money > 1500e3)\\r\\n        ns.purchaseProgram(\\\"FTPCrack.exe\\\");\\r\\n    if (!ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\") && player.money > 5e6)\\r\\n        ns.purchaseProgram(\\\"relaySMTP.exe\\\");\\r\\n    if (!ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\") && player.money > 30e6)\\r\\n        ns.purchaseProgram(\\\"HTTPWorm.exe\\\");\\r\\n    if (!ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\") && player.money > 250e6)\\r\\n        ns.purchaseProgram(\\\"SQLInject.exe\\\");\\r\\n}\\r\\nexport function doBuyAndSoftenAll(ns) {\\r\\n    doProgramBuys(ns);\\r\\n    for (const hostname of allHosts(ns)) {\\r\\n        softenServer(ns, hostname);\\r\\n    }\\r\\n}\\r\\nexport function stFormat(ns, ms, showms = false, showfull = false) {\\r\\n    let timeLeft = ms;\\r\\n    const hours = Math.floor(ms / (1000 * 60 * 60));\\r\\n    timeLeft -= hours * (1000 * 60 * 60);\\r\\n    const minutes = Math.floor(timeLeft / (1000 * 60));\\r\\n    timeLeft -= minutes * (1000 * 60);\\r\\n    const seconds = Math.floor(timeLeft / 1000);\\r\\n    timeLeft -= seconds * 1000;\\r\\n    const milliseconds = timeLeft;\\r\\n    if (showms) {\\r\\n        if (hours > 0 || showfull)\\r\\n            return ns.sprintf(\\\"%02d:%02d:%02d.%03d\\\", hours, minutes, seconds, milliseconds);\\r\\n        if (minutes > 0)\\r\\n            return ns.sprintf(\\\"%02d:%02d.%03d\\\", minutes, seconds, milliseconds);\\r\\n        return ns.sprintf(\\\"%02d.%03d\\\", seconds, milliseconds);\\r\\n    }\\r\\n    else {\\r\\n        if (hours > 0 || showfull)\\r\\n            return ns.sprintf(\\\"%02d:%02d:%02d\\\", hours, minutes, seconds);\\r\\n        if (minutes > 0)\\r\\n            return ns.sprintf(\\\"%02d:%02d\\\", minutes, seconds);\\r\\n        return ns.sprintf(\\\"%02d\\\", seconds);\\r\\n    }\\r\\n}\\r\\nexport function stdFormat(ns, offset = 0, showms = false) {\\r\\n    const date = new Date(new Date().getTime() + offset);\\r\\n    if (showms) {\\r\\n        const ms = ns.sprintf(\\\"%03d\\\", date.getUTCMilliseconds());\\r\\n        return date.toLocaleTimeString(\\\"it-IT\\\") + \\\".\\\" + ms;\\r\\n    }\\r\\n    else {\\r\\n        return date.toLocaleTimeString(\\\"it-IT\\\");\\r\\n    }\\r\\n}\\r\\nexport async function doBackdoors(ns) {\\r\\n    //const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"w0r1d_d43m0n\\\", \\\"b-and-a\\\", \\\"ecorp\\\", \\\"fulcrumassets\\\", \\\"fulcrumtech\\\"];\\r\\n    //const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"omnitek\\\", \\\"kuai-gong\\\", \\\"megacorp\\\"];\\r\\n    const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"w0r1d_d43m0n\\\"];\\r\\n    const hosts = mapHosts(ns);\\r\\n    for (const [hostName, trail] of Object.entries(hosts)) {\\r\\n        const server = ns.getServer(hostName);\\r\\n        if (!targetHosts.includes(hostName) ||\\r\\n            server.backdoorInstalled ||\\r\\n            server.requiredHackingSkill > ns.getHackingLevel() ||\\r\\n            !server.hasAdminRights)\\r\\n            continue;\\r\\n        ns.print(hostName);\\r\\n        for (const hostHopName of trail) {\\r\\n            ns.connect(hostHopName);\\r\\n        }\\r\\n        await ns.installBackdoor();\\r\\n        ns.connect(\\\"home\\\");\\r\\n    }\\r\\n}\\r\\nexport function cleanLogs(ns) {\\r\\n    ns.disableLog(\\\"disableLog\\\");\\r\\n    ns.disableLog(\\\"ALL\\\");\\r\\n    // ns.disableLog(\\\"sleep\\\")\\r\\n    // ns.disableLog(\\\"exec\\\")\\r\\n    // ns.disableLog(\\\"getServerMaxRam\\\")\\r\\n    // ns.disableLog(\\\"getServerSecurityLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerMinSecurityLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerMaxMoney\\\")\\r\\n    // ns.disableLog(\\\"getHackingLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerRequiredHackingLevel\\\")\\r\\n    // ns.disableLog(\\\"scan\\\")\\r\\n    // ns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n    // ns.disableLog(\\\"getServerUsedRam\\\")\\r\\n}\\r\\nexport const ALL_FACTIONS = [\\r\\n    \\\"Illuminati\\\",\\r\\n    \\\"Daedalus\\\",\\r\\n    \\\"The Covenant\\\",\\r\\n    \\\"ECorp\\\",\\r\\n    \\\"MegaCorp\\\",\\r\\n    \\\"Bachman & Associates\\\",\\r\\n    \\\"Blade Industries\\\",\\r\\n    \\\"NWO\\\",\\r\\n    \\\"Clarke Incorporated\\\",\\r\\n    \\\"OmniTek Incorporated\\\",\\r\\n    \\\"Four Sigma\\\",\\r\\n    \\\"KuaiGong International\\\",\\r\\n    \\\"Fulcrum Secret Technologies\\\",\\r\\n    \\\"BitRunners\\\",\\r\\n    \\\"The Black Hand\\\",\\r\\n    \\\"NiteSec\\\",\\r\\n    \\\"Aevum\\\",\\r\\n    \\\"Chongqing\\\",\\r\\n    \\\"Ishima\\\",\\r\\n    \\\"New Tokyo\\\",\\r\\n    \\\"Sector-12\\\",\\r\\n    \\\"Volhaven\\\",\\r\\n    \\\"Speakers for the Dead\\\",\\r\\n    \\\"The Dark Army\\\",\\r\\n    \\\"The Syndicate\\\",\\r\\n    \\\"Silhouette\\\",\\r\\n    \\\"Tetrads\\\",\\r\\n    \\\"Slum Snakes\\\",\\r\\n    \\\"Netburners\\\",\\r\\n    \\\"Tian Di Hui\\\",\\r\\n    \\\"CyberSec\\\",\\r\\n    \\\"Bladeburners\\\",\\r\\n    \\\"Church of the Machine God\\\",\\r\\n];\\r\\nexport async function writeOut(ns, data, startTime, endTime, result, startSec, startCash) {\\r\\n    if (data.writeFile !== \\\"\\\") {\\r\\n        const outstr = ns.sprintf(\\\"%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\", data.target, data.uid, data.batchId, data.realTimeStart + data.offset, data.realTimeStart + data.finish, data.operationTime, startTime, endTime, endTime - startTime, startTime - (data.realTimeStart + data.offset), endTime - (data.realTimeStart + data.finish), endTime - startTime - data.operationTime, result, startSec.toFixed(2), ns.getServerSecurityLevel(data.target).toFixed(2), ns.nFormat(startCash, \\\"($0.000a)\\\"), ns.nFormat(ns.getServerMoneyAvailable(data.target), \\\"($0.000a)\\\"));\\r\\n        while (!await ns.tryWritePort(ReservedPorts.HACK_WRITE_INFO, [data.writeFile, outstr]))\\r\\n            ;\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi91dGlsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLE1BQU0sQ0FBTixJQUFZLGFBSVg7QUFKRCxXQUFZLGFBQWE7SUFDckIsaUVBQWdCLENBQUE7SUFDaEIsaUVBQVksQ0FBQTtJQUNaLHVFQUFlLENBQUE7QUFDbkIsQ0FBQyxFQUpXLGFBQWEsS0FBYixhQUFhLFFBSXhCO0FBRUQsTUFBTSxDQUFDLE1BQU0sUUFBUSxHQUFHLHFCQUFxQixDQUFDO0FBQzlDLE1BQU0sQ0FBQyxNQUFNLE1BQU0sR0FBRyxtQkFBbUIsQ0FBQztBQUMxQyxNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUcsbUJBQW1CLENBQUM7QUFDMUMsTUFBTSxDQUFDLE1BQU0sTUFBTSxHQUFHLGNBQWMsQ0FBQztBQUVyQyxNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUcsQ0FBQyxPQUFPLEVBQUUsV0FBVyxFQUFFLFdBQVcsRUFBRSxXQUFXLEVBQUUsUUFBUSxFQUFFLFVBQVUsQ0FBQyxDQUFDO0FBRTdGLE1BQU0sVUFBVSxJQUFJLENBQUMsRUFBTSxFQUFFLEdBQVcsRUFBRSxHQUFHLElBQXlCO0lBQ2xFLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEdBQUcsR0FBRyxFQUFFLElBQUksSUFBSSxFQUFFLENBQUMsa0JBQWtCLENBQUMsT0FBTyxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDO0FBQ3hGLENBQUM7QUFFRCxNQUFNLFVBQVUsWUFBWSxDQUFDLEVBQU0sRUFBRSxRQUFnQjtJQUNqRCxJQUFJLEVBQUUsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDNUIsT0FBTztLQUNWO0lBRUQsSUFBSSxLQUFLLEdBQUcsQ0FBQyxDQUFDO0lBQ2QsSUFBSSxFQUFFLENBQUMsVUFBVSxDQUFDLGNBQWMsRUFB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\",\"filename\":\"/lib/util.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":13.25,\"server\":\"omega-net\",\"moduleSequenceNumber\":83783,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"purchaseTor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"purchaseProgram\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"connect\",\"cost\":2},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.stanek.charge(ns.args[0], ns.args[1]);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hhcmdlLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL3N0YW5lay9jaGFyZ2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUM5QixPQUFPLElBQUksRUFBRTtRQUNULE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7S0FDakQ7QUFDTCxDQUFDIn0=\",\"filename\":\"/lib/stanek/charge.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/stanek/charge.js\",\"url\":\"blob:file:///712341ab-2e31-438d-99a1-043b38054743\",\"moduleSequenceNumber\":99883}],\"dependents\":[],\"ramUsage\":2,\"server\":\"omega-net\",\"moduleSequenceNumber\":99883,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.charge\",\"cost\":0.4}]}}],\"serversOnNetwork\":[\"max-hardware\",\"comptek\",\"johnson-ortho\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":84,\"hackDifficulty\":84,\"minDifficulty\":28,\"moneyAvailable\":49648077.75,\"moneyMax\":558540874.6875,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":192,\"serverGrowth\":33,\"suppression\":0,\"activeSuppressionThreads\":[],\"suppressionIntervalID\":null,\"suppressionLastUpdateTime\":0}},\"crush-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"crush-fitness\",\"httpPortOpen\":false,\"ip\":\"18.7.8.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"phantasy\",\"summit-uni\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":132,\"hackDifficulty\":132,\"minDifficulty\":44,\"moneyAvailable\":35729661,\"moneyMax\":401958686.25,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":239,\"serverGrowth\":33,\"suppression\":0,\"activeSuppressionThreads\":[],\"suppressionIntervalID\":null,\"suppressionLastUpdateTime\":0}},\"iron-gym\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"iron-gym\",\"httpPortOpen\":false,\"ip\":\"34.0.9.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.grow(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLElBQUksR0FBdUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFFbkUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDdkIsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7UUFDeEMsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7S0FDM0MsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyJ9\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"iron-gym\",\"moduleSequenceNumber\":83817,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.weaken(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxJQUFJLEdBQXVCLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO0lBRW5FLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFO1FBQ3pCLGtCQUFrQixFQUFFLElBQUksQ0FBQyxlQUFlO1FBQ3hDLGtCQUFrQixFQUFFLElBQUksQ0FBQyxlQUFlO0tBQzNDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///6cce1874-ed9e-43c8-a15f-f7b751d767e5\",\"moduleSequenceNumber\":83842}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"iron-gym\",\"moduleSequenceNumber\":83842,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.hack(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLElBQUksR0FBdUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFFbkUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDdkIsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7UUFDeEMsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7S0FDM0MsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyJ9\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"iron-gym\",\"moduleSequenceNumber\":83821,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export var ReservedPorts;\\r\\n(function (ReservedPorts) {\\r\\n    ReservedPorts[ReservedPorts[\\\"HACKING_INFO\\\"] = 1] = \\\"HACKING_INFO\\\";\\r\\n    ReservedPorts[ReservedPorts[\\\"HACKNET_INFO\\\"] = 2] = \\\"HACKNET_INFO\\\";\\r\\n    ReservedPorts[ReservedPorts[\\\"HACK_WRITE_INFO\\\"] = 3] = \\\"HACK_WRITE_INFO\\\";\\r\\n})(ReservedPorts || (ReservedPorts = {}));\\r\\nexport const WEAKENJS = \\\"/lib/exec/weaken.js\\\";\\r\\nexport const GROWJS = \\\"/lib/exec/grow.js\\\";\\r\\nexport const HACKJS = \\\"/lib/exec/hack.js\\\";\\r\\nexport const UTILJS = \\\"/lib/util.js\\\";\\r\\nexport const CITIES = [\\\"Aevum\\\", \\\"Chongqing\\\", \\\"Sector-12\\\", \\\"New Tokyo\\\", \\\"Ishima\\\", \\\"Volhaven\\\"];\\r\\nexport function llog(ns, str, ...args) {\\r\\n    ns.print(ns.sprintf(\\\"%8s \\\" + str, new Date().toLocaleTimeString(\\\"it-IT\\\"), ...args));\\r\\n}\\r\\nexport function softenServer(ns, hostname) {\\r\\n    if (ns.hasRootAccess(hostname)) {\\r\\n        return;\\r\\n    }\\r\\n    let ports = 0;\\r\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n        ns.brutessh(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n        ns.ftpcrack(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n        ns.httpworm(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n        ns.relaysmtp(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n        ns.sqlinject(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ports >= ns.getServerNumPortsRequired(hostname)) {\\r\\n        ns.nuke(hostname);\\r\\n    }\\r\\n}\\r\\nexport function serverIsHackable(ns, hostname) {\\r\\n    return ns.hasRootAccess(hostname) && ns.getHackingLevel() >= ns.getServerRequiredHackingLevel(hostname);\\r\\n}\\r\\nexport function canExecuteOnServer(ns, hostname) {\\r\\n    return ns.hasRootAccess(hostname) && ns.getServerMaxRam(hostname) > 0;\\r\\n}\\r\\nexport function mapHosts(ns, hosts = {}, parents = [], current = \\\"home\\\") {\\r\\n    const newParents = parents.concat(current);\\r\\n    hosts[current] = newParents;\\r\\n    const children = ns.scan(current).filter((element) => !parents.includes(element));\\r\\n    for (const child of children) {\\r\\n        mapHosts(ns, hosts, newParents, child);\\r\\n    }\\r\\n    return hosts;\\r\\n}\\r\\nexport function allHosts(ns) {\\r\\n    return Object.keys(mapHosts(ns));\\r\\n}\\r\\nexport function doProgramBuys(ns) {\\r\\n    const player = ns.getPlayer();\\r\\n    if (!player.tor && player.money > 200e3)\\r\\n        ns.purchaseTor();\\r\\n    if (!ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\") && player.money > 500e3)\\r\\n        ns.purchaseProgram(\\\"BruteSSH.exe\\\");\\r\\n    if (!ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\") && player.money > 1500e3)\\r\\n        ns.purchaseProgram(\\\"FTPCrack.exe\\\");\\r\\n    if (!ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\") && player.money > 5e6)\\r\\n        ns.purchaseProgram(\\\"relaySMTP.exe\\\");\\r\\n    if (!ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\") && player.money > 30e6)\\r\\n        ns.purchaseProgram(\\\"HTTPWorm.exe\\\");\\r\\n    if (!ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\") && player.money > 250e6)\\r\\n        ns.purchaseProgram(\\\"SQLInject.exe\\\");\\r\\n}\\r\\nexport function doBuyAndSoftenAll(ns) {\\r\\n    doProgramBuys(ns);\\r\\n    for (const hostname of allHosts(ns)) {\\r\\n        softenServer(ns, hostname);\\r\\n    }\\r\\n}\\r\\nexport function stFormat(ns, ms, showms = false, showfull = false) {\\r\\n    let timeLeft = ms;\\r\\n    const hours = Math.floor(ms / (1000 * 60 * 60));\\r\\n    timeLeft -= hours * (1000 * 60 * 60);\\r\\n    const minutes = Math.floor(timeLeft / (1000 * 60));\\r\\n    timeLeft -= minutes * (1000 * 60);\\r\\n    const seconds = Math.floor(timeLeft / 1000);\\r\\n    timeLeft -= seconds * 1000;\\r\\n    const milliseconds = timeLeft;\\r\\n    if (showms) {\\r\\n        if (hours > 0 || showfull)\\r\\n            return ns.sprintf(\\\"%02d:%02d:%02d.%03d\\\", hours, minutes, seconds, milliseconds);\\r\\n        if (minutes > 0)\\r\\n            return ns.sprintf(\\\"%02d:%02d.%03d\\\", minutes, seconds, milliseconds);\\r\\n        return ns.sprintf(\\\"%02d.%03d\\\", seconds, milliseconds);\\r\\n    }\\r\\n    else {\\r\\n        if (hours > 0 || showfull)\\r\\n            return ns.sprintf(\\\"%02d:%02d:%02d\\\", hours, minutes, seconds);\\r\\n        if (minutes > 0)\\r\\n            return ns.sprintf(\\\"%02d:%02d\\\", minutes, seconds);\\r\\n        return ns.sprintf(\\\"%02d\\\", seconds);\\r\\n    }\\r\\n}\\r\\nexport function stdFormat(ns, offset = 0, showms = false) {\\r\\n    const date = new Date(new Date().getTime() + offset);\\r\\n    if (showms) {\\r\\n        const ms = ns.sprintf(\\\"%03d\\\", date.getUTCMilliseconds());\\r\\n        return date.toLocaleTimeString(\\\"it-IT\\\") + \\\".\\\" + ms;\\r\\n    }\\r\\n    else {\\r\\n        return date.toLocaleTimeString(\\\"it-IT\\\");\\r\\n    }\\r\\n}\\r\\nexport async function doBackdoors(ns) {\\r\\n    //const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"w0r1d_d43m0n\\\", \\\"b-and-a\\\", \\\"ecorp\\\", \\\"fulcrumassets\\\", \\\"fulcrumtech\\\"];\\r\\n    //const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"omnitek\\\", \\\"kuai-gong\\\", \\\"megacorp\\\"];\\r\\n    const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"w0r1d_d43m0n\\\"];\\r\\n    const hosts = mapHosts(ns);\\r\\n    for (const [hostName, trail] of Object.entries(hosts)) {\\r\\n        const server = ns.getServer(hostName);\\r\\n        if (!targetHosts.includes(hostName) ||\\r\\n            server.backdoorInstalled ||\\r\\n            server.requiredHackingSkill > ns.getHackingLevel() ||\\r\\n            !server.hasAdminRights)\\r\\n            continue;\\r\\n        ns.print(hostName);\\r\\n        for (const hostHopName of trail) {\\r\\n            ns.connect(hostHopName);\\r\\n        }\\r\\n        await ns.installBackdoor();\\r\\n        ns.connect(\\\"home\\\");\\r\\n    }\\r\\n}\\r\\nexport function cleanLogs(ns) {\\r\\n    ns.disableLog(\\\"disableLog\\\");\\r\\n    ns.disableLog(\\\"ALL\\\");\\r\\n    // ns.disableLog(\\\"sleep\\\")\\r\\n    // ns.disableLog(\\\"exec\\\")\\r\\n    // ns.disableLog(\\\"getServerMaxRam\\\")\\r\\n    // ns.disableLog(\\\"getServerSecurityLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerMinSecurityLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerMaxMoney\\\")\\r\\n    // ns.disableLog(\\\"getHackingLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerRequiredHackingLevel\\\")\\r\\n    // ns.disableLog(\\\"scan\\\")\\r\\n    // ns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n    // ns.disableLog(\\\"getServerUsedRam\\\")\\r\\n}\\r\\nexport const ALL_FACTIONS = [\\r\\n    \\\"Illuminati\\\",\\r\\n    \\\"Daedalus\\\",\\r\\n    \\\"The Covenant\\\",\\r\\n    \\\"ECorp\\\",\\r\\n    \\\"MegaCorp\\\",\\r\\n    \\\"Bachman & Associates\\\",\\r\\n    \\\"Blade Industries\\\",\\r\\n    \\\"NWO\\\",\\r\\n    \\\"Clarke Incorporated\\\",\\r\\n    \\\"OmniTek Incorporated\\\",\\r\\n    \\\"Four Sigma\\\",\\r\\n    \\\"KuaiGong International\\\",\\r\\n    \\\"Fulcrum Secret Technologies\\\",\\r\\n    \\\"BitRunners\\\",\\r\\n    \\\"The Black Hand\\\",\\r\\n    \\\"NiteSec\\\",\\r\\n    \\\"Aevum\\\",\\r\\n    \\\"Chongqing\\\",\\r\\n    \\\"Ishima\\\",\\r\\n    \\\"New Tokyo\\\",\\r\\n    \\\"Sector-12\\\",\\r\\n    \\\"Volhaven\\\",\\r\\n    \\\"Speakers for the Dead\\\",\\r\\n    \\\"The Dark Army\\\",\\r\\n    \\\"The Syndicate\\\",\\r\\n    \\\"Silhouette\\\",\\r\\n    \\\"Tetrads\\\",\\r\\n    \\\"Slum Snakes\\\",\\r\\n    \\\"Netburners\\\",\\r\\n    \\\"Tian Di Hui\\\",\\r\\n    \\\"CyberSec\\\",\\r\\n    \\\"Bladeburners\\\",\\r\\n    \\\"Church of the Machine God\\\",\\r\\n];\\r\\nexport async function writeOut(ns, data, startTime, endTime, result, startSec, startCash) {\\r\\n    if (data.writeFile !== \\\"\\\") {\\r\\n        const outstr = ns.sprintf(\\\"%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\", data.target, data.uid, data.batchId, data.realTimeStart + data.offset, data.realTimeStart + data.finish, data.operationTime, startTime, endTime, endTime - startTime, startTime - (data.realTimeStart + data.offset), endTime - (data.realTimeStart + data.finish), endTime - startTime - data.operationTime, result, startSec.toFixed(2), ns.getServerSecurityLevel(data.target).toFixed(2), ns.nFormat(startCash, \\\"($0.000a)\\\"), ns.nFormat(ns.getServerMoneyAvailable(data.target), \\\"($0.000a)\\\"));\\r\\n        while (!await ns.tryWritePort(ReservedPorts.HACK_WRITE_INFO, [data.writeFile, outstr]))\\r\\n            ;\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi91dGlsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLE1BQU0sQ0FBTixJQUFZLGFBSVg7QUFKRCxXQUFZLGFBQWE7SUFDckIsaUVBQWdCLENBQUE7SUFDaEIsaUVBQVksQ0FBQTtJQUNaLHVFQUFlLENBQUE7QUFDbkIsQ0FBQyxFQUpXLGFBQWEsS0FBYixhQUFhLFFBSXhCO0FBRUQsTUFBTSxDQUFDLE1BQU0sUUFBUSxHQUFHLHFCQUFxQixDQUFDO0FBQzlDLE1BQU0sQ0FBQyxNQUFNLE1BQU0sR0FBRyxtQkFBbUIsQ0FBQztBQUMxQyxNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUcsbUJBQW1CLENBQUM7QUFDMUMsTUFBTSxDQUFDLE1BQU0sTUFBTSxHQUFHLGNBQWMsQ0FBQztBQUVyQyxNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUcsQ0FBQyxPQUFPLEVBQUUsV0FBVyxFQUFFLFdBQVcsRUFBRSxXQUFXLEVBQUUsUUFBUSxFQUFFLFVBQVUsQ0FBQyxDQUFDO0FBRTdGLE1BQU0sVUFBVSxJQUFJLENBQUMsRUFBTSxFQUFFLEdBQVcsRUFBRSxHQUFHLElBQXlCO0lBQ2xFLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEdBQUcsR0FBRyxFQUFFLElBQUksSUFBSSxFQUFFLENBQUMsa0JBQWtCLENBQUMsT0FBTyxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDO0FBQ3hGLENBQUM7QUFFRCxNQUFNLFVBQVUsWUFBWSxDQUFDLEVBQU0sRUFBRSxRQUFnQjtJQUNqRCxJQUFJLEVBQUUsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDNUIsT0FBTztLQUNWO0lBRUQsSUFBSSxLQUFLLEdBQUcsQ0FBQyxDQUFDO0lBQ2QsSUFBSSxFQUFFLENBQUMsVUFBVSxDQUFDLGNBQWMsRUFB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\",\"filename\":\"/lib/util.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":13.25,\"server\":\"iron-gym\",\"moduleSequenceNumber\":83823,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"purchaseTor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"purchaseProgram\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"connect\",\"cost\":2},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.stanek.charge(ns.args[0], ns.args[1]);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hhcmdlLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL3N0YW5lay9jaGFyZ2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUM5QixPQUFPLElBQUksRUFBRTtRQUNULE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7S0FDakQ7QUFDTCxDQUFDIn0=\",\"filename\":\"/lib/stanek/charge.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/stanek/charge.js\",\"url\":\"blob:file:///fe610290-431b-4c6b-a1d5-2d151c82b0dd\",\"moduleSequenceNumber\":99900}],\"dependents\":[],\"ramUsage\":2,\"server\":\"iron-gym\",\"moduleSequenceNumber\":99900,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.charge\",\"cost\":0.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":90,\"hackDifficulty\":90,\"minDifficulty\":30,\"moneyAvailable\":15000000,\"moneyMax\":168750000,\"numOpenPortsRequired\":1,\"openPortCount\":2,\"requiredHackingSkill\":100,\"serverGrowth\":20,\"suppression\":0,\"activeSuppressionThreads\":[],\"suppressionIntervalID\":null,\"suppressionLastUpdateTime\":0}},\"millenium-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":false,\"ip\":\"8.4.8.5\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"ramUsed\":204,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"script\\\":\\\"/lib/exec/hack.js\\\",\\\"host\\\":\\\"millenium-fitness\\\",\\\"numThreads\\\":120,\\\"target\\\":\\\"phantasy\\\",\\\"hackLevelTiming\\\":13.499605144053142,\\\"hackLevelEffect\\\":204,\\\"batchId\\\":21,\\\"offset\\\":33600,\\\"operationTime\\\":142113,\\\"finish\\\":175713,\\\"realTimeStart\\\":1647907321842,\\\"uid\\\":\\\"021-0H-millenium-fitness\\\",\\\"writeFile\\\":\\\"\\\"}\"],\"dataMap\":{},\"filename\":\"/lib/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":37.209999999999994,\"pid\":1340,\"ramUsage\":1.7,\"server\":\"millenium-fitness\",\"threads\":120,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.grow(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLElBQUksR0FBdUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFFbkUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDdkIsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7UUFDeEMsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7S0FDM0MsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyJ9\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///1c6fe129-4455-4ad1-aea5-fb74034adcdc\",\"moduleSequenceNumber\":84582}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":84582,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.weaken(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxJQUFJLEdBQXVCLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO0lBRW5FLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFO1FBQ3pCLGtCQUFrQixFQUFFLElBQUksQ0FBQyxlQUFlO1FBQ3hDLGtCQUFrQixFQUFFLElBQUksQ0FBQyxlQUFlO0tBQzNDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///8d58cbdf-34b7-4a23-a239-09094b97ce44\",\"moduleSequenceNumber\":85603}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":85603,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.hack(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLElBQUksR0FBdUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFFbkUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDdkIsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7UUFDeEMsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7S0FDM0MsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyJ9\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///1dc3d136-43e6-4625-954a-81f8db6a24e5\",\"moduleSequenceNumber\":103935}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":103935,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export var ReservedPorts;\\r\\n(function (ReservedPorts) {\\r\\n    ReservedPorts[ReservedPorts[\\\"HACKING_INFO\\\"] = 1] = \\\"HACKING_INFO\\\";\\r\\n    ReservedPorts[ReservedPorts[\\\"HACKNET_INFO\\\"] = 2] = \\\"HACKNET_INFO\\\";\\r\\n    ReservedPorts[ReservedPorts[\\\"HACK_WRITE_INFO\\\"] = 3] = \\\"HACK_WRITE_INFO\\\";\\r\\n})(ReservedPorts || (ReservedPorts = {}));\\r\\nexport const WEAKENJS = \\\"/lib/exec/weaken.js\\\";\\r\\nexport const GROWJS = \\\"/lib/exec/grow.js\\\";\\r\\nexport const HACKJS = \\\"/lib/exec/hack.js\\\";\\r\\nexport const UTILJS = \\\"/lib/util.js\\\";\\r\\nexport const CITIES = [\\\"Aevum\\\", \\\"Chongqing\\\", \\\"Sector-12\\\", \\\"New Tokyo\\\", \\\"Ishima\\\", \\\"Volhaven\\\"];\\r\\nexport function llog(ns, str, ...args) {\\r\\n    ns.print(ns.sprintf(\\\"%8s \\\" + str, new Date().toLocaleTimeString(\\\"it-IT\\\"), ...args));\\r\\n}\\r\\nexport function softenServer(ns, hostname) {\\r\\n    if (ns.hasRootAccess(hostname)) {\\r\\n        return;\\r\\n    }\\r\\n    let ports = 0;\\r\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n        ns.brutessh(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n        ns.ftpcrack(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n        ns.httpworm(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n        ns.relaysmtp(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n        ns.sqlinject(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ports >= ns.getServerNumPortsRequired(hostname)) {\\r\\n        ns.nuke(hostname);\\r\\n    }\\r\\n}\\r\\nexport function serverIsHackable(ns, hostname) {\\r\\n    return ns.hasRootAccess(hostname) && ns.getHackingLevel() >= ns.getServerRequiredHackingLevel(hostname);\\r\\n}\\r\\nexport function canExecuteOnServer(ns, hostname) {\\r\\n    return ns.hasRootAccess(hostname) && ns.getServerMaxRam(hostname) > 0;\\r\\n}\\r\\nexport function mapHosts(ns, hosts = {}, parents = [], current = \\\"home\\\") {\\r\\n    const newParents = parents.concat(current);\\r\\n    hosts[current] = newParents;\\r\\n    const children = ns.scan(current).filter((element) => !parents.includes(element));\\r\\n    for (const child of children) {\\r\\n        mapHosts(ns, hosts, newParents, child);\\r\\n    }\\r\\n    return hosts;\\r\\n}\\r\\nexport function allHosts(ns) {\\r\\n    return Object.keys(mapHosts(ns));\\r\\n}\\r\\nexport function doProgramBuys(ns) {\\r\\n    const player = ns.getPlayer();\\r\\n    if (!player.tor && player.money > 200e3)\\r\\n        ns.purchaseTor();\\r\\n    if (!ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\") && player.money > 500e3)\\r\\n        ns.purchaseProgram(\\\"BruteSSH.exe\\\");\\r\\n    if (!ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\") && player.money > 1500e3)\\r\\n        ns.purchaseProgram(\\\"FTPCrack.exe\\\");\\r\\n    if (!ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\") && player.money > 5e6)\\r\\n        ns.purchaseProgram(\\\"relaySMTP.exe\\\");\\r\\n    if (!ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\") && player.money > 30e6)\\r\\n        ns.purchaseProgram(\\\"HTTPWorm.exe\\\");\\r\\n    if (!ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\") && player.money > 250e6)\\r\\n        ns.purchaseProgram(\\\"SQLInject.exe\\\");\\r\\n}\\r\\nexport function doBuyAndSoftenAll(ns) {\\r\\n    doProgramBuys(ns);\\r\\n    for (const hostname of allHosts(ns)) {\\r\\n        softenServer(ns, hostname);\\r\\n    }\\r\\n}\\r\\nexport function stFormat(ns, ms, showms = false, showfull = false) {\\r\\n    let timeLeft = ms;\\r\\n    const hours = Math.floor(ms / (1000 * 60 * 60));\\r\\n    timeLeft -= hours * (1000 * 60 * 60);\\r\\n    const minutes = Math.floor(timeLeft / (1000 * 60));\\r\\n    timeLeft -= minutes * (1000 * 60);\\r\\n    const seconds = Math.floor(timeLeft / 1000);\\r\\n    timeLeft -= seconds * 1000;\\r\\n    const milliseconds = timeLeft;\\r\\n    if (showms) {\\r\\n        if (hours > 0 || showfull)\\r\\n            return ns.sprintf(\\\"%02d:%02d:%02d.%03d\\\", hours, minutes, seconds, milliseconds);\\r\\n        if (minutes > 0)\\r\\n            return ns.sprintf(\\\"%02d:%02d.%03d\\\", minutes, seconds, milliseconds);\\r\\n        return ns.sprintf(\\\"%02d.%03d\\\", seconds, milliseconds);\\r\\n    }\\r\\n    else {\\r\\n        if (hours > 0 || showfull)\\r\\n            return ns.sprintf(\\\"%02d:%02d:%02d\\\", hours, minutes, seconds);\\r\\n        if (minutes > 0)\\r\\n            return ns.sprintf(\\\"%02d:%02d\\\", minutes, seconds);\\r\\n        return ns.sprintf(\\\"%02d\\\", seconds);\\r\\n    }\\r\\n}\\r\\nexport function stdFormat(ns, offset = 0, showms = false) {\\r\\n    const date = new Date(new Date().getTime() + offset);\\r\\n    if (showms) {\\r\\n        const ms = ns.sprintf(\\\"%03d\\\", date.getUTCMilliseconds());\\r\\n        return date.toLocaleTimeString(\\\"it-IT\\\") + \\\".\\\" + ms;\\r\\n    }\\r\\n    else {\\r\\n        return date.toLocaleTimeString(\\\"it-IT\\\");\\r\\n    }\\r\\n}\\r\\nexport async function doBackdoors(ns) {\\r\\n    //const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"w0r1d_d43m0n\\\", \\\"b-and-a\\\", \\\"ecorp\\\", \\\"fulcrumassets\\\", \\\"fulcrumtech\\\"];\\r\\n    //const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"omnitek\\\", \\\"kuai-gong\\\", \\\"megacorp\\\"];\\r\\n    const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"w0r1d_d43m0n\\\"];\\r\\n    const hosts = mapHosts(ns);\\r\\n    for (const [hostName, trail] of Object.entries(hosts)) {\\r\\n        const server = ns.getServer(hostName);\\r\\n        if (!targetHosts.includes(hostName) ||\\r\\n            server.backdoorInstalled ||\\r\\n            server.requiredHackingSkill > ns.getHackingLevel() ||\\r\\n            !server.hasAdminRights)\\r\\n            continue;\\r\\n        ns.print(hostName);\\r\\n        for (const hostHopName of trail) {\\r\\n            ns.connect(hostHopName);\\r\\n        }\\r\\n        await ns.installBackdoor();\\r\\n        ns.connect(\\\"home\\\");\\r\\n    }\\r\\n}\\r\\nexport function cleanLogs(ns) {\\r\\n    ns.disableLog(\\\"disableLog\\\");\\r\\n    ns.disableLog(\\\"ALL\\\");\\r\\n    // ns.disableLog(\\\"sleep\\\")\\r\\n    // ns.disableLog(\\\"exec\\\")\\r\\n    // ns.disableLog(\\\"getServerMaxRam\\\")\\r\\n    // ns.disableLog(\\\"getServerSecurityLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerMinSecurityLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerMaxMoney\\\")\\r\\n    // ns.disableLog(\\\"getHackingLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerRequiredHackingLevel\\\")\\r\\n    // ns.disableLog(\\\"scan\\\")\\r\\n    // ns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n    // ns.disableLog(\\\"getServerUsedRam\\\")\\r\\n}\\r\\nexport const ALL_FACTIONS = [\\r\\n    \\\"Illuminati\\\",\\r\\n    \\\"Daedalus\\\",\\r\\n    \\\"The Covenant\\\",\\r\\n    \\\"ECorp\\\",\\r\\n    \\\"MegaCorp\\\",\\r\\n    \\\"Bachman & Associates\\\",\\r\\n    \\\"Blade Industries\\\",\\r\\n    \\\"NWO\\\",\\r\\n    \\\"Clarke Incorporated\\\",\\r\\n    \\\"OmniTek Incorporated\\\",\\r\\n    \\\"Four Sigma\\\",\\r\\n    \\\"KuaiGong International\\\",\\r\\n    \\\"Fulcrum Secret Technologies\\\",\\r\\n    \\\"BitRunners\\\",\\r\\n    \\\"The Black Hand\\\",\\r\\n    \\\"NiteSec\\\",\\r\\n    \\\"Aevum\\\",\\r\\n    \\\"Chongqing\\\",\\r\\n    \\\"Ishima\\\",\\r\\n    \\\"New Tokyo\\\",\\r\\n    \\\"Sector-12\\\",\\r\\n    \\\"Volhaven\\\",\\r\\n    \\\"Speakers for the Dead\\\",\\r\\n    \\\"The Dark Army\\\",\\r\\n    \\\"The Syndicate\\\",\\r\\n    \\\"Silhouette\\\",\\r\\n    \\\"Tetrads\\\",\\r\\n    \\\"Slum Snakes\\\",\\r\\n    \\\"Netburners\\\",\\r\\n    \\\"Tian Di Hui\\\",\\r\\n    \\\"CyberSec\\\",\\r\\n    \\\"Bladeburners\\\",\\r\\n    \\\"Church of the Machine God\\\",\\r\\n];\\r\\nexport async function writeOut(ns, data, startTime, endTime, result, startSec, startCash) {\\r\\n    if (data.writeFile !== \\\"\\\") {\\r\\n        const outstr = ns.sprintf(\\\"%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\", data.target, data.uid, data.batchId, data.realTimeStart + data.offset, data.realTimeStart + data.finish, data.operationTime, startTime, endTime, endTime - startTime, startTime - (data.realTimeStart + data.offset), endTime - (data.realTimeStart + data.finish), endTime - startTime - data.operationTime, result, startSec.toFixed(2), ns.getServerSecurityLevel(data.target).toFixed(2), ns.nFormat(startCash, \\\"($0.000a)\\\"), ns.nFormat(ns.getServerMoneyAvailable(data.target), \\\"($0.000a)\\\"));\\r\\n        while (!await ns.tryWritePort(ReservedPorts.HACK_WRITE_INFO, [data.writeFile, outstr]))\\r\\n            ;\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi91dGlsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLE1BQU0sQ0FBTixJQUFZLGFBSVg7QUFKRCxXQUFZLGFBQWE7SUFDckIsaUVBQWdCLENBQUE7SUFDaEIsaUVBQVksQ0FBQTtJQUNaLHVFQUFlLENBQUE7QUFDbkIsQ0FBQyxFQUpXLGFBQWEsS0FBYixhQUFhLFFBSXhCO0FBRUQsTUFBTSxDQUFDLE1BQU0sUUFBUSxHQUFHLHFCQUFxQixDQUFDO0FBQzlDLE1BQU0sQ0FBQyxNQUFNLE1BQU0sR0FBRyxtQkFBbUIsQ0FBQztBQUMxQyxNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUcsbUJBQW1CLENBQUM7QUFDMUMsTUFBTSxDQUFDLE1BQU0sTUFBTSxHQUFHLGNBQWMsQ0FBQztBQUVyQyxNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUcsQ0FBQyxPQUFPLEVBQUUsV0FBVyxFQUFFLFdBQVcsRUFBRSxXQUFXLEVBQUUsUUFBUSxFQUFFLFVBQVUsQ0FBQyxDQUFDO0FBRTdGLE1BQU0sVUFBVSxJQUFJLENBQUMsRUFBTSxFQUFFLEdBQVcsRUFBRSxHQUFHLElBQXlCO0lBQ2xFLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEdBQUcsR0FBRyxFQUFFLElBQUksSUFBSSxFQUFFLENBQUMsa0JBQWtCLENBQUMsT0FBTyxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDO0FBQ3hGLENBQUM7QUFFRCxNQUFNLFVBQVUsWUFBWSxDQUFDLEVBQU0sRUFBRSxRQUFnQjtJQUNqRCxJQUFJLEVBQUUsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDNUIsT0FBTztLQUNWO0lBRUQsSUFBSSxLQUFLLEdBQUcsQ0FBQyxDQUFDO0lBQ2QsSUFBSSxFQUFFLENBQUMsVUFBVSxDQUFDLGNBQWMsRUFB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\",\"filename\":\"/lib/util.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":13.25,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":84381,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"purchaseTor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"purchaseProgram\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"connect\",\"cost\":2},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.stanek.charge(ns.args[0], ns.args[1]);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hhcmdlLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL3N0YW5lay9jaGFyZ2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUM5QixPQUFPLElBQUksRUFBRTtRQUNULE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7S0FDakQ7QUFDTCxDQUFDIn0=\",\"filename\":\"/lib/stanek/charge.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/stanek/charge.js\",\"url\":\"blob:file:///7c2b0daa-7e6f-4797-b564-03537c299e69\",\"moduleSequenceNumber\":99899}],\"dependents\":[],\"ramUsage\":2,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":99899,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.charge\",\"cost\":0.4}]}}],\"serversOnNetwork\":[\"summit-uni\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":135,\"hackDifficulty\":135,\"minDifficulty\":45,\"moneyAvailable\":187500000,\"moneyMax\":2109375000,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":499,\"serverGrowth\":36,\"suppression\":0,\"activeSuppressionThreads\":[],\"suppressionIntervalID\":null,\"suppressionLastUpdateTime\":0}},\"powerhouse-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":true,\"ip\":\"61.8.8.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.grow(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLElBQUksR0FBdUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFFbkUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDdkIsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7UUFDeEMsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7S0FDM0MsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyJ9\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":93235,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.weaken(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxJQUFJLEdBQXVCLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO0lBRW5FLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFO1FBQ3pCLGtCQUFrQixFQUFFLElBQUksQ0FBQyxlQUFlO1FBQ3hDLGtCQUFrQixFQUFFLElBQUksQ0FBQyxlQUFlO0tBQzNDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///bac47949-2c96-4f50-9f6e-307a146016c7\",\"moduleSequenceNumber\":94072}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":94072,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.hack(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLElBQUksR0FBdUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFFbkUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDdkIsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7UUFDeEMsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7S0FDM0MsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyJ9\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":93239,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export var ReservedPorts;\\r\\n(function (ReservedPorts) {\\r\\n    ReservedPorts[ReservedPorts[\\\"HACKING_INFO\\\"] = 1] = \\\"HACKING_INFO\\\";\\r\\n    ReservedPorts[ReservedPorts[\\\"HACKNET_INFO\\\"] = 2] = \\\"HACKNET_INFO\\\";\\r\\n    ReservedPorts[ReservedPorts[\\\"HACK_WRITE_INFO\\\"] = 3] = \\\"HACK_WRITE_INFO\\\";\\r\\n})(ReservedPorts || (ReservedPorts = {}));\\r\\nexport const WEAKENJS = \\\"/lib/exec/weaken.js\\\";\\r\\nexport const GROWJS = \\\"/lib/exec/grow.js\\\";\\r\\nexport const HACKJS = \\\"/lib/exec/hack.js\\\";\\r\\nexport const UTILJS = \\\"/lib/util.js\\\";\\r\\nexport const CITIES = [\\\"Aevum\\\", \\\"Chongqing\\\", \\\"Sector-12\\\", \\\"New Tokyo\\\", \\\"Ishima\\\", \\\"Volhaven\\\"];\\r\\nexport function llog(ns, str, ...args) {\\r\\n    ns.print(ns.sprintf(\\\"%8s \\\" + str, new Date().toLocaleTimeString(\\\"it-IT\\\"), ...args));\\r\\n}\\r\\nexport function softenServer(ns, hostname) {\\r\\n    if (ns.hasRootAccess(hostname)) {\\r\\n        return;\\r\\n    }\\r\\n    let ports = 0;\\r\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n        ns.brutessh(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n        ns.ftpcrack(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n        ns.httpworm(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n        ns.relaysmtp(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n        ns.sqlinject(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ports >= ns.getServerNumPortsRequired(hostname)) {\\r\\n        ns.nuke(hostname);\\r\\n    }\\r\\n}\\r\\nexport function serverIsHackable(ns, hostname) {\\r\\n    return ns.hasRootAccess(hostname) && ns.getHackingLevel() >= ns.getServerRequiredHackingLevel(hostname);\\r\\n}\\r\\nexport function canExecuteOnServer(ns, hostname) {\\r\\n    return ns.hasRootAccess(hostname) && ns.getServerMaxRam(hostname) > 0;\\r\\n}\\r\\nexport function mapHosts(ns, hosts = {}, parents = [], current = \\\"home\\\") {\\r\\n    const newParents = parents.concat(current);\\r\\n    hosts[current] = newParents;\\r\\n    const children = ns.scan(current).filter((element) => !parents.includes(element));\\r\\n    for (const child of children) {\\r\\n        mapHosts(ns, hosts, newParents, child);\\r\\n    }\\r\\n    return hosts;\\r\\n}\\r\\nexport function allHosts(ns) {\\r\\n    return Object.keys(mapHosts(ns));\\r\\n}\\r\\nexport function doProgramBuys(ns) {\\r\\n    const player = ns.getPlayer();\\r\\n    if (!player.tor && player.money > 200e3)\\r\\n        ns.purchaseTor();\\r\\n    if (!ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\") && player.money > 500e3)\\r\\n        ns.purchaseProgram(\\\"BruteSSH.exe\\\");\\r\\n    if (!ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\") && player.money > 1500e3)\\r\\n        ns.purchaseProgram(\\\"FTPCrack.exe\\\");\\r\\n    if (!ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\") && player.money > 5e6)\\r\\n        ns.purchaseProgram(\\\"relaySMTP.exe\\\");\\r\\n    if (!ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\") && player.money > 30e6)\\r\\n        ns.purchaseProgram(\\\"HTTPWorm.exe\\\");\\r\\n    if (!ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\") && player.money > 250e6)\\r\\n        ns.purchaseProgram(\\\"SQLInject.exe\\\");\\r\\n}\\r\\nexport function doBuyAndSoftenAll(ns) {\\r\\n    doProgramBuys(ns);\\r\\n    for (const hostname of allHosts(ns)) {\\r\\n        softenServer(ns, hostname);\\r\\n    }\\r\\n}\\r\\nexport function stFormat(ns, ms, showms = false, showfull = false) {\\r\\n    let timeLeft = ms;\\r\\n    const hours = Math.floor(ms / (1000 * 60 * 60));\\r\\n    timeLeft -= hours * (1000 * 60 * 60);\\r\\n    const minutes = Math.floor(timeLeft / (1000 * 60));\\r\\n    timeLeft -= minutes * (1000 * 60);\\r\\n    const seconds = Math.floor(timeLeft / 1000);\\r\\n    timeLeft -= seconds * 1000;\\r\\n    const milliseconds = timeLeft;\\r\\n    if (showms) {\\r\\n        if (hours > 0 || showfull)\\r\\n            return ns.sprintf(\\\"%02d:%02d:%02d.%03d\\\", hours, minutes, seconds, milliseconds);\\r\\n        if (minutes > 0)\\r\\n            return ns.sprintf(\\\"%02d:%02d.%03d\\\", minutes, seconds, milliseconds);\\r\\n        return ns.sprintf(\\\"%02d.%03d\\\", seconds, milliseconds);\\r\\n    }\\r\\n    else {\\r\\n        if (hours > 0 || showfull)\\r\\n            return ns.sprintf(\\\"%02d:%02d:%02d\\\", hours, minutes, seconds);\\r\\n        if (minutes > 0)\\r\\n            return ns.sprintf(\\\"%02d:%02d\\\", minutes, seconds);\\r\\n        return ns.sprintf(\\\"%02d\\\", seconds);\\r\\n    }\\r\\n}\\r\\nexport function stdFormat(ns, offset = 0, showms = false) {\\r\\n    const date = new Date(new Date().getTime() + offset);\\r\\n    if (showms) {\\r\\n        const ms = ns.sprintf(\\\"%03d\\\", date.getUTCMilliseconds());\\r\\n        return date.toLocaleTimeString(\\\"it-IT\\\") + \\\".\\\" + ms;\\r\\n    }\\r\\n    else {\\r\\n        return date.toLocaleTimeString(\\\"it-IT\\\");\\r\\n    }\\r\\n}\\r\\nexport async function doBackdoors(ns) {\\r\\n    //const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"w0r1d_d43m0n\\\", \\\"b-and-a\\\", \\\"ecorp\\\", \\\"fulcrumassets\\\", \\\"fulcrumtech\\\"];\\r\\n    //const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"omnitek\\\", \\\"kuai-gong\\\", \\\"megacorp\\\"];\\r\\n    const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"w0r1d_d43m0n\\\"];\\r\\n    const hosts = mapHosts(ns);\\r\\n    for (const [hostName, trail] of Object.entries(hosts)) {\\r\\n        const server = ns.getServer(hostName);\\r\\n        if (!targetHosts.includes(hostName) ||\\r\\n            server.backdoorInstalled ||\\r\\n            server.requiredHackingSkill > ns.getHackingLevel() ||\\r\\n            !server.hasAdminRights)\\r\\n            continue;\\r\\n        ns.print(hostName);\\r\\n        for (const hostHopName of trail) {\\r\\n            ns.connect(hostHopName);\\r\\n        }\\r\\n        await ns.installBackdoor();\\r\\n        ns.connect(\\\"home\\\");\\r\\n    }\\r\\n}\\r\\nexport function cleanLogs(ns) {\\r\\n    ns.disableLog(\\\"disableLog\\\");\\r\\n    ns.disableLog(\\\"ALL\\\");\\r\\n    // ns.disableLog(\\\"sleep\\\")\\r\\n    // ns.disableLog(\\\"exec\\\")\\r\\n    // ns.disableLog(\\\"getServerMaxRam\\\")\\r\\n    // ns.disableLog(\\\"getServerSecurityLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerMinSecurityLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerMaxMoney\\\")\\r\\n    // ns.disableLog(\\\"getHackingLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerRequiredHackingLevel\\\")\\r\\n    // ns.disableLog(\\\"scan\\\")\\r\\n    // ns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n    // ns.disableLog(\\\"getServerUsedRam\\\")\\r\\n}\\r\\nexport const ALL_FACTIONS = [\\r\\n    \\\"Illuminati\\\",\\r\\n    \\\"Daedalus\\\",\\r\\n    \\\"The Covenant\\\",\\r\\n    \\\"ECorp\\\",\\r\\n    \\\"MegaCorp\\\",\\r\\n    \\\"Bachman & Associates\\\",\\r\\n    \\\"Blade Industries\\\",\\r\\n    \\\"NWO\\\",\\r\\n    \\\"Clarke Incorporated\\\",\\r\\n    \\\"OmniTek Incorporated\\\",\\r\\n    \\\"Four Sigma\\\",\\r\\n    \\\"KuaiGong International\\\",\\r\\n    \\\"Fulcrum Secret Technologies\\\",\\r\\n    \\\"BitRunners\\\",\\r\\n    \\\"The Black Hand\\\",\\r\\n    \\\"NiteSec\\\",\\r\\n    \\\"Aevum\\\",\\r\\n    \\\"Chongqing\\\",\\r\\n    \\\"Ishima\\\",\\r\\n    \\\"New Tokyo\\\",\\r\\n    \\\"Sector-12\\\",\\r\\n    \\\"Volhaven\\\",\\r\\n    \\\"Speakers for the Dead\\\",\\r\\n    \\\"The Dark Army\\\",\\r\\n    \\\"The Syndicate\\\",\\r\\n    \\\"Silhouette\\\",\\r\\n    \\\"Tetrads\\\",\\r\\n    \\\"Slum Snakes\\\",\\r\\n    \\\"Netburners\\\",\\r\\n    \\\"Tian Di Hui\\\",\\r\\n    \\\"CyberSec\\\",\\r\\n    \\\"Bladeburners\\\",\\r\\n    \\\"Church of the Machine God\\\",\\r\\n];\\r\\nexport async function writeOut(ns, data, startTime, endTime, result, startSec, startCash) {\\r\\n    if (data.writeFile !== \\\"\\\") {\\r\\n        const outstr = ns.sprintf(\\\"%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\", data.target, data.uid, data.batchId, data.realTimeStart + data.offset, data.realTimeStart + data.finish, data.operationTime, startTime, endTime, endTime - startTime, startTime - (data.realTimeStart + data.offset), endTime - (data.realTimeStart + data.finish), endTime - startTime - data.operationTime, result, startSec.toFixed(2), ns.getServerSecurityLevel(data.target).toFixed(2), ns.nFormat(startCash, \\\"($0.000a)\\\"), ns.nFormat(ns.getServerMoneyAvailable(data.target), \\\"($0.000a)\\\"));\\r\\n        while (!await ns.tryWritePort(ReservedPorts.HACK_WRITE_INFO, [data.writeFile, outstr]))\\r\\n            ;\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi91dGlsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLE1BQU0sQ0FBTixJQUFZLGFBSVg7QUFKRCxXQUFZLGFBQWE7SUFDckIsaUVBQWdCLENBQUE7SUFDaEIsaUVBQVksQ0FBQTtJQUNaLHVFQUFlLENBQUE7QUFDbkIsQ0FBQyxFQUpXLGFBQWEsS0FBYixhQUFhLFFBSXhCO0FBRUQsTUFBTSxDQUFDLE1BQU0sUUFBUSxHQUFHLHFCQUFxQixDQUFDO0FBQzlDLE1BQU0sQ0FBQyxNQUFNLE1BQU0sR0FBRyxtQkFBbUIsQ0FBQztBQUMxQyxNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUcsbUJBQW1CLENBQUM7QUFDMUMsTUFBTSxDQUFDLE1BQU0sTUFBTSxHQUFHLGNBQWMsQ0FBQztBQUVyQyxNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUcsQ0FBQyxPQUFPLEVBQUUsV0FBVyxFQUFFLFdBQVcsRUFBRSxXQUFXLEVBQUUsUUFBUSxFQUFFLFVBQVUsQ0FBQyxDQUFDO0FBRTdGLE1BQU0sVUFBVSxJQUFJLENBQUMsRUFBTSxFQUFFLEdBQVcsRUFBRSxHQUFHLElBQXlCO0lBQ2xFLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEdBQUcsR0FBRyxFQUFFLElBQUksSUFBSSxFQUFFLENBQUMsa0JBQWtCLENBQUMsT0FBTyxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDO0FBQ3hGLENBQUM7QUFFRCxNQUFNLFVBQVUsWUFBWSxDQUFDLEVBQU0sRUFBRSxRQUFnQjtJQUNqRCxJQUFJLEVBQUUsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDNUIsT0FBTztLQUNWO0lBRUQsSUFBSSxLQUFLLEdBQUcsQ0FBQyxDQUFDO0lBQ2QsSUFBSSxFQUFFLENBQUMsVUFBVSxDQUFDLGNBQWMsRUFBRSxNQUFNLENBQUMsRUFBRTtRQUN2QyxFQUFFLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ3RCLEtBQUssRUFBRSxDQUFDO0tBQ1g7SUFFRCxJQUFJLEVBQUUsQ0FBQyxVQUFVLENBQUMsY0FBYyxFQUFFLE1BQU0sQ0FBQyxFQUFFO1FBQ3ZDLEVBQUUsQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDdEIsS0FBSyxFQUFFLENBQUM7S0FDWDtJQUVELElBQUksRUFBRSxDQUFDLFVBQVUsQ0FBQyxjQUFjLEVBQUUsTUFBTSxDQUFDLEVBQUU7UUFDdkMsRUFBRSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUN0QixLQUFLLEVBQUUsQ0FBQztLQUNYO0lBRUQsSUFBSSxFQUFFLENBQUMsVUFBVSxDQUFDLGVBQWUsRUFBRSxNQUFNLENBQUMsRUFBRTtRQUN4QyxFQUFFLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ3ZCLEtBQUssRUFBRSxDQUFDO0tBQ1g7SUFFRCxJQUFJLEVBQUUsQ0FBQyxVQUFVLENBQUMsZUFBZSxFQUFFLE1BQU0sQ0FBQyxFQUFFO1FBQ3hDLEVBQUUsQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDdkIsS0FBSyxFQUFFLENBQUM7S0FDWDtJQUVELElBQUksS0FBSyxJQUFJLEVBQUUsQ0FBQyx5QkFBeUIsQ0FBQyxRQUFRLENBQUMsRUFBRTtRQUNqRCxFQUFFLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0tBQ3JCO0FBQ0wsQ0FBQztBQUVELE1BQU0sVUFBVSxnQkFBZ0IsQ0FBQyxFQUFNLEVBQUUsUUFBZ0I7SUFDckQsT0FBTyxFQUFFLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxlQUFlLEVBQUUsSUFBSSxFQUFFLENBQUMsNkJBQTZCLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDNUcsQ0FBQztBQUVELE1BQU0sVUFBVSxrQkFBa0IsQ0FBQyxFQUFNLEVBQUUsUUFBZ0I7SUFDdkQsT0FBTyxFQUFFLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxlQUFlLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQzFFLENBQUM7QUFFRCxNQUFNLFVBQVUsUUFBUSxDQUNwQixFQUFNLEVBQ04sUUFBa0MsRUFBRSxFQUNwQyxVQUFvQixFQUFFLEVBQ3RCLE9BQU8sR0FBRyxNQUFNO0lBRWhCLE1BQU0sVUFBVSxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDM0MsS0FBSyxDQUFDLE9BQU8sQ0FBQyxHQUFHLFVBQVUsQ0FBQztJQUU1QixNQUFNLFFBQVEsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLE9BQU8sRUFBRSxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7SUFDbEYsS0FBSyxNQUFNLEtBQUssSUFBSSxRQUFRLEVBQUU7UUFDMUIsUUFBUSxDQUFDLEVBQUUsRUFBRSxLQUFLLEVBQUUsVUFBVSxFQUFFLEtBQUssQ0FBQyxDQUFDO0tBQzFDO0lBQ0QsT0FBTyxLQUFLLENBQUM7QUFDakIsQ0FBQztBQUVELE1BQU0sVUFBVSxRQUFRLENBQUMsRUFBTTtJQUMzQixPQUFPLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFDckMsQ0FBQztBQUVELE1BQU0sVUFBVSxhQUFhLENBQUMsRUFBTTtJQUNoQyxNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsU0FBUyxFQUFFLENBQUM7SUFFOUIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLElBQUksTUFBTSxDQUFDLEtBQUssR0FBRyxLQUFLO1FBQUUsRUFBRSxDQUFDLFdBQVcsRUFBRSxDQUFDO0lBRTFELElBQUksQ0FBQyxFQUFFLENBQUMsVUFBVSxDQUFDLGNBQWMsRUFBRSxNQUFNLENBQUMsSUFBSSxNQUFNLENBQUMsS0FBSyxHQUFHLEtBQUs7UUFBRSxFQUFFLENBQUMsZUFBZSxDQUFDLGNBQWMsQ0FBQyxDQUFDO0lBRXZHLElBQUksQ0FBQyxFQUFFLENBQUMsVUFBVSxDQUFDLGNBQWMsRUFBRSxNQUFNLENBQUMsSUFBSSxNQUFNLENBQUMsS0FBSyxHQUFHLE1BQU07UUFBRSxFQUFFLENBQUMsZUFBZSxDQUFDLGNBQWMsQ0FBQyxDQUFDO0lBRXhHLElBQUksQ0FBQyxFQUFFLENBQUMsVUFBVSxDQUFDLGVBQWUsRUFBRSxNQUFNLENBQUMsSUFBSSxNQUFNLENBQUMsS0FBSyxHQUFHLEdBQUc7UUFBRSxFQUFFLENBQUMsZUFBZSxDQUFDLGVBQWUsQ0FBQyxDQUFDO0lBRXZHLElBQUksQ0FBQyxFQUFFLENBQUMsVUFBVSxDQUFDLGNBQWMsRUFBRSxNQUFNLENBQUMsSUFBSSxNQUFNLENBQUMsS0FBSyxHQUFHLElBQUk7UUFBRSxFQUFFLENBQUMsZUFBZSxDQUFDLGNBQWMsQ0FBQyxDQUFDO0lBRXRHLElBQUksQ0FBQyxFQUFFLENBQUMsVUFBVSxDQUFDLGVBQWUsRUFBRSxNQUFNLENBQUMsSUFBSSxNQUFNLENBQUMsS0FBSyxHQUFHLEtBQUs7UUFBRSxFQUFFLENBQUMsZUFBZSxDQUFDLGVBQWUsQ0FBQyxDQUFDO0FBQzdHLENBQUM7QUFFRCxNQUFNLFVBQVUsaUJBQWlCLENBQUMsRUFBTTtJQUNwQyxhQUFhLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDbEIsS0FBSyxNQUFNLFFBQVEsSUFBSSxRQUFRLENBQUMsRUFBRSxDQUFDLEVBQUU7UUFDakMsWUFBWSxDQUFDLEVBQUUsRUFBRSxRQUFRLENBQUMsQ0FBQztLQUM5QjtBQUNMLENBQUM7QUFFRCxNQUFNLFVBQVUsUUFBUSxDQUFDLEVBQU0sRUFBRSxFQUFVLEVBQUUsTUFBTSxHQUFHLEtBQUssRUFBRSxRQUFRLEdBQUcsS0FBSztJQUN6RSxJQUFJLFFBQVEsR0FBRyxFQUFFLENBQUM7SUFDbEIsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLEdBQUcsQ0FBQyxJQUFJLEdBQUcsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDaEQsUUFBUSxJQUFJLEtBQUssR0FBRyxDQUFDLElBQUksR0FBRyxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUM7SUFDckMsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLEdBQUcsQ0FBQyxJQUFJLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUNuRCxRQUFRLElBQUksT0FBTyxHQUFHLENBQUMsSUFBSSxHQUFHLEVBQUUsQ0FBQyxDQUFDO0lBQ2xDLE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxDQUFDO0lBQzVDLFFBQVEsSUFBSSxPQUFPLEdBQUcsSUFBSSxDQUFDO0lBQzNCLE1BQU0sWUFBWSxHQUFHLFFBQVEsQ0FBQztJQUU5QixJQUFJLE1BQU0sRUFBRTtRQUNSLElBQUksS0FBSyxHQUFHLENBQUMsSUFBSSxRQUFRO1lBQUUsT0FBTyxFQUFFLENBQUMsT0FBTyxDQUFDLHFCQUFxQixFQUFFLEtBQUssRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLFlBQVksQ0FBQyxDQUFDO1FBQzNHLElBQUksT0FBTyxHQUFHLENBQUM7WUFBRSxPQUFPLEVBQUUsQ0FBQyxPQUFPLENBQUMsZ0JBQWdCLEVBQUUsT0FBTyxFQUFFLE9BQU8sRUFBRSxZQUFZLENBQUMsQ0FBQztRQUNyRixPQUFPLEVBQUUsQ0FBQyxPQUFPLENBQUMsV0FBVyxFQUFFLE9BQU8sRUFBRSxZQUFZLENBQUMsQ0FBQztLQUN6RDtTQUFNO1FBQ0gsSUFBSSxLQUFLLEdBQUcsQ0FBQyxJQUFJLFFBQVE7WUFBRSxPQUFPLEVBQUUsQ0FBQyxPQUFPLENBQUMsZ0JBQWdCLEVBQUUsS0FBSyxFQUFFLE9BQU8sRUFBRSxPQUFPLENBQUMsQ0FBQztRQUN4RixJQUFJLE9BQU8sR0FBRyxDQUFDO1lBQUUsT0FBTyxFQUFFLENBQUMsT0FBTyxDQUFDLFdBQVcsRUFBRSxPQUFPLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFDbEUsT0FBTyxFQUFFLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxPQUFPLENBQUMsQ0FBQztLQUN0QztBQUNMLENBQUM7QUFFRCxNQUFNLFVBQVUsU0FBUyxDQUFDLEVBQU0sRUFBRSxNQUFNLEdBQUcsQ0FBQyxFQUFFLE1BQU0sR0FBRyxLQUFLO0lBQ3hELE1BQU0sSUFBSSxHQUFHLElBQUksSUFBSSxDQUFDLElBQUksSUFBSSxFQUFFLENBQUMsT0FBTyxFQUFFLEdBQUcsTUFBTSxDQUFDLENBQUM7SUFFckQsSUFBSSxNQUFNLEVBQUU7UUFDUixNQUFNLEVBQUUsR0FBRyxFQUFFLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsa0JBQWtCLEVBQUUsQ0FBQyxDQUFDO1FBQ3pELE9BQU8sSUFBSSxDQUFDLGtCQUFrQixDQUFDLE9BQU8sQ0FBQyxHQUFHLEdBQUcsR0FBRyxFQUFFLENBQUM7S0FDdEQ7U0FBTTtRQUNILE9BQU8sSUFBSSxDQUFDLGtCQUFrQixDQUFDLE9BQU8sQ0FBQyxDQUFDO0tBQzNDO0FBQ0wsQ0FBQztBQUVELE1BQU0sQ0FBQyxLQUFLLFVBQVUsV0FBVyxDQUFDLEVBQU07SUFDcEMsNklBQTZJO0lBQzdJLDZHQUE2RztJQUM3RyxNQUFNLFdBQVcsR0FBRyxDQUFDLE1BQU0sRUFBRSxhQUFhLEVBQUUsU0FBUyxFQUFFLGNBQWMsRUFBRSxjQUFjLENBQUMsQ0FBQztJQUV2RixNQUFNLEtBQUssR0FBRyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUM7SUFFM0IsS0FBSyxNQUFNLENBQUMsUUFBUSxFQUFFLEtBQUssQ0FBQyxJQUFJLE1BQU0sQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEVBQUU7UUFDbkQsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUN0QyxJQUNJLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUM7WUFDL0IsTUFBTSxDQUFDLGlCQUFpQjtZQUN4QixNQUFNLENBQUMsb0JBQW9CLEdBQUcsRUFBRSxDQUFDLGVBQWUsRUFBRTtZQUNsRCxDQUFDLE1BQU0sQ0FBQyxjQUFjO1lBRXRCLFNBQVM7UUFFYixFQUFFLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ25CLEtBQUssTUFBTSxXQUFXLElBQUksS0FBSyxFQUFFO1lBQzdCLEVBQUUsQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLENBQUM7U0FDM0I7UUFFRCxNQUFNLEVBQUUsQ0FBQyxlQUFlLEVBQUUsQ0FBQztRQUMzQixFQUFFLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0tBQ3RCO0FBQ0wsQ0FBQztBQUVELE1BQU0sVUFBVSxTQUFTLENBQUMsRUFBTTtJQUM1QixFQUFFLENBQUMsVUFBVSxDQUFDLFlBQVksQ0FBQyxDQUFDO0lBQzVCLEVBQUUsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDckIseUJBQXlCO0lBQ3pCLHdCQUF3QjtJQUN4QixtQ0FBbUM7SUFDbkMsMENBQTBDO0lBQzFDLDZDQUE2QztJQUM3QyxxQ0FBcUM7SUFDckMsbUNBQW1DO0lBQ25DLGlEQUFpRDtJQUNqRCx3QkFBd0I7SUFDeEIsMkNBQTJDO0lBQzNDLG9DQUFvQztBQUN4QyxDQUFDO0FBRUQsTUFBTSxDQUFDLE1BQU0sWUFBWSxHQUFHO0lBQ3hCLFlBQVk7SUFDWixVQUFVO0lBQ1YsY0FBYztJQUNkLE9BQU87SUFDUCxVQUFVO0lBQ1Ysc0JBQXNCO0lBQ3RCLGtCQUFrQjtJQUNsQixLQUFLO0lBQ0wscUJBQXFCO0lBQ3JCLHNCQUFzQjtJQUN0QixZQUFZO0lBQ1osd0JBQXdCO0lBQ3hCLDZCQUE2QjtJQUM3QixZQUFZO0lBQ1osZ0JBQWdCO0lBQ2hCLFNBQVM7SUFDVCxPQUFPO0lBQ1AsV0FBVztJQUNYLFFBQVE7SUFDUixXQUFXO0lBQ1gsV0FBVztJQUNYLFVBQVU7SUFDVix1QkFBdUI7SUFDdkIsZUFBZTtJQUNmLGVBQWU7SUFDZixZQUFZO0lBQ1osU0FBUztJQUNULGFBQWE7SUFDYixZQUFZO0lBQ1osYUFBYTtJQUNiLFVBQVU7SUFDVixjQUFjO0lBQ2QsMkJBQTJCO0NBQzlCLENBQUM7QUFFRixNQUFNLENBQUMsS0FBSyxVQUFVLFFBQVEsQ0FDMUIsRUFBTSxFQUNOLElBQXdCLEVBQ3hCLFNBQWlCLEVBQ2pCLE9BQWUsRUFDZixNQUFjLEVBQ2QsUUFBZ0IsRUFDaEIsU0FBaUI7SUFFakIsSUFBSSxJQUFJLENBQUMsU0FBUyxLQUFLLEVBQUUsRUFBRTtRQUN2QixNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsT0FBTyxDQUNyQixzREFBc0QsRUFDdEQsSUFBSSxDQUFDLE1BQU0sRUFDWCxJQUFJLENBQUMsR0FBRyxFQUNSLElBQUksQ0FBQyxPQUFPLEVBQ1osSUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUMsTUFBTSxFQUNoQyxJQUFJLENBQUMsYUFBYSxHQUFHLElBQUksQ0FBQyxNQUFNLEVBQ2hDLElBQUksQ0FBQyxhQUFhLEVBQ2xCLFNBQVMsRUFDVCxPQUFPLEVBQ1AsT0FBTyxHQUFHLFNBQVMsRUFDbkIsU0FBUyxHQUFHLENBQUMsSUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQzlDLE9BQU8sR0FBRyxDQUFDLElBQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUM1QyxPQUFPLEdBQUcsU0FBUyxHQUFHLElBQUksQ0FBQyxhQUFhLEVBQ3hDLE1BQU0sRUFDTixRQUFRLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUNuQixFQUFFLENBQUMsc0JBQXNCLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFDakQsRUFBRSxDQUFDLE9BQU8sQ0FBQyxTQUFTLEVBQUUsV0FBVyxDQUFDLEVBQ2xDLEVBQUUsQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLHVCQUF1QixDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRSxXQUFXLENBQUMsQ0FDbkUsQ0FBQztRQUVGLE9BQU8sQ0FBQyxNQUFNLEVBQUUsQ0FBQyxZQUFZLENBQUMsYUFBYSxDQUFDLGVBQWUsRUFBRSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsTUFBTSxDQUFDLENBQUM7WUFBQyxDQUFDO0tBQzNGO0FBQ0wsQ0FBQyJ9\",\"filename\":\"/lib/util.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":13.25,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":93241,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"purchaseTor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"purchaseProgram\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"connect\",\"cost\":2},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.stanek.charge(ns.args[0], ns.args[1]);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hhcmdlLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL3N0YW5lay9jaGFyZ2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUM5QixPQUFPLElBQUksRUFBRTtRQUNULE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7S0FDakQ7QUFDTCxDQUFDIn0=\",\"filename\":\"/lib/stanek/charge.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/stanek/charge.js\",\"url\":\"blob:file:///635dda55-0a4f-47cf-93c9-7685a5daca3b\",\"moduleSequenceNumber\":99874}],\"dependents\":[],\"ramUsage\":2,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":99874,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.charge\",\"cost\":0.4}]}}],\"serversOnNetwork\":[\"4sigma\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":189,\"hackDifficulty\":189,\"minDifficulty\":63,\"moneyAvailable\":675000000,\"moneyMax\":7593750000,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1005,\"serverGrowth\":51,\"suppression\":0,\"activeSuppressionThreads\":[],\"suppressionIntervalID\":null,\"suppressionLastUpdateTime\":0}},\"snap-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"snap-fitness\",\"httpPortOpen\":true,\"ip\":\"48.9.2.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"aevum-police\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":180,\"hackDifficulty\":180,\"minDifficulty\":60,\"moneyAvailable\":337500000,\"moneyMax\":3796875000,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":702,\"serverGrowth\":56,\"suppression\":0,\"activeSuppressionThreads\":[],\"suppressionIntervalID\":null,\"suppressionLastUpdateTime\":0}},\"run4theh111z\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"run4theh111z\",\"httpPortOpen\":true,\"ip\":\"35.8.9.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.grow(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLElBQUksR0FBdUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFFbkUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDdkIsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7UUFDeEMsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7S0FDM0MsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyJ9\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///a21d490e-8a90-4fcb-b4ba-28e16738c372\",\"moduleSequenceNumber\":86745}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":86745,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.weaken(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxJQUFJLEdBQXVCLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO0lBRW5FLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFO1FBQ3pCLGtCQUFrQixFQUFFLElBQUksQ0FBQyxlQUFlO1FBQ3hDLGtCQUFrQixFQUFFLElBQUksQ0FBQyxlQUFlO0tBQzNDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///39a121f5-8c5b-4b4c-9fea-ff76dbf632b6\",\"moduleSequenceNumber\":85599}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":85599,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.hack(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLElBQUksR0FBdUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFFbkUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDdkIsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7UUFDeEMsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7S0FDM0MsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyJ9\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":85557,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export var ReservedPorts;\\r\\n(function (ReservedPorts) {\\r\\n    ReservedPorts[ReservedPorts[\\\"HACKING_INFO\\\"] = 1] = \\\"HACKING_INFO\\\";\\r\\n    ReservedPorts[ReservedPorts[\\\"HACKNET_INFO\\\"] = 2] = \\\"HACKNET_INFO\\\";\\r\\n    ReservedPorts[ReservedPorts[\\\"HACK_WRITE_INFO\\\"] = 3] = \\\"HACK_WRITE_INFO\\\";\\r\\n})(ReservedPorts || (ReservedPorts = {}));\\r\\nexport const WEAKENJS = \\\"/lib/exec/weaken.js\\\";\\r\\nexport const GROWJS = \\\"/lib/exec/grow.js\\\";\\r\\nexport const HACKJS = \\\"/lib/exec/hack.js\\\";\\r\\nexport const UTILJS = \\\"/lib/util.js\\\";\\r\\nexport const CITIES = [\\\"Aevum\\\", \\\"Chongqing\\\", \\\"Sector-12\\\", \\\"New Tokyo\\\", \\\"Ishima\\\", \\\"Volhaven\\\"];\\r\\nexport function llog(ns, str, ...args) {\\r\\n    ns.print(ns.sprintf(\\\"%8s \\\" + str, new Date().toLocaleTimeString(\\\"it-IT\\\"), ...args));\\r\\n}\\r\\nexport function softenServer(ns, hostname) {\\r\\n    if (ns.hasRootAccess(hostname)) {\\r\\n        return;\\r\\n    }\\r\\n    let ports = 0;\\r\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n        ns.brutessh(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n        ns.ftpcrack(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n        ns.httpworm(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n        ns.relaysmtp(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n        ns.sqlinject(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ports >= ns.getServerNumPortsRequired(hostname)) {\\r\\n        ns.nuke(hostname);\\r\\n    }\\r\\n}\\r\\nexport function serverIsHackable(ns, hostname) {\\r\\n    return ns.hasRootAccess(hostname) && ns.getHackingLevel() >= ns.getServerRequiredHackingLevel(hostname);\\r\\n}\\r\\nexport function canExecuteOnServer(ns, hostname) {\\r\\n    return ns.hasRootAccess(hostname) && ns.getServerMaxRam(hostname) > 0;\\r\\n}\\r\\nexport function mapHosts(ns, hosts = {}, parents = [], current = \\\"home\\\") {\\r\\n    const newParents = parents.concat(current);\\r\\n    hosts[current] = newParents;\\r\\n    const children = ns.scan(current).filter((element) => !parents.includes(element));\\r\\n    for (const child of children) {\\r\\n        mapHosts(ns, hosts, newParents, child);\\r\\n    }\\r\\n    return hosts;\\r\\n}\\r\\nexport function allHosts(ns) {\\r\\n    return Object.keys(mapHosts(ns));\\r\\n}\\r\\nexport function doProgramBuys(ns) {\\r\\n    const player = ns.getPlayer();\\r\\n    if (!player.tor && player.money > 200e3)\\r\\n        ns.purchaseTor();\\r\\n    if (!ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\") && player.money > 500e3)\\r\\n        ns.purchaseProgram(\\\"BruteSSH.exe\\\");\\r\\n    if (!ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\") && player.money > 1500e3)\\r\\n        ns.purchaseProgram(\\\"FTPCrack.exe\\\");\\r\\n    if (!ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\") && player.money > 5e6)\\r\\n        ns.purchaseProgram(\\\"relaySMTP.exe\\\");\\r\\n    if (!ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\") && player.money > 30e6)\\r\\n        ns.purchaseProgram(\\\"HTTPWorm.exe\\\");\\r\\n    if (!ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\") && player.money > 250e6)\\r\\n        ns.purchaseProgram(\\\"SQLInject.exe\\\");\\r\\n}\\r\\nexport function doBuyAndSoftenAll(ns) {\\r\\n    doProgramBuys(ns);\\r\\n    for (const hostname of allHosts(ns)) {\\r\\n        softenServer(ns, hostname);\\r\\n    }\\r\\n}\\r\\nexport function stFormat(ns, ms, showms = false, showfull = false) {\\r\\n    let timeLeft = ms;\\r\\n    const hours = Math.floor(ms / (1000 * 60 * 60));\\r\\n    timeLeft -= hours * (1000 * 60 * 60);\\r\\n    const minutes = Math.floor(timeLeft / (1000 * 60));\\r\\n    timeLeft -= minutes * (1000 * 60);\\r\\n    const seconds = Math.floor(timeLeft / 1000);\\r\\n    timeLeft -= seconds * 1000;\\r\\n    const milliseconds = timeLeft;\\r\\n    if (showms) {\\r\\n        if (hours > 0 || showfull)\\r\\n            return ns.sprintf(\\\"%02d:%02d:%02d.%03d\\\", hours, minutes, seconds, milliseconds);\\r\\n        if (minutes > 0)\\r\\n            return ns.sprintf(\\\"%02d:%02d.%03d\\\", minutes, seconds, milliseconds);\\r\\n        return ns.sprintf(\\\"%02d.%03d\\\", seconds, milliseconds);\\r\\n    }\\r\\n    else {\\r\\n        if (hours > 0 || showfull)\\r\\n            return ns.sprintf(\\\"%02d:%02d:%02d\\\", hours, minutes, seconds);\\r\\n        if (minutes > 0)\\r\\n            return ns.sprintf(\\\"%02d:%02d\\\", minutes, seconds);\\r\\n        return ns.sprintf(\\\"%02d\\\", seconds);\\r\\n    }\\r\\n}\\r\\nexport function stdFormat(ns, offset = 0, showms = false) {\\r\\n    const date = new Date(new Date().getTime() + offset);\\r\\n    if (showms) {\\r\\n        const ms = ns.sprintf(\\\"%03d\\\", date.getUTCMilliseconds());\\r\\n        return date.toLocaleTimeString(\\\"it-IT\\\") + \\\".\\\" + ms;\\r\\n    }\\r\\n    else {\\r\\n        return date.toLocaleTimeString(\\\"it-IT\\\");\\r\\n    }\\r\\n}\\r\\nexport async function doBackdoors(ns) {\\r\\n    //const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"w0r1d_d43m0n\\\", \\\"b-and-a\\\", \\\"ecorp\\\", \\\"fulcrumassets\\\", \\\"fulcrumtech\\\"];\\r\\n    //const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"omnitek\\\", \\\"kuai-gong\\\", \\\"megacorp\\\"];\\r\\n    const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"w0r1d_d43m0n\\\"];\\r\\n    const hosts = mapHosts(ns);\\r\\n    for (const [hostName, trail] of Object.entries(hosts)) {\\r\\n        const server = ns.getServer(hostName);\\r\\n        if (!targetHosts.includes(hostName) ||\\r\\n            server.backdoorInstalled ||\\r\\n            server.requiredHackingSkill > ns.getHackingLevel() ||\\r\\n            !server.hasAdminRights)\\r\\n            continue;\\r\\n        ns.print(hostName);\\r\\n        for (const hostHopName of trail) {\\r\\n            ns.connect(hostHopName);\\r\\n        }\\r\\n        await ns.installBackdoor();\\r\\n        ns.connect(\\\"home\\\");\\r\\n    }\\r\\n}\\r\\nexport function cleanLogs(ns) {\\r\\n    ns.disableLog(\\\"disableLog\\\");\\r\\n    ns.disableLog(\\\"ALL\\\");\\r\\n    // ns.disableLog(\\\"sleep\\\")\\r\\n    // ns.disableLog(\\\"exec\\\")\\r\\n    // ns.disableLog(\\\"getServerMaxRam\\\")\\r\\n    // ns.disableLog(\\\"getServerSecurityLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerMinSecurityLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerMaxMoney\\\")\\r\\n    // ns.disableLog(\\\"getHackingLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerRequiredHackingLevel\\\")\\r\\n    // ns.disableLog(\\\"scan\\\")\\r\\n    // ns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n    // ns.disableLog(\\\"getServerUsedRam\\\")\\r\\n}\\r\\nexport const ALL_FACTIONS = [\\r\\n    \\\"Illuminati\\\",\\r\\n    \\\"Daedalus\\\",\\r\\n    \\\"The Covenant\\\",\\r\\n    \\\"ECorp\\\",\\r\\n    \\\"MegaCorp\\\",\\r\\n    \\\"Bachman & Associates\\\",\\r\\n    \\\"Blade Industries\\\",\\r\\n    \\\"NWO\\\",\\r\\n    \\\"Clarke Incorporated\\\",\\r\\n    \\\"OmniTek Incorporated\\\",\\r\\n    \\\"Four Sigma\\\",\\r\\n    \\\"KuaiGong International\\\",\\r\\n    \\\"Fulcrum Secret Technologies\\\",\\r\\n    \\\"BitRunners\\\",\\r\\n    \\\"The Black Hand\\\",\\r\\n    \\\"NiteSec\\\",\\r\\n    \\\"Aevum\\\",\\r\\n    \\\"Chongqing\\\",\\r\\n    \\\"Ishima\\\",\\r\\n    \\\"New Tokyo\\\",\\r\\n    \\\"Sector-12\\\",\\r\\n    \\\"Volhaven\\\",\\r\\n    \\\"Speakers for the Dead\\\",\\r\\n    \\\"The Dark Army\\\",\\r\\n    \\\"The Syndicate\\\",\\r\\n    \\\"Silhouette\\\",\\r\\n    \\\"Tetrads\\\",\\r\\n    \\\"Slum Snakes\\\",\\r\\n    \\\"Netburners\\\",\\r\\n    \\\"Tian Di Hui\\\",\\r\\n    \\\"CyberSec\\\",\\r\\n    \\\"Bladeburners\\\",\\r\\n    \\\"Church of the Machine God\\\",\\r\\n];\\r\\nexport async function writeOut(ns, data, startTime, endTime, result, startSec, startCash) {\\r\\n    if (data.writeFile !== \\\"\\\") {\\r\\n        const outstr = ns.sprintf(\\\"%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\", data.target, data.uid, data.batchId, data.realTimeStart + data.offset, data.realTimeStart + data.finish, data.operationTime, startTime, endTime, endTime - startTime, startTime - (data.realTimeStart + data.offset), endTime - (data.realTimeStart + data.finish), endTime - startTime - data.operationTime, result, startSec.toFixed(2), ns.getServerSecurityLevel(data.target).toFixed(2), ns.nFormat(startCash, \\\"($0.000a)\\\"), ns.nFormat(ns.getServerMoneyAvailable(data.target), \\\"($0.000a)\\\"));\\r\\n        while (!await ns.tryWritePort(ReservedPorts.HACK_WRITE_INFO, [data.writeFile, outstr]))\\r\\n            ;\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi91dGlsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLE1BQU0sQ0FBTixJQUFZLGFBSVg7QUFKRCxXQUFZLGFBQWE7SUFDckIsaUVBQWdCLENBQUE7SUFDaEIsaUVBQVksQ0FBQTtJQUNaLHVFQUFlLENBQUE7QUFDbkIsQ0FBQyxFQUpXLGFBQWEsS0FBYixhQUFhLFFBSXhCO0FBRUQsTUFBTSxDQUFDLE1BQU0sUUFBUSxHQUFHLHFCQUFxQixDQUFDO0FBQzlDLE1BQU0sQ0FBQyxNQUFNLE1BQU0sR0FBRyxtQkFBbUIsQ0FBQztBQUMxQyxNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUcsbUJBQW1CLENBQUM7QUFDMUMsTUFBTSxDQUFDLE1BQU0sTUFBTSxHQUFHLGNBQWMsQ0FBQztBQUVyQyxNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUcsQ0FBQyxPQUFPLEVBQUUsV0FBVyxFQUFFLFdBQVcsRUFBRSxXQUFXLEVBQUUsUUFBUSxFQUFFLFVBQVUsQ0FBQyxDQUFDO0FBRTdGLE1BQU0sVUFBVSxJQUFJLENBQUMsRUFBTSxFQUFFLEdBQVcsRUFBRSxHQUFHLElBQXlCO0lBQ2xFLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEdBQUcsR0FBRyxFQUFFLElBQUksSUFBSSxFQUFFLENBQUMsa0JBQWtCLENBQUMsT0FBTyxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDO0FBQ3hGLENBQUM7QUFFRCxNQUFNLFVBQVUsWUFBWSxDQUFDLEVBQU0sRUFBRSxRQUFnQjtJQUNqRCxJQUFJLEVBQUUsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDNUIsT0FBTztLQUNWO0lBRUQsSUFBSSxLQUFLLEdBQUcsQ0FBQyxDQUFDO0lBQ2QsSUFBSSxFQUFFLENBQUMsVUFBVSxDQUFDLGNBQWMsRUFB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\",\"filename\":\"/lib/util.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":13.25,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":85559,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"purchaseTor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"purchaseProgram\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"connect\",\"cost\":2},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.stanek.charge(ns.args[0], ns.args[1]);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hhcmdlLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL3N0YW5lay9jaGFyZ2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUM5QixPQUFPLElBQUksRUFBRTtRQUNULE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7S0FDakQ7QUFDTCxDQUFDIn0=\",\"filename\":\"/lib/stanek/charge.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/stanek/charge.js\",\"url\":\"blob:file:///350192a3-d4fd-47d2-90b5-0d87cc7a8de5\",\"moduleSequenceNumber\":99869}],\"dependents\":[],\"ramUsage\":2,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":99869,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.charge\",\"cost\":0.4}]}}],\"serversOnNetwork\":[\"taiyang-digital\",\"fulcrumtech\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":516,\"serverGrowth\":0,\"suppression\":0,\"activeSuppressionThreads\":[],\"suppressionIntervalID\":null,\"suppressionLastUpdateTime\":0}},\"I.I.I.I\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":false,\"ip\":\"47.0.9.9\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"ramUsed\":252,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"script\\\":\\\"/lib/exec/grow.js\\\",\\\"host\\\":\\\"I.I.I.I\\\",\\\"numThreads\\\":144,\\\"target\\\":\\\"phantasy\\\",\\\"hackLevelTiming\\\":153.19873646097005,\\\"hackLevelEffect\\\":204,\\\"batchId\\\":20,\\\"offset\\\":32800,\\\"operationTime\\\":142114,\\\"finish\\\":174914,\\\"realTimeStart\\\":1647907321842,\\\"uid\\\":\\\"020-2G-I.I.I.I\\\",\\\"writeFile\\\":\\\"\\\"}\"],\"dataMap\":{},\"filename\":\"/lib/exec/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38.010000000000005,\"pid\":1338,\"ramUsage\":1.75,\"server\":\"I.I.I.I\",\"threads\":144,\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///d0ddaaaf-4d32-4d55-87bb-0e8d43144678\",\"moduleSequenceNumber\":84583}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.grow(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLElBQUksR0FBdUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFFbkUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDdkIsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7UUFDeEMsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7S0FDM0MsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyJ9\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///d0ddaaaf-4d32-4d55-87bb-0e8d43144678\",\"moduleSequenceNumber\":84583}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":84583,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.weaken(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxJQUFJLEdBQXVCLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO0lBRW5FLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFO1FBQ3pCLGtCQUFrQixFQUFFLElBQUksQ0FBQyxlQUFlO1FBQ3hDLGtCQUFrQixFQUFFLElBQUksQ0FBQyxlQUFlO0tBQzNDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///63d0ec7a-0645-4d62-9d35-48d1d6f06ba3\",\"moduleSequenceNumber\":84741}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":84741,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.hack(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLElBQUksR0FBdUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFFbkUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDdkIsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7UUFDeEMsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7S0FDM0MsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyJ9\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///3d07db30-7806-4d01-bd18-310848494abc\",\"moduleSequenceNumber\":93727}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":93727,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export var ReservedPorts;\\r\\n(function (ReservedPorts) {\\r\\n    ReservedPorts[ReservedPorts[\\\"HACKING_INFO\\\"] = 1] = \\\"HACKING_INFO\\\";\\r\\n    ReservedPorts[ReservedPorts[\\\"HACKNET_INFO\\\"] = 2] = \\\"HACKNET_INFO\\\";\\r\\n    ReservedPorts[ReservedPorts[\\\"HACK_WRITE_INFO\\\"] = 3] = \\\"HACK_WRITE_INFO\\\";\\r\\n})(ReservedPorts || (ReservedPorts = {}));\\r\\nexport const WEAKENJS = \\\"/lib/exec/weaken.js\\\";\\r\\nexport const GROWJS = \\\"/lib/exec/grow.js\\\";\\r\\nexport const HACKJS = \\\"/lib/exec/hack.js\\\";\\r\\nexport const UTILJS = \\\"/lib/util.js\\\";\\r\\nexport const CITIES = [\\\"Aevum\\\", \\\"Chongqing\\\", \\\"Sector-12\\\", \\\"New Tokyo\\\", \\\"Ishima\\\", \\\"Volhaven\\\"];\\r\\nexport function llog(ns, str, ...args) {\\r\\n    ns.print(ns.sprintf(\\\"%8s \\\" + str, new Date().toLocaleTimeString(\\\"it-IT\\\"), ...args));\\r\\n}\\r\\nexport function softenServer(ns, hostname) {\\r\\n    if (ns.hasRootAccess(hostname)) {\\r\\n        return;\\r\\n    }\\r\\n    let ports = 0;\\r\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n        ns.brutessh(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n        ns.ftpcrack(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n        ns.httpworm(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n        ns.relaysmtp(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n        ns.sqlinject(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ports >= ns.getServerNumPortsRequired(hostname)) {\\r\\n        ns.nuke(hostname);\\r\\n    }\\r\\n}\\r\\nexport function serverIsHackable(ns, hostname) {\\r\\n    return ns.hasRootAccess(hostname) && ns.getHackingLevel() >= ns.getServerRequiredHackingLevel(hostname);\\r\\n}\\r\\nexport function canExecuteOnServer(ns, hostname) {\\r\\n    return ns.hasRootAccess(hostname) && ns.getServerMaxRam(hostname) > 0;\\r\\n}\\r\\nexport function mapHosts(ns, hosts = {}, parents = [], current = \\\"home\\\") {\\r\\n    const newParents = parents.concat(current);\\r\\n    hosts[current] = newParents;\\r\\n    const children = ns.scan(current).filter((element) => !parents.includes(element));\\r\\n    for (const child of children) {\\r\\n        mapHosts(ns, hosts, newParents, child);\\r\\n    }\\r\\n    return hosts;\\r\\n}\\r\\nexport function allHosts(ns) {\\r\\n    return Object.keys(mapHosts(ns));\\r\\n}\\r\\nexport function doProgramBuys(ns) {\\r\\n    const player = ns.getPlayer();\\r\\n    if (!player.tor && player.money > 200e3)\\r\\n        ns.purchaseTor();\\r\\n    if (!ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\") && player.money > 500e3)\\r\\n        ns.purchaseProgram(\\\"BruteSSH.exe\\\");\\r\\n    if (!ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\") && player.money > 1500e3)\\r\\n        ns.purchaseProgram(\\\"FTPCrack.exe\\\");\\r\\n    if (!ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\") && player.money > 5e6)\\r\\n        ns.purchaseProgram(\\\"relaySMTP.exe\\\");\\r\\n    if (!ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\") && player.money > 30e6)\\r\\n        ns.purchaseProgram(\\\"HTTPWorm.exe\\\");\\r\\n    if (!ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\") && player.money > 250e6)\\r\\n        ns.purchaseProgram(\\\"SQLInject.exe\\\");\\r\\n}\\r\\nexport function doBuyAndSoftenAll(ns) {\\r\\n    doProgramBuys(ns);\\r\\n    for (const hostname of allHosts(ns)) {\\r\\n        softenServer(ns, hostname);\\r\\n    }\\r\\n}\\r\\nexport function stFormat(ns, ms, showms = false, showfull = false) {\\r\\n    let timeLeft = ms;\\r\\n    const hours = Math.floor(ms / (1000 * 60 * 60));\\r\\n    timeLeft -= hours * (1000 * 60 * 60);\\r\\n    const minutes = Math.floor(timeLeft / (1000 * 60));\\r\\n    timeLeft -= minutes * (1000 * 60);\\r\\n    const seconds = Math.floor(timeLeft / 1000);\\r\\n    timeLeft -= seconds * 1000;\\r\\n    const milliseconds = timeLeft;\\r\\n    if (showms) {\\r\\n        if (hours > 0 || showfull)\\r\\n            return ns.sprintf(\\\"%02d:%02d:%02d.%03d\\\", hours, minutes, seconds, milliseconds);\\r\\n        if (minutes > 0)\\r\\n            return ns.sprintf(\\\"%02d:%02d.%03d\\\", minutes, seconds, milliseconds);\\r\\n        return ns.sprintf(\\\"%02d.%03d\\\", seconds, milliseconds);\\r\\n    }\\r\\n    else {\\r\\n        if (hours > 0 || showfull)\\r\\n            return ns.sprintf(\\\"%02d:%02d:%02d\\\", hours, minutes, seconds);\\r\\n        if (minutes > 0)\\r\\n            return ns.sprintf(\\\"%02d:%02d\\\", minutes, seconds);\\r\\n        return ns.sprintf(\\\"%02d\\\", seconds);\\r\\n    }\\r\\n}\\r\\nexport function stdFormat(ns, offset = 0, showms = false) {\\r\\n    const date = new Date(new Date().getTime() + offset);\\r\\n    if (showms) {\\r\\n        const ms = ns.sprintf(\\\"%03d\\\", date.getUTCMilliseconds());\\r\\n        return date.toLocaleTimeString(\\\"it-IT\\\") + \\\".\\\" + ms;\\r\\n    }\\r\\n    else {\\r\\n        return date.toLocaleTimeString(\\\"it-IT\\\");\\r\\n    }\\r\\n}\\r\\nexport async function doBackdoors(ns) {\\r\\n    //const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"w0r1d_d43m0n\\\", \\\"b-and-a\\\", \\\"ecorp\\\", \\\"fulcrumassets\\\", \\\"fulcrumtech\\\"];\\r\\n    //const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"omnitek\\\", \\\"kuai-gong\\\", \\\"megacorp\\\"];\\r\\n    const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"w0r1d_d43m0n\\\"];\\r\\n    const hosts = mapHosts(ns);\\r\\n    for (const [hostName, trail] of Object.entries(hosts)) {\\r\\n        const server = ns.getServer(hostName);\\r\\n        if (!targetHosts.includes(hostName) ||\\r\\n            server.backdoorInstalled ||\\r\\n            server.requiredHackingSkill > ns.getHackingLevel() ||\\r\\n            !server.hasAdminRights)\\r\\n            continue;\\r\\n        ns.print(hostName);\\r\\n        for (const hostHopName of trail) {\\r\\n            ns.connect(hostHopName);\\r\\n        }\\r\\n        await ns.installBackdoor();\\r\\n        ns.connect(\\\"home\\\");\\r\\n    }\\r\\n}\\r\\nexport function cleanLogs(ns) {\\r\\n    ns.disableLog(\\\"disableLog\\\");\\r\\n    ns.disableLog(\\\"ALL\\\");\\r\\n    // ns.disableLog(\\\"sleep\\\")\\r\\n    // ns.disableLog(\\\"exec\\\")\\r\\n    // ns.disableLog(\\\"getServerMaxRam\\\")\\r\\n    // ns.disableLog(\\\"getServerSecurityLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerMinSecurityLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerMaxMoney\\\")\\r\\n    // ns.disableLog(\\\"getHackingLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerRequiredHackingLevel\\\")\\r\\n    // ns.disableLog(\\\"scan\\\")\\r\\n    // ns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n    // ns.disableLog(\\\"getServerUsedRam\\\")\\r\\n}\\r\\nexport const ALL_FACTIONS = [\\r\\n    \\\"Illuminati\\\",\\r\\n    \\\"Daedalus\\\",\\r\\n    \\\"The Covenant\\\",\\r\\n    \\\"ECorp\\\",\\r\\n    \\\"MegaCorp\\\",\\r\\n    \\\"Bachman & Associates\\\",\\r\\n    \\\"Blade Industries\\\",\\r\\n    \\\"NWO\\\",\\r\\n    \\\"Clarke Incorporated\\\",\\r\\n    \\\"OmniTek Incorporated\\\",\\r\\n    \\\"Four Sigma\\\",\\r\\n    \\\"KuaiGong International\\\",\\r\\n    \\\"Fulcrum Secret Technologies\\\",\\r\\n    \\\"BitRunners\\\",\\r\\n    \\\"The Black Hand\\\",\\r\\n    \\\"NiteSec\\\",\\r\\n    \\\"Aevum\\\",\\r\\n    \\\"Chongqing\\\",\\r\\n    \\\"Ishima\\\",\\r\\n    \\\"New Tokyo\\\",\\r\\n    \\\"Sector-12\\\",\\r\\n    \\\"Volhaven\\\",\\r\\n    \\\"Speakers for the Dead\\\",\\r\\n    \\\"The Dark Army\\\",\\r\\n    \\\"The Syndicate\\\",\\r\\n    \\\"Silhouette\\\",\\r\\n    \\\"Tetrads\\\",\\r\\n    \\\"Slum Snakes\\\",\\r\\n    \\\"Netburners\\\",\\r\\n    \\\"Tian Di Hui\\\",\\r\\n    \\\"CyberSec\\\",\\r\\n    \\\"Bladeburners\\\",\\r\\n    \\\"Church of the Machine God\\\",\\r\\n];\\r\\nexport async function writeOut(ns, data, startTime, endTime, result, startSec, startCash) {\\r\\n    if (data.writeFile !== \\\"\\\") {\\r\\n        const outstr = ns.sprintf(\\\"%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\", data.target, data.uid, data.batchId, data.realTimeStart + data.offset, data.realTimeStart + data.finish, data.operationTime, startTime, endTime, endTime - startTime, startTime - (data.realTimeStart + data.offset), endTime - (data.realTimeStart + data.finish), endTime - startTime - data.operationTime, result, startSec.toFixed(2), ns.getServerSecurityLevel(data.target).toFixed(2), ns.nFormat(startCash, \\\"($0.000a)\\\"), ns.nFormat(ns.getServerMoneyAvailable(data.target), \\\"($0.000a)\\\"));\\r\\n        while (!await ns.tryWritePort(ReservedPorts.HACK_WRITE_INFO, [data.writeFile, outstr]))\\r\\n            ;\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi91dGlsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLE1BQU0sQ0FBTixJQUFZLGFBSVg7QUFKRCxXQUFZLGFBQWE7SUFDckIsaUVBQWdCLENBQUE7SUFDaEIsaUVBQVksQ0FBQTtJQUNaLHVFQUFlLENBQUE7QUFDbkIsQ0FBQyxFQUpXLGFBQWEsS0FBYixhQUFhLFFBSXhCO0FBRUQsTUFBTSxDQUFDLE1BQU0sUUFBUSxHQUFHLHFCQUFxQixDQUFDO0FBQzlDLE1BQU0sQ0FBQyxNQUFNLE1BQU0sR0FBRyxtQkFBbUIsQ0FBQztBQUMxQyxNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUcsbUJBQW1CLENBQUM7QUFDMUMsTUFBTSxDQUFDLE1BQU0sTUFBTSxHQUFHLGNBQWMsQ0FBQztBQUVyQyxNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUcsQ0FBQyxPQUFPLEVBQUUsV0FBVyxFQUFFLFdBQVcsRUFBRSxXQUFXLEVBQUUsUUFBUSxFQUFFLFVBQVUsQ0FBQyxDQUFDO0FBRTdGLE1BQU0sVUFBVSxJQUFJLENBQUMsRUFBTSxFQUFFLEdBQVcsRUFBRSxHQUFHLElBQXlCO0lBQ2xFLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEdBQUcsR0FBRyxFQUFFLElBQUksSUFBSSxFQUFFLENBQUMsa0JBQWtCLENBQUMsT0FBTyxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDO0FBQ3hGLENBQUM7QUFFRCxNQUFNLFVBQVUsWUFBWSxDQUFDLEVBQU0sRUFBRSxRQUFnQjtJQUNqRCxJQUFJLEVBQUUsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDNUIsT0FBTztLQUNWO0lBRUQsSUFBSSxLQUFLLEdBQUcsQ0FBQyxDQUFDO0lBQ2QsSUFBSSxFQUFFLENBQUMsVUFBVSxDQUFDLGNBQWMsRUFB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\",\"filename\":\"/lib/util.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":13.25,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":84373,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"purchaseTor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"purchaseProgram\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"connect\",\"cost\":2},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.stanek.charge(ns.args[0], ns.args[1]);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hhcmdlLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL3N0YW5lay9jaGFyZ2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUM5QixPQUFPLElBQUksRUFBRTtRQUNULE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7S0FDakQ7QUFDTCxDQUFDIn0=\",\"filename\":\"/lib/stanek/charge.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/stanek/charge.js\",\"url\":\"blob:file:///af092adf-b243-4552-a82f-9883f02a2ff5\",\"moduleSequenceNumber\":99882}],\"dependents\":[],\"ramUsage\":2,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":99882,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.charge\",\"cost\":0.4}]}}],\"serversOnNetwork\":[\"avmnite-02h\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":355,\"serverGrowth\":0,\"suppression\":0,\"activeSuppressionThreads\":[],\"suppressionIntervalID\":null,\"suppressionLastUpdateTime\":0}},\"avmnite-02h\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":false,\"ip\":\"36.4.1.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.grow(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLElBQUksR0FBdUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFFbkUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDdkIsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7UUFDeEMsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7S0FDM0MsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyJ9\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":83825,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.weaken(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxJQUFJLEdBQXVCLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO0lBRW5FLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFO1FBQ3pCLGtCQUFrQixFQUFFLElBQUksQ0FBQyxlQUFlO1FBQ3hDLGtCQUFrQixFQUFFLElBQUksQ0FBQyxlQUFlO0tBQzNDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///8ba366cc-ca6a-4a6f-98dc-f1ff283b0026\",\"moduleSequenceNumber\":83841}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":83841,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.hack(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLElBQUksR0FBdUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFFbkUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDdkIsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7UUFDeEMsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7S0FDM0MsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyJ9\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":83829,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export var ReservedPorts;\\r\\n(function (ReservedPorts) {\\r\\n    ReservedPorts[ReservedPorts[\\\"HACKING_INFO\\\"] = 1] = \\\"HACKING_INFO\\\";\\r\\n    ReservedPorts[ReservedPorts[\\\"HACKNET_INFO\\\"] = 2] = \\\"HACKNET_INFO\\\";\\r\\n    ReservedPorts[ReservedPorts[\\\"HACK_WRITE_INFO\\\"] = 3] = \\\"HACK_WRITE_INFO\\\";\\r\\n})(ReservedPorts || (ReservedPorts = {}));\\r\\nexport const WEAKENJS = \\\"/lib/exec/weaken.js\\\";\\r\\nexport const GROWJS = \\\"/lib/exec/grow.js\\\";\\r\\nexport const HACKJS = \\\"/lib/exec/hack.js\\\";\\r\\nexport const UTILJS = \\\"/lib/util.js\\\";\\r\\nexport const CITIES = [\\\"Aevum\\\", \\\"Chongqing\\\", \\\"Sector-12\\\", \\\"New Tokyo\\\", \\\"Ishima\\\", \\\"Volhaven\\\"];\\r\\nexport function llog(ns, str, ...args) {\\r\\n    ns.print(ns.sprintf(\\\"%8s \\\" + str, new Date().toLocaleTimeString(\\\"it-IT\\\"), ...args));\\r\\n}\\r\\nexport function softenServer(ns, hostname) {\\r\\n    if (ns.hasRootAccess(hostname)) {\\r\\n        return;\\r\\n    }\\r\\n    let ports = 0;\\r\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n        ns.brutessh(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n        ns.ftpcrack(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n        ns.httpworm(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n        ns.relaysmtp(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n        ns.sqlinject(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ports >= ns.getServerNumPortsRequired(hostname)) {\\r\\n        ns.nuke(hostname);\\r\\n    }\\r\\n}\\r\\nexport function serverIsHackable(ns, hostname) {\\r\\n    return ns.hasRootAccess(hostname) && ns.getHackingLevel() >= ns.getServerRequiredHackingLevel(hostname);\\r\\n}\\r\\nexport function canExecuteOnServer(ns, hostname) {\\r\\n    return ns.hasRootAccess(hostname) && ns.getServerMaxRam(hostname) > 0;\\r\\n}\\r\\nexport function mapHosts(ns, hosts = {}, parents = [], current = \\\"home\\\") {\\r\\n    const newParents = parents.concat(current);\\r\\n    hosts[current] = newParents;\\r\\n    const children = ns.scan(current).filter((element) => !parents.includes(element));\\r\\n    for (const child of children) {\\r\\n        mapHosts(ns, hosts, newParents, child);\\r\\n    }\\r\\n    return hosts;\\r\\n}\\r\\nexport function allHosts(ns) {\\r\\n    return Object.keys(mapHosts(ns));\\r\\n}\\r\\nexport function doProgramBuys(ns) {\\r\\n    const player = ns.getPlayer();\\r\\n    if (!player.tor && player.money > 200e3)\\r\\n        ns.purchaseTor();\\r\\n    if (!ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\") && player.money > 500e3)\\r\\n        ns.purchaseProgram(\\\"BruteSSH.exe\\\");\\r\\n    if (!ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\") && player.money > 1500e3)\\r\\n        ns.purchaseProgram(\\\"FTPCrack.exe\\\");\\r\\n    if (!ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\") && player.money > 5e6)\\r\\n        ns.purchaseProgram(\\\"relaySMTP.exe\\\");\\r\\n    if (!ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\") && player.money > 30e6)\\r\\n        ns.purchaseProgram(\\\"HTTPWorm.exe\\\");\\r\\n    if (!ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\") && player.money > 250e6)\\r\\n        ns.purchaseProgram(\\\"SQLInject.exe\\\");\\r\\n}\\r\\nexport function doBuyAndSoftenAll(ns) {\\r\\n    doProgramBuys(ns);\\r\\n    for (const hostname of allHosts(ns)) {\\r\\n        softenServer(ns, hostname);\\r\\n    }\\r\\n}\\r\\nexport function stFormat(ns, ms, showms = false, showfull = false) {\\r\\n    let timeLeft = ms;\\r\\n    const hours = Math.floor(ms / (1000 * 60 * 60));\\r\\n    timeLeft -= hours * (1000 * 60 * 60);\\r\\n    const minutes = Math.floor(timeLeft / (1000 * 60));\\r\\n    timeLeft -= minutes * (1000 * 60);\\r\\n    const seconds = Math.floor(timeLeft / 1000);\\r\\n    timeLeft -= seconds * 1000;\\r\\n    const milliseconds = timeLeft;\\r\\n    if (showms) {\\r\\n        if (hours > 0 || showfull)\\r\\n            return ns.sprintf(\\\"%02d:%02d:%02d.%03d\\\", hours, minutes, seconds, milliseconds);\\r\\n        if (minutes > 0)\\r\\n            return ns.sprintf(\\\"%02d:%02d.%03d\\\", minutes, seconds, milliseconds);\\r\\n        return ns.sprintf(\\\"%02d.%03d\\\", seconds, milliseconds);\\r\\n    }\\r\\n    else {\\r\\n        if (hours > 0 || showfull)\\r\\n            return ns.sprintf(\\\"%02d:%02d:%02d\\\", hours, minutes, seconds);\\r\\n        if (minutes > 0)\\r\\n            return ns.sprintf(\\\"%02d:%02d\\\", minutes, seconds);\\r\\n        return ns.sprintf(\\\"%02d\\\", seconds);\\r\\n    }\\r\\n}\\r\\nexport function stdFormat(ns, offset = 0, showms = false) {\\r\\n    const date = new Date(new Date().getTime() + offset);\\r\\n    if (showms) {\\r\\n        const ms = ns.sprintf(\\\"%03d\\\", date.getUTCMilliseconds());\\r\\n        return date.toLocaleTimeString(\\\"it-IT\\\") + \\\".\\\" + ms;\\r\\n    }\\r\\n    else {\\r\\n        return date.toLocaleTimeString(\\\"it-IT\\\");\\r\\n    }\\r\\n}\\r\\nexport async function doBackdoors(ns) {\\r\\n    //const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"w0r1d_d43m0n\\\", \\\"b-and-a\\\", \\\"ecorp\\\", \\\"fulcrumassets\\\", \\\"fulcrumtech\\\"];\\r\\n    //const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"omnitek\\\", \\\"kuai-gong\\\", \\\"megacorp\\\"];\\r\\n    const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"w0r1d_d43m0n\\\"];\\r\\n    const hosts = mapHosts(ns);\\r\\n    for (const [hostName, trail] of Object.entries(hosts)) {\\r\\n        const server = ns.getServer(hostName);\\r\\n        if (!targetHosts.includes(hostName) ||\\r\\n            server.backdoorInstalled ||\\r\\n            server.requiredHackingSkill > ns.getHackingLevel() ||\\r\\n            !server.hasAdminRights)\\r\\n            continue;\\r\\n        ns.print(hostName);\\r\\n        for (const hostHopName of trail) {\\r\\n            ns.connect(hostHopName);\\r\\n        }\\r\\n        await ns.installBackdoor();\\r\\n        ns.connect(\\\"home\\\");\\r\\n    }\\r\\n}\\r\\nexport function cleanLogs(ns) {\\r\\n    ns.disableLog(\\\"disableLog\\\");\\r\\n    ns.disableLog(\\\"ALL\\\");\\r\\n    // ns.disableLog(\\\"sleep\\\")\\r\\n    // ns.disableLog(\\\"exec\\\")\\r\\n    // ns.disableLog(\\\"getServerMaxRam\\\")\\r\\n    // ns.disableLog(\\\"getServerSecurityLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerMinSecurityLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerMaxMoney\\\")\\r\\n    // ns.disableLog(\\\"getHackingLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerRequiredHackingLevel\\\")\\r\\n    // ns.disableLog(\\\"scan\\\")\\r\\n    // ns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n    // ns.disableLog(\\\"getServerUsedRam\\\")\\r\\n}\\r\\nexport const ALL_FACTIONS = [\\r\\n    \\\"Illuminati\\\",\\r\\n    \\\"Daedalus\\\",\\r\\n    \\\"The Covenant\\\",\\r\\n    \\\"ECorp\\\",\\r\\n    \\\"MegaCorp\\\",\\r\\n    \\\"Bachman & Associates\\\",\\r\\n    \\\"Blade Industries\\\",\\r\\n    \\\"NWO\\\",\\r\\n    \\\"Clarke Incorporated\\\",\\r\\n    \\\"OmniTek Incorporated\\\",\\r\\n    \\\"Four Sigma\\\",\\r\\n    \\\"KuaiGong International\\\",\\r\\n    \\\"Fulcrum Secret Technologies\\\",\\r\\n    \\\"BitRunners\\\",\\r\\n    \\\"The Black Hand\\\",\\r\\n    \\\"NiteSec\\\",\\r\\n    \\\"Aevum\\\",\\r\\n    \\\"Chongqing\\\",\\r\\n    \\\"Ishima\\\",\\r\\n    \\\"New Tokyo\\\",\\r\\n    \\\"Sector-12\\\",\\r\\n    \\\"Volhaven\\\",\\r\\n    \\\"Speakers for the Dead\\\",\\r\\n    \\\"The Dark Army\\\",\\r\\n    \\\"The Syndicate\\\",\\r\\n    \\\"Silhouette\\\",\\r\\n    \\\"Tetrads\\\",\\r\\n    \\\"Slum Snakes\\\",\\r\\n    \\\"Netburners\\\",\\r\\n    \\\"Tian Di Hui\\\",\\r\\n    \\\"CyberSec\\\",\\r\\n    \\\"Bladeburners\\\",\\r\\n    \\\"Church of the Machine God\\\",\\r\\n];\\r\\nexport async function writeOut(ns, data, startTime, endTime, result, startSec, startCash) {\\r\\n    if (data.writeFile !== \\\"\\\") {\\r\\n        const outstr = ns.sprintf(\\\"%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\", data.target, data.uid, data.batchId, data.realTimeStart + data.offset, data.realTimeStart + data.finish, data.operationTime, startTime, endTime, endTime - startTime, startTime - (data.realTimeStart + data.offset), endTime - (data.realTimeStart + data.finish), endTime - startTime - data.operationTime, result, startSec.toFixed(2), ns.getServerSecurityLevel(data.target).toFixed(2), ns.nFormat(startCash, \\\"($0.000a)\\\"), ns.nFormat(ns.getServerMoneyAvailable(data.target), \\\"($0.000a)\\\"));\\r\\n        while (!await ns.tryWritePort(ReservedPorts.HACK_WRITE_INFO, [data.writeFile, outstr]))\\r\\n            ;\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi91dGlsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLE1BQU0sQ0FBTixJQUFZLGFBSVg7QUFKRCxXQUFZLGFBQWE7SUFDckIsaUVBQWdCLENBQUE7SUFDaEIsaUVBQVksQ0FBQTtJQUNaLHVFQUFlLENBQUE7QUFDbkIsQ0FBQyxFQUpXLGFBQWEsS0FBYixhQUFhLFFBSXhCO0FBRUQsTUFBTSxDQUFDLE1BQU0sUUFBUSxHQUFHLHFCQUFxQixDQUFDO0FBQzlDLE1BQU0sQ0FBQyxNQUFNLE1BQU0sR0FBRyxtQkFBbUIsQ0FBQztBQUMxQyxNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUcsbUJBQW1CLENBQUM7QUFDMUMsTUFBTSxDQUFDLE1BQU0sTUFBTSxHQUFHLGNBQWMsQ0FBQztBQUVyQyxNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUcsQ0FBQyxPQUFPLEVBQUUsV0FBVyxFQUFFLFdBQVcsRUFBRSxXQUFXLEVBQUUsUUFBUSxFQUFFLFVBQVUsQ0FBQyxDQUFDO0FBRTdGLE1BQU0sVUFBVSxJQUFJLENBQUMsRUFBTSxFQUFFLEdBQVcsRUFBRSxHQUFHLElBQXlCO0lBQ2xFLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEdBQUcsR0FBRyxFQUFFLElBQUksSUFBSSxFQUFFLENBQUMsa0JBQWtCLENBQUMsT0FBTyxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDO0FBQ3hGLENBQUM7QUFFRCxNQUFNLFVBQVUsWUFBWSxDQUFDLEVBQU0sRUFBRSxRQUFnQjtJQUNqRCxJQUFJLEVBQUUsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDNUIsT0FBTztLQUNWO0lBRUQsSUFBSSxLQUFLLEdBQUcsQ0FBQyxDQUFDO0lBQ2QsSUFBSSxFQUFFLENBQUMsVUFBVSxDQUFDLGNBQWMsRUFB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\",\"filename\":\"/lib/util.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":13.25,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":83831,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"purchaseTor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"purchaseProgram\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"connect\",\"cost\":2},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.stanek.charge(ns.args[0], ns.args[1]);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hhcmdlLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL3N0YW5lay9jaGFyZ2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUM5QixPQUFPLElBQUksRUFBRTtRQUNULE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7S0FDakQ7QUFDTCxDQUFDIn0=\",\"filename\":\"/lib/stanek/charge.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/stanek/charge.js\",\"url\":\"blob:file:///a7e7abab-6d76-4f77-ae9e-d80e7e211508\",\"moduleSequenceNumber\":99881}],\"dependents\":[],\"ramUsage\":2,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":99881,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.charge\",\"cost\":0.4}]}}],\"serversOnNetwork\":[\"silver-helix\",\"syscore\",\"I.I.I.I\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":216,\"serverGrowth\":0,\"suppression\":0,\"activeSuppressionThreads\":[],\"suppressionIntervalID\":null,\"suppressionLastUpdateTime\":0}},\".\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\".\",\"httpPortOpen\":true,\"ip\":\"51.6.4.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.grow(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLElBQUksR0FBdUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFFbkUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDdkIsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7UUFDeEMsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7S0FDM0MsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyJ9\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\".\",\"moduleSequenceNumber\":85569,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.weaken(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxJQUFJLEdBQXVCLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO0lBRW5FLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFO1FBQ3pCLGtCQUFrQixFQUFFLElBQUksQ0FBQyxlQUFlO1FBQ3hDLGtCQUFrQixFQUFFLElBQUksQ0FBQyxlQUFlO0tBQzNDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///d8e7868f-1106-4e15-80b5-835674abb5c3\",\"moduleSequenceNumber\":85594}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\".\",\"moduleSequenceNumber\":85594,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.hack(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLElBQUksR0FBdUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFFbkUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDdkIsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7UUFDeEMsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7S0FDM0MsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyJ9\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\".\",\"moduleSequenceNumber\":85573,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export var ReservedPorts;\\r\\n(function (ReservedPorts) {\\r\\n    ReservedPorts[ReservedPorts[\\\"HACKING_INFO\\\"] = 1] = \\\"HACKING_INFO\\\";\\r\\n    ReservedPorts[ReservedPorts[\\\"HACKNET_INFO\\\"] = 2] = \\\"HACKNET_INFO\\\";\\r\\n    ReservedPorts[ReservedPorts[\\\"HACK_WRITE_INFO\\\"] = 3] = \\\"HACK_WRITE_INFO\\\";\\r\\n})(ReservedPorts || (ReservedPorts = {}));\\r\\nexport const WEAKENJS = \\\"/lib/exec/weaken.js\\\";\\r\\nexport const GROWJS = \\\"/lib/exec/grow.js\\\";\\r\\nexport const HACKJS = \\\"/lib/exec/hack.js\\\";\\r\\nexport const UTILJS = \\\"/lib/util.js\\\";\\r\\nexport const CITIES = [\\\"Aevum\\\", \\\"Chongqing\\\", \\\"Sector-12\\\", \\\"New Tokyo\\\", \\\"Ishima\\\", \\\"Volhaven\\\"];\\r\\nexport function llog(ns, str, ...args) {\\r\\n    ns.print(ns.sprintf(\\\"%8s \\\" + str, new Date().toLocaleTimeString(\\\"it-IT\\\"), ...args));\\r\\n}\\r\\nexport function softenServer(ns, hostname) {\\r\\n    if (ns.hasRootAccess(hostname)) {\\r\\n        return;\\r\\n    }\\r\\n    let ports = 0;\\r\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n        ns.brutessh(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n        ns.ftpcrack(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n        ns.httpworm(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n        ns.relaysmtp(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n        ns.sqlinject(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ports >= ns.getServerNumPortsRequired(hostname)) {\\r\\n        ns.nuke(hostname);\\r\\n    }\\r\\n}\\r\\nexport function serverIsHackable(ns, hostname) {\\r\\n    return ns.hasRootAccess(hostname) && ns.getHackingLevel() >= ns.getServerRequiredHackingLevel(hostname);\\r\\n}\\r\\nexport function canExecuteOnServer(ns, hostname) {\\r\\n    return ns.hasRootAccess(hostname) && ns.getServerMaxRam(hostname) > 0;\\r\\n}\\r\\nexport function mapHosts(ns, hosts = {}, parents = [], current = \\\"home\\\") {\\r\\n    const newParents = parents.concat(current);\\r\\n    hosts[current] = newParents;\\r\\n    const children = ns.scan(current).filter((element) => !parents.includes(element));\\r\\n    for (const child of children) {\\r\\n        mapHosts(ns, hosts, newParents, child);\\r\\n    }\\r\\n    return hosts;\\r\\n}\\r\\nexport function allHosts(ns) {\\r\\n    return Object.keys(mapHosts(ns));\\r\\n}\\r\\nexport function doProgramBuys(ns) {\\r\\n    const player = ns.getPlayer();\\r\\n    if (!player.tor && player.money > 200e3)\\r\\n        ns.purchaseTor();\\r\\n    if (!ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\") && player.money > 500e3)\\r\\n        ns.purchaseProgram(\\\"BruteSSH.exe\\\");\\r\\n    if (!ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\") && player.money > 1500e3)\\r\\n        ns.purchaseProgram(\\\"FTPCrack.exe\\\");\\r\\n    if (!ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\") && player.money > 5e6)\\r\\n        ns.purchaseProgram(\\\"relaySMTP.exe\\\");\\r\\n    if (!ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\") && player.money > 30e6)\\r\\n        ns.purchaseProgram(\\\"HTTPWorm.exe\\\");\\r\\n    if (!ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\") && player.money > 250e6)\\r\\n        ns.purchaseProgram(\\\"SQLInject.exe\\\");\\r\\n}\\r\\nexport function doBuyAndSoftenAll(ns) {\\r\\n    doProgramBuys(ns);\\r\\n    for (const hostname of allHosts(ns)) {\\r\\n        softenServer(ns, hostname);\\r\\n    }\\r\\n}\\r\\nexport function stFormat(ns, ms, showms = false, showfull = false) {\\r\\n    let timeLeft = ms;\\r\\n    const hours = Math.floor(ms / (1000 * 60 * 60));\\r\\n    timeLeft -= hours * (1000 * 60 * 60);\\r\\n    const minutes = Math.floor(timeLeft / (1000 * 60));\\r\\n    timeLeft -= minutes * (1000 * 60);\\r\\n    const seconds = Math.floor(timeLeft / 1000);\\r\\n    timeLeft -= seconds * 1000;\\r\\n    const milliseconds = timeLeft;\\r\\n    if (showms) {\\r\\n        if (hours > 0 || showfull)\\r\\n            return ns.sprintf(\\\"%02d:%02d:%02d.%03d\\\", hours, minutes, seconds, milliseconds);\\r\\n        if (minutes > 0)\\r\\n            return ns.sprintf(\\\"%02d:%02d.%03d\\\", minutes, seconds, milliseconds);\\r\\n        return ns.sprintf(\\\"%02d.%03d\\\", seconds, milliseconds);\\r\\n    }\\r\\n    else {\\r\\n        if (hours > 0 || showfull)\\r\\n            return ns.sprintf(\\\"%02d:%02d:%02d\\\", hours, minutes, seconds);\\r\\n        if (minutes > 0)\\r\\n            return ns.sprintf(\\\"%02d:%02d\\\", minutes, seconds);\\r\\n        return ns.sprintf(\\\"%02d\\\", seconds);\\r\\n    }\\r\\n}\\r\\nexport function stdFormat(ns, offset = 0, showms = false) {\\r\\n    const date = new Date(new Date().getTime() + offset);\\r\\n    if (showms) {\\r\\n        const ms = ns.sprintf(\\\"%03d\\\", date.getUTCMilliseconds());\\r\\n        return date.toLocaleTimeString(\\\"it-IT\\\") + \\\".\\\" + ms;\\r\\n    }\\r\\n    else {\\r\\n        return date.toLocaleTimeString(\\\"it-IT\\\");\\r\\n    }\\r\\n}\\r\\nexport async function doBackdoors(ns) {\\r\\n    //const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"w0r1d_d43m0n\\\", \\\"b-and-a\\\", \\\"ecorp\\\", \\\"fulcrumassets\\\", \\\"fulcrumtech\\\"];\\r\\n    //const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"omnitek\\\", \\\"kuai-gong\\\", \\\"megacorp\\\"];\\r\\n    const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"w0r1d_d43m0n\\\"];\\r\\n    const hosts = mapHosts(ns);\\r\\n    for (const [hostName, trail] of Object.entries(hosts)) {\\r\\n        const server = ns.getServer(hostName);\\r\\n        if (!targetHosts.includes(hostName) ||\\r\\n            server.backdoorInstalled ||\\r\\n            server.requiredHackingSkill > ns.getHackingLevel() ||\\r\\n            !server.hasAdminRights)\\r\\n            continue;\\r\\n        ns.print(hostName);\\r\\n        for (const hostHopName of trail) {\\r\\n            ns.connect(hostHopName);\\r\\n        }\\r\\n        await ns.installBackdoor();\\r\\n        ns.connect(\\\"home\\\");\\r\\n    }\\r\\n}\\r\\nexport function cleanLogs(ns) {\\r\\n    ns.disableLog(\\\"disableLog\\\");\\r\\n    ns.disableLog(\\\"ALL\\\");\\r\\n    // ns.disableLog(\\\"sleep\\\")\\r\\n    // ns.disableLog(\\\"exec\\\")\\r\\n    // ns.disableLog(\\\"getServerMaxRam\\\")\\r\\n    // ns.disableLog(\\\"getServerSecurityLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerMinSecurityLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerMaxMoney\\\")\\r\\n    // ns.disableLog(\\\"getHackingLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerRequiredHackingLevel\\\")\\r\\n    // ns.disableLog(\\\"scan\\\")\\r\\n    // ns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n    // ns.disableLog(\\\"getServerUsedRam\\\")\\r\\n}\\r\\nexport const ALL_FACTIONS = [\\r\\n    \\\"Illuminati\\\",\\r\\n    \\\"Daedalus\\\",\\r\\n    \\\"The Covenant\\\",\\r\\n    \\\"ECorp\\\",\\r\\n    \\\"MegaCorp\\\",\\r\\n    \\\"Bachman & Associates\\\",\\r\\n    \\\"Blade Industries\\\",\\r\\n    \\\"NWO\\\",\\r\\n    \\\"Clarke Incorporated\\\",\\r\\n    \\\"OmniTek Incorporated\\\",\\r\\n    \\\"Four Sigma\\\",\\r\\n    \\\"KuaiGong International\\\",\\r\\n    \\\"Fulcrum Secret Technologies\\\",\\r\\n    \\\"BitRunners\\\",\\r\\n    \\\"The Black Hand\\\",\\r\\n    \\\"NiteSec\\\",\\r\\n    \\\"Aevum\\\",\\r\\n    \\\"Chongqing\\\",\\r\\n    \\\"Ishima\\\",\\r\\n    \\\"New Tokyo\\\",\\r\\n    \\\"Sector-12\\\",\\r\\n    \\\"Volhaven\\\",\\r\\n    \\\"Speakers for the Dead\\\",\\r\\n    \\\"The Dark Army\\\",\\r\\n    \\\"The Syndicate\\\",\\r\\n    \\\"Silhouette\\\",\\r\\n    \\\"Tetrads\\\",\\r\\n    \\\"Slum Snakes\\\",\\r\\n    \\\"Netburners\\\",\\r\\n    \\\"Tian Di Hui\\\",\\r\\n    \\\"CyberSec\\\",\\r\\n    \\\"Bladeburners\\\",\\r\\n    \\\"Church of the Machine God\\\",\\r\\n];\\r\\nexport async function writeOut(ns, data, startTime, endTime, result, startSec, startCash) {\\r\\n    if (data.writeFile !== \\\"\\\") {\\r\\n        const outstr = ns.sprintf(\\\"%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\", data.target, data.uid, data.batchId, data.realTimeStart + data.offset, data.realTimeStart + data.finish, data.operationTime, startTime, endTime, endTime - startTime, startTime - (data.realTimeStart + data.offset), endTime - (data.realTimeStart + data.finish), endTime - startTime - data.operationTime, result, startSec.toFixed(2), ns.getServerSecurityLevel(data.target).toFixed(2), ns.nFormat(startCash, \\\"($0.000a)\\\"), ns.nFormat(ns.getServerMoneyAvailable(data.target), \\\"($0.000a)\\\"));\\r\\n        while (!await ns.tryWritePort(ReservedPorts.HACK_WRITE_INFO, [data.writeFile, outstr]))\\r\\n            ;\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi91dGlsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLE1BQU0sQ0FBTixJQUFZLGFBSVg7QUFKRCxXQUFZLGFBQWE7SUFDckIsaUVBQWdCLENBQUE7SUFDaEIsaUVBQVksQ0FBQTtJQUNaLHVFQUFlLENBQUE7QUFDbkIsQ0FBQyxFQUpXLGFBQWEsS0FBYixhQUFhLFFBSXhCO0FBRUQsTUFBTSxDQUFDLE1BQU0sUUFBUSxHQUFHLHFCQUFxQixDQUFDO0FBQzlDLE1BQU0sQ0FBQyxNQUFNLE1BQU0sR0FBRyxtQkFBbUIsQ0FBQztBQUMxQyxNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUcsbUJBQW1CLENBQUM7QUFDMUMsTUFBTSxDQUFDLE1BQU0sTUFBTSxHQUFHLGNBQWMsQ0FBQztBQUVyQyxNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUcsQ0FBQyxPQUFPLEVBQUUsV0FBVyxFQUFFLFdBQVcsRUFBRSxXQUFXLEVBQUUsUUFBUSxFQUFFLFVBQVUsQ0FBQyxDQUFDO0FBRTdGLE1BQU0sVUFBVSxJQUFJLENBQUMsRUFBTSxFQUFFLEdBQVcsRUFBRSxHQUFHLElBQXlCO0lBQ2xFLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEdBQUcsR0FBRyxFQUFFLElBQUksSUFBSSxFQUFFLENBQUMsa0JBQWtCLENBQUMsT0FBTyxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDO0FBQ3hGLENBQUM7QUFFRCxNQUFNLFVBQVUsWUFBWSxDQUFDLEVBQU0sRUFBRSxRQUFnQjtJQUNqRCxJQUFJLEVBQUUsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDNUIsT0FBTztLQUNWO0lBRUQsSUFBSSxLQUFLLEdBQUcsQ0FBQyxDQUFDO0lBQ2QsSUFBSSxFQUFFLENBQUMsVUFBVSxDQUFDLGNBQWMsRUFB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\",\"filename\":\"/lib/util.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":13.25,\"server\":\".\",\"moduleSequenceNumber\":85575,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"purchaseTor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"purchaseProgram\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"connect\",\"cost\":2},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.stanek.charge(ns.args[0], ns.args[1]);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hhcmdlLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL3N0YW5lay9jaGFyZ2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUM5QixPQUFPLElBQUksRUFBRTtRQUNULE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7S0FDakQ7QUFDTCxDQUFDIn0=\",\"filename\":\"/lib/stanek/charge.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/stanek/charge.js\",\"url\":\"blob:file:///8cf212b3-4977-43ac-ac67-98328bb03c81\",\"moduleSequenceNumber\":99864}],\"dependents\":[],\"ramUsage\":2,\"server\":\".\",\"moduleSequenceNumber\":99864,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.charge\",\"cost\":0.4}]}}],\"serversOnNetwork\":[\"stormtech\",\"b-and-a\",\"nwo\",\"clarkinc\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":525,\"serverGrowth\":0,\"suppression\":0,\"activeSuppressionThreads\":[],\"suppressionIntervalID\":null,\"suppressionLastUpdateTime\":0}},\"CSEC\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"CSEC\",\"httpPortOpen\":false,\"ip\":\"85.1.1.8\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.grow(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLElBQUksR0FBdUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFFbkUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDdkIsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7UUFDeEMsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7S0FDM0MsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyJ9\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"CSEC\",\"moduleSequenceNumber\":83833,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.weaken(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxJQUFJLEdBQXVCLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO0lBRW5FLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFO1FBQ3pCLGtCQUFrQixFQUFFLElBQUksQ0FBQyxlQUFlO1FBQ3hDLGtCQUFrQixFQUFFLElBQUksQ0FBQyxlQUFlO0tBQzNDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///c8e72123-9428-477a-a631-cbba2c60780c\",\"moduleSequenceNumber\":83840}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"CSEC\",\"moduleSequenceNumber\":83840,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.hack(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLElBQUksR0FBdUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFFbkUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDdkIsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7UUFDeEMsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7S0FDM0MsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyJ9\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"CSEC\",\"moduleSequenceNumber\":83837,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export var ReservedPorts;\\r\\n(function (ReservedPorts) {\\r\\n    ReservedPorts[ReservedPorts[\\\"HACKING_INFO\\\"] = 1] = \\\"HACKING_INFO\\\";\\r\\n    ReservedPorts[ReservedPorts[\\\"HACKNET_INFO\\\"] = 2] = \\\"HACKNET_INFO\\\";\\r\\n    ReservedPorts[ReservedPorts[\\\"HACK_WRITE_INFO\\\"] = 3] = \\\"HACK_WRITE_INFO\\\";\\r\\n})(ReservedPorts || (ReservedPorts = {}));\\r\\nexport const WEAKENJS = \\\"/lib/exec/weaken.js\\\";\\r\\nexport const GROWJS = \\\"/lib/exec/grow.js\\\";\\r\\nexport const HACKJS = \\\"/lib/exec/hack.js\\\";\\r\\nexport const UTILJS = \\\"/lib/util.js\\\";\\r\\nexport const CITIES = [\\\"Aevum\\\", \\\"Chongqing\\\", \\\"Sector-12\\\", \\\"New Tokyo\\\", \\\"Ishima\\\", \\\"Volhaven\\\"];\\r\\nexport function llog(ns, str, ...args) {\\r\\n    ns.print(ns.sprintf(\\\"%8s \\\" + str, new Date().toLocaleTimeString(\\\"it-IT\\\"), ...args));\\r\\n}\\r\\nexport function softenServer(ns, hostname) {\\r\\n    if (ns.hasRootAccess(hostname)) {\\r\\n        return;\\r\\n    }\\r\\n    let ports = 0;\\r\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n        ns.brutessh(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n        ns.ftpcrack(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n        ns.httpworm(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n        ns.relaysmtp(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n        ns.sqlinject(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ports >= ns.getServerNumPortsRequired(hostname)) {\\r\\n        ns.nuke(hostname);\\r\\n    }\\r\\n}\\r\\nexport function serverIsHackable(ns, hostname) {\\r\\n    return ns.hasRootAccess(hostname) && ns.getHackingLevel() >= ns.getServerRequiredHackingLevel(hostname);\\r\\n}\\r\\nexport function canExecuteOnServer(ns, hostname) {\\r\\n    return ns.hasRootAccess(hostname) && ns.getServerMaxRam(hostname) > 0;\\r\\n}\\r\\nexport function mapHosts(ns, hosts = {}, parents = [], current = \\\"home\\\") {\\r\\n    const newParents = parents.concat(current);\\r\\n    hosts[current] = newParents;\\r\\n    const children = ns.scan(current).filter((element) => !parents.includes(element));\\r\\n    for (const child of children) {\\r\\n        mapHosts(ns, hosts, newParents, child);\\r\\n    }\\r\\n    return hosts;\\r\\n}\\r\\nexport function allHosts(ns) {\\r\\n    return Object.keys(mapHosts(ns));\\r\\n}\\r\\nexport function doProgramBuys(ns) {\\r\\n    const player = ns.getPlayer();\\r\\n    if (!player.tor && player.money > 200e3)\\r\\n        ns.purchaseTor();\\r\\n    if (!ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\") && player.money > 500e3)\\r\\n        ns.purchaseProgram(\\\"BruteSSH.exe\\\");\\r\\n    if (!ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\") && player.money > 1500e3)\\r\\n        ns.purchaseProgram(\\\"FTPCrack.exe\\\");\\r\\n    if (!ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\") && player.money > 5e6)\\r\\n        ns.purchaseProgram(\\\"relaySMTP.exe\\\");\\r\\n    if (!ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\") && player.money > 30e6)\\r\\n        ns.purchaseProgram(\\\"HTTPWorm.exe\\\");\\r\\n    if (!ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\") && player.money > 250e6)\\r\\n        ns.purchaseProgram(\\\"SQLInject.exe\\\");\\r\\n}\\r\\nexport function doBuyAndSoftenAll(ns) {\\r\\n    doProgramBuys(ns);\\r\\n    for (const hostname of allHosts(ns)) {\\r\\n        softenServer(ns, hostname);\\r\\n    }\\r\\n}\\r\\nexport function stFormat(ns, ms, showms = false, showfull = false) {\\r\\n    let timeLeft = ms;\\r\\n    const hours = Math.floor(ms / (1000 * 60 * 60));\\r\\n    timeLeft -= hours * (1000 * 60 * 60);\\r\\n    const minutes = Math.floor(timeLeft / (1000 * 60));\\r\\n    timeLeft -= minutes * (1000 * 60);\\r\\n    const seconds = Math.floor(timeLeft / 1000);\\r\\n    timeLeft -= seconds * 1000;\\r\\n    const milliseconds = timeLeft;\\r\\n    if (showms) {\\r\\n        if (hours > 0 || showfull)\\r\\n            return ns.sprintf(\\\"%02d:%02d:%02d.%03d\\\", hours, minutes, seconds, milliseconds);\\r\\n        if (minutes > 0)\\r\\n            return ns.sprintf(\\\"%02d:%02d.%03d\\\", minutes, seconds, milliseconds);\\r\\n        return ns.sprintf(\\\"%02d.%03d\\\", seconds, milliseconds);\\r\\n    }\\r\\n    else {\\r\\n        if (hours > 0 || showfull)\\r\\n            return ns.sprintf(\\\"%02d:%02d:%02d\\\", hours, minutes, seconds);\\r\\n        if (minutes > 0)\\r\\n            return ns.sprintf(\\\"%02d:%02d\\\", minutes, seconds);\\r\\n        return ns.sprintf(\\\"%02d\\\", seconds);\\r\\n    }\\r\\n}\\r\\nexport function stdFormat(ns, offset = 0, showms = false) {\\r\\n    const date = new Date(new Date().getTime() + offset);\\r\\n    if (showms) {\\r\\n        const ms = ns.sprintf(\\\"%03d\\\", date.getUTCMilliseconds());\\r\\n        return date.toLocaleTimeString(\\\"it-IT\\\") + \\\".\\\" + ms;\\r\\n    }\\r\\n    else {\\r\\n        return date.toLocaleTimeString(\\\"it-IT\\\");\\r\\n    }\\r\\n}\\r\\nexport async function doBackdoors(ns) {\\r\\n    //const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"w0r1d_d43m0n\\\", \\\"b-and-a\\\", \\\"ecorp\\\", \\\"fulcrumassets\\\", \\\"fulcrumtech\\\"];\\r\\n    //const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"omnitek\\\", \\\"kuai-gong\\\", \\\"megacorp\\\"];\\r\\n    const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"w0r1d_d43m0n\\\"];\\r\\n    const hosts = mapHosts(ns);\\r\\n    for (const [hostName, trail] of Object.entries(hosts)) {\\r\\n        const server = ns.getServer(hostName);\\r\\n        if (!targetHosts.includes(hostName) ||\\r\\n            server.backdoorInstalled ||\\r\\n            server.requiredHackingSkill > ns.getHackingLevel() ||\\r\\n            !server.hasAdminRights)\\r\\n            continue;\\r\\n        ns.print(hostName);\\r\\n        for (const hostHopName of trail) {\\r\\n            ns.connect(hostHopName);\\r\\n        }\\r\\n        await ns.installBackdoor();\\r\\n        ns.connect(\\\"home\\\");\\r\\n    }\\r\\n}\\r\\nexport function cleanLogs(ns) {\\r\\n    ns.disableLog(\\\"disableLog\\\");\\r\\n    ns.disableLog(\\\"ALL\\\");\\r\\n    // ns.disableLog(\\\"sleep\\\")\\r\\n    // ns.disableLog(\\\"exec\\\")\\r\\n    // ns.disableLog(\\\"getServerMaxRam\\\")\\r\\n    // ns.disableLog(\\\"getServerSecurityLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerMinSecurityLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerMaxMoney\\\")\\r\\n    // ns.disableLog(\\\"getHackingLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerRequiredHackingLevel\\\")\\r\\n    // ns.disableLog(\\\"scan\\\")\\r\\n    // ns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n    // ns.disableLog(\\\"getServerUsedRam\\\")\\r\\n}\\r\\nexport const ALL_FACTIONS = [\\r\\n    \\\"Illuminati\\\",\\r\\n    \\\"Daedalus\\\",\\r\\n    \\\"The Covenant\\\",\\r\\n    \\\"ECorp\\\",\\r\\n    \\\"MegaCorp\\\",\\r\\n    \\\"Bachman & Associates\\\",\\r\\n    \\\"Blade Industries\\\",\\r\\n    \\\"NWO\\\",\\r\\n    \\\"Clarke Incorporated\\\",\\r\\n    \\\"OmniTek Incorporated\\\",\\r\\n    \\\"Four Sigma\\\",\\r\\n    \\\"KuaiGong International\\\",\\r\\n    \\\"Fulcrum Secret Technologies\\\",\\r\\n    \\\"BitRunners\\\",\\r\\n    \\\"The Black Hand\\\",\\r\\n    \\\"NiteSec\\\",\\r\\n    \\\"Aevum\\\",\\r\\n    \\\"Chongqing\\\",\\r\\n    \\\"Ishima\\\",\\r\\n    \\\"New Tokyo\\\",\\r\\n    \\\"Sector-12\\\",\\r\\n    \\\"Volhaven\\\",\\r\\n    \\\"Speakers for the Dead\\\",\\r\\n    \\\"The Dark Army\\\",\\r\\n    \\\"The Syndicate\\\",\\r\\n    \\\"Silhouette\\\",\\r\\n    \\\"Tetrads\\\",\\r\\n    \\\"Slum Snakes\\\",\\r\\n    \\\"Netburners\\\",\\r\\n    \\\"Tian Di Hui\\\",\\r\\n    \\\"CyberSec\\\",\\r\\n    \\\"Bladeburners\\\",\\r\\n    \\\"Church of the Machine God\\\",\\r\\n];\\r\\nexport async function writeOut(ns, data, startTime, endTime, result, startSec, startCash) {\\r\\n    if (data.writeFile !== \\\"\\\") {\\r\\n        const outstr = ns.sprintf(\\\"%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\", data.target, data.uid, data.batchId, data.realTimeStart + data.offset, data.realTimeStart + data.finish, data.operationTime, startTime, endTime, endTime - startTime, startTime - (data.realTimeStart + data.offset), endTime - (data.realTimeStart + data.finish), endTime - startTime - data.operationTime, result, startSec.toFixed(2), ns.getServerSecurityLevel(data.target).toFixed(2), ns.nFormat(startCash, \\\"($0.000a)\\\"), ns.nFormat(ns.getServerMoneyAvailable(data.target), \\\"($0.000a)\\\"));\\r\\n        while (!await ns.tryWritePort(ReservedPorts.HACK_WRITE_INFO, [data.writeFile, outstr]))\\r\\n            ;\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi91dGlsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLE1BQU0sQ0FBTixJQUFZLGFBSVg7QUFKRCxXQUFZLGFBQWE7SUFDckIsaUVBQWdCLENBQUE7SUFDaEIsaUVBQVksQ0FBQTtJQUNaLHVFQUFlLENBQUE7QUFDbkIsQ0FBQyxFQUpXLGFBQWEsS0FBYixhQUFhLFFBSXhCO0FBRUQsTUFBTSxDQUFDLE1BQU0sUUFBUSxHQUFHLHFCQUFxQixDQUFDO0FBQzlDLE1BQU0sQ0FBQyxNQUFNLE1BQU0sR0FBRyxtQkFBbUIsQ0FBQztBQUMxQyxNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUcsbUJBQW1CLENBQUM7QUFDMUMsTUFBTSxDQUFDLE1BQU0sTUFBTSxHQUFHLGNBQWMsQ0FBQztBQUVyQyxNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUcsQ0FBQyxPQUFPLEVBQUUsV0FBVyxFQUFFLFdBQVcsRUFBRSxXQUFXLEVBQUUsUUFBUSxFQUFFLFVBQVUsQ0FBQyxDQUFDO0FBRTdGLE1BQU0sVUFBVSxJQUFJLENBQUMsRUFBTSxFQUFFLEdBQVcsRUFBRSxHQUFHLElBQXlCO0lBQ2xFLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEdBQUcsR0FBRyxFQUFFLElBQUksSUFBSSxFQUFFLENBQUMsa0JBQWtCLENBQUMsT0FBTyxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDO0FBQ3hGLENBQUM7QUFFRCxNQUFNLFVBQVUsWUFBWSxDQUFDLEVBQU0sRUFBRSxRQUFnQjtJQUNqRCxJQUFJLEVBQUUsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDNUIsT0FBTztLQUNWO0lBRUQsSUFBSSxLQUFLLEdBQUcsQ0FBQyxDQUFDO0lBQ2QsSUFBSSxFQUFFLENBQUMsVUFBVSxDQUFDLGNBQWMsRUFB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\",\"filename\":\"/lib/util.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":13.25,\"server\":\"CSEC\",\"moduleSequenceNumber\":83839,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"purchaseTor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"purchaseProgram\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"connect\",\"cost\":2},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.stanek.charge(ns.args[0], ns.args[1]);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hhcmdlLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL3N0YW5lay9jaGFyZ2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUM5QixPQUFPLElBQUksRUFBRTtRQUNULE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7S0FDakQ7QUFDTCxDQUFDIn0=\",\"filename\":\"/lib/stanek/charge.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/stanek/charge.js\",\"url\":\"blob:file:///ca19268b-8439-4fa9-a951-8d0822efdbd7\",\"moduleSequenceNumber\":99896}],\"dependents\":[],\"ramUsage\":2,\"server\":\"CSEC\",\"moduleSequenceNumber\":99896,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.charge\",\"cost\":0.4}]}}],\"serversOnNetwork\":[\"harakiri-sushi\",\"phantasy\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":2,\"requiredHackingSkill\":53,\"serverGrowth\":0,\"suppression\":0,\"activeSuppressionThreads\":[],\"suppressionIntervalID\":null,\"suppressionLastUpdateTime\":0}},\"The-Cave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"The-Cave\",\"httpPortOpen\":true,\"ip\":\"59.3.1.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"blade\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":925,\"serverGrowth\":0,\"suppression\":0,\"activeSuppressionThreads\":[],\"suppressionIntervalID\":null,\"suppressionLastUpdateTime\":0}},\"w0r1d_d43m0n\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":false,\"ip\":\"49.2.2.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":9000,\"serverGrowth\":0,\"suppression\":0,\"activeSuppressionThreads\":[],\"suppressionIntervalID\":null,\"suppressionLastUpdateTime\":0}},\"darkweb\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"darkweb\",\"httpPortOpen\":true,\"ip\":\"52.1.7.4\",\"isConnectedTo\":false,\"maxRam\":1,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.stanek.charge(ns.args[0], ns.args[1]);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hhcmdlLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL3N0YW5lay9jaGFyZ2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUM5QixPQUFPLElBQUksRUFBRTtRQUNULE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7S0FDakQ7QUFDTCxDQUFDIn0=\",\"filename\":\"/lib/stanek/charge.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2,\"server\":\"darkweb\",\"moduleSequenceNumber\":99807,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.charge\",\"cost\":0.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"suppression\":0,\"activeSuppressionThreads\":[],\"suppressionIntervalID\":null,\"suppressionLastUpdateTime\":0}},\"pserv-0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-0\",\"httpPortOpen\":false,\"ip\":\"56.9.8.2\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":252,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"script\\\":\\\"/lib/exec/grow.js\\\",\\\"host\\\":\\\"pserv-0\\\",\\\"numThreads\\\":144,\\\"target\\\":\\\"phantasy\\\",\\\"hackLevelTiming\\\":153.19873646097005,\\\"hackLevelEffect\\\":204,\\\"batchId\\\":21,\\\"offset\\\":34400,\\\"operationTime\\\":142114,\\\"finish\\\":176514,\\\"realTimeStart\\\":1647907321842,\\\"uid\\\":\\\"021-2G-pserv-0\\\",\\\"writeFile\\\":\\\"\\\"}\"],\"dataMap\":{},\"filename\":\"/lib/exec/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":36.40999999999998,\"pid\":1342,\"ramUsage\":1.75,\"server\":\"pserv-0\",\"threads\":144,\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///409d8a42-5a6e-4a81-9c19-0e3ec663ad9e\",\"moduleSequenceNumber\":94069}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.grow(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLElBQUksR0FBdUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFFbkUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDdkIsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7UUFDeEMsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7S0FDM0MsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyJ9\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///409d8a42-5a6e-4a81-9c19-0e3ec663ad9e\",\"moduleSequenceNumber\":94069}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-0\",\"moduleSequenceNumber\":94069,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.weaken(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxJQUFJLEdBQXVCLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO0lBRW5FLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFO1FBQ3pCLGtCQUFrQixFQUFFLElBQUksQ0FBQyxlQUFlO1FBQ3hDLGtCQUFrQixFQUFFLElBQUksQ0FBQyxlQUFlO0tBQzNDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///89a1ee94-053a-483c-9dcf-c08f248076ed\",\"moduleSequenceNumber\":96332}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-0\",\"moduleSequenceNumber\":96332,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.hack(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLElBQUksR0FBdUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFFbkUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDdkIsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7UUFDeEMsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7S0FDM0MsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyJ9\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///b2db98ac-5678-4c17-b4a5-2f0dcd3604b4\",\"moduleSequenceNumber\":96330}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-0\",\"moduleSequenceNumber\":96330,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export var ReservedPorts;\\r\\n(function (ReservedPorts) {\\r\\n    ReservedPorts[ReservedPorts[\\\"HACKING_INFO\\\"] = 1] = \\\"HACKING_INFO\\\";\\r\\n    ReservedPorts[ReservedPorts[\\\"HACKNET_INFO\\\"] = 2] = \\\"HACKNET_INFO\\\";\\r\\n    ReservedPorts[ReservedPorts[\\\"HACK_WRITE_INFO\\\"] = 3] = \\\"HACK_WRITE_INFO\\\";\\r\\n})(ReservedPorts || (ReservedPorts = {}));\\r\\nexport const WEAKENJS = \\\"/lib/exec/weaken.js\\\";\\r\\nexport const GROWJS = \\\"/lib/exec/grow.js\\\";\\r\\nexport const HACKJS = \\\"/lib/exec/hack.js\\\";\\r\\nexport const UTILJS = \\\"/lib/util.js\\\";\\r\\nexport const CITIES = [\\\"Aevum\\\", \\\"Chongqing\\\", \\\"Sector-12\\\", \\\"New Tokyo\\\", \\\"Ishima\\\", \\\"Volhaven\\\"];\\r\\nexport function llog(ns, str, ...args) {\\r\\n    ns.print(ns.sprintf(\\\"%8s \\\" + str, new Date().toLocaleTimeString(\\\"it-IT\\\"), ...args));\\r\\n}\\r\\nexport function softenServer(ns, hostname) {\\r\\n    if (ns.hasRootAccess(hostname)) {\\r\\n        return;\\r\\n    }\\r\\n    let ports = 0;\\r\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n        ns.brutessh(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n        ns.ftpcrack(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n        ns.httpworm(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n        ns.relaysmtp(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n        ns.sqlinject(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ports >= ns.getServerNumPortsRequired(hostname)) {\\r\\n        ns.nuke(hostname);\\r\\n    }\\r\\n}\\r\\nexport function serverIsHackable(ns, hostname) {\\r\\n    return ns.hasRootAccess(hostname) && ns.getHackingLevel() >= ns.getServerRequiredHackingLevel(hostname);\\r\\n}\\r\\nexport function canExecuteOnServer(ns, hostname) {\\r\\n    return ns.hasRootAccess(hostname) && ns.getServerMaxRam(hostname) > 0;\\r\\n}\\r\\nexport function mapHosts(ns, hosts = {}, parents = [], current = \\\"home\\\") {\\r\\n    const newParents = parents.concat(current);\\r\\n    hosts[current] = newParents;\\r\\n    const children = ns.scan(current).filter((element) => !parents.includes(element));\\r\\n    for (const child of children) {\\r\\n        mapHosts(ns, hosts, newParents, child);\\r\\n    }\\r\\n    return hosts;\\r\\n}\\r\\nexport function allHosts(ns) {\\r\\n    return Object.keys(mapHosts(ns));\\r\\n}\\r\\nexport function doProgramBuys(ns) {\\r\\n    const player = ns.getPlayer();\\r\\n    if (!player.tor && player.money > 200e3)\\r\\n        ns.purchaseTor();\\r\\n    if (!ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\") && player.money > 500e3)\\r\\n        ns.purchaseProgram(\\\"BruteSSH.exe\\\");\\r\\n    if (!ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\") && player.money > 1500e3)\\r\\n        ns.purchaseProgram(\\\"FTPCrack.exe\\\");\\r\\n    if (!ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\") && player.money > 5e6)\\r\\n        ns.purchaseProgram(\\\"relaySMTP.exe\\\");\\r\\n    if (!ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\") && player.money > 30e6)\\r\\n        ns.purchaseProgram(\\\"HTTPWorm.exe\\\");\\r\\n    if (!ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\") && player.money > 250e6)\\r\\n        ns.purchaseProgram(\\\"SQLInject.exe\\\");\\r\\n}\\r\\nexport function doBuyAndSoftenAll(ns) {\\r\\n    doProgramBuys(ns);\\r\\n    for (const hostname of allHosts(ns)) {\\r\\n        softenServer(ns, hostname);\\r\\n    }\\r\\n}\\r\\nexport function stFormat(ns, ms, showms = false, showfull = false) {\\r\\n    let timeLeft = ms;\\r\\n    const hours = Math.floor(ms / (1000 * 60 * 60));\\r\\n    timeLeft -= hours * (1000 * 60 * 60);\\r\\n    const minutes = Math.floor(timeLeft / (1000 * 60));\\r\\n    timeLeft -= minutes * (1000 * 60);\\r\\n    const seconds = Math.floor(timeLeft / 1000);\\r\\n    timeLeft -= seconds * 1000;\\r\\n    const milliseconds = timeLeft;\\r\\n    if (showms) {\\r\\n        if (hours > 0 || showfull)\\r\\n            return ns.sprintf(\\\"%02d:%02d:%02d.%03d\\\", hours, minutes, seconds, milliseconds);\\r\\n        if (minutes > 0)\\r\\n            return ns.sprintf(\\\"%02d:%02d.%03d\\\", minutes, seconds, milliseconds);\\r\\n        return ns.sprintf(\\\"%02d.%03d\\\", seconds, milliseconds);\\r\\n    }\\r\\n    else {\\r\\n        if (hours > 0 || showfull)\\r\\n            return ns.sprintf(\\\"%02d:%02d:%02d\\\", hours, minutes, seconds);\\r\\n        if (minutes > 0)\\r\\n            return ns.sprintf(\\\"%02d:%02d\\\", minutes, seconds);\\r\\n        return ns.sprintf(\\\"%02d\\\", seconds);\\r\\n    }\\r\\n}\\r\\nexport function stdFormat(ns, offset = 0, showms = false) {\\r\\n    const date = new Date(new Date().getTime() + offset);\\r\\n    if (showms) {\\r\\n        const ms = ns.sprintf(\\\"%03d\\\", date.getUTCMilliseconds());\\r\\n        return date.toLocaleTimeString(\\\"it-IT\\\") + \\\".\\\" + ms;\\r\\n    }\\r\\n    else {\\r\\n        return date.toLocaleTimeString(\\\"it-IT\\\");\\r\\n    }\\r\\n}\\r\\nexport async function doBackdoors(ns) {\\r\\n    //const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"w0r1d_d43m0n\\\", \\\"b-and-a\\\", \\\"ecorp\\\", \\\"fulcrumassets\\\", \\\"fulcrumtech\\\"];\\r\\n    //const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"omnitek\\\", \\\"kuai-gong\\\", \\\"megacorp\\\"];\\r\\n    const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"w0r1d_d43m0n\\\"];\\r\\n    const hosts = mapHosts(ns);\\r\\n    for (const [hostName, trail] of Object.entries(hosts)) {\\r\\n        const server = ns.getServer(hostName);\\r\\n        if (!targetHosts.includes(hostName) ||\\r\\n            server.backdoorInstalled ||\\r\\n            server.requiredHackingSkill > ns.getHackingLevel() ||\\r\\n            !server.hasAdminRights)\\r\\n            continue;\\r\\n        ns.print(hostName);\\r\\n        for (const hostHopName of trail) {\\r\\n            ns.connect(hostHopName);\\r\\n        }\\r\\n        await ns.installBackdoor();\\r\\n        ns.connect(\\\"home\\\");\\r\\n    }\\r\\n}\\r\\nexport function cleanLogs(ns) {\\r\\n    ns.disableLog(\\\"disableLog\\\");\\r\\n    ns.disableLog(\\\"ALL\\\");\\r\\n    // ns.disableLog(\\\"sleep\\\")\\r\\n    // ns.disableLog(\\\"exec\\\")\\r\\n    // ns.disableLog(\\\"getServerMaxRam\\\")\\r\\n    // ns.disableLog(\\\"getServerSecurityLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerMinSecurityLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerMaxMoney\\\")\\r\\n    // ns.disableLog(\\\"getHackingLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerRequiredHackingLevel\\\")\\r\\n    // ns.disableLog(\\\"scan\\\")\\r\\n    // ns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n    // ns.disableLog(\\\"getServerUsedRam\\\")\\r\\n}\\r\\nexport const ALL_FACTIONS = [\\r\\n    \\\"Illuminati\\\",\\r\\n    \\\"Daedalus\\\",\\r\\n    \\\"The Covenant\\\",\\r\\n    \\\"ECorp\\\",\\r\\n    \\\"MegaCorp\\\",\\r\\n    \\\"Bachman & Associates\\\",\\r\\n    \\\"Blade Industries\\\",\\r\\n    \\\"NWO\\\",\\r\\n    \\\"Clarke Incorporated\\\",\\r\\n    \\\"OmniTek Incorporated\\\",\\r\\n    \\\"Four Sigma\\\",\\r\\n    \\\"KuaiGong International\\\",\\r\\n    \\\"Fulcrum Secret Technologies\\\",\\r\\n    \\\"BitRunners\\\",\\r\\n    \\\"The Black Hand\\\",\\r\\n    \\\"NiteSec\\\",\\r\\n    \\\"Aevum\\\",\\r\\n    \\\"Chongqing\\\",\\r\\n    \\\"Ishima\\\",\\r\\n    \\\"New Tokyo\\\",\\r\\n    \\\"Sector-12\\\",\\r\\n    \\\"Volhaven\\\",\\r\\n    \\\"Speakers for the Dead\\\",\\r\\n    \\\"The Dark Army\\\",\\r\\n    \\\"The Syndicate\\\",\\r\\n    \\\"Silhouette\\\",\\r\\n    \\\"Tetrads\\\",\\r\\n    \\\"Slum Snakes\\\",\\r\\n    \\\"Netburners\\\",\\r\\n    \\\"Tian Di Hui\\\",\\r\\n    \\\"CyberSec\\\",\\r\\n    \\\"Bladeburners\\\",\\r\\n    \\\"Church of the Machine God\\\",\\r\\n];\\r\\nexport async function writeOut(ns, data, startTime, endTime, result, startSec, startCash) {\\r\\n    if (data.writeFile !== \\\"\\\") {\\r\\n        const outstr = ns.sprintf(\\\"%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\", data.target, data.uid, data.batchId, data.realTimeStart + data.offset, data.realTimeStart + data.finish, data.operationTime, startTime, endTime, endTime - startTime, startTime - (data.realTimeStart + data.offset), endTime - (data.realTimeStart + data.finish), endTime - startTime - data.operationTime, result, startSec.toFixed(2), ns.getServerSecurityLevel(data.target).toFixed(2), ns.nFormat(startCash, \\\"($0.000a)\\\"), ns.nFormat(ns.getServerMoneyAvailable(data.target), \\\"($0.000a)\\\"));\\r\\n        while (!await ns.tryWritePort(ReservedPorts.HACK_WRITE_INFO, [data.writeFile, outstr]))\\r\\n            ;\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi91dGlsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLE1BQU0sQ0FBTixJQUFZLGFBSVg7QUFKRCxXQUFZLGFBQWE7SUFDckIsaUVBQWdCLENBQUE7SUFDaEIsaUVBQVksQ0FBQTtJQUNaLHVFQUFlLENBQUE7QUFDbkIsQ0FBQyxFQUpXLGFBQWEsS0FBYixhQUFhLFFBSXhCO0FBRUQsTUFBTSxDQUFDLE1BQU0sUUFBUSxHQUFHLHFCQUFxQixDQUFDO0FBQzlDLE1BQU0sQ0FBQyxNQUFNLE1BQU0sR0FBRyxtQkFBbUIsQ0FBQztBQUMxQyxNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUcsbUJBQW1CLENBQUM7QUFDMUMsTUFBTSxDQUFDLE1BQU0sTUFBTSxHQUFHLGNBQWMsQ0FBQztBQUVyQyxNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUcsQ0FBQyxPQUFPLEVBQUUsV0FBVyxFQUFFLFdBQVcsRUFBRSxXQUFXLEVBQUUsUUFBUSxFQUFFLFVBQVUsQ0FBQyxDQUFDO0FBRTdGLE1BQU0sVUFBVSxJQUFJLENBQUMsRUFBTSxFQUFFLEdBQVcsRUFBRSxHQUFHLElBQXlCO0lBQ2xFLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEdBQUcsR0FBRyxFQUFFLElBQUksSUFBSSxFQUFFLENBQUMsa0JBQWtCLENBQUMsT0FBTyxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDO0FBQ3hGLENBQUM7QUFFRCxNQUFNLFVBQVUsWUFBWSxDQUFDLEVBQU0sRUFBRSxRQUFnQjtJQUNqRCxJQUFJLEVBQUUsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDNUIsT0FBTztLQUNWO0lBRUQsSUFBSSxLQUFLLEdBQUcsQ0FBQyxDQUFDO0lBQ2QsSUFBSSxFQUFFLENBQUMsVUFBVSxDQUFDLGNBQWMsRUFB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\",\"filename\":\"/lib/util.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":13.25,\"server\":\"pserv-0\",\"moduleSequenceNumber\":93970,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"purchaseTor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"purchaseProgram\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"connect\",\"cost\":2},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.stanek.charge(ns.args[0], ns.args[1]);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hhcmdlLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL3N0YW5lay9jaGFyZ2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUM5QixPQUFPLElBQUksRUFBRTtRQUNULE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7S0FDakQ7QUFDTCxDQUFDIn0=\",\"filename\":\"/lib/stanek/charge.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/stanek/charge.js\",\"url\":\"blob:file:///b2885e57-2034-410a-913c-768bfc87c5d9\",\"moduleSequenceNumber\":99901}],\"dependents\":[],\"ramUsage\":2,\"server\":\"pserv-0\",\"moduleSequenceNumber\":99901,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.charge\",\"cost\":0.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"suppression\":0,\"activeSuppressionThreads\":[],\"suppressionIntervalID\":null,\"suppressionLastUpdateTime\":0}},\"pserv-1\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-1\",\"httpPortOpen\":false,\"ip\":\"48.8.6.5\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":204,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"script\\\":\\\"/lib/exec/hack.js\\\",\\\"host\\\":\\\"pserv-1\\\",\\\"numThreads\\\":120,\\\"target\\\":\\\"phantasy\\\",\\\"hackLevelTiming\\\":13.499605144053142,\\\"hackLevelEffect\\\":204,\\\"batchId\\\":22,\\\"offset\\\":35200,\\\"operationTime\\\":142113,\\\"finish\\\":177313,\\\"realTimeStart\\\":1647907321842,\\\"uid\\\":\\\"022-0H-pserv-1\\\",\\\"writeFile\\\":\\\"\\\"}\"],\"dataMap\":{},\"filename\":\"/lib/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":35.60999999999997,\"pid\":1345,\"ramUsage\":1.7,\"server\":\"pserv-1\",\"threads\":120,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.grow(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLElBQUksR0FBdUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFFbkUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDdkIsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7UUFDeEMsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7S0FDM0MsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyJ9\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///84ae2bd0-050f-42c8-a186-841878f0b772\",\"moduleSequenceNumber\":94068}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-1\",\"moduleSequenceNumber\":94068,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.weaken(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxJQUFJLEdBQXVCLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO0lBRW5FLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFO1FBQ3pCLGtCQUFrQixFQUFFLElBQUksQ0FBQyxlQUFlO1FBQ3hDLGtCQUFrQixFQUFFLElBQUksQ0FBQyxlQUFlO0tBQzNDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///92813788-c523-41c7-ab4c-0d9a843d11fc\",\"moduleSequenceNumber\":96333}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-1\",\"moduleSequenceNumber\":96333,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.hack(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLElBQUksR0FBdUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFFbkUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDdkIsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7UUFDeEMsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7S0FDM0MsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyJ9\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///44dc04bc-0db2-4db7-b669-39b7ef3a0eae\",\"moduleSequenceNumber\":103936}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-1\",\"moduleSequenceNumber\":103936,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export var ReservedPorts;\\r\\n(function (ReservedPorts) {\\r\\n    ReservedPorts[ReservedPorts[\\\"HACKING_INFO\\\"] = 1] = \\\"HACKING_INFO\\\";\\r\\n    ReservedPorts[ReservedPorts[\\\"HACKNET_INFO\\\"] = 2] = \\\"HACKNET_INFO\\\";\\r\\n    ReservedPorts[ReservedPorts[\\\"HACK_WRITE_INFO\\\"] = 3] = \\\"HACK_WRITE_INFO\\\";\\r\\n})(ReservedPorts || (ReservedPorts = {}));\\r\\nexport const WEAKENJS = \\\"/lib/exec/weaken.js\\\";\\r\\nexport const GROWJS = \\\"/lib/exec/grow.js\\\";\\r\\nexport const HACKJS = \\\"/lib/exec/hack.js\\\";\\r\\nexport const UTILJS = \\\"/lib/util.js\\\";\\r\\nexport const CITIES = [\\\"Aevum\\\", \\\"Chongqing\\\", \\\"Sector-12\\\", \\\"New Tokyo\\\", \\\"Ishima\\\", \\\"Volhaven\\\"];\\r\\nexport function llog(ns, str, ...args) {\\r\\n    ns.print(ns.sprintf(\\\"%8s \\\" + str, new Date().toLocaleTimeString(\\\"it-IT\\\"), ...args));\\r\\n}\\r\\nexport function softenServer(ns, hostname) {\\r\\n    if (ns.hasRootAccess(hostname)) {\\r\\n        return;\\r\\n    }\\r\\n    let ports = 0;\\r\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n        ns.brutessh(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n        ns.ftpcrack(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n        ns.httpworm(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n        ns.relaysmtp(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n        ns.sqlinject(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ports >= ns.getServerNumPortsRequired(hostname)) {\\r\\n        ns.nuke(hostname);\\r\\n    }\\r\\n}\\r\\nexport function serverIsHackable(ns, hostname) {\\r\\n    return ns.hasRootAccess(hostname) && ns.getHackingLevel() >= ns.getServerRequiredHackingLevel(hostname);\\r\\n}\\r\\nexport function canExecuteOnServer(ns, hostname) {\\r\\n    return ns.hasRootAccess(hostname) && ns.getServerMaxRam(hostname) > 0;\\r\\n}\\r\\nexport function mapHosts(ns, hosts = {}, parents = [], current = \\\"home\\\") {\\r\\n    const newParents = parents.concat(current);\\r\\n    hosts[current] = newParents;\\r\\n    const children = ns.scan(current).filter((element) => !parents.includes(element));\\r\\n    for (const child of children) {\\r\\n        mapHosts(ns, hosts, newParents, child);\\r\\n    }\\r\\n    return hosts;\\r\\n}\\r\\nexport function allHosts(ns) {\\r\\n    return Object.keys(mapHosts(ns));\\r\\n}\\r\\nexport function doProgramBuys(ns) {\\r\\n    const player = ns.getPlayer();\\r\\n    if (!player.tor && player.money > 200e3)\\r\\n        ns.purchaseTor();\\r\\n    if (!ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\") && player.money > 500e3)\\r\\n        ns.purchaseProgram(\\\"BruteSSH.exe\\\");\\r\\n    if (!ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\") && player.money > 1500e3)\\r\\n        ns.purchaseProgram(\\\"FTPCrack.exe\\\");\\r\\n    if (!ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\") && player.money > 5e6)\\r\\n        ns.purchaseProgram(\\\"relaySMTP.exe\\\");\\r\\n    if (!ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\") && player.money > 30e6)\\r\\n        ns.purchaseProgram(\\\"HTTPWorm.exe\\\");\\r\\n    if (!ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\") && player.money > 250e6)\\r\\n        ns.purchaseProgram(\\\"SQLInject.exe\\\");\\r\\n}\\r\\nexport function doBuyAndSoftenAll(ns) {\\r\\n    doProgramBuys(ns);\\r\\n    for (const hostname of allHosts(ns)) {\\r\\n        softenServer(ns, hostname);\\r\\n    }\\r\\n}\\r\\nexport function stFormat(ns, ms, showms = false, showfull = false) {\\r\\n    let timeLeft = ms;\\r\\n    const hours = Math.floor(ms / (1000 * 60 * 60));\\r\\n    timeLeft -= hours * (1000 * 60 * 60);\\r\\n    const minutes = Math.floor(timeLeft / (1000 * 60));\\r\\n    timeLeft -= minutes * (1000 * 60);\\r\\n    const seconds = Math.floor(timeLeft / 1000);\\r\\n    timeLeft -= seconds * 1000;\\r\\n    const milliseconds = timeLeft;\\r\\n    if (showms) {\\r\\n        if (hours > 0 || showfull)\\r\\n            return ns.sprintf(\\\"%02d:%02d:%02d.%03d\\\", hours, minutes, seconds, milliseconds);\\r\\n        if (minutes > 0)\\r\\n            return ns.sprintf(\\\"%02d:%02d.%03d\\\", minutes, seconds, milliseconds);\\r\\n        return ns.sprintf(\\\"%02d.%03d\\\", seconds, milliseconds);\\r\\n    }\\r\\n    else {\\r\\n        if (hours > 0 || showfull)\\r\\n            return ns.sprintf(\\\"%02d:%02d:%02d\\\", hours, minutes, seconds);\\r\\n        if (minutes > 0)\\r\\n            return ns.sprintf(\\\"%02d:%02d\\\", minutes, seconds);\\r\\n        return ns.sprintf(\\\"%02d\\\", seconds);\\r\\n    }\\r\\n}\\r\\nexport function stdFormat(ns, offset = 0, showms = false) {\\r\\n    const date = new Date(new Date().getTime() + offset);\\r\\n    if (showms) {\\r\\n        const ms = ns.sprintf(\\\"%03d\\\", date.getUTCMilliseconds());\\r\\n        return date.toLocaleTimeString(\\\"it-IT\\\") + \\\".\\\" + ms;\\r\\n    }\\r\\n    else {\\r\\n        return date.toLocaleTimeString(\\\"it-IT\\\");\\r\\n    }\\r\\n}\\r\\nexport async function doBackdoors(ns) {\\r\\n    //const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"w0r1d_d43m0n\\\", \\\"b-and-a\\\", \\\"ecorp\\\", \\\"fulcrumassets\\\", \\\"fulcrumtech\\\"];\\r\\n    //const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"omnitek\\\", \\\"kuai-gong\\\", \\\"megacorp\\\"];\\r\\n    const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"w0r1d_d43m0n\\\"];\\r\\n    const hosts = mapHosts(ns);\\r\\n    for (const [hostName, trail] of Object.entries(hosts)) {\\r\\n        const server = ns.getServer(hostName);\\r\\n        if (!targetHosts.includes(hostName) ||\\r\\n            server.backdoorInstalled ||\\r\\n            server.requiredHackingSkill > ns.getHackingLevel() ||\\r\\n            !server.hasAdminRights)\\r\\n            continue;\\r\\n        ns.print(hostName);\\r\\n        for (const hostHopName of trail) {\\r\\n            ns.connect(hostHopName);\\r\\n        }\\r\\n        await ns.installBackdoor();\\r\\n        ns.connect(\\\"home\\\");\\r\\n    }\\r\\n}\\r\\nexport function cleanLogs(ns) {\\r\\n    ns.disableLog(\\\"disableLog\\\");\\r\\n    ns.disableLog(\\\"ALL\\\");\\r\\n    // ns.disableLog(\\\"sleep\\\")\\r\\n    // ns.disableLog(\\\"exec\\\")\\r\\n    // ns.disableLog(\\\"getServerMaxRam\\\")\\r\\n    // ns.disableLog(\\\"getServerSecurityLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerMinSecurityLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerMaxMoney\\\")\\r\\n    // ns.disableLog(\\\"getHackingLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerRequiredHackingLevel\\\")\\r\\n    // ns.disableLog(\\\"scan\\\")\\r\\n    // ns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n    // ns.disableLog(\\\"getServerUsedRam\\\")\\r\\n}\\r\\nexport const ALL_FACTIONS = [\\r\\n    \\\"Illuminati\\\",\\r\\n    \\\"Daedalus\\\",\\r\\n    \\\"The Covenant\\\",\\r\\n    \\\"ECorp\\\",\\r\\n    \\\"MegaCorp\\\",\\r\\n    \\\"Bachman & Associates\\\",\\r\\n    \\\"Blade Industries\\\",\\r\\n    \\\"NWO\\\",\\r\\n    \\\"Clarke Incorporated\\\",\\r\\n    \\\"OmniTek Incorporated\\\",\\r\\n    \\\"Four Sigma\\\",\\r\\n    \\\"KuaiGong International\\\",\\r\\n    \\\"Fulcrum Secret Technologies\\\",\\r\\n    \\\"BitRunners\\\",\\r\\n    \\\"The Black Hand\\\",\\r\\n    \\\"NiteSec\\\",\\r\\n    \\\"Aevum\\\",\\r\\n    \\\"Chongqing\\\",\\r\\n    \\\"Ishima\\\",\\r\\n    \\\"New Tokyo\\\",\\r\\n    \\\"Sector-12\\\",\\r\\n    \\\"Volhaven\\\",\\r\\n    \\\"Speakers for the Dead\\\",\\r\\n    \\\"The Dark Army\\\",\\r\\n    \\\"The Syndicate\\\",\\r\\n    \\\"Silhouette\\\",\\r\\n    \\\"Tetrads\\\",\\r\\n    \\\"Slum Snakes\\\",\\r\\n    \\\"Netburners\\\",\\r\\n    \\\"Tian Di Hui\\\",\\r\\n    \\\"CyberSec\\\",\\r\\n    \\\"Bladeburners\\\",\\r\\n    \\\"Church of the Machine God\\\",\\r\\n];\\r\\nexport async function writeOut(ns, data, startTime, endTime, result, startSec, startCash) {\\r\\n    if (data.writeFile !== \\\"\\\") {\\r\\n        const outstr = ns.sprintf(\\\"%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\", data.target, data.uid, data.batchId, data.realTimeStart + data.offset, data.realTimeStart + data.finish, data.operationTime, startTime, endTime, endTime - startTime, startTime - (data.realTimeStart + data.offset), endTime - (data.realTimeStart + data.finish), endTime - startTime - data.operationTime, result, startSec.toFixed(2), ns.getServerSecurityLevel(data.target).toFixed(2), ns.nFormat(startCash, \\\"($0.000a)\\\"), ns.nFormat(ns.getServerMoneyAvailable(data.target), \\\"($0.000a)\\\"));\\r\\n        while (!await ns.tryWritePort(ReservedPorts.HACK_WRITE_INFO, [data.writeFile, outstr]))\\r\\n            ;\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi91dGlsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLE1BQU0sQ0FBTixJQUFZLGFBSVg7QUFKRCxXQUFZLGFBQWE7SUFDckIsaUVBQWdCLENBQUE7SUFDaEIsaUVBQVksQ0FBQTtJQUNaLHVFQUFlLENBQUE7QUFDbkIsQ0FBQyxFQUpXLGFBQWEsS0FBYixhQUFhLFFBSXhCO0FBRUQsTUFBTSxDQUFDLE1BQU0sUUFBUSxHQUFHLHFCQUFxQixDQUFDO0FBQzlDLE1BQU0sQ0FBQyxNQUFNLE1BQU0sR0FBRyxtQkFBbUIsQ0FBQztBQUMxQyxNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUcsbUJBQW1CLENBQUM7QUFDMUMsTUFBTSxDQUFDLE1BQU0sTUFBTSxHQUFHLGNBQWMsQ0FBQztBQUVyQyxNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUcsQ0FBQyxPQUFPLEVBQUUsV0FBVyxFQUFFLFdBQVcsRUFBRSxXQUFXLEVBQUUsUUFBUSxFQUFFLFVBQVUsQ0FBQyxDQUFDO0FBRTdGLE1BQU0sVUFBVSxJQUFJLENBQUMsRUFBTSxFQUFFLEdBQVcsRUFBRSxHQUFHLElBQXlCO0lBQ2xFLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEdBQUcsR0FBRyxFQUFFLElBQUksSUFBSSxFQUFFLENBQUMsa0JBQWtCLENBQUMsT0FBTyxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDO0FBQ3hGLENBQUM7QUFFRCxNQUFNLFVBQVUsWUFBWSxDQUFDLEVBQU0sRUFBRSxRQUFnQjtJQUNqRCxJQUFJLEVBQUUsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDNUIsT0FBTztLQUNWO0lBRUQsSUFBSSxLQUFLLEdBQUcsQ0FBQyxDQUFDO0lBQ2QsSUFBSSxFQUFFLENBQUMsVUFBVSxDQUFDLGNBQWMsRUFB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\",\"filename\":\"/lib/util.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":13.25,\"server\":\"pserv-1\",\"moduleSequenceNumber\":93978,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"purchaseTor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"purchaseProgram\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"connect\",\"cost\":2},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.stanek.charge(ns.args[0], ns.args[1]);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hhcmdlLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL3N0YW5lay9jaGFyZ2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUM5QixPQUFPLElBQUksRUFBRTtRQUNULE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7S0FDakQ7QUFDTCxDQUFDIn0=\",\"filename\":\"/lib/stanek/charge.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/stanek/charge.js\",\"url\":\"blob:file:///af3b0426-bf46-46b6-b83f-92ea17d97281\",\"moduleSequenceNumber\":99902}],\"dependents\":[],\"ramUsage\":2,\"server\":\"pserv-1\",\"moduleSequenceNumber\":99902,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.charge\",\"cost\":0.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"suppression\":0,\"activeSuppressionThreads\":[],\"suppressionIntervalID\":null,\"suppressionLastUpdateTime\":0}},\"pserv-2\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-2\",\"httpPortOpen\":false,\"ip\":\"12.6.3.3\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":252,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"script\\\":\\\"/lib/exec/grow.js\\\",\\\"host\\\":\\\"pserv-2\\\",\\\"numThreads\\\":144,\\\"target\\\":\\\"phantasy\\\",\\\"hackLevelTiming\\\":153.19873646097005,\\\"hackLevelEffect\\\":204,\\\"batchId\\\":22,\\\"offset\\\":36000,\\\"operationTime\\\":142114,\\\"finish\\\":178114,\\\"realTimeStart\\\":1647907321842,\\\"uid\\\":\\\"022-2G-pserv-2\\\",\\\"writeFile\\\":\\\"\\\"}\"],\"dataMap\":{},\"filename\":\"/lib/exec/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":34.80999999999996,\"pid\":1347,\"ramUsage\":1.75,\"server\":\"pserv-2\",\"threads\":144,\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///a3cfd6d6-0086-4f60-a670-89bb9f84f0eb\",\"moduleSequenceNumber\":94067}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.grow(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLElBQUksR0FBdUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFFbkUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDdkIsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7UUFDeEMsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7S0FDM0MsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyJ9\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///a3cfd6d6-0086-4f60-a670-89bb9f84f0eb\",\"moduleSequenceNumber\":94067}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-2\",\"moduleSequenceNumber\":94067,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.weaken(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxJQUFJLEdBQXVCLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO0lBRW5FLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFO1FBQ3pCLGtCQUFrQixFQUFFLElBQUksQ0FBQyxlQUFlO1FBQ3hDLGtCQUFrQixFQUFFLElBQUksQ0FBQyxlQUFlO0tBQzNDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///fd461376-c28c-4341-b2d3-2cbab768bbe9\",\"moduleSequenceNumber\":96335}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-2\",\"moduleSequenceNumber\":96335,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.hack(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLElBQUksR0FBdUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFFbkUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDdkIsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7UUFDeEMsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7S0FDM0MsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyJ9\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///a194f5ba-a0e1-49ab-8c23-b5e55672fb66\",\"moduleSequenceNumber\":96331}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-2\",\"moduleSequenceNumber\":96331,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export var ReservedPorts;\\r\\n(function (ReservedPorts) {\\r\\n    ReservedPorts[ReservedPorts[\\\"HACKING_INFO\\\"] = 1] = \\\"HACKING_INFO\\\";\\r\\n    ReservedPorts[ReservedPorts[\\\"HACKNET_INFO\\\"] = 2] = \\\"HACKNET_INFO\\\";\\r\\n    ReservedPorts[ReservedPorts[\\\"HACK_WRITE_INFO\\\"] = 3] = \\\"HACK_WRITE_INFO\\\";\\r\\n})(ReservedPorts || (ReservedPorts = {}));\\r\\nexport const WEAKENJS = \\\"/lib/exec/weaken.js\\\";\\r\\nexport const GROWJS = \\\"/lib/exec/grow.js\\\";\\r\\nexport const HACKJS = \\\"/lib/exec/hack.js\\\";\\r\\nexport const UTILJS = \\\"/lib/util.js\\\";\\r\\nexport const CITIES = [\\\"Aevum\\\", \\\"Chongqing\\\", \\\"Sector-12\\\", \\\"New Tokyo\\\", \\\"Ishima\\\", \\\"Volhaven\\\"];\\r\\nexport function llog(ns, str, ...args) {\\r\\n    ns.print(ns.sprintf(\\\"%8s \\\" + str, new Date().toLocaleTimeString(\\\"it-IT\\\"), ...args));\\r\\n}\\r\\nexport function softenServer(ns, hostname) {\\r\\n    if (ns.hasRootAccess(hostname)) {\\r\\n        return;\\r\\n    }\\r\\n    let ports = 0;\\r\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n        ns.brutessh(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n        ns.ftpcrack(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n        ns.httpworm(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n        ns.relaysmtp(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n        ns.sqlinject(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ports >= ns.getServerNumPortsRequired(hostname)) {\\r\\n        ns.nuke(hostname);\\r\\n    }\\r\\n}\\r\\nexport function serverIsHackable(ns, hostname) {\\r\\n    return ns.hasRootAccess(hostname) && ns.getHackingLevel() >= ns.getServerRequiredHackingLevel(hostname);\\r\\n}\\r\\nexport function canExecuteOnServer(ns, hostname) {\\r\\n    return ns.hasRootAccess(hostname) && ns.getServerMaxRam(hostname) > 0;\\r\\n}\\r\\nexport function mapHosts(ns, hosts = {}, parents = [], current = \\\"home\\\") {\\r\\n    const newParents = parents.concat(current);\\r\\n    hosts[current] = newParents;\\r\\n    const children = ns.scan(current).filter((element) => !parents.includes(element));\\r\\n    for (const child of children) {\\r\\n        mapHosts(ns, hosts, newParents, child);\\r\\n    }\\r\\n    return hosts;\\r\\n}\\r\\nexport function allHosts(ns) {\\r\\n    return Object.keys(mapHosts(ns));\\r\\n}\\r\\nexport function doProgramBuys(ns) {\\r\\n    const player = ns.getPlayer();\\r\\n    if (!player.tor && player.money > 200e3)\\r\\n        ns.purchaseTor();\\r\\n    if (!ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\") && player.money > 500e3)\\r\\n        ns.purchaseProgram(\\\"BruteSSH.exe\\\");\\r\\n    if (!ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\") && player.money > 1500e3)\\r\\n        ns.purchaseProgram(\\\"FTPCrack.exe\\\");\\r\\n    if (!ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\") && player.money > 5e6)\\r\\n        ns.purchaseProgram(\\\"relaySMTP.exe\\\");\\r\\n    if (!ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\") && player.money > 30e6)\\r\\n        ns.purchaseProgram(\\\"HTTPWorm.exe\\\");\\r\\n    if (!ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\") && player.money > 250e6)\\r\\n        ns.purchaseProgram(\\\"SQLInject.exe\\\");\\r\\n}\\r\\nexport function doBuyAndSoftenAll(ns) {\\r\\n    doProgramBuys(ns);\\r\\n    for (const hostname of allHosts(ns)) {\\r\\n        softenServer(ns, hostname);\\r\\n    }\\r\\n}\\r\\nexport function stFormat(ns, ms, showms = false, showfull = false) {\\r\\n    let timeLeft = ms;\\r\\n    const hours = Math.floor(ms / (1000 * 60 * 60));\\r\\n    timeLeft -= hours * (1000 * 60 * 60);\\r\\n    const minutes = Math.floor(timeLeft / (1000 * 60));\\r\\n    timeLeft -= minutes * (1000 * 60);\\r\\n    const seconds = Math.floor(timeLeft / 1000);\\r\\n    timeLeft -= seconds * 1000;\\r\\n    const milliseconds = timeLeft;\\r\\n    if (showms) {\\r\\n        if (hours > 0 || showfull)\\r\\n            return ns.sprintf(\\\"%02d:%02d:%02d.%03d\\\", hours, minutes, seconds, milliseconds);\\r\\n        if (minutes > 0)\\r\\n            return ns.sprintf(\\\"%02d:%02d.%03d\\\", minutes, seconds, milliseconds);\\r\\n        return ns.sprintf(\\\"%02d.%03d\\\", seconds, milliseconds);\\r\\n    }\\r\\n    else {\\r\\n        if (hours > 0 || showfull)\\r\\n            return ns.sprintf(\\\"%02d:%02d:%02d\\\", hours, minutes, seconds);\\r\\n        if (minutes > 0)\\r\\n            return ns.sprintf(\\\"%02d:%02d\\\", minutes, seconds);\\r\\n        return ns.sprintf(\\\"%02d\\\", seconds);\\r\\n    }\\r\\n}\\r\\nexport function stdFormat(ns, offset = 0, showms = false) {\\r\\n    const date = new Date(new Date().getTime() + offset);\\r\\n    if (showms) {\\r\\n        const ms = ns.sprintf(\\\"%03d\\\", date.getUTCMilliseconds());\\r\\n        return date.toLocaleTimeString(\\\"it-IT\\\") + \\\".\\\" + ms;\\r\\n    }\\r\\n    else {\\r\\n        return date.toLocaleTimeString(\\\"it-IT\\\");\\r\\n    }\\r\\n}\\r\\nexport async function doBackdoors(ns) {\\r\\n    //const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"w0r1d_d43m0n\\\", \\\"b-and-a\\\", \\\"ecorp\\\", \\\"fulcrumassets\\\", \\\"fulcrumtech\\\"];\\r\\n    //const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"omnitek\\\", \\\"kuai-gong\\\", \\\"megacorp\\\"];\\r\\n    const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"w0r1d_d43m0n\\\"];\\r\\n    const hosts = mapHosts(ns);\\r\\n    for (const [hostName, trail] of Object.entries(hosts)) {\\r\\n        const server = ns.getServer(hostName);\\r\\n        if (!targetHosts.includes(hostName) ||\\r\\n            server.backdoorInstalled ||\\r\\n            server.requiredHackingSkill > ns.getHackingLevel() ||\\r\\n            !server.hasAdminRights)\\r\\n            continue;\\r\\n        ns.print(hostName);\\r\\n        for (const hostHopName of trail) {\\r\\n            ns.connect(hostHopName);\\r\\n        }\\r\\n        await ns.installBackdoor();\\r\\n        ns.connect(\\\"home\\\");\\r\\n    }\\r\\n}\\r\\nexport function cleanLogs(ns) {\\r\\n    ns.disableLog(\\\"disableLog\\\");\\r\\n    ns.disableLog(\\\"ALL\\\");\\r\\n    // ns.disableLog(\\\"sleep\\\")\\r\\n    // ns.disableLog(\\\"exec\\\")\\r\\n    // ns.disableLog(\\\"getServerMaxRam\\\")\\r\\n    // ns.disableLog(\\\"getServerSecurityLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerMinSecurityLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerMaxMoney\\\")\\r\\n    // ns.disableLog(\\\"getHackingLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerRequiredHackingLevel\\\")\\r\\n    // ns.disableLog(\\\"scan\\\")\\r\\n    // ns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n    // ns.disableLog(\\\"getServerUsedRam\\\")\\r\\n}\\r\\nexport const ALL_FACTIONS = [\\r\\n    \\\"Illuminati\\\",\\r\\n    \\\"Daedalus\\\",\\r\\n    \\\"The Covenant\\\",\\r\\n    \\\"ECorp\\\",\\r\\n    \\\"MegaCorp\\\",\\r\\n    \\\"Bachman & Associates\\\",\\r\\n    \\\"Blade Industries\\\",\\r\\n    \\\"NWO\\\",\\r\\n    \\\"Clarke Incorporated\\\",\\r\\n    \\\"OmniTek Incorporated\\\",\\r\\n    \\\"Four Sigma\\\",\\r\\n    \\\"KuaiGong International\\\",\\r\\n    \\\"Fulcrum Secret Technologies\\\",\\r\\n    \\\"BitRunners\\\",\\r\\n    \\\"The Black Hand\\\",\\r\\n    \\\"NiteSec\\\",\\r\\n    \\\"Aevum\\\",\\r\\n    \\\"Chongqing\\\",\\r\\n    \\\"Ishima\\\",\\r\\n    \\\"New Tokyo\\\",\\r\\n    \\\"Sector-12\\\",\\r\\n    \\\"Volhaven\\\",\\r\\n    \\\"Speakers for the Dead\\\",\\r\\n    \\\"The Dark Army\\\",\\r\\n    \\\"The Syndicate\\\",\\r\\n    \\\"Silhouette\\\",\\r\\n    \\\"Tetrads\\\",\\r\\n    \\\"Slum Snakes\\\",\\r\\n    \\\"Netburners\\\",\\r\\n    \\\"Tian Di Hui\\\",\\r\\n    \\\"CyberSec\\\",\\r\\n    \\\"Bladeburners\\\",\\r\\n    \\\"Church of the Machine God\\\",\\r\\n];\\r\\nexport async function writeOut(ns, data, startTime, endTime, result, startSec, startCash) {\\r\\n    if (data.writeFile !== \\\"\\\") {\\r\\n        const outstr = ns.sprintf(\\\"%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\", data.target, data.uid, data.batchId, data.realTimeStart + data.offset, data.realTimeStart + data.finish, data.operationTime, startTime, endTime, endTime - startTime, startTime - (data.realTimeStart + data.offset), endTime - (data.realTimeStart + data.finish), endTime - startTime - data.operationTime, result, startSec.toFixed(2), ns.getServerSecurityLevel(data.target).toFixed(2), ns.nFormat(startCash, \\\"($0.000a)\\\"), ns.nFormat(ns.getServerMoneyAvailable(data.target), \\\"($0.000a)\\\"));\\r\\n        while (!await ns.tryWritePort(ReservedPorts.HACK_WRITE_INFO, [data.writeFile, outstr]))\\r\\n            ;\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi91dGlsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLE1BQU0sQ0FBTixJQUFZLGFBSVg7QUFKRCxXQUFZLGFBQWE7SUFDckIsaUVBQWdCLENBQUE7SUFDaEIsaUVBQVksQ0FBQTtJQUNaLHVFQUFlLENBQUE7QUFDbkIsQ0FBQyxFQUpXLGFBQWEsS0FBYixhQUFhLFFBSXhCO0FBRUQsTUFBTSxDQUFDLE1BQU0sUUFBUSxHQUFHLHFCQUFxQixDQUFDO0FBQzlDLE1BQU0sQ0FBQyxNQUFNLE1BQU0sR0FBRyxtQkFBbUIsQ0FBQztBQUMxQyxNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUcsbUJBQW1CLENBQUM7QUFDMUMsTUFBTSxDQUFDLE1BQU0sTUFBTSxHQUFHLGNBQWMsQ0FBQztBQUVyQyxNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUcsQ0FBQyxPQUFPLEVBQUUsV0FBVyxFQUFFLFdBQVcsRUFBRSxXQUFXLEVBQUUsUUFBUSxFQUFFLFVBQVUsQ0FBQyxDQUFDO0FBRTdGLE1BQU0sVUFBVSxJQUFJLENBQUMsRUFBTSxFQUFFLEdBQVcsRUFBRSxHQUFHLElBQXlCO0lBQ2xFLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEdBQUcsR0FBRyxFQUFFLElBQUksSUFBSSxFQUFFLENBQUMsa0JBQWtCLENBQUMsT0FBTyxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDO0FBQ3hGLENBQUM7QUFFRCxNQUFNLFVBQVUsWUFBWSxDQUFDLEVBQU0sRUFBRSxRQUFnQjtJQUNqRCxJQUFJLEVBQUUsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDNUIsT0FBTztLQUNWO0lBRUQsSUFBSSxLQUFLLEdBQUcsQ0FBQyxDQUFDO0lBQ2QsSUFBSSxFQUFFLENBQUMsVUFBVSxDQUFDLGNBQWMsRUFB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\",\"filename\":\"/lib/util.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":13.25,\"server\":\"pserv-2\",\"moduleSequenceNumber\":93986,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"purchaseTor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"purchaseProgram\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"connect\",\"cost\":2},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.stanek.charge(ns.args[0], ns.args[1]);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hhcmdlLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL3N0YW5lay9jaGFyZ2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUM5QixPQUFPLElBQUksRUFBRTtRQUNULE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7S0FDakQ7QUFDTCxDQUFDIn0=\",\"filename\":\"/lib/stanek/charge.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/stanek/charge.js\",\"url\":\"blob:file:///bc8d5418-edbd-467d-b50e-df4e441773ca\",\"moduleSequenceNumber\":99903}],\"dependents\":[],\"ramUsage\":2,\"server\":\"pserv-2\",\"moduleSequenceNumber\":99903,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.charge\",\"cost\":0.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"suppression\":0,\"activeSuppressionThreads\":[],\"suppressionIntervalID\":null,\"suppressionLastUpdateTime\":0}},\"pserv-3\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-3\",\"httpPortOpen\":false,\"ip\":\"95.0.9.5\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":204,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"script\\\":\\\"/lib/exec/hack.js\\\",\\\"host\\\":\\\"pserv-3\\\",\\\"numThreads\\\":120,\\\"target\\\":\\\"phantasy\\\",\\\"hackLevelTiming\\\":13.499605144053142,\\\"hackLevelEffect\\\":204,\\\"batchId\\\":23,\\\"offset\\\":36800,\\\"operationTime\\\":142113,\\\"finish\\\":178913,\\\"realTimeStart\\\":1647907321842,\\\"uid\\\":\\\"023-0H-pserv-3\\\",\\\"writeFile\\\":\\\"\\\"}\"],\"dataMap\":{},\"filename\":\"/lib/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":34.00999999999995,\"pid\":1349,\"ramUsage\":1.7,\"server\":\"pserv-3\",\"threads\":120,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.grow(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLElBQUksR0FBdUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFFbkUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDdkIsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7UUFDeEMsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7S0FDM0MsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyJ9\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///13617ca6-31de-4953-a47a-3e5a85b5f5d7\",\"moduleSequenceNumber\":94066}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-3\",\"moduleSequenceNumber\":94066,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.weaken(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxJQUFJLEdBQXVCLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO0lBRW5FLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFO1FBQ3pCLGtCQUFrQixFQUFFLElBQUksQ0FBQyxlQUFlO1FBQ3hDLGtCQUFrQixFQUFFLElBQUksQ0FBQyxlQUFlO0tBQzNDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///90bfb7b8-67b1-47a5-a059-ca0948f1361b\",\"moduleSequenceNumber\":96336}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-3\",\"moduleSequenceNumber\":96336,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.hack(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLElBQUksR0FBdUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFFbkUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDdkIsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7UUFDeEMsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7S0FDM0MsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyJ9\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///cf21fa15-b395-4301-9570-8d10ac6e0f17\",\"moduleSequenceNumber\":103937}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-3\",\"moduleSequenceNumber\":103937,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export var ReservedPorts;\\r\\n(function (ReservedPorts) {\\r\\n    ReservedPorts[ReservedPorts[\\\"HACKING_INFO\\\"] = 1] = \\\"HACKING_INFO\\\";\\r\\n    ReservedPorts[ReservedPorts[\\\"HACKNET_INFO\\\"] = 2] = \\\"HACKNET_INFO\\\";\\r\\n    ReservedPorts[ReservedPorts[\\\"HACK_WRITE_INFO\\\"] = 3] = \\\"HACK_WRITE_INFO\\\";\\r\\n})(ReservedPorts || (ReservedPorts = {}));\\r\\nexport const WEAKENJS = \\\"/lib/exec/weaken.js\\\";\\r\\nexport const GROWJS = \\\"/lib/exec/grow.js\\\";\\r\\nexport const HACKJS = \\\"/lib/exec/hack.js\\\";\\r\\nexport const UTILJS = \\\"/lib/util.js\\\";\\r\\nexport const CITIES = [\\\"Aevum\\\", \\\"Chongqing\\\", \\\"Sector-12\\\", \\\"New Tokyo\\\", \\\"Ishima\\\", \\\"Volhaven\\\"];\\r\\nexport function llog(ns, str, ...args) {\\r\\n    ns.print(ns.sprintf(\\\"%8s \\\" + str, new Date().toLocaleTimeString(\\\"it-IT\\\"), ...args));\\r\\n}\\r\\nexport function softenServer(ns, hostname) {\\r\\n    if (ns.hasRootAccess(hostname)) {\\r\\n        return;\\r\\n    }\\r\\n    let ports = 0;\\r\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n        ns.brutessh(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n        ns.ftpcrack(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n        ns.httpworm(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n        ns.relaysmtp(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n        ns.sqlinject(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ports >= ns.getServerNumPortsRequired(hostname)) {\\r\\n        ns.nuke(hostname);\\r\\n    }\\r\\n}\\r\\nexport function serverIsHackable(ns, hostname) {\\r\\n    return ns.hasRootAccess(hostname) && ns.getHackingLevel() >= ns.getServerRequiredHackingLevel(hostname);\\r\\n}\\r\\nexport function canExecuteOnServer(ns, hostname) {\\r\\n    return ns.hasRootAccess(hostname) && ns.getServerMaxRam(hostname) > 0;\\r\\n}\\r\\nexport function mapHosts(ns, hosts = {}, parents = [], current = \\\"home\\\") {\\r\\n    const newParents = parents.concat(current);\\r\\n    hosts[current] = newParents;\\r\\n    const children = ns.scan(current).filter((element) => !parents.includes(element));\\r\\n    for (const child of children) {\\r\\n        mapHosts(ns, hosts, newParents, child);\\r\\n    }\\r\\n    return hosts;\\r\\n}\\r\\nexport function allHosts(ns) {\\r\\n    return Object.keys(mapHosts(ns));\\r\\n}\\r\\nexport function doProgramBuys(ns) {\\r\\n    const player = ns.getPlayer();\\r\\n    if (!player.tor && player.money > 200e3)\\r\\n        ns.purchaseTor();\\r\\n    if (!ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\") && player.money > 500e3)\\r\\n        ns.purchaseProgram(\\\"BruteSSH.exe\\\");\\r\\n    if (!ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\") && player.money > 1500e3)\\r\\n        ns.purchaseProgram(\\\"FTPCrack.exe\\\");\\r\\n    if (!ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\") && player.money > 5e6)\\r\\n        ns.purchaseProgram(\\\"relaySMTP.exe\\\");\\r\\n    if (!ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\") && player.money > 30e6)\\r\\n        ns.purchaseProgram(\\\"HTTPWorm.exe\\\");\\r\\n    if (!ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\") && player.money > 250e6)\\r\\n        ns.purchaseProgram(\\\"SQLInject.exe\\\");\\r\\n}\\r\\nexport function doBuyAndSoftenAll(ns) {\\r\\n    doProgramBuys(ns);\\r\\n    for (const hostname of allHosts(ns)) {\\r\\n        softenServer(ns, hostname);\\r\\n    }\\r\\n}\\r\\nexport function stFormat(ns, ms, showms = false, showfull = false) {\\r\\n    let timeLeft = ms;\\r\\n    const hours = Math.floor(ms / (1000 * 60 * 60));\\r\\n    timeLeft -= hours * (1000 * 60 * 60);\\r\\n    const minutes = Math.floor(timeLeft / (1000 * 60));\\r\\n    timeLeft -= minutes * (1000 * 60);\\r\\n    const seconds = Math.floor(timeLeft / 1000);\\r\\n    timeLeft -= seconds * 1000;\\r\\n    const milliseconds = timeLeft;\\r\\n    if (showms) {\\r\\n        if (hours > 0 || showfull)\\r\\n            return ns.sprintf(\\\"%02d:%02d:%02d.%03d\\\", hours, minutes, seconds, milliseconds);\\r\\n        if (minutes > 0)\\r\\n            return ns.sprintf(\\\"%02d:%02d.%03d\\\", minutes, seconds, milliseconds);\\r\\n        return ns.sprintf(\\\"%02d.%03d\\\", seconds, milliseconds);\\r\\n    }\\r\\n    else {\\r\\n        if (hours > 0 || showfull)\\r\\n            return ns.sprintf(\\\"%02d:%02d:%02d\\\", hours, minutes, seconds);\\r\\n        if (minutes > 0)\\r\\n            return ns.sprintf(\\\"%02d:%02d\\\", minutes, seconds);\\r\\n        return ns.sprintf(\\\"%02d\\\", seconds);\\r\\n    }\\r\\n}\\r\\nexport function stdFormat(ns, offset = 0, showms = false) {\\r\\n    const date = new Date(new Date().getTime() + offset);\\r\\n    if (showms) {\\r\\n        const ms = ns.sprintf(\\\"%03d\\\", date.getUTCMilliseconds());\\r\\n        return date.toLocaleTimeString(\\\"it-IT\\\") + \\\".\\\" + ms;\\r\\n    }\\r\\n    else {\\r\\n        return date.toLocaleTimeString(\\\"it-IT\\\");\\r\\n    }\\r\\n}\\r\\nexport async function doBackdoors(ns) {\\r\\n    //const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"w0r1d_d43m0n\\\", \\\"b-and-a\\\", \\\"ecorp\\\", \\\"fulcrumassets\\\", \\\"fulcrumtech\\\"];\\r\\n    //const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"omnitek\\\", \\\"kuai-gong\\\", \\\"megacorp\\\"];\\r\\n    const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"w0r1d_d43m0n\\\"];\\r\\n    const hosts = mapHosts(ns);\\r\\n    for (const [hostName, trail] of Object.entries(hosts)) {\\r\\n        const server = ns.getServer(hostName);\\r\\n        if (!targetHosts.includes(hostName) ||\\r\\n            server.backdoorInstalled ||\\r\\n            server.requiredHackingSkill > ns.getHackingLevel() ||\\r\\n            !server.hasAdminRights)\\r\\n            continue;\\r\\n        ns.print(hostName);\\r\\n        for (const hostHopName of trail) {\\r\\n            ns.connect(hostHopName);\\r\\n        }\\r\\n        await ns.installBackdoor();\\r\\n        ns.connect(\\\"home\\\");\\r\\n    }\\r\\n}\\r\\nexport function cleanLogs(ns) {\\r\\n    ns.disableLog(\\\"disableLog\\\");\\r\\n    ns.disableLog(\\\"ALL\\\");\\r\\n    // ns.disableLog(\\\"sleep\\\")\\r\\n    // ns.disableLog(\\\"exec\\\")\\r\\n    // ns.disableLog(\\\"getServerMaxRam\\\")\\r\\n    // ns.disableLog(\\\"getServerSecurityLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerMinSecurityLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerMaxMoney\\\")\\r\\n    // ns.disableLog(\\\"getHackingLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerRequiredHackingLevel\\\")\\r\\n    // ns.disableLog(\\\"scan\\\")\\r\\n    // ns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n    // ns.disableLog(\\\"getServerUsedRam\\\")\\r\\n}\\r\\nexport const ALL_FACTIONS = [\\r\\n    \\\"Illuminati\\\",\\r\\n    \\\"Daedalus\\\",\\r\\n    \\\"The Covenant\\\",\\r\\n    \\\"ECorp\\\",\\r\\n    \\\"MegaCorp\\\",\\r\\n    \\\"Bachman & Associates\\\",\\r\\n    \\\"Blade Industries\\\",\\r\\n    \\\"NWO\\\",\\r\\n    \\\"Clarke Incorporated\\\",\\r\\n    \\\"OmniTek Incorporated\\\",\\r\\n    \\\"Four Sigma\\\",\\r\\n    \\\"KuaiGong International\\\",\\r\\n    \\\"Fulcrum Secret Technologies\\\",\\r\\n    \\\"BitRunners\\\",\\r\\n    \\\"The Black Hand\\\",\\r\\n    \\\"NiteSec\\\",\\r\\n    \\\"Aevum\\\",\\r\\n    \\\"Chongqing\\\",\\r\\n    \\\"Ishima\\\",\\r\\n    \\\"New Tokyo\\\",\\r\\n    \\\"Sector-12\\\",\\r\\n    \\\"Volhaven\\\",\\r\\n    \\\"Speakers for the Dead\\\",\\r\\n    \\\"The Dark Army\\\",\\r\\n    \\\"The Syndicate\\\",\\r\\n    \\\"Silhouette\\\",\\r\\n    \\\"Tetrads\\\",\\r\\n    \\\"Slum Snakes\\\",\\r\\n    \\\"Netburners\\\",\\r\\n    \\\"Tian Di Hui\\\",\\r\\n    \\\"CyberSec\\\",\\r\\n    \\\"Bladeburners\\\",\\r\\n    \\\"Church of the Machine God\\\",\\r\\n];\\r\\nexport async function writeOut(ns, data, startTime, endTime, result, startSec, startCash) {\\r\\n    if (data.writeFile !== \\\"\\\") {\\r\\n        const outstr = ns.sprintf(\\\"%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\", data.target, data.uid, data.batchId, data.realTimeStart + data.offset, data.realTimeStart + data.finish, data.operationTime, startTime, endTime, endTime - startTime, startTime - (data.realTimeStart + data.offset), endTime - (data.realTimeStart + data.finish), endTime - startTime - data.operationTime, result, startSec.toFixed(2), ns.getServerSecurityLevel(data.target).toFixed(2), ns.nFormat(startCash, \\\"($0.000a)\\\"), ns.nFormat(ns.getServerMoneyAvailable(data.target), \\\"($0.000a)\\\"));\\r\\n        while (!await ns.tryWritePort(ReservedPorts.HACK_WRITE_INFO, [data.writeFile, outstr]))\\r\\n            ;\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi91dGlsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLE1BQU0sQ0FBTixJQUFZLGFBSVg7QUFKRCxXQUFZLGFBQWE7SUFDckIsaUVBQWdCLENBQUE7SUFDaEIsaUVBQVksQ0FBQTtJQUNaLHVFQUFlLENBQUE7QUFDbkIsQ0FBQyxFQUpXLGFBQWEsS0FBYixhQUFhLFFBSXhCO0FBRUQsTUFBTSxDQUFDLE1BQU0sUUFBUSxHQUFHLHFCQUFxQixDQUFDO0FBQzlDLE1BQU0sQ0FBQyxNQUFNLE1BQU0sR0FBRyxtQkFBbUIsQ0FBQztBQUMxQyxNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUcsbUJBQW1CLENBQUM7QUFDMUMsTUFBTSxDQUFDLE1BQU0sTUFBTSxHQUFHLGNBQWMsQ0FBQztBQUVyQyxNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUcsQ0FBQyxPQUFPLEVBQUUsV0FBVyxFQUFFLFdBQVcsRUFBRSxXQUFXLEVBQUUsUUFBUSxFQUFFLFVBQVUsQ0FBQyxDQUFDO0FBRTdGLE1BQU0sVUFBVSxJQUFJLENBQUMsRUFBTSxFQUFFLEdBQVcsRUFBRSxHQUFHLElBQXlCO0lBQ2xFLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEdBQUcsR0FBRyxFQUFFLElBQUksSUFBSSxFQUFFLENBQUMsa0JBQWtCLENBQUMsT0FBTyxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDO0FBQ3hGLENBQUM7QUFFRCxNQUFNLFVBQVUsWUFBWSxDQUFDLEVBQU0sRUFBRSxRQUFnQjtJQUNqRCxJQUFJLEVBQUUsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDNUIsT0FBTztLQUNWO0lBRUQsSUFBSSxLQUFLLEdBQUcsQ0FBQyxDQUFDO0lBQ2QsSUFBSSxFQUFFLENBQUMsVUFBVSxDQUFDLGNBQWMsRUFB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\",\"filename\":\"/lib/util.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":13.25,\"server\":\"pserv-3\",\"moduleSequenceNumber\":93994,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"purchaseTor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"purchaseProgram\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"connect\",\"cost\":2},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.stanek.charge(ns.args[0], ns.args[1]);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hhcmdlLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL3N0YW5lay9jaGFyZ2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUM5QixPQUFPLElBQUksRUFBRTtRQUNULE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7S0FDakQ7QUFDTCxDQUFDIn0=\",\"filename\":\"/lib/stanek/charge.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/stanek/charge.js\",\"url\":\"blob:file:///ff659a3c-02e6-4d4b-8e50-d3fbeb953199\",\"moduleSequenceNumber\":99904}],\"dependents\":[],\"ramUsage\":2,\"server\":\"pserv-3\",\"moduleSequenceNumber\":99904,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.charge\",\"cost\":0.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"suppression\":0,\"activeSuppressionThreads\":[],\"suppressionIntervalID\":null,\"suppressionLastUpdateTime\":0}},\"pserv-4\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-4\",\"httpPortOpen\":false,\"ip\":\"18.3.7.8\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":252,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"script\\\":\\\"/lib/exec/grow.js\\\",\\\"host\\\":\\\"pserv-4\\\",\\\"numThreads\\\":144,\\\"target\\\":\\\"phantasy\\\",\\\"hackLevelTiming\\\":153.19873646097005,\\\"hackLevelEffect\\\":204,\\\"batchId\\\":23,\\\"offset\\\":37600,\\\"operationTime\\\":142114,\\\"finish\\\":179714,\\\"realTimeStart\\\":1647907321842,\\\"uid\\\":\\\"023-2G-pserv-4\\\",\\\"writeFile\\\":\\\"\\\"}\"],\"dataMap\":{},\"filename\":\"/lib/exec/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":33.209999999999944,\"pid\":1351,\"ramUsage\":1.75,\"server\":\"pserv-4\",\"threads\":144,\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///7f1226fa-d2e6-43df-8ea6-0452fef59748\",\"moduleSequenceNumber\":94065}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.grow(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLElBQUksR0FBdUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFFbkUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDdkIsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7UUFDeEMsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7S0FDM0MsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyJ9\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///7f1226fa-d2e6-43df-8ea6-0452fef59748\",\"moduleSequenceNumber\":94065}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-4\",\"moduleSequenceNumber\":94065,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.weaken(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxJQUFJLEdBQXVCLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO0lBRW5FLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFO1FBQ3pCLGtCQUFrQixFQUFFLElBQUksQ0FBQyxlQUFlO1FBQ3hDLGtCQUFrQixFQUFFLElBQUksQ0FBQyxlQUFlO0tBQzNDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///b40bb712-1114-4c8b-8b45-5c81f9ff952e\",\"moduleSequenceNumber\":96338}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-4\",\"moduleSequenceNumber\":96338,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.hack(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLElBQUksR0FBdUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFFbkUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDdkIsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7UUFDeEMsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7S0FDM0MsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyJ9\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///2bf25d77-f408-4af6-8109-535f7a36f302\",\"moduleSequenceNumber\":96334}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-4\",\"moduleSequenceNumber\":96334,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export var ReservedPorts;\\r\\n(function (ReservedPorts) {\\r\\n    ReservedPorts[ReservedPorts[\\\"HACKING_INFO\\\"] = 1] = \\\"HACKING_INFO\\\";\\r\\n    ReservedPorts[ReservedPorts[\\\"HACKNET_INFO\\\"] = 2] = \\\"HACKNET_INFO\\\";\\r\\n    ReservedPorts[ReservedPorts[\\\"HACK_WRITE_INFO\\\"] = 3] = \\\"HACK_WRITE_INFO\\\";\\r\\n})(ReservedPorts || (ReservedPorts = {}));\\r\\nexport const WEAKENJS = \\\"/lib/exec/weaken.js\\\";\\r\\nexport const GROWJS = \\\"/lib/exec/grow.js\\\";\\r\\nexport const HACKJS = \\\"/lib/exec/hack.js\\\";\\r\\nexport const UTILJS = \\\"/lib/util.js\\\";\\r\\nexport const CITIES = [\\\"Aevum\\\", \\\"Chongqing\\\", \\\"Sector-12\\\", \\\"New Tokyo\\\", \\\"Ishima\\\", \\\"Volhaven\\\"];\\r\\nexport function llog(ns, str, ...args) {\\r\\n    ns.print(ns.sprintf(\\\"%8s \\\" + str, new Date().toLocaleTimeString(\\\"it-IT\\\"), ...args));\\r\\n}\\r\\nexport function softenServer(ns, hostname) {\\r\\n    if (ns.hasRootAccess(hostname)) {\\r\\n        return;\\r\\n    }\\r\\n    let ports = 0;\\r\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n        ns.brutessh(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n        ns.ftpcrack(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n        ns.httpworm(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n        ns.relaysmtp(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n        ns.sqlinject(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ports >= ns.getServerNumPortsRequired(hostname)) {\\r\\n        ns.nuke(hostname);\\r\\n    }\\r\\n}\\r\\nexport function serverIsHackable(ns, hostname) {\\r\\n    return ns.hasRootAccess(hostname) && ns.getHackingLevel() >= ns.getServerRequiredHackingLevel(hostname);\\r\\n}\\r\\nexport function canExecuteOnServer(ns, hostname) {\\r\\n    return ns.hasRootAccess(hostname) && ns.getServerMaxRam(hostname) > 0;\\r\\n}\\r\\nexport function mapHosts(ns, hosts = {}, parents = [], current = \\\"home\\\") {\\r\\n    const newParents = parents.concat(current);\\r\\n    hosts[current] = newParents;\\r\\n    const children = ns.scan(current).filter((element) => !parents.includes(element));\\r\\n    for (const child of children) {\\r\\n        mapHosts(ns, hosts, newParents, child);\\r\\n    }\\r\\n    return hosts;\\r\\n}\\r\\nexport function allHosts(ns) {\\r\\n    return Object.keys(mapHosts(ns));\\r\\n}\\r\\nexport function doProgramBuys(ns) {\\r\\n    const player = ns.getPlayer();\\r\\n    if (!player.tor && player.money > 200e3)\\r\\n        ns.purchaseTor();\\r\\n    if (!ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\") && player.money > 500e3)\\r\\n        ns.purchaseProgram(\\\"BruteSSH.exe\\\");\\r\\n    if (!ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\") && player.money > 1500e3)\\r\\n        ns.purchaseProgram(\\\"FTPCrack.exe\\\");\\r\\n    if (!ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\") && player.money > 5e6)\\r\\n        ns.purchaseProgram(\\\"relaySMTP.exe\\\");\\r\\n    if (!ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\") && player.money > 30e6)\\r\\n        ns.purchaseProgram(\\\"HTTPWorm.exe\\\");\\r\\n    if (!ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\") && player.money > 250e6)\\r\\n        ns.purchaseProgram(\\\"SQLInject.exe\\\");\\r\\n}\\r\\nexport function doBuyAndSoftenAll(ns) {\\r\\n    doProgramBuys(ns);\\r\\n    for (const hostname of allHosts(ns)) {\\r\\n        softenServer(ns, hostname);\\r\\n    }\\r\\n}\\r\\nexport function stFormat(ns, ms, showms = false, showfull = false) {\\r\\n    let timeLeft = ms;\\r\\n    const hours = Math.floor(ms / (1000 * 60 * 60));\\r\\n    timeLeft -= hours * (1000 * 60 * 60);\\r\\n    const minutes = Math.floor(timeLeft / (1000 * 60));\\r\\n    timeLeft -= minutes * (1000 * 60);\\r\\n    const seconds = Math.floor(timeLeft / 1000);\\r\\n    timeLeft -= seconds * 1000;\\r\\n    const milliseconds = timeLeft;\\r\\n    if (showms) {\\r\\n        if (hours > 0 || showfull)\\r\\n            return ns.sprintf(\\\"%02d:%02d:%02d.%03d\\\", hours, minutes, seconds, milliseconds);\\r\\n        if (minutes > 0)\\r\\n            return ns.sprintf(\\\"%02d:%02d.%03d\\\", minutes, seconds, milliseconds);\\r\\n        return ns.sprintf(\\\"%02d.%03d\\\", seconds, milliseconds);\\r\\n    }\\r\\n    else {\\r\\n        if (hours > 0 || showfull)\\r\\n            return ns.sprintf(\\\"%02d:%02d:%02d\\\", hours, minutes, seconds);\\r\\n        if (minutes > 0)\\r\\n            return ns.sprintf(\\\"%02d:%02d\\\", minutes, seconds);\\r\\n        return ns.sprintf(\\\"%02d\\\", seconds);\\r\\n    }\\r\\n}\\r\\nexport function stdFormat(ns, offset = 0, showms = false) {\\r\\n    const date = new Date(new Date().getTime() + offset);\\r\\n    if (showms) {\\r\\n        const ms = ns.sprintf(\\\"%03d\\\", date.getUTCMilliseconds());\\r\\n        return date.toLocaleTimeString(\\\"it-IT\\\") + \\\".\\\" + ms;\\r\\n    }\\r\\n    else {\\r\\n        return date.toLocaleTimeString(\\\"it-IT\\\");\\r\\n    }\\r\\n}\\r\\nexport async function doBackdoors(ns) {\\r\\n    //const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"w0r1d_d43m0n\\\", \\\"b-and-a\\\", \\\"ecorp\\\", \\\"fulcrumassets\\\", \\\"fulcrumtech\\\"];\\r\\n    //const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"omnitek\\\", \\\"kuai-gong\\\", \\\"megacorp\\\"];\\r\\n    const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"w0r1d_d43m0n\\\"];\\r\\n    const hosts = mapHosts(ns);\\r\\n    for (const [hostName, trail] of Object.entries(hosts)) {\\r\\n        const server = ns.getServer(hostName);\\r\\n        if (!targetHosts.includes(hostName) ||\\r\\n            server.backdoorInstalled ||\\r\\n            server.requiredHackingSkill > ns.getHackingLevel() ||\\r\\n            !server.hasAdminRights)\\r\\n            continue;\\r\\n        ns.print(hostName);\\r\\n        for (const hostHopName of trail) {\\r\\n            ns.connect(hostHopName);\\r\\n        }\\r\\n        await ns.installBackdoor();\\r\\n        ns.connect(\\\"home\\\");\\r\\n    }\\r\\n}\\r\\nexport function cleanLogs(ns) {\\r\\n    ns.disableLog(\\\"disableLog\\\");\\r\\n    ns.disableLog(\\\"ALL\\\");\\r\\n    // ns.disableLog(\\\"sleep\\\")\\r\\n    // ns.disableLog(\\\"exec\\\")\\r\\n    // ns.disableLog(\\\"getServerMaxRam\\\")\\r\\n    // ns.disableLog(\\\"getServerSecurityLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerMinSecurityLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerMaxMoney\\\")\\r\\n    // ns.disableLog(\\\"getHackingLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerRequiredHackingLevel\\\")\\r\\n    // ns.disableLog(\\\"scan\\\")\\r\\n    // ns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n    // ns.disableLog(\\\"getServerUsedRam\\\")\\r\\n}\\r\\nexport const ALL_FACTIONS = [\\r\\n    \\\"Illuminati\\\",\\r\\n    \\\"Daedalus\\\",\\r\\n    \\\"The Covenant\\\",\\r\\n    \\\"ECorp\\\",\\r\\n    \\\"MegaCorp\\\",\\r\\n    \\\"Bachman & Associates\\\",\\r\\n    \\\"Blade Industries\\\",\\r\\n    \\\"NWO\\\",\\r\\n    \\\"Clarke Incorporated\\\",\\r\\n    \\\"OmniTek Incorporated\\\",\\r\\n    \\\"Four Sigma\\\",\\r\\n    \\\"KuaiGong International\\\",\\r\\n    \\\"Fulcrum Secret Technologies\\\",\\r\\n    \\\"BitRunners\\\",\\r\\n    \\\"The Black Hand\\\",\\r\\n    \\\"NiteSec\\\",\\r\\n    \\\"Aevum\\\",\\r\\n    \\\"Chongqing\\\",\\r\\n    \\\"Ishima\\\",\\r\\n    \\\"New Tokyo\\\",\\r\\n    \\\"Sector-12\\\",\\r\\n    \\\"Volhaven\\\",\\r\\n    \\\"Speakers for the Dead\\\",\\r\\n    \\\"The Dark Army\\\",\\r\\n    \\\"The Syndicate\\\",\\r\\n    \\\"Silhouette\\\",\\r\\n    \\\"Tetrads\\\",\\r\\n    \\\"Slum Snakes\\\",\\r\\n    \\\"Netburners\\\",\\r\\n    \\\"Tian Di Hui\\\",\\r\\n    \\\"CyberSec\\\",\\r\\n    \\\"Bladeburners\\\",\\r\\n    \\\"Church of the Machine God\\\",\\r\\n];\\r\\nexport async function writeOut(ns, data, startTime, endTime, result, startSec, startCash) {\\r\\n    if (data.writeFile !== \\\"\\\") {\\r\\n        const outstr = ns.sprintf(\\\"%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\", data.target, data.uid, data.batchId, data.realTimeStart + data.offset, data.realTimeStart + data.finish, data.operationTime, startTime, endTime, endTime - startTime, startTime - (data.realTimeStart + data.offset), endTime - (data.realTimeStart + data.finish), endTime - startTime - data.operationTime, result, startSec.toFixed(2), ns.getServerSecurityLevel(data.target).toFixed(2), ns.nFormat(startCash, \\\"($0.000a)\\\"), ns.nFormat(ns.getServerMoneyAvailable(data.target), \\\"($0.000a)\\\"));\\r\\n        while (!await ns.tryWritePort(ReservedPorts.HACK_WRITE_INFO, [data.writeFile, outstr]))\\r\\n            ;\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi91dGlsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLE1BQU0sQ0FBTixJQUFZLGFBSVg7QUFKRCxXQUFZLGFBQWE7SUFDckIsaUVBQWdCLENBQUE7SUFDaEIsaUVBQVksQ0FBQTtJQUNaLHVFQUFlLENBQUE7QUFDbkIsQ0FBQyxFQUpXLGFBQWEsS0FBYixhQUFhLFFBSXhCO0FBRUQsTUFBTSxDQUFDLE1BQU0sUUFBUSxHQUFHLHFCQUFxQixDQUFDO0FBQzlDLE1BQU0sQ0FBQyxNQUFNLE1BQU0sR0FBRyxtQkFBbUIsQ0FBQztBQUMxQyxNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUcsbUJBQW1CLENBQUM7QUFDMUMsTUFBTSxDQUFDLE1BQU0sTUFBTSxHQUFHLGNBQWMsQ0FBQztBQUVyQyxNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUcsQ0FBQyxPQUFPLEVBQUUsV0FBVyxFQUFFLFdBQVcsRUFBRSxXQUFXLEVBQUUsUUFBUSxFQUFFLFVBQVUsQ0FBQyxDQUFDO0FBRTdGLE1BQU0sVUFBVSxJQUFJLENBQUMsRUFBTSxFQUFFLEdBQVcsRUFBRSxHQUFHLElBQXlCO0lBQ2xFLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEdBQUcsR0FBRyxFQUFFLElBQUksSUFBSSxFQUFFLENBQUMsa0JBQWtCLENBQUMsT0FBTyxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDO0FBQ3hGLENBQUM7QUFFRCxNQUFNLFVBQVUsWUFBWSxDQUFDLEVBQU0sRUFBRSxRQUFnQjtJQUNqRCxJQUFJLEVBQUUsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDNUIsT0FBTztLQUNWO0lBRUQsSUFBSSxLQUFLLEdBQUcsQ0FBQyxDQUFDO0lBQ2QsSUFBSSxFQUFFLENBQUMsVUFBVSxDQUFDLGNBQWMsRUFB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\",\"filename\":\"/lib/util.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":13.25,\"server\":\"pserv-4\",\"moduleSequenceNumber\":94002,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"purchaseTor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"purchaseProgram\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"connect\",\"cost\":2},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.stanek.charge(ns.args[0], ns.args[1]);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hhcmdlLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL3N0YW5lay9jaGFyZ2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUM5QixPQUFPLElBQUksRUFBRTtRQUNULE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7S0FDakQ7QUFDTCxDQUFDIn0=\",\"filename\":\"/lib/stanek/charge.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/stanek/charge.js\",\"url\":\"blob:file:///4ebbdf65-a147-4b6c-890c-cac246828278\",\"moduleSequenceNumber\":99905}],\"dependents\":[],\"ramUsage\":2,\"server\":\"pserv-4\",\"moduleSequenceNumber\":99905,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.charge\",\"cost\":0.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"suppression\":0,\"activeSuppressionThreads\":[],\"suppressionIntervalID\":null,\"suppressionLastUpdateTime\":0}},\"pserv-5\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-5\",\"httpPortOpen\":false,\"ip\":\"1.7.0.6\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":204,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"script\\\":\\\"/lib/exec/hack.js\\\",\\\"host\\\":\\\"pserv-5\\\",\\\"numThreads\\\":120,\\\"target\\\":\\\"phantasy\\\",\\\"hackLevelTiming\\\":13.499605144053142,\\\"hackLevelEffect\\\":204,\\\"batchId\\\":24,\\\"offset\\\":38400,\\\"operationTime\\\":142113,\\\"finish\\\":180513,\\\"realTimeStart\\\":1647907321842,\\\"uid\\\":\\\"024-0H-pserv-5\\\",\\\"writeFile\\\":\\\"\\\"}\"],\"dataMap\":{},\"filename\":\"/lib/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":32.40999999999993,\"pid\":1353,\"ramUsage\":1.7,\"server\":\"pserv-5\",\"threads\":120,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.grow(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLElBQUksR0FBdUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFFbkUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDdkIsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7UUFDeEMsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7S0FDM0MsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyJ9\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///ed14f44a-7c28-4594-bd51-b695d76f1545\",\"moduleSequenceNumber\":94064}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-5\",\"moduleSequenceNumber\":94064,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.weaken(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxJQUFJLEdBQXVCLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO0lBRW5FLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFO1FBQ3pCLGtCQUFrQixFQUFFLElBQUksQ0FBQyxlQUFlO1FBQ3hDLGtCQUFrQixFQUFFLElBQUksQ0FBQyxlQUFlO0tBQzNDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///2a56abc7-8dcf-4a71-9199-a8dc51d1a78d\",\"moduleSequenceNumber\":96340}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-5\",\"moduleSequenceNumber\":96340,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.hack(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLElBQUksR0FBdUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFFbkUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDdkIsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7UUFDeEMsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7S0FDM0MsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyJ9\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///b47bb9ea-4f6d-49a3-9ef2-96b59c63f9db\",\"moduleSequenceNumber\":103938}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-5\",\"moduleSequenceNumber\":103938,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export var ReservedPorts;\\r\\n(function (ReservedPorts) {\\r\\n    ReservedPorts[ReservedPorts[\\\"HACKING_INFO\\\"] = 1] = \\\"HACKING_INFO\\\";\\r\\n    ReservedPorts[ReservedPorts[\\\"HACKNET_INFO\\\"] = 2] = \\\"HACKNET_INFO\\\";\\r\\n    ReservedPorts[ReservedPorts[\\\"HACK_WRITE_INFO\\\"] = 3] = \\\"HACK_WRITE_INFO\\\";\\r\\n})(ReservedPorts || (ReservedPorts = {}));\\r\\nexport const WEAKENJS = \\\"/lib/exec/weaken.js\\\";\\r\\nexport const GROWJS = \\\"/lib/exec/grow.js\\\";\\r\\nexport const HACKJS = \\\"/lib/exec/hack.js\\\";\\r\\nexport const UTILJS = \\\"/lib/util.js\\\";\\r\\nexport const CITIES = [\\\"Aevum\\\", \\\"Chongqing\\\", \\\"Sector-12\\\", \\\"New Tokyo\\\", \\\"Ishima\\\", \\\"Volhaven\\\"];\\r\\nexport function llog(ns, str, ...args) {\\r\\n    ns.print(ns.sprintf(\\\"%8s \\\" + str, new Date().toLocaleTimeString(\\\"it-IT\\\"), ...args));\\r\\n}\\r\\nexport function softenServer(ns, hostname) {\\r\\n    if (ns.hasRootAccess(hostname)) {\\r\\n        return;\\r\\n    }\\r\\n    let ports = 0;\\r\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n        ns.brutessh(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n        ns.ftpcrack(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n        ns.httpworm(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n        ns.relaysmtp(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n        ns.sqlinject(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ports >= ns.getServerNumPortsRequired(hostname)) {\\r\\n        ns.nuke(hostname);\\r\\n    }\\r\\n}\\r\\nexport function serverIsHackable(ns, hostname) {\\r\\n    return ns.hasRootAccess(hostname) && ns.getHackingLevel() >= ns.getServerRequiredHackingLevel(hostname);\\r\\n}\\r\\nexport function canExecuteOnServer(ns, hostname) {\\r\\n    return ns.hasRootAccess(hostname) && ns.getServerMaxRam(hostname) > 0;\\r\\n}\\r\\nexport function mapHosts(ns, hosts = {}, parents = [], current = \\\"home\\\") {\\r\\n    const newParents = parents.concat(current);\\r\\n    hosts[current] = newParents;\\r\\n    const children = ns.scan(current).filter((element) => !parents.includes(element));\\r\\n    for (const child of children) {\\r\\n        mapHosts(ns, hosts, newParents, child);\\r\\n    }\\r\\n    return hosts;\\r\\n}\\r\\nexport function allHosts(ns) {\\r\\n    return Object.keys(mapHosts(ns));\\r\\n}\\r\\nexport function doProgramBuys(ns) {\\r\\n    const player = ns.getPlayer();\\r\\n    if (!player.tor && player.money > 200e3)\\r\\n        ns.purchaseTor();\\r\\n    if (!ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\") && player.money > 500e3)\\r\\n        ns.purchaseProgram(\\\"BruteSSH.exe\\\");\\r\\n    if (!ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\") && player.money > 1500e3)\\r\\n        ns.purchaseProgram(\\\"FTPCrack.exe\\\");\\r\\n    if (!ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\") && player.money > 5e6)\\r\\n        ns.purchaseProgram(\\\"relaySMTP.exe\\\");\\r\\n    if (!ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\") && player.money > 30e6)\\r\\n        ns.purchaseProgram(\\\"HTTPWorm.exe\\\");\\r\\n    if (!ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\") && player.money > 250e6)\\r\\n        ns.purchaseProgram(\\\"SQLInject.exe\\\");\\r\\n}\\r\\nexport function doBuyAndSoftenAll(ns) {\\r\\n    doProgramBuys(ns);\\r\\n    for (const hostname of allHosts(ns)) {\\r\\n        softenServer(ns, hostname);\\r\\n    }\\r\\n}\\r\\nexport function stFormat(ns, ms, showms = false, showfull = false) {\\r\\n    let timeLeft = ms;\\r\\n    const hours = Math.floor(ms / (1000 * 60 * 60));\\r\\n    timeLeft -= hours * (1000 * 60 * 60);\\r\\n    const minutes = Math.floor(timeLeft / (1000 * 60));\\r\\n    timeLeft -= minutes * (1000 * 60);\\r\\n    const seconds = Math.floor(timeLeft / 1000);\\r\\n    timeLeft -= seconds * 1000;\\r\\n    const milliseconds = timeLeft;\\r\\n    if (showms) {\\r\\n        if (hours > 0 || showfull)\\r\\n            return ns.sprintf(\\\"%02d:%02d:%02d.%03d\\\", hours, minutes, seconds, milliseconds);\\r\\n        if (minutes > 0)\\r\\n            return ns.sprintf(\\\"%02d:%02d.%03d\\\", minutes, seconds, milliseconds);\\r\\n        return ns.sprintf(\\\"%02d.%03d\\\", seconds, milliseconds);\\r\\n    }\\r\\n    else {\\r\\n        if (hours > 0 || showfull)\\r\\n            return ns.sprintf(\\\"%02d:%02d:%02d\\\", hours, minutes, seconds);\\r\\n        if (minutes > 0)\\r\\n            return ns.sprintf(\\\"%02d:%02d\\\", minutes, seconds);\\r\\n        return ns.sprintf(\\\"%02d\\\", seconds);\\r\\n    }\\r\\n}\\r\\nexport function stdFormat(ns, offset = 0, showms = false) {\\r\\n    const date = new Date(new Date().getTime() + offset);\\r\\n    if (showms) {\\r\\n        const ms = ns.sprintf(\\\"%03d\\\", date.getUTCMilliseconds());\\r\\n        return date.toLocaleTimeString(\\\"it-IT\\\") + \\\".\\\" + ms;\\r\\n    }\\r\\n    else {\\r\\n        return date.toLocaleTimeString(\\\"it-IT\\\");\\r\\n    }\\r\\n}\\r\\nexport async function doBackdoors(ns) {\\r\\n    //const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"w0r1d_d43m0n\\\", \\\"b-and-a\\\", \\\"ecorp\\\", \\\"fulcrumassets\\\", \\\"fulcrumtech\\\"];\\r\\n    //const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"omnitek\\\", \\\"kuai-gong\\\", \\\"megacorp\\\"];\\r\\n    const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"w0r1d_d43m0n\\\"];\\r\\n    const hosts = mapHosts(ns);\\r\\n    for (const [hostName, trail] of Object.entries(hosts)) {\\r\\n        const server = ns.getServer(hostName);\\r\\n        if (!targetHosts.includes(hostName) ||\\r\\n            server.backdoorInstalled ||\\r\\n            server.requiredHackingSkill > ns.getHackingLevel() ||\\r\\n            !server.hasAdminRights)\\r\\n            continue;\\r\\n        ns.print(hostName);\\r\\n        for (const hostHopName of trail) {\\r\\n            ns.connect(hostHopName);\\r\\n        }\\r\\n        await ns.installBackdoor();\\r\\n        ns.connect(\\\"home\\\");\\r\\n    }\\r\\n}\\r\\nexport function cleanLogs(ns) {\\r\\n    ns.disableLog(\\\"disableLog\\\");\\r\\n    ns.disableLog(\\\"ALL\\\");\\r\\n    // ns.disableLog(\\\"sleep\\\")\\r\\n    // ns.disableLog(\\\"exec\\\")\\r\\n    // ns.disableLog(\\\"getServerMaxRam\\\")\\r\\n    // ns.disableLog(\\\"getServerSecurityLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerMinSecurityLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerMaxMoney\\\")\\r\\n    // ns.disableLog(\\\"getHackingLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerRequiredHackingLevel\\\")\\r\\n    // ns.disableLog(\\\"scan\\\")\\r\\n    // ns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n    // ns.disableLog(\\\"getServerUsedRam\\\")\\r\\n}\\r\\nexport const ALL_FACTIONS = [\\r\\n    \\\"Illuminati\\\",\\r\\n    \\\"Daedalus\\\",\\r\\n    \\\"The Covenant\\\",\\r\\n    \\\"ECorp\\\",\\r\\n    \\\"MegaCorp\\\",\\r\\n    \\\"Bachman & Associates\\\",\\r\\n    \\\"Blade Industries\\\",\\r\\n    \\\"NWO\\\",\\r\\n    \\\"Clarke Incorporated\\\",\\r\\n    \\\"OmniTek Incorporated\\\",\\r\\n    \\\"Four Sigma\\\",\\r\\n    \\\"KuaiGong International\\\",\\r\\n    \\\"Fulcrum Secret Technologies\\\",\\r\\n    \\\"BitRunners\\\",\\r\\n    \\\"The Black Hand\\\",\\r\\n    \\\"NiteSec\\\",\\r\\n    \\\"Aevum\\\",\\r\\n    \\\"Chongqing\\\",\\r\\n    \\\"Ishima\\\",\\r\\n    \\\"New Tokyo\\\",\\r\\n    \\\"Sector-12\\\",\\r\\n    \\\"Volhaven\\\",\\r\\n    \\\"Speakers for the Dead\\\",\\r\\n    \\\"The Dark Army\\\",\\r\\n    \\\"The Syndicate\\\",\\r\\n    \\\"Silhouette\\\",\\r\\n    \\\"Tetrads\\\",\\r\\n    \\\"Slum Snakes\\\",\\r\\n    \\\"Netburners\\\",\\r\\n    \\\"Tian Di Hui\\\",\\r\\n    \\\"CyberSec\\\",\\r\\n    \\\"Bladeburners\\\",\\r\\n    \\\"Church of the Machine God\\\",\\r\\n];\\r\\nexport async function writeOut(ns, data, startTime, endTime, result, startSec, startCash) {\\r\\n    if (data.writeFile !== \\\"\\\") {\\r\\n        const outstr = ns.sprintf(\\\"%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\", data.target, data.uid, data.batchId, data.realTimeStart + data.offset, data.realTimeStart + data.finish, data.operationTime, startTime, endTime, endTime - startTime, startTime - (data.realTimeStart + data.offset), endTime - (data.realTimeStart + data.finish), endTime - startTime - data.operationTime, result, startSec.toFixed(2), ns.getServerSecurityLevel(data.target).toFixed(2), ns.nFormat(startCash, \\\"($0.000a)\\\"), ns.nFormat(ns.getServerMoneyAvailable(data.target), \\\"($0.000a)\\\"));\\r\\n        while (!await ns.tryWritePort(ReservedPorts.HACK_WRITE_INFO, [data.writeFile, outstr]))\\r\\n            ;\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi91dGlsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLE1BQU0sQ0FBTixJQUFZLGFBSVg7QUFKRCxXQUFZLGFBQWE7SUFDckIsaUVBQWdCLENBQUE7SUFDaEIsaUVBQVksQ0FBQTtJQUNaLHVFQUFlLENBQUE7QUFDbkIsQ0FBQyxFQUpXLGFBQWEsS0FBYixhQUFhLFFBSXhCO0FBRUQsTUFBTSxDQUFDLE1BQU0sUUFBUSxHQUFHLHFCQUFxQixDQUFDO0FBQzlDLE1BQU0sQ0FBQyxNQUFNLE1BQU0sR0FBRyxtQkFBbUIsQ0FBQztBQUMxQyxNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUcsbUJBQW1CLENBQUM7QUFDMUMsTUFBTSxDQUFDLE1BQU0sTUFBTSxHQUFHLGNBQWMsQ0FBQztBQUVyQyxNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUcsQ0FBQyxPQUFPLEVBQUUsV0FBVyxFQUFFLFdBQVcsRUFBRSxXQUFXLEVBQUUsUUFBUSxFQUFFLFVBQVUsQ0FBQyxDQUFDO0FBRTdGLE1BQU0sVUFBVSxJQUFJLENBQUMsRUFBTSxFQUFFLEdBQVcsRUFBRSxHQUFHLElBQXlCO0lBQ2xFLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEdBQUcsR0FBRyxFQUFFLElBQUksSUFBSSxFQUFFLENBQUMsa0JBQWtCLENBQUMsT0FBTyxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDO0FBQ3hGLENBQUM7QUFFRCxNQUFNLFVBQVUsWUFBWSxDQUFDLEVBQU0sRUFBRSxRQUFnQjtJQUNqRCxJQUFJLEVBQUUsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDNUIsT0FBTztLQUNWO0lBRUQsSUFBSSxLQUFLLEdBQUcsQ0FBQyxDQUFDO0lBQ2QsSUFBSSxFQUFFLENBQUMsVUFBVSxDQUFDLGNBQWMsRUFB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\",\"filename\":\"/lib/util.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":13.25,\"server\":\"pserv-5\",\"moduleSequenceNumber\":94010,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"purchaseTor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"purchaseProgram\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"connect\",\"cost\":2},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.stanek.charge(ns.args[0], ns.args[1]);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hhcmdlLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL3N0YW5lay9jaGFyZ2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUM5QixPQUFPLElBQUksRUFBRTtRQUNULE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7S0FDakQ7QUFDTCxDQUFDIn0=\",\"filename\":\"/lib/stanek/charge.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/stanek/charge.js\",\"url\":\"blob:file:///e390c6ac-f509-4cbb-b150-62eacf1b6b2d\",\"moduleSequenceNumber\":99906}],\"dependents\":[],\"ramUsage\":2,\"server\":\"pserv-5\",\"moduleSequenceNumber\":99906,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.charge\",\"cost\":0.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"suppression\":0,\"activeSuppressionThreads\":[],\"suppressionIntervalID\":null,\"suppressionLastUpdateTime\":0}},\"pserv-6\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-6\",\"httpPortOpen\":false,\"ip\":\"74.7.2.8\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":252,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"script\\\":\\\"/lib/exec/grow.js\\\",\\\"host\\\":\\\"pserv-6\\\",\\\"numThreads\\\":144,\\\"target\\\":\\\"phantasy\\\",\\\"hackLevelTiming\\\":153.19873646097005,\\\"hackLevelEffect\\\":204,\\\"batchId\\\":24,\\\"offset\\\":39200,\\\"operationTime\\\":142114,\\\"finish\\\":181314,\\\"realTimeStart\\\":1647907321842,\\\"uid\\\":\\\"024-2G-pserv-6\\\",\\\"writeFile\\\":\\\"\\\"}\"],\"dataMap\":{},\"filename\":\"/lib/exec/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":31.609999999999925,\"pid\":1355,\"ramUsage\":1.75,\"server\":\"pserv-6\",\"threads\":144,\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///2ad6d897-030d-456f-b9bf-98952e5da129\",\"moduleSequenceNumber\":94063}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.grow(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLElBQUksR0FBdUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFFbkUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDdkIsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7UUFDeEMsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7S0FDM0MsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyJ9\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///2ad6d897-030d-456f-b9bf-98952e5da129\",\"moduleSequenceNumber\":94063}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-6\",\"moduleSequenceNumber\":94063,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.weaken(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxJQUFJLEdBQXVCLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO0lBRW5FLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFO1FBQ3pCLGtCQUFrQixFQUFFLElBQUksQ0FBQyxlQUFlO1FBQ3hDLGtCQUFrQixFQUFFLElBQUksQ0FBQyxlQUFlO0tBQzNDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///0a1aa8b1-84a8-4300-9063-12107101a530\",\"moduleSequenceNumber\":96341}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-6\",\"moduleSequenceNumber\":96341,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.hack(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLElBQUksR0FBdUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFFbkUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDdkIsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7UUFDeEMsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7S0FDM0MsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyJ9\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///59de5189-8e58-4a55-83e5-26044f3e8f48\",\"moduleSequenceNumber\":96337}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-6\",\"moduleSequenceNumber\":96337,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export var ReservedPorts;\\r\\n(function (ReservedPorts) {\\r\\n    ReservedPorts[ReservedPorts[\\\"HACKING_INFO\\\"] = 1] = \\\"HACKING_INFO\\\";\\r\\n    ReservedPorts[ReservedPorts[\\\"HACKNET_INFO\\\"] = 2] = \\\"HACKNET_INFO\\\";\\r\\n    ReservedPorts[ReservedPorts[\\\"HACK_WRITE_INFO\\\"] = 3] = \\\"HACK_WRITE_INFO\\\";\\r\\n})(ReservedPorts || (ReservedPorts = {}));\\r\\nexport const WEAKENJS = \\\"/lib/exec/weaken.js\\\";\\r\\nexport const GROWJS = \\\"/lib/exec/grow.js\\\";\\r\\nexport const HACKJS = \\\"/lib/exec/hack.js\\\";\\r\\nexport const UTILJS = \\\"/lib/util.js\\\";\\r\\nexport const CITIES = [\\\"Aevum\\\", \\\"Chongqing\\\", \\\"Sector-12\\\", \\\"New Tokyo\\\", \\\"Ishima\\\", \\\"Volhaven\\\"];\\r\\nexport function llog(ns, str, ...args) {\\r\\n    ns.print(ns.sprintf(\\\"%8s \\\" + str, new Date().toLocaleTimeString(\\\"it-IT\\\"), ...args));\\r\\n}\\r\\nexport function softenServer(ns, hostname) {\\r\\n    if (ns.hasRootAccess(hostname)) {\\r\\n        return;\\r\\n    }\\r\\n    let ports = 0;\\r\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n        ns.brutessh(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n        ns.ftpcrack(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n        ns.httpworm(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n        ns.relaysmtp(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n        ns.sqlinject(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ports >= ns.getServerNumPortsRequired(hostname)) {\\r\\n        ns.nuke(hostname);\\r\\n    }\\r\\n}\\r\\nexport function serverIsHackable(ns, hostname) {\\r\\n    return ns.hasRootAccess(hostname) && ns.getHackingLevel() >= ns.getServerRequiredHackingLevel(hostname);\\r\\n}\\r\\nexport function canExecuteOnServer(ns, hostname) {\\r\\n    return ns.hasRootAccess(hostname) && ns.getServerMaxRam(hostname) > 0;\\r\\n}\\r\\nexport function mapHosts(ns, hosts = {}, parents = [], current = \\\"home\\\") {\\r\\n    const newParents = parents.concat(current);\\r\\n    hosts[current] = newParents;\\r\\n    const children = ns.scan(current).filter((element) => !parents.includes(element));\\r\\n    for (const child of children) {\\r\\n        mapHosts(ns, hosts, newParents, child);\\r\\n    }\\r\\n    return hosts;\\r\\n}\\r\\nexport function allHosts(ns) {\\r\\n    return Object.keys(mapHosts(ns));\\r\\n}\\r\\nexport function doProgramBuys(ns) {\\r\\n    const player = ns.getPlayer();\\r\\n    if (!player.tor && player.money > 200e3)\\r\\n        ns.purchaseTor();\\r\\n    if (!ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\") && player.money > 500e3)\\r\\n        ns.purchaseProgram(\\\"BruteSSH.exe\\\");\\r\\n    if (!ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\") && player.money > 1500e3)\\r\\n        ns.purchaseProgram(\\\"FTPCrack.exe\\\");\\r\\n    if (!ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\") && player.money > 5e6)\\r\\n        ns.purchaseProgram(\\\"relaySMTP.exe\\\");\\r\\n    if (!ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\") && player.money > 30e6)\\r\\n        ns.purchaseProgram(\\\"HTTPWorm.exe\\\");\\r\\n    if (!ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\") && player.money > 250e6)\\r\\n        ns.purchaseProgram(\\\"SQLInject.exe\\\");\\r\\n}\\r\\nexport function doBuyAndSoftenAll(ns) {\\r\\n    doProgramBuys(ns);\\r\\n    for (const hostname of allHosts(ns)) {\\r\\n        softenServer(ns, hostname);\\r\\n    }\\r\\n}\\r\\nexport function stFormat(ns, ms, showms = false, showfull = false) {\\r\\n    let timeLeft = ms;\\r\\n    const hours = Math.floor(ms / (1000 * 60 * 60));\\r\\n    timeLeft -= hours * (1000 * 60 * 60);\\r\\n    const minutes = Math.floor(timeLeft / (1000 * 60));\\r\\n    timeLeft -= minutes * (1000 * 60);\\r\\n    const seconds = Math.floor(timeLeft / 1000);\\r\\n    timeLeft -= seconds * 1000;\\r\\n    const milliseconds = timeLeft;\\r\\n    if (showms) {\\r\\n        if (hours > 0 || showfull)\\r\\n            return ns.sprintf(\\\"%02d:%02d:%02d.%03d\\\", hours, minutes, seconds, milliseconds);\\r\\n        if (minutes > 0)\\r\\n            return ns.sprintf(\\\"%02d:%02d.%03d\\\", minutes, seconds, milliseconds);\\r\\n        return ns.sprintf(\\\"%02d.%03d\\\", seconds, milliseconds);\\r\\n    }\\r\\n    else {\\r\\n        if (hours > 0 || showfull)\\r\\n            return ns.sprintf(\\\"%02d:%02d:%02d\\\", hours, minutes, seconds);\\r\\n        if (minutes > 0)\\r\\n            return ns.sprintf(\\\"%02d:%02d\\\", minutes, seconds);\\r\\n        return ns.sprintf(\\\"%02d\\\", seconds);\\r\\n    }\\r\\n}\\r\\nexport function stdFormat(ns, offset = 0, showms = false) {\\r\\n    const date = new Date(new Date().getTime() + offset);\\r\\n    if (showms) {\\r\\n        const ms = ns.sprintf(\\\"%03d\\\", date.getUTCMilliseconds());\\r\\n        return date.toLocaleTimeString(\\\"it-IT\\\") + \\\".\\\" + ms;\\r\\n    }\\r\\n    else {\\r\\n        return date.toLocaleTimeString(\\\"it-IT\\\");\\r\\n    }\\r\\n}\\r\\nexport async function doBackdoors(ns) {\\r\\n    //const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"w0r1d_d43m0n\\\", \\\"b-and-a\\\", \\\"ecorp\\\", \\\"fulcrumassets\\\", \\\"fulcrumtech\\\"];\\r\\n    //const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"omnitek\\\", \\\"kuai-gong\\\", \\\"megacorp\\\"];\\r\\n    const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"w0r1d_d43m0n\\\"];\\r\\n    const hosts = mapHosts(ns);\\r\\n    for (const [hostName, trail] of Object.entries(hosts)) {\\r\\n        const server = ns.getServer(hostName);\\r\\n        if (!targetHosts.includes(hostName) ||\\r\\n            server.backdoorInstalled ||\\r\\n            server.requiredHackingSkill > ns.getHackingLevel() ||\\r\\n            !server.hasAdminRights)\\r\\n            continue;\\r\\n        ns.print(hostName);\\r\\n        for (const hostHopName of trail) {\\r\\n            ns.connect(hostHopName);\\r\\n        }\\r\\n        await ns.installBackdoor();\\r\\n        ns.connect(\\\"home\\\");\\r\\n    }\\r\\n}\\r\\nexport function cleanLogs(ns) {\\r\\n    ns.disableLog(\\\"disableLog\\\");\\r\\n    ns.disableLog(\\\"ALL\\\");\\r\\n    // ns.disableLog(\\\"sleep\\\")\\r\\n    // ns.disableLog(\\\"exec\\\")\\r\\n    // ns.disableLog(\\\"getServerMaxRam\\\")\\r\\n    // ns.disableLog(\\\"getServerSecurityLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerMinSecurityLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerMaxMoney\\\")\\r\\n    // ns.disableLog(\\\"getHackingLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerRequiredHackingLevel\\\")\\r\\n    // ns.disableLog(\\\"scan\\\")\\r\\n    // ns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n    // ns.disableLog(\\\"getServerUsedRam\\\")\\r\\n}\\r\\nexport const ALL_FACTIONS = [\\r\\n    \\\"Illuminati\\\",\\r\\n    \\\"Daedalus\\\",\\r\\n    \\\"The Covenant\\\",\\r\\n    \\\"ECorp\\\",\\r\\n    \\\"MegaCorp\\\",\\r\\n    \\\"Bachman & Associates\\\",\\r\\n    \\\"Blade Industries\\\",\\r\\n    \\\"NWO\\\",\\r\\n    \\\"Clarke Incorporated\\\",\\r\\n    \\\"OmniTek Incorporated\\\",\\r\\n    \\\"Four Sigma\\\",\\r\\n    \\\"KuaiGong International\\\",\\r\\n    \\\"Fulcrum Secret Technologies\\\",\\r\\n    \\\"BitRunners\\\",\\r\\n    \\\"The Black Hand\\\",\\r\\n    \\\"NiteSec\\\",\\r\\n    \\\"Aevum\\\",\\r\\n    \\\"Chongqing\\\",\\r\\n    \\\"Ishima\\\",\\r\\n    \\\"New Tokyo\\\",\\r\\n    \\\"Sector-12\\\",\\r\\n    \\\"Volhaven\\\",\\r\\n    \\\"Speakers for the Dead\\\",\\r\\n    \\\"The Dark Army\\\",\\r\\n    \\\"The Syndicate\\\",\\r\\n    \\\"Silhouette\\\",\\r\\n    \\\"Tetrads\\\",\\r\\n    \\\"Slum Snakes\\\",\\r\\n    \\\"Netburners\\\",\\r\\n    \\\"Tian Di Hui\\\",\\r\\n    \\\"CyberSec\\\",\\r\\n    \\\"Bladeburners\\\",\\r\\n    \\\"Church of the Machine God\\\",\\r\\n];\\r\\nexport async function writeOut(ns, data, startTime, endTime, result, startSec, startCash) {\\r\\n    if (data.writeFile !== \\\"\\\") {\\r\\n        const outstr = ns.sprintf(\\\"%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\", data.target, data.uid, data.batchId, data.realTimeStart + data.offset, data.realTimeStart + data.finish, data.operationTime, startTime, endTime, endTime - startTime, startTime - (data.realTimeStart + data.offset), endTime - (data.realTimeStart + data.finish), endTime - startTime - data.operationTime, result, startSec.toFixed(2), ns.getServerSecurityLevel(data.target).toFixed(2), ns.nFormat(startCash, \\\"($0.000a)\\\"), ns.nFormat(ns.getServerMoneyAvailable(data.target), \\\"($0.000a)\\\"));\\r\\n        while (!await ns.tryWritePort(ReservedPorts.HACK_WRITE_INFO, [data.writeFile, outstr]))\\r\\n            ;\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi91dGlsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLE1BQU0sQ0FBTixJQUFZLGFBSVg7QUFKRCxXQUFZLGFBQWE7SUFDckIsaUVBQWdCLENBQUE7SUFDaEIsaUVBQVksQ0FBQTtJQUNaLHVFQUFlLENBQUE7QUFDbkIsQ0FBQyxFQUpXLGFBQWEsS0FBYixhQUFhLFFBSXhCO0FBRUQsTUFBTSxDQUFDLE1BQU0sUUFBUSxHQUFHLHFCQUFxQixDQUFDO0FBQzlDLE1BQU0sQ0FBQyxNQUFNLE1BQU0sR0FBRyxtQkFBbUIsQ0FBQztBQUMxQyxNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUcsbUJBQW1CLENBQUM7QUFDMUMsTUFBTSxDQUFDLE1BQU0sTUFBTSxHQUFHLGNBQWMsQ0FBQztBQUVyQyxNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUcsQ0FBQyxPQUFPLEVBQUUsV0FBVyxFQUFFLFdBQVcsRUFBRSxXQUFXLEVBQUUsUUFBUSxFQUFFLFVBQVUsQ0FBQyxDQUFDO0FBRTdGLE1BQU0sVUFBVSxJQUFJLENBQUMsRUFBTSxFQUFFLEdBQVcsRUFBRSxHQUFHLElBQXlCO0lBQ2xFLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEdBQUcsR0FBRyxFQUFFLElBQUksSUFBSSxFQUFFLENBQUMsa0JBQWtCLENBQUMsT0FBTyxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDO0FBQ3hGLENBQUM7QUFFRCxNQUFNLFVBQVUsWUFBWSxDQUFDLEVBQU0sRUFBRSxRQUFnQjtJQUNqRCxJQUFJLEVBQUUsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDNUIsT0FBTztLQUNWO0lBRUQsSUFBSSxLQUFLLEdBQUcsQ0FBQyxDQUFDO0lBQ2QsSUFBSSxFQUFFLENBQUMsVUFBVSxDQUFDLGNBQWMsRUFB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\",\"filename\":\"/lib/util.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":13.25,\"server\":\"pserv-6\",\"moduleSequenceNumber\":94018,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"purchaseTor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"purchaseProgram\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"connect\",\"cost\":2},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.stanek.charge(ns.args[0], ns.args[1]);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hhcmdlLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL3N0YW5lay9jaGFyZ2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUM5QixPQUFPLElBQUksRUFBRTtRQUNULE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7S0FDakQ7QUFDTCxDQUFDIn0=\",\"filename\":\"/lib/stanek/charge.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/stanek/charge.js\",\"url\":\"blob:file:///1dd788d0-e0b1-4663-b3ef-030347246edc\",\"moduleSequenceNumber\":99908}],\"dependents\":[],\"ramUsage\":2,\"server\":\"pserv-6\",\"moduleSequenceNumber\":99908,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.charge\",\"cost\":0.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"suppression\":0,\"activeSuppressionThreads\":[],\"suppressionIntervalID\":null,\"suppressionLastUpdateTime\":0}},\"pserv-7\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-7\",\"httpPortOpen\":false,\"ip\":\"34.9.2.4\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":204,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"script\\\":\\\"/lib/exec/hack.js\\\",\\\"host\\\":\\\"pserv-7\\\",\\\"numThreads\\\":120,\\\"target\\\":\\\"phantasy\\\",\\\"hackLevelTiming\\\":13.499605144053142,\\\"hackLevelEffect\\\":204,\\\"batchId\\\":25,\\\"offset\\\":40000,\\\"operationTime\\\":142113,\\\"finish\\\":182113,\\\"realTimeStart\\\":1647907321842,\\\"uid\\\":\\\"025-0H-pserv-7\\\",\\\"writeFile\\\":\\\"\\\"}\"],\"dataMap\":{},\"filename\":\"/lib/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":30.809999999999928,\"pid\":1358,\"ramUsage\":1.7,\"server\":\"pserv-7\",\"threads\":120,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.grow(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLElBQUksR0FBdUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFFbkUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDdkIsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7UUFDeEMsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7S0FDM0MsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyJ9\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///e7d86048-77db-41f2-87df-66660baf747c\",\"moduleSequenceNumber\":94062}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-7\",\"moduleSequenceNumber\":94062,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.weaken(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxJQUFJLEdBQXVCLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO0lBRW5FLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFO1FBQ3pCLGtCQUFrQixFQUFFLElBQUksQ0FBQyxlQUFlO1FBQ3hDLGtCQUFrQixFQUFFLElBQUksQ0FBQyxlQUFlO0tBQzNDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///16bcc3dd-c4dd-495d-87ab-b41d24e7c168\",\"moduleSequenceNumber\":96343}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-7\",\"moduleSequenceNumber\":96343,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.hack(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLElBQUksR0FBdUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFFbkUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDdkIsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7UUFDeEMsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7S0FDM0MsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyJ9\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///69a2a674-f4b7-46cb-8de9-7f4ba28178b8\",\"moduleSequenceNumber\":103939}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-7\",\"moduleSequenceNumber\":103939,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export var ReservedPorts;\\r\\n(function (ReservedPorts) {\\r\\n    ReservedPorts[ReservedPorts[\\\"HACKING_INFO\\\"] = 1] = \\\"HACKING_INFO\\\";\\r\\n    ReservedPorts[ReservedPorts[\\\"HACKNET_INFO\\\"] = 2] = \\\"HACKNET_INFO\\\";\\r\\n    ReservedPorts[ReservedPorts[\\\"HACK_WRITE_INFO\\\"] = 3] = \\\"HACK_WRITE_INFO\\\";\\r\\n})(ReservedPorts || (ReservedPorts = {}));\\r\\nexport const WEAKENJS = \\\"/lib/exec/weaken.js\\\";\\r\\nexport const GROWJS = \\\"/lib/exec/grow.js\\\";\\r\\nexport const HACKJS = \\\"/lib/exec/hack.js\\\";\\r\\nexport const UTILJS = \\\"/lib/util.js\\\";\\r\\nexport const CITIES = [\\\"Aevum\\\", \\\"Chongqing\\\", \\\"Sector-12\\\", \\\"New Tokyo\\\", \\\"Ishima\\\", \\\"Volhaven\\\"];\\r\\nexport function llog(ns, str, ...args) {\\r\\n    ns.print(ns.sprintf(\\\"%8s \\\" + str, new Date().toLocaleTimeString(\\\"it-IT\\\"), ...args));\\r\\n}\\r\\nexport function softenServer(ns, hostname) {\\r\\n    if (ns.hasRootAccess(hostname)) {\\r\\n        return;\\r\\n    }\\r\\n    let ports = 0;\\r\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n        ns.brutessh(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n        ns.ftpcrack(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n        ns.httpworm(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n        ns.relaysmtp(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n        ns.sqlinject(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ports >= ns.getServerNumPortsRequired(hostname)) {\\r\\n        ns.nuke(hostname);\\r\\n    }\\r\\n}\\r\\nexport function serverIsHackable(ns, hostname) {\\r\\n    return ns.hasRootAccess(hostname) && ns.getHackingLevel() >= ns.getServerRequiredHackingLevel(hostname);\\r\\n}\\r\\nexport function canExecuteOnServer(ns, hostname) {\\r\\n    return ns.hasRootAccess(hostname) && ns.getServerMaxRam(hostname) > 0;\\r\\n}\\r\\nexport function mapHosts(ns, hosts = {}, parents = [], current = \\\"home\\\") {\\r\\n    const newParents = parents.concat(current);\\r\\n    hosts[current] = newParents;\\r\\n    const children = ns.scan(current).filter((element) => !parents.includes(element));\\r\\n    for (const child of children) {\\r\\n        mapHosts(ns, hosts, newParents, child);\\r\\n    }\\r\\n    return hosts;\\r\\n}\\r\\nexport function allHosts(ns) {\\r\\n    return Object.keys(mapHosts(ns));\\r\\n}\\r\\nexport function doProgramBuys(ns) {\\r\\n    const player = ns.getPlayer();\\r\\n    if (!player.tor && player.money > 200e3)\\r\\n        ns.purchaseTor();\\r\\n    if (!ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\") && player.money > 500e3)\\r\\n        ns.purchaseProgram(\\\"BruteSSH.exe\\\");\\r\\n    if (!ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\") && player.money > 1500e3)\\r\\n        ns.purchaseProgram(\\\"FTPCrack.exe\\\");\\r\\n    if (!ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\") && player.money > 5e6)\\r\\n        ns.purchaseProgram(\\\"relaySMTP.exe\\\");\\r\\n    if (!ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\") && player.money > 30e6)\\r\\n        ns.purchaseProgram(\\\"HTTPWorm.exe\\\");\\r\\n    if (!ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\") && player.money > 250e6)\\r\\n        ns.purchaseProgram(\\\"SQLInject.exe\\\");\\r\\n}\\r\\nexport function doBuyAndSoftenAll(ns) {\\r\\n    doProgramBuys(ns);\\r\\n    for (const hostname of allHosts(ns)) {\\r\\n        softenServer(ns, hostname);\\r\\n    }\\r\\n}\\r\\nexport function stFormat(ns, ms, showms = false, showfull = false) {\\r\\n    let timeLeft = ms;\\r\\n    const hours = Math.floor(ms / (1000 * 60 * 60));\\r\\n    timeLeft -= hours * (1000 * 60 * 60);\\r\\n    const minutes = Math.floor(timeLeft / (1000 * 60));\\r\\n    timeLeft -= minutes * (1000 * 60);\\r\\n    const seconds = Math.floor(timeLeft / 1000);\\r\\n    timeLeft -= seconds * 1000;\\r\\n    const milliseconds = timeLeft;\\r\\n    if (showms) {\\r\\n        if (hours > 0 || showfull)\\r\\n            return ns.sprintf(\\\"%02d:%02d:%02d.%03d\\\", hours, minutes, seconds, milliseconds);\\r\\n        if (minutes > 0)\\r\\n            return ns.sprintf(\\\"%02d:%02d.%03d\\\", minutes, seconds, milliseconds);\\r\\n        return ns.sprintf(\\\"%02d.%03d\\\", seconds, milliseconds);\\r\\n    }\\r\\n    else {\\r\\n        if (hours > 0 || showfull)\\r\\n            return ns.sprintf(\\\"%02d:%02d:%02d\\\", hours, minutes, seconds);\\r\\n        if (minutes > 0)\\r\\n            return ns.sprintf(\\\"%02d:%02d\\\", minutes, seconds);\\r\\n        return ns.sprintf(\\\"%02d\\\", seconds);\\r\\n    }\\r\\n}\\r\\nexport function stdFormat(ns, offset = 0, showms = false) {\\r\\n    const date = new Date(new Date().getTime() + offset);\\r\\n    if (showms) {\\r\\n        const ms = ns.sprintf(\\\"%03d\\\", date.getUTCMilliseconds());\\r\\n        return date.toLocaleTimeString(\\\"it-IT\\\") + \\\".\\\" + ms;\\r\\n    }\\r\\n    else {\\r\\n        return date.toLocaleTimeString(\\\"it-IT\\\");\\r\\n    }\\r\\n}\\r\\nexport async function doBackdoors(ns) {\\r\\n    //const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"w0r1d_d43m0n\\\", \\\"b-and-a\\\", \\\"ecorp\\\", \\\"fulcrumassets\\\", \\\"fulcrumtech\\\"];\\r\\n    //const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"omnitek\\\", \\\"kuai-gong\\\", \\\"megacorp\\\"];\\r\\n    const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"w0r1d_d43m0n\\\"];\\r\\n    const hosts = mapHosts(ns);\\r\\n    for (const [hostName, trail] of Object.entries(hosts)) {\\r\\n        const server = ns.getServer(hostName);\\r\\n        if (!targetHosts.includes(hostName) ||\\r\\n            server.backdoorInstalled ||\\r\\n            server.requiredHackingSkill > ns.getHackingLevel() ||\\r\\n            !server.hasAdminRights)\\r\\n            continue;\\r\\n        ns.print(hostName);\\r\\n        for (const hostHopName of trail) {\\r\\n            ns.connect(hostHopName);\\r\\n        }\\r\\n        await ns.installBackdoor();\\r\\n        ns.connect(\\\"home\\\");\\r\\n    }\\r\\n}\\r\\nexport function cleanLogs(ns) {\\r\\n    ns.disableLog(\\\"disableLog\\\");\\r\\n    ns.disableLog(\\\"ALL\\\");\\r\\n    // ns.disableLog(\\\"sleep\\\")\\r\\n    // ns.disableLog(\\\"exec\\\")\\r\\n    // ns.disableLog(\\\"getServerMaxRam\\\")\\r\\n    // ns.disableLog(\\\"getServerSecurityLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerMinSecurityLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerMaxMoney\\\")\\r\\n    // ns.disableLog(\\\"getHackingLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerRequiredHackingLevel\\\")\\r\\n    // ns.disableLog(\\\"scan\\\")\\r\\n    // ns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n    // ns.disableLog(\\\"getServerUsedRam\\\")\\r\\n}\\r\\nexport const ALL_FACTIONS = [\\r\\n    \\\"Illuminati\\\",\\r\\n    \\\"Daedalus\\\",\\r\\n    \\\"The Covenant\\\",\\r\\n    \\\"ECorp\\\",\\r\\n    \\\"MegaCorp\\\",\\r\\n    \\\"Bachman & Associates\\\",\\r\\n    \\\"Blade Industries\\\",\\r\\n    \\\"NWO\\\",\\r\\n    \\\"Clarke Incorporated\\\",\\r\\n    \\\"OmniTek Incorporated\\\",\\r\\n    \\\"Four Sigma\\\",\\r\\n    \\\"KuaiGong International\\\",\\r\\n    \\\"Fulcrum Secret Technologies\\\",\\r\\n    \\\"BitRunners\\\",\\r\\n    \\\"The Black Hand\\\",\\r\\n    \\\"NiteSec\\\",\\r\\n    \\\"Aevum\\\",\\r\\n    \\\"Chongqing\\\",\\r\\n    \\\"Ishima\\\",\\r\\n    \\\"New Tokyo\\\",\\r\\n    \\\"Sector-12\\\",\\r\\n    \\\"Volhaven\\\",\\r\\n    \\\"Speakers for the Dead\\\",\\r\\n    \\\"The Dark Army\\\",\\r\\n    \\\"The Syndicate\\\",\\r\\n    \\\"Silhouette\\\",\\r\\n    \\\"Tetrads\\\",\\r\\n    \\\"Slum Snakes\\\",\\r\\n    \\\"Netburners\\\",\\r\\n    \\\"Tian Di Hui\\\",\\r\\n    \\\"CyberSec\\\",\\r\\n    \\\"Bladeburners\\\",\\r\\n    \\\"Church of the Machine God\\\",\\r\\n];\\r\\nexport async function writeOut(ns, data, startTime, endTime, result, startSec, startCash) {\\r\\n    if (data.writeFile !== \\\"\\\") {\\r\\n        const outstr = ns.sprintf(\\\"%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\", data.target, data.uid, data.batchId, data.realTimeStart + data.offset, data.realTimeStart + data.finish, data.operationTime, startTime, endTime, endTime - startTime, startTime - (data.realTimeStart + data.offset), endTime - (data.realTimeStart + data.finish), endTime - startTime - data.operationTime, result, startSec.toFixed(2), ns.getServerSecurityLevel(data.target).toFixed(2), ns.nFormat(startCash, \\\"($0.000a)\\\"), ns.nFormat(ns.getServerMoneyAvailable(data.target), \\\"($0.000a)\\\"));\\r\\n        while (!await ns.tryWritePort(ReservedPorts.HACK_WRITE_INFO, [data.writeFile, outstr]))\\r\\n            ;\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi91dGlsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLE1BQU0sQ0FBTixJQUFZLGFBSVg7QUFKRCxXQUFZLGFBQWE7SUFDckIsaUVBQWdCLENBQUE7SUFDaEIsaUVBQVksQ0FBQTtJQUNaLHVFQUFlLENBQUE7QUFDbkIsQ0FBQyxFQUpXLGFBQWEsS0FBYixhQUFhLFFBSXhCO0FBRUQsTUFBTSxDQUFDLE1BQU0sUUFBUSxHQUFHLHFCQUFxQixDQUFDO0FBQzlDLE1BQU0sQ0FBQyxNQUFNLE1BQU0sR0FBRyxtQkFBbUIsQ0FBQztBQUMxQyxNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUcsbUJBQW1CLENBQUM7QUFDMUMsTUFBTSxDQUFDLE1BQU0sTUFBTSxHQUFHLGNBQWMsQ0FBQztBQUVyQyxNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUcsQ0FBQyxPQUFPLEVBQUUsV0FBVyxFQUFFLFdBQVcsRUFBRSxXQUFXLEVBQUUsUUFBUSxFQUFFLFVBQVUsQ0FBQyxDQUFDO0FBRTdGLE1BQU0sVUFBVSxJQUFJLENBQUMsRUFBTSxFQUFFLEdBQVcsRUFBRSxHQUFHLElBQXlCO0lBQ2xFLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEdBQUcsR0FBRyxFQUFFLElBQUksSUFBSSxFQUFFLENBQUMsa0JBQWtCLENBQUMsT0FBTyxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDO0FBQ3hGLENBQUM7QUFFRCxNQUFNLFVBQVUsWUFBWSxDQUFDLEVBQU0sRUFBRSxRQUFnQjtJQUNqRCxJQUFJLEVBQUUsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDNUIsT0FBTztLQUNWO0lBRUQsSUFBSSxLQUFLLEdBQUcsQ0FBQyxDQUFDO0lBQ2QsSUFBSSxFQUFFLENBQUMsVUFBVSxDQUFDLGNBQWMsRUFBRSxNQUFNLENBQUMsRUFBRTtRQUN2QyxFQUFFLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ3RCLEtBQUssRUFBRSxDQUFDO0tBQ1g7SUFFRCxJQUFJLEVBQUUsQ0FBQyxVQUFVLENBQUMsY0FBYyxFQUFFLE1BQU0sQ0FBQyxFQUFFO1FBQ3ZDLEVBQUUsQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDdEIsS0FBSyxFQUFFLENBQUM7S0FDWDtJQUVELElBQUksRUFBRSxDQUFDLFVBQVUsQ0FBQyxjQUFjLEVBQUUsTUFBTSxDQUFDLEVBQUU7UUFDdkMsRUFBRSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUN0QixLQUFLLEVBQUUsQ0FBQztLQUNYO0lBRUQsSUFBSSxFQUFFLENBQUMsVUFBVSxDQUFDLGVBQWUsRUFBRSxNQUFNLENBQUMsRUFBRTtRQUN4QyxFQUFFLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ3ZCLEtBQUssRUFBRSxDQUFDO0tBQ1g7SUFFRCxJQUFJLEVBQUUsQ0FBQyxVQUFVLENBQUMsZUFBZSxFQUFFLE1BQU0sQ0FBQyxFQUFFO1FBQ3hDLEVBQUUsQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDdkIsS0FBSyxFQUFFLENBQUM7S0FDWDtJQUVELElBQUksS0FBSyxJQUFJLEVBQUUsQ0FBQyx5QkFBeUIsQ0FBQyxRQUFRLENBQUMsRUFBRTtRQUNqRCxFQUFFLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0tBQ3JCO0FBQ0wsQ0FBQztBQUVELE1BQU0sVUFBVSxnQkFBZ0IsQ0FBQyxFQUFNLEVBQUUsUUFBZ0I7SUFDckQsT0FBTyxFQUFFLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxlQUFlLEVBQUUsSUFBSSxFQUFFLENBQUMsNkJBQTZCLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDNUcsQ0FBQztBQUVELE1BQU0sVUFBVSxrQkFBa0IsQ0FBQyxFQUFNLEVBQUUsUUFBZ0I7SUFDdkQsT0FBTyxFQUFFLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxlQUFlLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQzFFLENBQUM7QUFFRCxNQUFNLFVBQVUsUUFBUSxDQUNwQixFQUFNLEVBQ04sUUFBa0MsRUFBRSxFQUNwQyxVQUFvQixFQUFFLEVBQ3RCLE9BQU8sR0FBRyxNQUFNO0lBRWhCLE1BQU0sVUFBVSxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDM0MsS0FBSyxDQUFDLE9BQU8sQ0FBQyxHQUFHLFVBQVUsQ0FBQztJQUU1QixNQUFNLFFBQVEsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLE9BQU8sRUFBRSxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7SUFDbEYsS0FBSyxNQUFNLEtBQUssSUFBSSxRQUFRLEVBQUU7UUFDMUIsUUFBUSxDQUFDLEVBQUUsRUFBRSxLQUFLLEVBQUUsVUFBVSxFQUFFLEtBQUssQ0FBQyxDQUFDO0tBQzFDO0lBQ0QsT0FBTyxLQUFLLENBQUM7QUFDakIsQ0FBQztBQUVELE1BQU0sVUFBVSxRQUFRLENBQUMsRUFBTTtJQUMzQixPQUFPLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFDckMsQ0FBQztBQUVELE1BQU0sVUFBVSxhQUFhLENBQUMsRUFBTTtJQUNoQyxNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsU0FBUyxFQUFFLENBQUM7SUFFOUIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLElBQUksTUFBTSxDQUFDLEtBQUssR0FBRyxLQUFLO1FBQUUsRUFBRSxDQUFDLFdBQVcsRUFBRSxDQUFDO0lBRTFELElBQUksQ0FBQyxFQUFFLENBQUMsVUFBVSxDQUFDLGNBQWMsRUFBRSxNQUFNLENBQUMsSUFBSSxNQUFNLENBQUMsS0FBSyxHQUFHLEtBQUs7UUFBRSxFQUFFLENBQUMsZUFBZSxDQUFDLGNBQWMsQ0FBQyxDQUFDO0lBRXZHLElBQUksQ0FBQyxFQUFFLENBQUMsVUFBVSxDQUFDLGNBQWMsRUFBRSxNQUFNLENBQUMsSUFBSSxNQUFNLENBQUMsS0FBSyxHQUFHLE1BQU07UUFBRSxFQUFFLENBQUMsZUFBZSxDQUFDLGNBQWMsQ0FBQyxDQUFDO0lBRXhHLElBQUksQ0FBQyxFQUFFLENBQUMsVUFBVSxDQUFDLGVBQWUsRUFBRSxNQUFNLENBQUMsSUFBSSxNQUFNLENBQUMsS0FBSyxHQUFHLEdBQUc7UUFBRSxFQUFFLENBQUMsZUFBZSxDQUFDLGVBQWUsQ0FBQyxDQUFDO0lBRXZHLElBQUksQ0FBQyxFQUFFLENBQUMsVUFBVSxDQUFDLGNBQWMsRUFBRSxNQUFNLENBQUMsSUFBSSxNQUFNLENBQUMsS0FBSyxHQUFHLElBQUk7UUFBRSxFQUFFLENBQUMsZUFBZSxDQUFDLGNBQWMsQ0FBQyxDQUFDO0lBRXRHLElBQUksQ0FBQyxFQUFFLENBQUMsVUFBVSxDQUFDLGVBQWUsRUFBRSxNQUFNLENBQUMsSUFBSSxNQUFNLENBQUMsS0FBSyxHQUFHLEtBQUs7UUFBRSxFQUFFLENBQUMsZUFBZSxDQUFDLGVBQWUsQ0FBQyxDQUFDO0FBQzdHLENBQUM7QUFFRCxNQUFNLFVBQVUsaUJBQWlCLENBQUMsRUFBTTtJQUNwQyxhQUFhLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDbEIsS0FBSyxNQUFNLFFBQVEsSUFBSSxRQUFRLENBQUMsRUFBRSxDQUFDLEVBQUU7UUFDakMsWUFBWSxDQUFDLEVBQUUsRUFBRSxRQUFRLENBQUMsQ0FBQztLQUM5QjtBQUNMLENBQUM7QUFFRCxNQUFNLFVBQVUsUUFBUSxDQUFDLEVBQU0sRUFBRSxFQUFVLEVBQUUsTUFBTSxHQUFHLEtBQUssRUFBRSxRQUFRLEdBQUcsS0FBSztJQUN6RSxJQUFJLFFBQVEsR0FBRyxFQUFFLENBQUM7SUFDbEIsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLEdBQUcsQ0FBQyxJQUFJLEdBQUcsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDaEQsUUFBUSxJQUFJLEtBQUssR0FBRyxDQUFDLElBQUksR0FBRyxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUM7SUFDckMsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLEdBQUcsQ0FBQyxJQUFJLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUNuRCxRQUFRLElBQUksT0FBTyxHQUFHLENBQUMsSUFBSSxHQUFHLEVBQUUsQ0FBQyxDQUFDO0lBQ2xDLE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxDQUFDO0lBQzVDLFFBQVEsSUFBSSxPQUFPLEdBQUcsSUFBSSxDQUFDO0lBQzNCLE1BQU0sWUFBWSxHQUFHLFFBQVEsQ0FBQztJQUU5QixJQUFJLE1BQU0sRUFBRTtRQUNSLElBQUksS0FBSyxHQUFHLENBQUMsSUFBSSxRQUFRO1lBQUUsT0FBTyxFQUFFLENBQUMsT0FBTyxDQUFDLHFCQUFxQixFQUFFLEtBQUssRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLFlBQVksQ0FBQyxDQUFDO1FBQzNHLElBQUksT0FBTyxHQUFHLENBQUM7WUFBRSxPQUFPLEVBQUUsQ0FBQyxPQUFPLENBQUMsZ0JBQWdCLEVBQUUsT0FBTyxFQUFFLE9BQU8sRUFBRSxZQUFZLENBQUMsQ0FBQztRQUNyRixPQUFPLEVBQUUsQ0FBQyxPQUFPLENBQUMsV0FBVyxFQUFFLE9BQU8sRUFBRSxZQUFZLENBQUMsQ0FBQztLQUN6RDtTQUFNO1FBQ0gsSUFBSSxLQUFLLEdBQUcsQ0FBQyxJQUFJLFFBQVE7WUFBRSxPQUFPLEVBQUUsQ0FBQyxPQUFPLENBQUMsZ0JBQWdCLEVBQUUsS0FBSyxFQUFFLE9BQU8sRUFBRSxPQUFPLENBQUMsQ0FBQztRQUN4RixJQUFJLE9BQU8sR0FBRyxDQUFDO1lBQUUsT0FBTyxFQUFFLENBQUMsT0FBTyxDQUFDLFdBQVcsRUFBRSxPQUFPLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFDbEUsT0FBTyxFQUFFLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxPQUFPLENBQUMsQ0FBQztLQUN0QztBQUNMLENBQUM7QUFFRCxNQUFNLFVBQVUsU0FBUyxDQUFDLEVBQU0sRUFBRSxNQUFNLEdBQUcsQ0FBQyxFQUFFLE1BQU0sR0FBRyxLQUFLO0lBQ3hELE1BQU0sSUFBSSxHQUFHLElBQUksSUFBSSxDQUFDLElBQUksSUFBSSxFQUFFLENBQUMsT0FBTyxFQUFFLEdBQUcsTUFBTSxDQUFDLENBQUM7SUFFckQsSUFBSSxNQUFNLEVBQUU7UUFDUixNQUFNLEVBQUUsR0FBRyxFQUFFLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsa0JBQWtCLEVBQUUsQ0FBQyxDQUFDO1FBQ3pELE9BQU8sSUFBSSxDQUFDLGtCQUFrQixDQUFDLE9BQU8sQ0FBQyxHQUFHLEdBQUcsR0FBRyxFQUFFLENBQUM7S0FDdEQ7U0FBTTtRQUNILE9BQU8sSUFBSSxDQUFDLGtCQUFrQixDQUFDLE9BQU8sQ0FBQyxDQUFDO0tBQzNDO0FBQ0wsQ0FBQztBQUVELE1BQU0sQ0FBQyxLQUFLLFVBQVUsV0FBVyxDQUFDLEVBQU07SUFDcEMsNklBQTZJO0lBQzdJLDZHQUE2RztJQUM3RyxNQUFNLFdBQVcsR0FBRyxDQUFDLE1BQU0sRUFBRSxhQUFhLEVBQUUsU0FBUyxFQUFFLGNBQWMsRUFBRSxjQUFjLENBQUMsQ0FBQztJQUV2RixNQUFNLEtBQUssR0FBRyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUM7SUFFM0IsS0FBSyxNQUFNLENBQUMsUUFBUSxFQUFFLEtBQUssQ0FBQyxJQUFJLE1BQU0sQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEVBQUU7UUFDbkQsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUN0QyxJQUNJLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUM7WUFDL0IsTUFBTSxDQUFDLGlCQUFpQjtZQUN4QixNQUFNLENBQUMsb0JBQW9CLEdBQUcsRUFBRSxDQUFDLGVBQWUsRUFBRTtZQUNsRCxDQUFDLE1BQU0sQ0FBQyxjQUFjO1lBRXRCLFNBQVM7UUFFYixFQUFFLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ25CLEtBQUssTUFBTSxXQUFXLElBQUksS0FBSyxFQUFFO1lBQzdCLEVBQUUsQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLENBQUM7U0FDM0I7UUFFRCxNQUFNLEVBQUUsQ0FBQyxlQUFlLEVBQUUsQ0FBQztRQUMzQixFQUFFLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0tBQ3RCO0FBQ0wsQ0FBQztBQUVELE1BQU0sVUFBVSxTQUFTLENBQUMsRUFBTTtJQUM1QixFQUFFLENBQUMsVUFBVSxDQUFDLFlBQVksQ0FBQyxDQUFDO0lBQzVCLEVBQUUsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDckIseUJBQXlCO0lBQ3pCLHdCQUF3QjtJQUN4QixtQ0FBbUM7SUFDbkMsMENBQTBDO0lBQzFDLDZDQUE2QztJQUM3QyxxQ0FBcUM7SUFDckMsbUNBQW1DO0lBQ25DLGlEQUFpRDtJQUNqRCx3QkFBd0I7SUFDeEIsMkNBQTJDO0lBQzNDLG9DQUFvQztBQUN4QyxDQUFDO0FBRUQsTUFBTSxDQUFDLE1BQU0sWUFBWSxHQUFHO0lBQ3hCLFlBQVk7SUFDWixVQUFVO0lBQ1YsY0FBYztJQUNkLE9BQU87SUFDUCxVQUFVO0lBQ1Ysc0JBQXNCO0lBQ3RCLGtCQUFrQjtJQUNsQixLQUFLO0lBQ0wscUJBQXFCO0lBQ3JCLHNCQUFzQjtJQUN0QixZQUFZO0lBQ1osd0JBQXdCO0lBQ3hCLDZCQUE2QjtJQUM3QixZQUFZO0lBQ1osZ0JBQWdCO0lBQ2hCLFNBQVM7SUFDVCxPQUFPO0lBQ1AsV0FBVztJQUNYLFFBQVE7SUFDUixXQUFXO0lBQ1gsV0FBVztJQUNYLFVBQVU7SUFDVix1QkFBdUI7SUFDdkIsZUFBZTtJQUNmLGVBQWU7SUFDZixZQUFZO0lBQ1osU0FBUztJQUNULGFBQWE7SUFDYixZQUFZO0lBQ1osYUFBYTtJQUNiLFVBQVU7SUFDVixjQUFjO0lBQ2QsMkJBQTJCO0NBQzlCLENBQUM7QUFFRixNQUFNLENBQUMsS0FBSyxVQUFVLFFBQVEsQ0FDMUIsRUFBTSxFQUNOLElBQXdCLEVBQ3hCLFNBQWlCLEVBQ2pCLE9BQWUsRUFDZixNQUFjLEVBQ2QsUUFBZ0IsRUFDaEIsU0FBaUI7SUFFakIsSUFBSSxJQUFJLENBQUMsU0FBUyxLQUFLLEVBQUUsRUFBRTtRQUN2QixNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsT0FBTyxDQUNyQixzREFBc0QsRUFDdEQsSUFBSSxDQUFDLE1BQU0sRUFDWCxJQUFJLENBQUMsR0FBRyxFQUNSLElBQUksQ0FBQyxPQUFPLEVBQ1osSUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUMsTUFBTSxFQUNoQyxJQUFJLENBQUMsYUFBYSxHQUFHLElBQUksQ0FBQyxNQUFNLEVBQ2hDLElBQUksQ0FBQyxhQUFhLEVBQ2xCLFNBQVMsRUFDVCxPQUFPLEVBQ1AsT0FBTyxHQUFHLFNBQVMsRUFDbkIsU0FBUyxHQUFHLENBQUMsSUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQzlDLE9BQU8sR0FBRyxDQUFDLElBQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUM1QyxPQUFPLEdBQUcsU0FBUyxHQUFHLElBQUksQ0FBQyxhQUFhLEVBQ3hDLE1BQU0sRUFDTixRQUFRLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUNuQixFQUFFLENBQUMsc0JBQXNCLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFDakQsRUFBRSxDQUFDLE9BQU8sQ0FBQyxTQUFTLEVBQUUsV0FBVyxDQUFDLEVBQ2xDLEVBQUUsQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLHVCQUF1QixDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRSxXQUFXLENBQUMsQ0FDbkUsQ0FBQztRQUVGLE9BQU8sQ0FBQyxNQUFNLEVBQUUsQ0FBQyxZQUFZLENBQUMsYUFBYSxDQUFDLGVBQWUsRUFBRSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsTUFBTSxDQUFDLENBQUM7WUFBQyxDQUFDO0tBQzNGO0FBQ0wsQ0FBQyJ9\",\"filename\":\"/lib/util.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":13.25,\"server\":\"pserv-7\",\"moduleSequenceNumber\":94026,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"purchaseTor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"purchaseProgram\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"connect\",\"cost\":2},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.stanek.charge(ns.args[0], ns.args[1]);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hhcmdlLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL3N0YW5lay9jaGFyZ2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUM5QixPQUFPLElBQUksRUFBRTtRQUNULE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7S0FDakQ7QUFDTCxDQUFDIn0=\",\"filename\":\"/lib/stanek/charge.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/stanek/charge.js\",\"url\":\"blob:file:///1dd1808d-cf62-4aad-b801-c0555e591eba\",\"moduleSequenceNumber\":99909}],\"dependents\":[],\"ramUsage\":2,\"server\":\"pserv-7\",\"moduleSequenceNumber\":99909,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.charge\",\"cost\":0.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"suppression\":0,\"activeSuppressionThreads\":[],\"suppressionIntervalID\":null,\"suppressionLastUpdateTime\":0}},\"pserv-8\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-8\",\"httpPortOpen\":false,\"ip\":\"54.3.9.8\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":252,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"script\\\":\\\"/lib/exec/grow.js\\\",\\\"host\\\":\\\"pserv-8\\\",\\\"numThreads\\\":144,\\\"target\\\":\\\"phantasy\\\",\\\"hackLevelTiming\\\":153.19873646097005,\\\"hackLevelEffect\\\":204,\\\"batchId\\\":25,\\\"offset\\\":40800,\\\"operationTime\\\":142114,\\\"finish\\\":182914,\\\"realTimeStart\\\":1647907321842,\\\"uid\\\":\\\"025-2G-pserv-8\\\",\\\"writeFile\\\":\\\"\\\"}\"],\"dataMap\":{},\"filename\":\"/lib/exec/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":30.00999999999993,\"pid\":1360,\"ramUsage\":1.75,\"server\":\"pserv-8\",\"threads\":144,\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///f35c1050-fc92-493c-b26f-9b2880924dcc\",\"moduleSequenceNumber\":94061}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.grow(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLElBQUksR0FBdUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFFbkUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDdkIsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7UUFDeEMsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7S0FDM0MsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyJ9\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///f35c1050-fc92-493c-b26f-9b2880924dcc\",\"moduleSequenceNumber\":94061}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-8\",\"moduleSequenceNumber\":94061,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.weaken(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxJQUFJLEdBQXVCLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO0lBRW5FLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFO1FBQ3pCLGtCQUFrQixFQUFFLElBQUksQ0FBQyxlQUFlO1FBQ3hDLGtCQUFrQixFQUFFLElBQUksQ0FBQyxlQUFlO0tBQzNDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///da0a4e1b-81f5-48cb-8d9d-aa832a4c2aa7\",\"moduleSequenceNumber\":96345}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-8\",\"moduleSequenceNumber\":96345,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.hack(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLElBQUksR0FBdUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFFbkUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDdkIsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7UUFDeEMsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7S0FDM0MsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyJ9\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///f9165cef-56b2-4399-8bf7-834da310efc5\",\"moduleSequenceNumber\":96339}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-8\",\"moduleSequenceNumber\":96339,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export var ReservedPorts;\\r\\n(function (ReservedPorts) {\\r\\n    ReservedPorts[ReservedPorts[\\\"HACKING_INFO\\\"] = 1] = \\\"HACKING_INFO\\\";\\r\\n    ReservedPorts[ReservedPorts[\\\"HACKNET_INFO\\\"] = 2] = \\\"HACKNET_INFO\\\";\\r\\n    ReservedPorts[ReservedPorts[\\\"HACK_WRITE_INFO\\\"] = 3] = \\\"HACK_WRITE_INFO\\\";\\r\\n})(ReservedPorts || (ReservedPorts = {}));\\r\\nexport const WEAKENJS = \\\"/lib/exec/weaken.js\\\";\\r\\nexport const GROWJS = \\\"/lib/exec/grow.js\\\";\\r\\nexport const HACKJS = \\\"/lib/exec/hack.js\\\";\\r\\nexport const UTILJS = \\\"/lib/util.js\\\";\\r\\nexport const CITIES = [\\\"Aevum\\\", \\\"Chongqing\\\", \\\"Sector-12\\\", \\\"New Tokyo\\\", \\\"Ishima\\\", \\\"Volhaven\\\"];\\r\\nexport function llog(ns, str, ...args) {\\r\\n    ns.print(ns.sprintf(\\\"%8s \\\" + str, new Date().toLocaleTimeString(\\\"it-IT\\\"), ...args));\\r\\n}\\r\\nexport function softenServer(ns, hostname) {\\r\\n    if (ns.hasRootAccess(hostname)) {\\r\\n        return;\\r\\n    }\\r\\n    let ports = 0;\\r\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n        ns.brutessh(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n        ns.ftpcrack(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n        ns.httpworm(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n        ns.relaysmtp(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n        ns.sqlinject(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ports >= ns.getServerNumPortsRequired(hostname)) {\\r\\n        ns.nuke(hostname);\\r\\n    }\\r\\n}\\r\\nexport function serverIsHackable(ns, hostname) {\\r\\n    return ns.hasRootAccess(hostname) && ns.getHackingLevel() >= ns.getServerRequiredHackingLevel(hostname);\\r\\n}\\r\\nexport function canExecuteOnServer(ns, hostname) {\\r\\n    return ns.hasRootAccess(hostname) && ns.getServerMaxRam(hostname) > 0;\\r\\n}\\r\\nexport function mapHosts(ns, hosts = {}, parents = [], current = \\\"home\\\") {\\r\\n    const newParents = parents.concat(current);\\r\\n    hosts[current] = newParents;\\r\\n    const children = ns.scan(current).filter((element) => !parents.includes(element));\\r\\n    for (const child of children) {\\r\\n        mapHosts(ns, hosts, newParents, child);\\r\\n    }\\r\\n    return hosts;\\r\\n}\\r\\nexport function allHosts(ns) {\\r\\n    return Object.keys(mapHosts(ns));\\r\\n}\\r\\nexport function doProgramBuys(ns) {\\r\\n    const player = ns.getPlayer();\\r\\n    if (!player.tor && player.money > 200e3)\\r\\n        ns.purchaseTor();\\r\\n    if (!ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\") && player.money > 500e3)\\r\\n        ns.purchaseProgram(\\\"BruteSSH.exe\\\");\\r\\n    if (!ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\") && player.money > 1500e3)\\r\\n        ns.purchaseProgram(\\\"FTPCrack.exe\\\");\\r\\n    if (!ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\") && player.money > 5e6)\\r\\n        ns.purchaseProgram(\\\"relaySMTP.exe\\\");\\r\\n    if (!ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\") && player.money > 30e6)\\r\\n        ns.purchaseProgram(\\\"HTTPWorm.exe\\\");\\r\\n    if (!ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\") && player.money > 250e6)\\r\\n        ns.purchaseProgram(\\\"SQLInject.exe\\\");\\r\\n}\\r\\nexport function doBuyAndSoftenAll(ns) {\\r\\n    doProgramBuys(ns);\\r\\n    for (const hostname of allHosts(ns)) {\\r\\n        softenServer(ns, hostname);\\r\\n    }\\r\\n}\\r\\nexport function stFormat(ns, ms, showms = false, showfull = false) {\\r\\n    let timeLeft = ms;\\r\\n    const hours = Math.floor(ms / (1000 * 60 * 60));\\r\\n    timeLeft -= hours * (1000 * 60 * 60);\\r\\n    const minutes = Math.floor(timeLeft / (1000 * 60));\\r\\n    timeLeft -= minutes * (1000 * 60);\\r\\n    const seconds = Math.floor(timeLeft / 1000);\\r\\n    timeLeft -= seconds * 1000;\\r\\n    const milliseconds = timeLeft;\\r\\n    if (showms) {\\r\\n        if (hours > 0 || showfull)\\r\\n            return ns.sprintf(\\\"%02d:%02d:%02d.%03d\\\", hours, minutes, seconds, milliseconds);\\r\\n        if (minutes > 0)\\r\\n            return ns.sprintf(\\\"%02d:%02d.%03d\\\", minutes, seconds, milliseconds);\\r\\n        return ns.sprintf(\\\"%02d.%03d\\\", seconds, milliseconds);\\r\\n    }\\r\\n    else {\\r\\n        if (hours > 0 || showfull)\\r\\n            return ns.sprintf(\\\"%02d:%02d:%02d\\\", hours, minutes, seconds);\\r\\n        if (minutes > 0)\\r\\n            return ns.sprintf(\\\"%02d:%02d\\\", minutes, seconds);\\r\\n        return ns.sprintf(\\\"%02d\\\", seconds);\\r\\n    }\\r\\n}\\r\\nexport function stdFormat(ns, offset = 0, showms = false) {\\r\\n    const date = new Date(new Date().getTime() + offset);\\r\\n    if (showms) {\\r\\n        const ms = ns.sprintf(\\\"%03d\\\", date.getUTCMilliseconds());\\r\\n        return date.toLocaleTimeString(\\\"it-IT\\\") + \\\".\\\" + ms;\\r\\n    }\\r\\n    else {\\r\\n        return date.toLocaleTimeString(\\\"it-IT\\\");\\r\\n    }\\r\\n}\\r\\nexport async function doBackdoors(ns) {\\r\\n    //const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"w0r1d_d43m0n\\\", \\\"b-and-a\\\", \\\"ecorp\\\", \\\"fulcrumassets\\\", \\\"fulcrumtech\\\"];\\r\\n    //const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"omnitek\\\", \\\"kuai-gong\\\", \\\"megacorp\\\"];\\r\\n    const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"w0r1d_d43m0n\\\"];\\r\\n    const hosts = mapHosts(ns);\\r\\n    for (const [hostName, trail] of Object.entries(hosts)) {\\r\\n        const server = ns.getServer(hostName);\\r\\n        if (!targetHosts.includes(hostName) ||\\r\\n            server.backdoorInstalled ||\\r\\n            server.requiredHackingSkill > ns.getHackingLevel() ||\\r\\n            !server.hasAdminRights)\\r\\n            continue;\\r\\n        ns.print(hostName);\\r\\n        for (const hostHopName of trail) {\\r\\n            ns.connect(hostHopName);\\r\\n        }\\r\\n        await ns.installBackdoor();\\r\\n        ns.connect(\\\"home\\\");\\r\\n    }\\r\\n}\\r\\nexport function cleanLogs(ns) {\\r\\n    ns.disableLog(\\\"disableLog\\\");\\r\\n    ns.disableLog(\\\"ALL\\\");\\r\\n    // ns.disableLog(\\\"sleep\\\")\\r\\n    // ns.disableLog(\\\"exec\\\")\\r\\n    // ns.disableLog(\\\"getServerMaxRam\\\")\\r\\n    // ns.disableLog(\\\"getServerSecurityLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerMinSecurityLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerMaxMoney\\\")\\r\\n    // ns.disableLog(\\\"getHackingLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerRequiredHackingLevel\\\")\\r\\n    // ns.disableLog(\\\"scan\\\")\\r\\n    // ns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n    // ns.disableLog(\\\"getServerUsedRam\\\")\\r\\n}\\r\\nexport const ALL_FACTIONS = [\\r\\n    \\\"Illuminati\\\",\\r\\n    \\\"Daedalus\\\",\\r\\n    \\\"The Covenant\\\",\\r\\n    \\\"ECorp\\\",\\r\\n    \\\"MegaCorp\\\",\\r\\n    \\\"Bachman & Associates\\\",\\r\\n    \\\"Blade Industries\\\",\\r\\n    \\\"NWO\\\",\\r\\n    \\\"Clarke Incorporated\\\",\\r\\n    \\\"OmniTek Incorporated\\\",\\r\\n    \\\"Four Sigma\\\",\\r\\n    \\\"KuaiGong International\\\",\\r\\n    \\\"Fulcrum Secret Technologies\\\",\\r\\n    \\\"BitRunners\\\",\\r\\n    \\\"The Black Hand\\\",\\r\\n    \\\"NiteSec\\\",\\r\\n    \\\"Aevum\\\",\\r\\n    \\\"Chongqing\\\",\\r\\n    \\\"Ishima\\\",\\r\\n    \\\"New Tokyo\\\",\\r\\n    \\\"Sector-12\\\",\\r\\n    \\\"Volhaven\\\",\\r\\n    \\\"Speakers for the Dead\\\",\\r\\n    \\\"The Dark Army\\\",\\r\\n    \\\"The Syndicate\\\",\\r\\n    \\\"Silhouette\\\",\\r\\n    \\\"Tetrads\\\",\\r\\n    \\\"Slum Snakes\\\",\\r\\n    \\\"Netburners\\\",\\r\\n    \\\"Tian Di Hui\\\",\\r\\n    \\\"CyberSec\\\",\\r\\n    \\\"Bladeburners\\\",\\r\\n    \\\"Church of the Machine God\\\",\\r\\n];\\r\\nexport async function writeOut(ns, data, startTime, endTime, result, startSec, startCash) {\\r\\n    if (data.writeFile !== \\\"\\\") {\\r\\n        const outstr = ns.sprintf(\\\"%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\", data.target, data.uid, data.batchId, data.realTimeStart + data.offset, data.realTimeStart + data.finish, data.operationTime, startTime, endTime, endTime - startTime, startTime - (data.realTimeStart + data.offset), endTime - (data.realTimeStart + data.finish), endTime - startTime - data.operationTime, result, startSec.toFixed(2), ns.getServerSecurityLevel(data.target).toFixed(2), ns.nFormat(startCash, \\\"($0.000a)\\\"), ns.nFormat(ns.getServerMoneyAvailable(data.target), \\\"($0.000a)\\\"));\\r\\n        while (!await ns.tryWritePort(ReservedPorts.HACK_WRITE_INFO, [data.writeFile, outstr]))\\r\\n            ;\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi91dGlsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLE1BQU0sQ0FBTixJQUFZLGFBSVg7QUFKRCxXQUFZLGFBQWE7SUFDckIsaUVBQWdCLENBQUE7SUFDaEIsaUVBQVksQ0FBQTtJQUNaLHVFQUFlLENBQUE7QUFDbkIsQ0FBQyxFQUpXLGFBQWEsS0FBYixhQUFhLFFBSXhCO0FBRUQsTUFBTSxDQUFDLE1BQU0sUUFBUSxHQUFHLHFCQUFxQixDQUFDO0FBQzlDLE1BQU0sQ0FBQyxNQUFNLE1BQU0sR0FBRyxtQkFBbUIsQ0FBQztBQUMxQyxNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUcsbUJBQW1CLENBQUM7QUFDMUMsTUFBTSxDQUFDLE1BQU0sTUFBTSxHQUFHLGNBQWMsQ0FBQztBQUVyQyxNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUcsQ0FBQyxPQUFPLEVBQUUsV0FBVyxFQUFFLFdBQVcsRUFBRSxXQUFXLEVBQUUsUUFBUSxFQUFFLFVBQVUsQ0FBQyxDQUFDO0FBRTdGLE1BQU0sVUFBVSxJQUFJLENBQUMsRUFBTSxFQUFFLEdBQVcsRUFBRSxHQUFHLElBQXlCO0lBQ2xFLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEdBQUcsR0FBRyxFQUFFLElBQUksSUFBSSxFQUFFLENBQUMsa0JBQWtCLENBQUMsT0FBTyxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDO0FBQ3hGLENBQUM7QUFFRCxNQUFNLFVBQVUsWUFBWSxDQUFDLEVBQU0sRUFBRSxRQUFnQjtJQUNqRCxJQUFJLEVBQUUsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDNUIsT0FBTztLQUNWO0lBRUQsSUFBSSxLQUFLLEdBQUcsQ0FBQyxDQUFDO0lBQ2QsSUFBSSxFQUFFLENBQUMsVUFBVSxDQUFDLGNBQWMsRUFB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\",\"filename\":\"/lib/util.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":13.25,\"server\":\"pserv-8\",\"moduleSequenceNumber\":94034,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"purchaseTor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"purchaseProgram\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"connect\",\"cost\":2},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.stanek.charge(ns.args[0], ns.args[1]);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hhcmdlLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL3N0YW5lay9jaGFyZ2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUM5QixPQUFPLElBQUksRUFBRTtRQUNULE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7S0FDakQ7QUFDTCxDQUFDIn0=\",\"filename\":\"/lib/stanek/charge.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/stanek/charge.js\",\"url\":\"blob:file:///f5bea79a-4638-485c-940a-2312ed239197\",\"moduleSequenceNumber\":99910}],\"dependents\":[],\"ramUsage\":2,\"server\":\"pserv-8\",\"moduleSequenceNumber\":99910,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.charge\",\"cost\":0.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"suppression\":0,\"activeSuppressionThreads\":[],\"suppressionIntervalID\":null,\"suppressionLastUpdateTime\":0}},\"pserv-9\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-9\",\"httpPortOpen\":false,\"ip\":\"64.2.0.8\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":204,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"script\\\":\\\"/lib/exec/hack.js\\\",\\\"host\\\":\\\"pserv-9\\\",\\\"numThreads\\\":120,\\\"target\\\":\\\"phantasy\\\",\\\"hackLevelTiming\\\":13.499605144053142,\\\"hackLevelEffect\\\":204,\\\"batchId\\\":26,\\\"offset\\\":41600,\\\"operationTime\\\":142113,\\\"finish\\\":183713,\\\"realTimeStart\\\":1647907321842,\\\"uid\\\":\\\"026-0H-pserv-9\\\",\\\"writeFile\\\":\\\"\\\"}\"],\"dataMap\":{},\"filename\":\"/lib/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":29.209999999999933,\"pid\":1362,\"ramUsage\":1.7,\"server\":\"pserv-9\",\"threads\":120,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.grow(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLElBQUksR0FBdUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFFbkUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDdkIsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7UUFDeEMsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7S0FDM0MsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyJ9\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///0590d503-de5d-46aa-adb9-933ef9171f7e\",\"moduleSequenceNumber\":94060}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-9\",\"moduleSequenceNumber\":94060,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.weaken(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxJQUFJLEdBQXVCLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO0lBRW5FLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFO1FBQ3pCLGtCQUFrQixFQUFFLElBQUksQ0FBQyxlQUFlO1FBQ3hDLGtCQUFrQixFQUFFLElBQUksQ0FBQyxlQUFlO0tBQzNDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-9\",\"moduleSequenceNumber\":94038,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.hack(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLElBQUksR0FBdUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFFbkUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDdkIsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7UUFDeEMsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7S0FDM0MsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyJ9\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///6924822e-51ee-40f1-8f03-c338dd969bf5\",\"moduleSequenceNumber\":103940}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-9\",\"moduleSequenceNumber\":103940,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export var ReservedPorts;\\r\\n(function (ReservedPorts) {\\r\\n    ReservedPorts[ReservedPorts[\\\"HACKING_INFO\\\"] = 1] = \\\"HACKING_INFO\\\";\\r\\n    ReservedPorts[ReservedPorts[\\\"HACKNET_INFO\\\"] = 2] = \\\"HACKNET_INFO\\\";\\r\\n    ReservedPorts[ReservedPorts[\\\"HACK_WRITE_INFO\\\"] = 3] = \\\"HACK_WRITE_INFO\\\";\\r\\n})(ReservedPorts || (ReservedPorts = {}));\\r\\nexport const WEAKENJS = \\\"/lib/exec/weaken.js\\\";\\r\\nexport const GROWJS = \\\"/lib/exec/grow.js\\\";\\r\\nexport const HACKJS = \\\"/lib/exec/hack.js\\\";\\r\\nexport const UTILJS = \\\"/lib/util.js\\\";\\r\\nexport const CITIES = [\\\"Aevum\\\", \\\"Chongqing\\\", \\\"Sector-12\\\", \\\"New Tokyo\\\", \\\"Ishima\\\", \\\"Volhaven\\\"];\\r\\nexport function llog(ns, str, ...args) {\\r\\n    ns.print(ns.sprintf(\\\"%8s \\\" + str, new Date().toLocaleTimeString(\\\"it-IT\\\"), ...args));\\r\\n}\\r\\nexport function softenServer(ns, hostname) {\\r\\n    if (ns.hasRootAccess(hostname)) {\\r\\n        return;\\r\\n    }\\r\\n    let ports = 0;\\r\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n        ns.brutessh(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n        ns.ftpcrack(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n        ns.httpworm(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n        ns.relaysmtp(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n        ns.sqlinject(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ports >= ns.getServerNumPortsRequired(hostname)) {\\r\\n        ns.nuke(hostname);\\r\\n    }\\r\\n}\\r\\nexport function serverIsHackable(ns, hostname) {\\r\\n    return ns.hasRootAccess(hostname) && ns.getHackingLevel() >= ns.getServerRequiredHackingLevel(hostname);\\r\\n}\\r\\nexport function canExecuteOnServer(ns, hostname) {\\r\\n    return ns.hasRootAccess(hostname) && ns.getServerMaxRam(hostname) > 0;\\r\\n}\\r\\nexport function mapHosts(ns, hosts = {}, parents = [], current = \\\"home\\\") {\\r\\n    const newParents = parents.concat(current);\\r\\n    hosts[current] = newParents;\\r\\n    const children = ns.scan(current).filter((element) => !parents.includes(element));\\r\\n    for (const child of children) {\\r\\n        mapHosts(ns, hosts, newParents, child);\\r\\n    }\\r\\n    return hosts;\\r\\n}\\r\\nexport function allHosts(ns) {\\r\\n    return Object.keys(mapHosts(ns));\\r\\n}\\r\\nexport function doProgramBuys(ns) {\\r\\n    const player = ns.getPlayer();\\r\\n    if (!player.tor && player.money > 200e3)\\r\\n        ns.purchaseTor();\\r\\n    if (!ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\") && player.money > 500e3)\\r\\n        ns.purchaseProgram(\\\"BruteSSH.exe\\\");\\r\\n    if (!ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\") && player.money > 1500e3)\\r\\n        ns.purchaseProgram(\\\"FTPCrack.exe\\\");\\r\\n    if (!ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\") && player.money > 5e6)\\r\\n        ns.purchaseProgram(\\\"relaySMTP.exe\\\");\\r\\n    if (!ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\") && player.money > 30e6)\\r\\n        ns.purchaseProgram(\\\"HTTPWorm.exe\\\");\\r\\n    if (!ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\") && player.money > 250e6)\\r\\n        ns.purchaseProgram(\\\"SQLInject.exe\\\");\\r\\n}\\r\\nexport function doBuyAndSoftenAll(ns) {\\r\\n    doProgramBuys(ns);\\r\\n    for (const hostname of allHosts(ns)) {\\r\\n        softenServer(ns, hostname);\\r\\n    }\\r\\n}\\r\\nexport function stFormat(ns, ms, showms = false, showfull = false) {\\r\\n    let timeLeft = ms;\\r\\n    const hours = Math.floor(ms / (1000 * 60 * 60));\\r\\n    timeLeft -= hours * (1000 * 60 * 60);\\r\\n    const minutes = Math.floor(timeLeft / (1000 * 60));\\r\\n    timeLeft -= minutes * (1000 * 60);\\r\\n    const seconds = Math.floor(timeLeft / 1000);\\r\\n    timeLeft -= seconds * 1000;\\r\\n    const milliseconds = timeLeft;\\r\\n    if (showms) {\\r\\n        if (hours > 0 || showfull)\\r\\n            return ns.sprintf(\\\"%02d:%02d:%02d.%03d\\\", hours, minutes, seconds, milliseconds);\\r\\n        if (minutes > 0)\\r\\n            return ns.sprintf(\\\"%02d:%02d.%03d\\\", minutes, seconds, milliseconds);\\r\\n        return ns.sprintf(\\\"%02d.%03d\\\", seconds, milliseconds);\\r\\n    }\\r\\n    else {\\r\\n        if (hours > 0 || showfull)\\r\\n            return ns.sprintf(\\\"%02d:%02d:%02d\\\", hours, minutes, seconds);\\r\\n        if (minutes > 0)\\r\\n            return ns.sprintf(\\\"%02d:%02d\\\", minutes, seconds);\\r\\n        return ns.sprintf(\\\"%02d\\\", seconds);\\r\\n    }\\r\\n}\\r\\nexport function stdFormat(ns, offset = 0, showms = false) {\\r\\n    const date = new Date(new Date().getTime() + offset);\\r\\n    if (showms) {\\r\\n        const ms = ns.sprintf(\\\"%03d\\\", date.getUTCMilliseconds());\\r\\n        return date.toLocaleTimeString(\\\"it-IT\\\") + \\\".\\\" + ms;\\r\\n    }\\r\\n    else {\\r\\n        return date.toLocaleTimeString(\\\"it-IT\\\");\\r\\n    }\\r\\n}\\r\\nexport async function doBackdoors(ns) {\\r\\n    //const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"w0r1d_d43m0n\\\", \\\"b-and-a\\\", \\\"ecorp\\\", \\\"fulcrumassets\\\", \\\"fulcrumtech\\\"];\\r\\n    //const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"omnitek\\\", \\\"kuai-gong\\\", \\\"megacorp\\\"];\\r\\n    const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"w0r1d_d43m0n\\\"];\\r\\n    const hosts = mapHosts(ns);\\r\\n    for (const [hostName, trail] of Object.entries(hosts)) {\\r\\n        const server = ns.getServer(hostName);\\r\\n        if (!targetHosts.includes(hostName) ||\\r\\n            server.backdoorInstalled ||\\r\\n            server.requiredHackingSkill > ns.getHackingLevel() ||\\r\\n            !server.hasAdminRights)\\r\\n            continue;\\r\\n        ns.print(hostName);\\r\\n        for (const hostHopName of trail) {\\r\\n            ns.connect(hostHopName);\\r\\n        }\\r\\n        await ns.installBackdoor();\\r\\n        ns.connect(\\\"home\\\");\\r\\n    }\\r\\n}\\r\\nexport function cleanLogs(ns) {\\r\\n    ns.disableLog(\\\"disableLog\\\");\\r\\n    ns.disableLog(\\\"ALL\\\");\\r\\n    // ns.disableLog(\\\"sleep\\\")\\r\\n    // ns.disableLog(\\\"exec\\\")\\r\\n    // ns.disableLog(\\\"getServerMaxRam\\\")\\r\\n    // ns.disableLog(\\\"getServerSecurityLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerMinSecurityLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerMaxMoney\\\")\\r\\n    // ns.disableLog(\\\"getHackingLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerRequiredHackingLevel\\\")\\r\\n    // ns.disableLog(\\\"scan\\\")\\r\\n    // ns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n    // ns.disableLog(\\\"getServerUsedRam\\\")\\r\\n}\\r\\nexport const ALL_FACTIONS = [\\r\\n    \\\"Illuminati\\\",\\r\\n    \\\"Daedalus\\\",\\r\\n    \\\"The Covenant\\\",\\r\\n    \\\"ECorp\\\",\\r\\n    \\\"MegaCorp\\\",\\r\\n    \\\"Bachman & Associates\\\",\\r\\n    \\\"Blade Industries\\\",\\r\\n    \\\"NWO\\\",\\r\\n    \\\"Clarke Incorporated\\\",\\r\\n    \\\"OmniTek Incorporated\\\",\\r\\n    \\\"Four Sigma\\\",\\r\\n    \\\"KuaiGong International\\\",\\r\\n    \\\"Fulcrum Secret Technologies\\\",\\r\\n    \\\"BitRunners\\\",\\r\\n    \\\"The Black Hand\\\",\\r\\n    \\\"NiteSec\\\",\\r\\n    \\\"Aevum\\\",\\r\\n    \\\"Chongqing\\\",\\r\\n    \\\"Ishima\\\",\\r\\n    \\\"New Tokyo\\\",\\r\\n    \\\"Sector-12\\\",\\r\\n    \\\"Volhaven\\\",\\r\\n    \\\"Speakers for the Dead\\\",\\r\\n    \\\"The Dark Army\\\",\\r\\n    \\\"The Syndicate\\\",\\r\\n    \\\"Silhouette\\\",\\r\\n    \\\"Tetrads\\\",\\r\\n    \\\"Slum Snakes\\\",\\r\\n    \\\"Netburners\\\",\\r\\n    \\\"Tian Di Hui\\\",\\r\\n    \\\"CyberSec\\\",\\r\\n    \\\"Bladeburners\\\",\\r\\n    \\\"Church of the Machine God\\\",\\r\\n];\\r\\nexport async function writeOut(ns, data, startTime, endTime, result, startSec, startCash) {\\r\\n    if (data.writeFile !== \\\"\\\") {\\r\\n        const outstr = ns.sprintf(\\\"%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\", data.target, data.uid, data.batchId, data.realTimeStart + data.offset, data.realTimeStart + data.finish, data.operationTime, startTime, endTime, endTime - startTime, startTime - (data.realTimeStart + data.offset), endTime - (data.realTimeStart + data.finish), endTime - startTime - data.operationTime, result, startSec.toFixed(2), ns.getServerSecurityLevel(data.target).toFixed(2), ns.nFormat(startCash, \\\"($0.000a)\\\"), ns.nFormat(ns.getServerMoneyAvailable(data.target), \\\"($0.000a)\\\"));\\r\\n        while (!await ns.tryWritePort(ReservedPorts.HACK_WRITE_INFO, [data.writeFile, outstr]))\\r\\n            ;\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi91dGlsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLE1BQU0sQ0FBTixJQUFZLGFBSVg7QUFKRCxXQUFZLGFBQWE7SUFDckIsaUVBQWdCLENBQUE7SUFDaEIsaUVBQVksQ0FBQTtJQUNaLHVFQUFlLENBQUE7QUFDbkIsQ0FBQyxFQUpXLGFBQWEsS0FBYixhQUFhLFFBSXhCO0FBRUQsTUFBTSxDQUFDLE1BQU0sUUFBUSxHQUFHLHFCQUFxQixDQUFDO0FBQzlDLE1BQU0sQ0FBQyxNQUFNLE1BQU0sR0FBRyxtQkFBbUIsQ0FBQztBQUMxQyxNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUcsbUJBQW1CLENBQUM7QUFDMUMsTUFBTSxDQUFDLE1BQU0sTUFBTSxHQUFHLGNBQWMsQ0FBQztBQUVyQyxNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUcsQ0FBQyxPQUFPLEVBQUUsV0FBVyxFQUFFLFdBQVcsRUFBRSxXQUFXLEVBQUUsUUFBUSxFQUFFLFVBQVUsQ0FBQyxDQUFDO0FBRTdGLE1BQU0sVUFBVSxJQUFJLENBQUMsRUFBTSxFQUFFLEdBQVcsRUFBRSxHQUFHLElBQXlCO0lBQ2xFLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEdBQUcsR0FBRyxFQUFFLElBQUksSUFBSSxFQUFFLENBQUMsa0JBQWtCLENBQUMsT0FBTyxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDO0FBQ3hGLENBQUM7QUFFRCxNQUFNLFVBQVUsWUFBWSxDQUFDLEVBQU0sRUFBRSxRQUFnQjtJQUNqRCxJQUFJLEVBQUUsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDNUIsT0FBTztLQUNWO0lBRUQsSUFBSSxLQUFLLEdBQUcsQ0FBQyxDQUFDO0lBQ2QsSUFBSSxFQUFFLENBQUMsVUFBVSxDQUFDLGNBQWMsRUFB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\",\"filename\":\"/lib/util.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":13.25,\"server\":\"pserv-9\",\"moduleSequenceNumber\":94042,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"purchaseTor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"purchaseProgram\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"connect\",\"cost\":2},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.stanek.charge(ns.args[0], ns.args[1]);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hhcmdlLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL3N0YW5lay9jaGFyZ2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUM5QixPQUFPLElBQUksRUFBRTtRQUNULE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7S0FDakQ7QUFDTCxDQUFDIn0=\",\"filename\":\"/lib/stanek/charge.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/stanek/charge.js\",\"url\":\"blob:file:///1ab1a0b7-63e8-4f03-88a4-224a8dfbae31\",\"moduleSequenceNumber\":99911}],\"dependents\":[],\"ramUsage\":2,\"server\":\"pserv-9\",\"moduleSequenceNumber\":99911,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.charge\",\"cost\":0.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"suppression\":0,\"activeSuppressionThreads\":[],\"suppressionIntervalID\":null,\"suppressionLastUpdateTime\":0}},\"pserv-10\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-10\",\"httpPortOpen\":false,\"ip\":\"65.7.8.6\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":252,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"script\\\":\\\"/lib/exec/grow.js\\\",\\\"host\\\":\\\"pserv-10\\\",\\\"numThreads\\\":144,\\\"target\\\":\\\"phantasy\\\",\\\"hackLevelTiming\\\":153.19873646097005,\\\"hackLevelEffect\\\":204,\\\"batchId\\\":26,\\\"offset\\\":42400,\\\"operationTime\\\":142114,\\\"finish\\\":184514,\\\"realTimeStart\\\":1647907321842,\\\"uid\\\":\\\"026-2G-pserv-10\\\",\\\"writeFile\\\":\\\"\\\"}\"],\"dataMap\":{},\"filename\":\"/lib/exec/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":28.409999999999936,\"pid\":1364,\"ramUsage\":1.75,\"server\":\"pserv-10\",\"threads\":144,\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///06a962d6-c4b7-4af1-8d66-935bc082e4e4\",\"moduleSequenceNumber\":94059}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.grow(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLElBQUksR0FBdUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFFbkUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDdkIsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7UUFDeEMsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7S0FDM0MsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyJ9\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///06a962d6-c4b7-4af1-8d66-935bc082e4e4\",\"moduleSequenceNumber\":94059}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-10\",\"moduleSequenceNumber\":94059,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.weaken(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxJQUFJLEdBQXVCLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO0lBRW5FLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFO1FBQ3pCLGtCQUFrQixFQUFFLElBQUksQ0FBQyxlQUFlO1FBQ3hDLGtCQUFrQixFQUFFLElBQUksQ0FBQyxlQUFlO0tBQzNDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///3336e771-0f5d-49ad-804b-518b5731f2b8\",\"moduleSequenceNumber\":94081}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-10\",\"moduleSequenceNumber\":94081,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.hack(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLElBQUksR0FBdUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFFbkUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDdkIsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7UUFDeEMsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7S0FDM0MsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyJ9\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///098dba56-4be6-40cb-aa74-b0068a06cb22\",\"moduleSequenceNumber\":96342}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-10\",\"moduleSequenceNumber\":96342,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export var ReservedPorts;\\r\\n(function (ReservedPorts) {\\r\\n    ReservedPorts[ReservedPorts[\\\"HACKING_INFO\\\"] = 1] = \\\"HACKING_INFO\\\";\\r\\n    ReservedPorts[ReservedPorts[\\\"HACKNET_INFO\\\"] = 2] = \\\"HACKNET_INFO\\\";\\r\\n    ReservedPorts[ReservedPorts[\\\"HACK_WRITE_INFO\\\"] = 3] = \\\"HACK_WRITE_INFO\\\";\\r\\n})(ReservedPorts || (ReservedPorts = {}));\\r\\nexport const WEAKENJS = \\\"/lib/exec/weaken.js\\\";\\r\\nexport const GROWJS = \\\"/lib/exec/grow.js\\\";\\r\\nexport const HACKJS = \\\"/lib/exec/hack.js\\\";\\r\\nexport const UTILJS = \\\"/lib/util.js\\\";\\r\\nexport const CITIES = [\\\"Aevum\\\", \\\"Chongqing\\\", \\\"Sector-12\\\", \\\"New Tokyo\\\", \\\"Ishima\\\", \\\"Volhaven\\\"];\\r\\nexport function llog(ns, str, ...args) {\\r\\n    ns.print(ns.sprintf(\\\"%8s \\\" + str, new Date().toLocaleTimeString(\\\"it-IT\\\"), ...args));\\r\\n}\\r\\nexport function softenServer(ns, hostname) {\\r\\n    if (ns.hasRootAccess(hostname)) {\\r\\n        return;\\r\\n    }\\r\\n    let ports = 0;\\r\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n        ns.brutessh(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n        ns.ftpcrack(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n        ns.httpworm(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n        ns.relaysmtp(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n        ns.sqlinject(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ports >= ns.getServerNumPortsRequired(hostname)) {\\r\\n        ns.nuke(hostname);\\r\\n    }\\r\\n}\\r\\nexport function serverIsHackable(ns, hostname) {\\r\\n    return ns.hasRootAccess(hostname) && ns.getHackingLevel() >= ns.getServerRequiredHackingLevel(hostname);\\r\\n}\\r\\nexport function canExecuteOnServer(ns, hostname) {\\r\\n    return ns.hasRootAccess(hostname) && ns.getServerMaxRam(hostname) > 0;\\r\\n}\\r\\nexport function mapHosts(ns, hosts = {}, parents = [], current = \\\"home\\\") {\\r\\n    const newParents = parents.concat(current);\\r\\n    hosts[current] = newParents;\\r\\n    const children = ns.scan(current).filter((element) => !parents.includes(element));\\r\\n    for (const child of children) {\\r\\n        mapHosts(ns, hosts, newParents, child);\\r\\n    }\\r\\n    return hosts;\\r\\n}\\r\\nexport function allHosts(ns) {\\r\\n    return Object.keys(mapHosts(ns));\\r\\n}\\r\\nexport function doProgramBuys(ns) {\\r\\n    const player = ns.getPlayer();\\r\\n    if (!player.tor && player.money > 200e3)\\r\\n        ns.purchaseTor();\\r\\n    if (!ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\") && player.money > 500e3)\\r\\n        ns.purchaseProgram(\\\"BruteSSH.exe\\\");\\r\\n    if (!ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\") && player.money > 1500e3)\\r\\n        ns.purchaseProgram(\\\"FTPCrack.exe\\\");\\r\\n    if (!ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\") && player.money > 5e6)\\r\\n        ns.purchaseProgram(\\\"relaySMTP.exe\\\");\\r\\n    if (!ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\") && player.money > 30e6)\\r\\n        ns.purchaseProgram(\\\"HTTPWorm.exe\\\");\\r\\n    if (!ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\") && player.money > 250e6)\\r\\n        ns.purchaseProgram(\\\"SQLInject.exe\\\");\\r\\n}\\r\\nexport function doBuyAndSoftenAll(ns) {\\r\\n    doProgramBuys(ns);\\r\\n    for (const hostname of allHosts(ns)) {\\r\\n        softenServer(ns, hostname);\\r\\n    }\\r\\n}\\r\\nexport function stFormat(ns, ms, showms = false, showfull = false) {\\r\\n    let timeLeft = ms;\\r\\n    const hours = Math.floor(ms / (1000 * 60 * 60));\\r\\n    timeLeft -= hours * (1000 * 60 * 60);\\r\\n    const minutes = Math.floor(timeLeft / (1000 * 60));\\r\\n    timeLeft -= minutes * (1000 * 60);\\r\\n    const seconds = Math.floor(timeLeft / 1000);\\r\\n    timeLeft -= seconds * 1000;\\r\\n    const milliseconds = timeLeft;\\r\\n    if (showms) {\\r\\n        if (hours > 0 || showfull)\\r\\n            return ns.sprintf(\\\"%02d:%02d:%02d.%03d\\\", hours, minutes, seconds, milliseconds);\\r\\n        if (minutes > 0)\\r\\n            return ns.sprintf(\\\"%02d:%02d.%03d\\\", minutes, seconds, milliseconds);\\r\\n        return ns.sprintf(\\\"%02d.%03d\\\", seconds, milliseconds);\\r\\n    }\\r\\n    else {\\r\\n        if (hours > 0 || showfull)\\r\\n            return ns.sprintf(\\\"%02d:%02d:%02d\\\", hours, minutes, seconds);\\r\\n        if (minutes > 0)\\r\\n            return ns.sprintf(\\\"%02d:%02d\\\", minutes, seconds);\\r\\n        return ns.sprintf(\\\"%02d\\\", seconds);\\r\\n    }\\r\\n}\\r\\nexport function stdFormat(ns, offset = 0, showms = false) {\\r\\n    const date = new Date(new Date().getTime() + offset);\\r\\n    if (showms) {\\r\\n        const ms = ns.sprintf(\\\"%03d\\\", date.getUTCMilliseconds());\\r\\n        return date.toLocaleTimeString(\\\"it-IT\\\") + \\\".\\\" + ms;\\r\\n    }\\r\\n    else {\\r\\n        return date.toLocaleTimeString(\\\"it-IT\\\");\\r\\n    }\\r\\n}\\r\\nexport async function doBackdoors(ns) {\\r\\n    //const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"w0r1d_d43m0n\\\", \\\"b-and-a\\\", \\\"ecorp\\\", \\\"fulcrumassets\\\", \\\"fulcrumtech\\\"];\\r\\n    //const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"omnitek\\\", \\\"kuai-gong\\\", \\\"megacorp\\\"];\\r\\n    const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"w0r1d_d43m0n\\\"];\\r\\n    const hosts = mapHosts(ns);\\r\\n    for (const [hostName, trail] of Object.entries(hosts)) {\\r\\n        const server = ns.getServer(hostName);\\r\\n        if (!targetHosts.includes(hostName) ||\\r\\n            server.backdoorInstalled ||\\r\\n            server.requiredHackingSkill > ns.getHackingLevel() ||\\r\\n            !server.hasAdminRights)\\r\\n            continue;\\r\\n        ns.print(hostName);\\r\\n        for (const hostHopName of trail) {\\r\\n            ns.connect(hostHopName);\\r\\n        }\\r\\n        await ns.installBackdoor();\\r\\n        ns.connect(\\\"home\\\");\\r\\n    }\\r\\n}\\r\\nexport function cleanLogs(ns) {\\r\\n    ns.disableLog(\\\"disableLog\\\");\\r\\n    ns.disableLog(\\\"ALL\\\");\\r\\n    // ns.disableLog(\\\"sleep\\\")\\r\\n    // ns.disableLog(\\\"exec\\\")\\r\\n    // ns.disableLog(\\\"getServerMaxRam\\\")\\r\\n    // ns.disableLog(\\\"getServerSecurityLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerMinSecurityLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerMaxMoney\\\")\\r\\n    // ns.disableLog(\\\"getHackingLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerRequiredHackingLevel\\\")\\r\\n    // ns.disableLog(\\\"scan\\\")\\r\\n    // ns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n    // ns.disableLog(\\\"getServerUsedRam\\\")\\r\\n}\\r\\nexport const ALL_FACTIONS = [\\r\\n    \\\"Illuminati\\\",\\r\\n    \\\"Daedalus\\\",\\r\\n    \\\"The Covenant\\\",\\r\\n    \\\"ECorp\\\",\\r\\n    \\\"MegaCorp\\\",\\r\\n    \\\"Bachman & Associates\\\",\\r\\n    \\\"Blade Industries\\\",\\r\\n    \\\"NWO\\\",\\r\\n    \\\"Clarke Incorporated\\\",\\r\\n    \\\"OmniTek Incorporated\\\",\\r\\n    \\\"Four Sigma\\\",\\r\\n    \\\"KuaiGong International\\\",\\r\\n    \\\"Fulcrum Secret Technologies\\\",\\r\\n    \\\"BitRunners\\\",\\r\\n    \\\"The Black Hand\\\",\\r\\n    \\\"NiteSec\\\",\\r\\n    \\\"Aevum\\\",\\r\\n    \\\"Chongqing\\\",\\r\\n    \\\"Ishima\\\",\\r\\n    \\\"New Tokyo\\\",\\r\\n    \\\"Sector-12\\\",\\r\\n    \\\"Volhaven\\\",\\r\\n    \\\"Speakers for the Dead\\\",\\r\\n    \\\"The Dark Army\\\",\\r\\n    \\\"The Syndicate\\\",\\r\\n    \\\"Silhouette\\\",\\r\\n    \\\"Tetrads\\\",\\r\\n    \\\"Slum Snakes\\\",\\r\\n    \\\"Netburners\\\",\\r\\n    \\\"Tian Di Hui\\\",\\r\\n    \\\"CyberSec\\\",\\r\\n    \\\"Bladeburners\\\",\\r\\n    \\\"Church of the Machine God\\\",\\r\\n];\\r\\nexport async function writeOut(ns, data, startTime, endTime, result, startSec, startCash) {\\r\\n    if (data.writeFile !== \\\"\\\") {\\r\\n        const outstr = ns.sprintf(\\\"%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\", data.target, data.uid, data.batchId, data.realTimeStart + data.offset, data.realTimeStart + data.finish, data.operationTime, startTime, endTime, endTime - startTime, startTime - (data.realTimeStart + data.offset), endTime - (data.realTimeStart + data.finish), endTime - startTime - data.operationTime, result, startSec.toFixed(2), ns.getServerSecurityLevel(data.target).toFixed(2), ns.nFormat(startCash, \\\"($0.000a)\\\"), ns.nFormat(ns.getServerMoneyAvailable(data.target), \\\"($0.000a)\\\"));\\r\\n        while (!await ns.tryWritePort(ReservedPorts.HACK_WRITE_INFO, [data.writeFile, outstr]))\\r\\n            ;\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi91dGlsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLE1BQU0sQ0FBTixJQUFZLGFBSVg7QUFKRCxXQUFZLGFBQWE7SUFDckIsaUVBQWdCLENBQUE7SUFDaEIsaUVBQVksQ0FBQTtJQUNaLHVFQUFlLENBQUE7QUFDbkIsQ0FBQyxFQUpXLGFBQWEsS0FBYixhQUFhLFFBSXhCO0FBRUQsTUFBTSxDQUFDLE1BQU0sUUFBUSxHQUFHLHFCQUFxQixDQUFDO0FBQzlDLE1BQU0sQ0FBQyxNQUFNLE1BQU0sR0FBRyxtQkFBbUIsQ0FBQztBQUMxQyxNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUcsbUJBQW1CLENBQUM7QUFDMUMsTUFBTSxDQUFDLE1BQU0sTUFBTSxHQUFHLGNBQWMsQ0FBQztBQUVyQyxNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUcsQ0FBQyxPQUFPLEVBQUUsV0FBVyxFQUFFLFdBQVcsRUFBRSxXQUFXLEVBQUUsUUFBUSxFQUFFLFVBQVUsQ0FBQyxDQUFDO0FBRTdGLE1BQU0sVUFBVSxJQUFJLENBQUMsRUFBTSxFQUFFLEdBQVcsRUFBRSxHQUFHLElBQXlCO0lBQ2xFLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEdBQUcsR0FBRyxFQUFFLElBQUksSUFBSSxFQUFFLENBQUMsa0JBQWtCLENBQUMsT0FBTyxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDO0FBQ3hGLENBQUM7QUFFRCxNQUFNLFVBQVUsWUFBWSxDQUFDLEVBQU0sRUFBRSxRQUFnQjtJQUNqRCxJQUFJLEVBQUUsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDNUIsT0FBTztLQUNWO0lBRUQsSUFBSSxLQUFLLEdBQUcsQ0FBQyxDQUFDO0lBQ2QsSUFBSSxFQUFFLENBQUMsVUFBVSxDQUFDLGNBQWMsRUFB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\",\"filename\":\"/lib/util.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":13.25,\"server\":\"pserv-10\",\"moduleSequenceNumber\":94050,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"purchaseTor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"purchaseProgram\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"connect\",\"cost\":2},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.stanek.charge(ns.args[0], ns.args[1]);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hhcmdlLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL3N0YW5lay9jaGFyZ2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUM5QixPQUFPLElBQUksRUFBRTtRQUNULE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7S0FDakQ7QUFDTCxDQUFDIn0=\",\"filename\":\"/lib/stanek/charge.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/stanek/charge.js\",\"url\":\"blob:file:///c5757b58-cddf-4f50-9854-cde349a247da\",\"moduleSequenceNumber\":99912}],\"dependents\":[],\"ramUsage\":2,\"server\":\"pserv-10\",\"moduleSequenceNumber\":99912,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.charge\",\"cost\":0.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"suppression\":0,\"activeSuppressionThreads\":[],\"suppressionIntervalID\":null,\"suppressionLastUpdateTime\":0}},\"pserv-11\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-11\",\"httpPortOpen\":false,\"ip\":\"28.4.6.1\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.grow(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLElBQUksR0FBdUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFFbkUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDdkIsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7UUFDeEMsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7S0FDM0MsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyJ9\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///80f5ec25-1ae3-49c4-877e-18782e878614\",\"moduleSequenceNumber\":96344}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-11\",\"moduleSequenceNumber\":96344,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.weaken(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxJQUFJLEdBQXVCLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO0lBRW5FLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFO1FBQ3pCLGtCQUFrQixFQUFFLElBQUksQ0FBQyxlQUFlO1FBQ3hDLGtCQUFrQixFQUFFLElBQUksQ0FBQyxlQUFlO0tBQzNDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///70684db5-8e39-4db6-909d-1885fcc5d985\",\"moduleSequenceNumber\":94080}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-11\",\"moduleSequenceNumber\":94080,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.hack(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLElBQUksR0FBdUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFFbkUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDdkIsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7UUFDeEMsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7S0FDM0MsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyJ9\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-11\",\"moduleSequenceNumber\":94056,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export var ReservedPorts;\\r\\n(function (ReservedPorts) {\\r\\n    ReservedPorts[ReservedPorts[\\\"HACKING_INFO\\\"] = 1] = \\\"HACKING_INFO\\\";\\r\\n    ReservedPorts[ReservedPorts[\\\"HACKNET_INFO\\\"] = 2] = \\\"HACKNET_INFO\\\";\\r\\n    ReservedPorts[ReservedPorts[\\\"HACK_WRITE_INFO\\\"] = 3] = \\\"HACK_WRITE_INFO\\\";\\r\\n})(ReservedPorts || (ReservedPorts = {}));\\r\\nexport const WEAKENJS = \\\"/lib/exec/weaken.js\\\";\\r\\nexport const GROWJS = \\\"/lib/exec/grow.js\\\";\\r\\nexport const HACKJS = \\\"/lib/exec/hack.js\\\";\\r\\nexport const UTILJS = \\\"/lib/util.js\\\";\\r\\nexport const CITIES = [\\\"Aevum\\\", \\\"Chongqing\\\", \\\"Sector-12\\\", \\\"New Tokyo\\\", \\\"Ishima\\\", \\\"Volhaven\\\"];\\r\\nexport function llog(ns, str, ...args) {\\r\\n    ns.print(ns.sprintf(\\\"%8s \\\" + str, new Date().toLocaleTimeString(\\\"it-IT\\\"), ...args));\\r\\n}\\r\\nexport function softenServer(ns, hostname) {\\r\\n    if (ns.hasRootAccess(hostname)) {\\r\\n        return;\\r\\n    }\\r\\n    let ports = 0;\\r\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n        ns.brutessh(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n        ns.ftpcrack(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n        ns.httpworm(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n        ns.relaysmtp(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n        ns.sqlinject(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ports >= ns.getServerNumPortsRequired(hostname)) {\\r\\n        ns.nuke(hostname);\\r\\n    }\\r\\n}\\r\\nexport function serverIsHackable(ns, hostname) {\\r\\n    return ns.hasRootAccess(hostname) && ns.getHackingLevel() >= ns.getServerRequiredHackingLevel(hostname);\\r\\n}\\r\\nexport function canExecuteOnServer(ns, hostname) {\\r\\n    return ns.hasRootAccess(hostname) && ns.getServerMaxRam(hostname) > 0;\\r\\n}\\r\\nexport function mapHosts(ns, hosts = {}, parents = [], current = \\\"home\\\") {\\r\\n    const newParents = parents.concat(current);\\r\\n    hosts[current] = newParents;\\r\\n    const children = ns.scan(current).filter((element) => !parents.includes(element));\\r\\n    for (const child of children) {\\r\\n        mapHosts(ns, hosts, newParents, child);\\r\\n    }\\r\\n    return hosts;\\r\\n}\\r\\nexport function allHosts(ns) {\\r\\n    return Object.keys(mapHosts(ns));\\r\\n}\\r\\nexport function doProgramBuys(ns) {\\r\\n    const player = ns.getPlayer();\\r\\n    if (!player.tor && player.money > 200e3)\\r\\n        ns.purchaseTor();\\r\\n    if (!ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\") && player.money > 500e3)\\r\\n        ns.purchaseProgram(\\\"BruteSSH.exe\\\");\\r\\n    if (!ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\") && player.money > 1500e3)\\r\\n        ns.purchaseProgram(\\\"FTPCrack.exe\\\");\\r\\n    if (!ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\") && player.money > 5e6)\\r\\n        ns.purchaseProgram(\\\"relaySMTP.exe\\\");\\r\\n    if (!ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\") && player.money > 30e6)\\r\\n        ns.purchaseProgram(\\\"HTTPWorm.exe\\\");\\r\\n    if (!ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\") && player.money > 250e6)\\r\\n        ns.purchaseProgram(\\\"SQLInject.exe\\\");\\r\\n}\\r\\nexport function doBuyAndSoftenAll(ns) {\\r\\n    doProgramBuys(ns);\\r\\n    for (const hostname of allHosts(ns)) {\\r\\n        softenServer(ns, hostname);\\r\\n    }\\r\\n}\\r\\nexport function stFormat(ns, ms, showms = false, showfull = false) {\\r\\n    let timeLeft = ms;\\r\\n    const hours = Math.floor(ms / (1000 * 60 * 60));\\r\\n    timeLeft -= hours * (1000 * 60 * 60);\\r\\n    const minutes = Math.floor(timeLeft / (1000 * 60));\\r\\n    timeLeft -= minutes * (1000 * 60);\\r\\n    const seconds = Math.floor(timeLeft / 1000);\\r\\n    timeLeft -= seconds * 1000;\\r\\n    const milliseconds = timeLeft;\\r\\n    if (showms) {\\r\\n        if (hours > 0 || showfull)\\r\\n            return ns.sprintf(\\\"%02d:%02d:%02d.%03d\\\", hours, minutes, seconds, milliseconds);\\r\\n        if (minutes > 0)\\r\\n            return ns.sprintf(\\\"%02d:%02d.%03d\\\", minutes, seconds, milliseconds);\\r\\n        return ns.sprintf(\\\"%02d.%03d\\\", seconds, milliseconds);\\r\\n    }\\r\\n    else {\\r\\n        if (hours > 0 || showfull)\\r\\n            return ns.sprintf(\\\"%02d:%02d:%02d\\\", hours, minutes, seconds);\\r\\n        if (minutes > 0)\\r\\n            return ns.sprintf(\\\"%02d:%02d\\\", minutes, seconds);\\r\\n        return ns.sprintf(\\\"%02d\\\", seconds);\\r\\n    }\\r\\n}\\r\\nexport function stdFormat(ns, offset = 0, showms = false) {\\r\\n    const date = new Date(new Date().getTime() + offset);\\r\\n    if (showms) {\\r\\n        const ms = ns.sprintf(\\\"%03d\\\", date.getUTCMilliseconds());\\r\\n        return date.toLocaleTimeString(\\\"it-IT\\\") + \\\".\\\" + ms;\\r\\n    }\\r\\n    else {\\r\\n        return date.toLocaleTimeString(\\\"it-IT\\\");\\r\\n    }\\r\\n}\\r\\nexport async function doBackdoors(ns) {\\r\\n    //const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"w0r1d_d43m0n\\\", \\\"b-and-a\\\", \\\"ecorp\\\", \\\"fulcrumassets\\\", \\\"fulcrumtech\\\"];\\r\\n    //const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"omnitek\\\", \\\"kuai-gong\\\", \\\"megacorp\\\"];\\r\\n    const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"w0r1d_d43m0n\\\"];\\r\\n    const hosts = mapHosts(ns);\\r\\n    for (const [hostName, trail] of Object.entries(hosts)) {\\r\\n        const server = ns.getServer(hostName);\\r\\n        if (!targetHosts.includes(hostName) ||\\r\\n            server.backdoorInstalled ||\\r\\n            server.requiredHackingSkill > ns.getHackingLevel() ||\\r\\n            !server.hasAdminRights)\\r\\n            continue;\\r\\n        ns.print(hostName);\\r\\n        for (const hostHopName of trail) {\\r\\n            ns.connect(hostHopName);\\r\\n        }\\r\\n        await ns.installBackdoor();\\r\\n        ns.connect(\\\"home\\\");\\r\\n    }\\r\\n}\\r\\nexport function cleanLogs(ns) {\\r\\n    ns.disableLog(\\\"disableLog\\\");\\r\\n    ns.disableLog(\\\"ALL\\\");\\r\\n    // ns.disableLog(\\\"sleep\\\")\\r\\n    // ns.disableLog(\\\"exec\\\")\\r\\n    // ns.disableLog(\\\"getServerMaxRam\\\")\\r\\n    // ns.disableLog(\\\"getServerSecurityLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerMinSecurityLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerMaxMoney\\\")\\r\\n    // ns.disableLog(\\\"getHackingLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerRequiredHackingLevel\\\")\\r\\n    // ns.disableLog(\\\"scan\\\")\\r\\n    // ns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n    // ns.disableLog(\\\"getServerUsedRam\\\")\\r\\n}\\r\\nexport const ALL_FACTIONS = [\\r\\n    \\\"Illuminati\\\",\\r\\n    \\\"Daedalus\\\",\\r\\n    \\\"The Covenant\\\",\\r\\n    \\\"ECorp\\\",\\r\\n    \\\"MegaCorp\\\",\\r\\n    \\\"Bachman & Associates\\\",\\r\\n    \\\"Blade Industries\\\",\\r\\n    \\\"NWO\\\",\\r\\n    \\\"Clarke Incorporated\\\",\\r\\n    \\\"OmniTek Incorporated\\\",\\r\\n    \\\"Four Sigma\\\",\\r\\n    \\\"KuaiGong International\\\",\\r\\n    \\\"Fulcrum Secret Technologies\\\",\\r\\n    \\\"BitRunners\\\",\\r\\n    \\\"The Black Hand\\\",\\r\\n    \\\"NiteSec\\\",\\r\\n    \\\"Aevum\\\",\\r\\n    \\\"Chongqing\\\",\\r\\n    \\\"Ishima\\\",\\r\\n    \\\"New Tokyo\\\",\\r\\n    \\\"Sector-12\\\",\\r\\n    \\\"Volhaven\\\",\\r\\n    \\\"Speakers for the Dead\\\",\\r\\n    \\\"The Dark Army\\\",\\r\\n    \\\"The Syndicate\\\",\\r\\n    \\\"Silhouette\\\",\\r\\n    \\\"Tetrads\\\",\\r\\n    \\\"Slum Snakes\\\",\\r\\n    \\\"Netburners\\\",\\r\\n    \\\"Tian Di Hui\\\",\\r\\n    \\\"CyberSec\\\",\\r\\n    \\\"Bladeburners\\\",\\r\\n    \\\"Church of the Machine God\\\",\\r\\n];\\r\\nexport async function writeOut(ns, data, startTime, endTime, result, startSec, startCash) {\\r\\n    if (data.writeFile !== \\\"\\\") {\\r\\n        const outstr = ns.sprintf(\\\"%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\", data.target, data.uid, data.batchId, data.realTimeStart + data.offset, data.realTimeStart + data.finish, data.operationTime, startTime, endTime, endTime - startTime, startTime - (data.realTimeStart + data.offset), endTime - (data.realTimeStart + data.finish), endTime - startTime - data.operationTime, result, startSec.toFixed(2), ns.getServerSecurityLevel(data.target).toFixed(2), ns.nFormat(startCash, \\\"($0.000a)\\\"), ns.nFormat(ns.getServerMoneyAvailable(data.target), \\\"($0.000a)\\\"));\\r\\n        while (!await ns.tryWritePort(ReservedPorts.HACK_WRITE_INFO, [data.writeFile, outstr]))\\r\\n            ;\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi91dGlsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLE1BQU0sQ0FBTixJQUFZLGFBSVg7QUFKRCxXQUFZLGFBQWE7SUFDckIsaUVBQWdCLENBQUE7SUFDaEIsaUVBQVksQ0FBQTtJQUNaLHVFQUFlLENBQUE7QUFDbkIsQ0FBQyxFQUpXLGFBQWEsS0FBYixhQUFhLFFBSXhCO0FBRUQsTUFBTSxDQUFDLE1BQU0sUUFBUSxHQUFHLHFCQUFxQixDQUFDO0FBQzlDLE1BQU0sQ0FBQyxNQUFNLE1BQU0sR0FBRyxtQkFBbUIsQ0FBQztBQUMxQyxNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUcsbUJBQW1CLENBQUM7QUFDMUMsTUFBTSxDQUFDLE1BQU0sTUFBTSxHQUFHLGNBQWMsQ0FBQztBQUVyQyxNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUcsQ0FBQyxPQUFPLEVBQUUsV0FBVyxFQUFFLFdBQVcsRUFBRSxXQUFXLEVBQUUsUUFBUSxFQUFFLFVBQVUsQ0FBQyxDQUFDO0FBRTdGLE1BQU0sVUFBVSxJQUFJLENBQUMsRUFBTSxFQUFFLEdBQVcsRUFBRSxHQUFHLElBQXlCO0lBQ2xFLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEdBQUcsR0FBRyxFQUFFLElBQUksSUFBSSxFQUFFLENBQUMsa0JBQWtCLENBQUMsT0FBTyxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDO0FBQ3hGLENBQUM7QUFFRCxNQUFNLFVBQVUsWUFBWSxDQUFDLEVBQU0sRUFBRSxRQUFnQjtJQUNqRCxJQUFJLEVBQUUsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDNUIsT0FBTztLQUNWO0lBRUQsSUFBSSxLQUFLLEdBQUcsQ0FBQyxDQUFDO0lBQ2QsSUFBSSxFQUFFLENBQUMsVUFBVSxDQUFDLGNBQWMsRUFB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\",\"filename\":\"/lib/util.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":13.25,\"server\":\"pserv-11\",\"moduleSequenceNumber\":94058,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"purchaseTor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"purchaseProgram\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"connect\",\"cost\":2},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.stanek.charge(ns.args[0], ns.args[1]);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hhcmdlLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL3N0YW5lay9jaGFyZ2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUM5QixPQUFPLElBQUksRUFBRTtRQUNULE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7S0FDakQ7QUFDTCxDQUFDIn0=\",\"filename\":\"/lib/stanek/charge.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/stanek/charge.js\",\"url\":\"blob:file:///96ee373e-c9e9-451f-8969-8cc82b096abd\",\"moduleSequenceNumber\":99913}],\"dependents\":[],\"ramUsage\":2,\"server\":\"pserv-11\",\"moduleSequenceNumber\":99913,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.charge\",\"cost\":0.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"suppression\":0,\"activeSuppressionThreads\":[],\"suppressionIntervalID\":null,\"suppressionLastUpdateTime\":0}},\"pserv-12\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-12\",\"httpPortOpen\":false,\"ip\":\"12.1.0.6\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":505,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"script\\\":\\\"/lib/exec/grow.js\\\",\\\"host\\\":\\\"pserv-12\\\",\\\"numThreads\\\":144,\\\"target\\\":\\\"phantasy\\\",\\\"hackLevelTiming\\\":153.19873646097005,\\\"hackLevelEffect\\\":204,\\\"batchId\\\":8,\\\"offset\\\":13600,\\\"operationTime\\\":142114,\\\"finish\\\":155714,\\\"realTimeStart\\\":1647907321842,\\\"uid\\\":\\\"008-2G-pserv-12\\\",\\\"writeFile\\\":\\\"\\\"}\"],\"dataMap\":{},\"filename\":\"/lib/exec/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":57.21000000000027,\"pid\":1283,\"ramUsage\":1.75,\"server\":\"pserv-12\",\"threads\":144,\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///041ae150-4859-4c4b-b8fc-90523781ec01\",\"moduleSequenceNumber\":100722}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"script\\\":\\\"/lib/exec/hack.js\\\",\\\"host\\\":\\\"pserv-12\\\",\\\"numThreads\\\":120,\\\"target\\\":\\\"phantasy\\\",\\\"hackLevelTiming\\\":13.499605144053142,\\\"hackLevelEffect\\\":204,\\\"batchId\\\":9,\\\"offset\\\":14400,\\\"operationTime\\\":142113,\\\"finish\\\":156513,\\\"realTimeStart\\\":1647907321842,\\\"uid\\\":\\\"009-0H-pserv-12\\\",\\\"writeFile\\\":\\\"\\\"}\"],\"dataMap\":{},\"filename\":\"/lib/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":56.41000000000026,\"pid\":1285,\"ramUsage\":1.7,\"server\":\"pserv-12\",\"threads\":120,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"script\\\":\\\"/lib/exec/weaken.js\\\",\\\"host\\\":\\\"pserv-12\\\",\\\"numThreads\\\":9,\\\"target\\\":\\\"phantasy\\\",\\\"hackLevelTiming\\\":203.99842057621257,\\\"hackLevelEffect\\\":204,\\\"batchId\\\":11,\\\"offset\\\":18800,\\\"operationTime\\\":113691,\\\"finish\\\":132491,\\\"realTimeStart\\\":1647907321842,\\\"uid\\\":\\\"011-3WG-pserv-12\\\",\\\"writeFile\\\":\\\"\\\"}\"],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":52.0100000000002,\"pid\":1297,\"ramUsage\":1.75,\"server\":\"pserv-12\",\"threads\":9,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///d26c6e44-f5d1-46ef-a319-cc2dfc89571d\",\"moduleSequenceNumber\":100724}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"script\\\":\\\"/lib/exec/weaken.js\\\",\\\"host\\\":\\\"pserv-12\\\",\\\"numThreads\\\":5,\\\"target\\\":\\\"phantasy\\\",\\\"hackLevelTiming\\\":203.99842057621257,\\\"hackLevelEffect\\\":204,\\\"batchId\\\":12,\\\"offset\\\":19600,\\\"operationTime\\\":113691,\\\"finish\\\":133291,\\\"realTimeStart\\\":1647907321842,\\\"uid\\\":\\\"012-1WH-pserv-12\\\",\\\"writeFile\\\":\\\"\\\"}\"],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":51.210000000000186,\"pid\":1300,\"ramUsage\":1.75,\"server\":\"pserv-12\",\"threads\":5,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///d26c6e44-f5d1-46ef-a319-cc2dfc89571d\",\"moduleSequenceNumber\":100724}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"script\\\":\\\"/lib/exec/weaken.js\\\",\\\"host\\\":\\\"pserv-12\\\",\\\"numThreads\\\":12,\\\"target\\\":\\\"phantasy\\\",\\\"hackLevelTiming\\\":203.99842057621257,\\\"hackLevelEffect\\\":204,\\\"batchId\\\":12,\\\"offset\\\":20400,\\\"operationTime\\\":113691,\\\"finish\\\":134091,\\\"realTimeStart\\\":1647907321842,\\\"uid\\\":\\\"012-3WG-pserv-12\\\",\\\"writeFile\\\":\\\"\\\"}\"],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":50.410000000000174,\"pid\":1302,\"ramUsage\":1.75,\"server\":\"pserv-12\",\"threads\":12,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///d26c6e44-f5d1-46ef-a319-cc2dfc89571d\",\"moduleSequenceNumber\":100724}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"script\\\":\\\"/lib/exec/weaken.js\\\",\\\"host\\\":\\\"pserv-12\\\",\\\"numThreads\\\":2,\\\"target\\\":\\\"phantasy\\\",\\\"hackLevelTiming\\\":203.99842057621257,\\\"hackLevelEffect\\\":204,\\\"batchId\\\":13,\\\"offset\\\":21200,\\\"operationTime\\\":113691,\\\"finish\\\":134891,\\\"realTimeStart\\\":1647907321842,\\\"uid\\\":\\\"013-1WH-pserv-12\\\",\\\"writeFile\\\":\\\"\\\"}\"],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":49.61000000000017,\"pid\":1305,\"ramUsage\":1.75,\"server\":\"pserv-12\",\"threads\":2,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///d26c6e44-f5d1-46ef-a319-cc2dfc89571d\",\"moduleSequenceNumber\":100724}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.stanek.charge(ns.args[0], ns.args[1]);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hhcmdlLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL3N0YW5lay9jaGFyZ2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUM5QixPQUFPLElBQUksRUFBRTtRQUNULE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7S0FDakQ7QUFDTCxDQUFDIn0=\",\"filename\":\"/lib/stanek/charge.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/stanek/charge.js\",\"url\":\"blob:file:///34a3a61b-93a5-4e81-bb1d-76dfaac76eab\",\"moduleSequenceNumber\":99914}],\"dependents\":[],\"ramUsage\":2,\"server\":\"pserv-12\",\"moduleSequenceNumber\":99914,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.charge\",\"cost\":0.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.grow(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLElBQUksR0FBdUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFFbkUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDdkIsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7UUFDeEMsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7S0FDM0MsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyJ9\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///041ae150-4859-4c4b-b8fc-90523781ec01\",\"moduleSequenceNumber\":100722}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-12\",\"moduleSequenceNumber\":100722,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.weaken(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxJQUFJLEdBQXVCLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO0lBRW5FLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFO1FBQ3pCLGtCQUFrQixFQUFFLElBQUksQ0FBQyxlQUFlO1FBQ3hDLGtCQUFrQixFQUFFLElBQUksQ0FBQyxlQUFlO0tBQzNDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///d26c6e44-f5d1-46ef-a319-cc2dfc89571d\",\"moduleSequenceNumber\":100724}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-12\",\"moduleSequenceNumber\":100724,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.hack(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLElBQUksR0FBdUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFFbkUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDdkIsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7UUFDeEMsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7S0FDM0MsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyJ9\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///10723b00-cbca-4b8f-84d1-22f37bb5168a\",\"moduleSequenceNumber\":103934}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-12\",\"moduleSequenceNumber\":103934,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export var ReservedPorts;\\r\\n(function (ReservedPorts) {\\r\\n    ReservedPorts[ReservedPorts[\\\"HACKING_INFO\\\"] = 1] = \\\"HACKING_INFO\\\";\\r\\n    ReservedPorts[ReservedPorts[\\\"HACKNET_INFO\\\"] = 2] = \\\"HACKNET_INFO\\\";\\r\\n    ReservedPorts[ReservedPorts[\\\"HACK_WRITE_INFO\\\"] = 3] = \\\"HACK_WRITE_INFO\\\";\\r\\n})(ReservedPorts || (ReservedPorts = {}));\\r\\nexport const WEAKENJS = \\\"/lib/exec/weaken.js\\\";\\r\\nexport const GROWJS = \\\"/lib/exec/grow.js\\\";\\r\\nexport const HACKJS = \\\"/lib/exec/hack.js\\\";\\r\\nexport const UTILJS = \\\"/lib/util.js\\\";\\r\\nexport const CITIES = [\\\"Aevum\\\", \\\"Chongqing\\\", \\\"Sector-12\\\", \\\"New Tokyo\\\", \\\"Ishima\\\", \\\"Volhaven\\\"];\\r\\nexport function llog(ns, str, ...args) {\\r\\n    ns.print(ns.sprintf(\\\"%8s \\\" + str, new Date().toLocaleTimeString(\\\"it-IT\\\"), ...args));\\r\\n}\\r\\nexport function softenServer(ns, hostname) {\\r\\n    if (ns.hasRootAccess(hostname)) {\\r\\n        return;\\r\\n    }\\r\\n    let ports = 0;\\r\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n        ns.brutessh(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n        ns.ftpcrack(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n        ns.httpworm(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n        ns.relaysmtp(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n        ns.sqlinject(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ports >= ns.getServerNumPortsRequired(hostname)) {\\r\\n        ns.nuke(hostname);\\r\\n    }\\r\\n}\\r\\nexport function serverIsHackable(ns, hostname) {\\r\\n    return ns.hasRootAccess(hostname) && ns.getHackingLevel() >= ns.getServerRequiredHackingLevel(hostname);\\r\\n}\\r\\nexport function canExecuteOnServer(ns, hostname) {\\r\\n    return ns.hasRootAccess(hostname) && ns.getServerMaxRam(hostname) > 0;\\r\\n}\\r\\nexport function mapHosts(ns, hosts = {}, parents = [], current = \\\"home\\\") {\\r\\n    const newParents = parents.concat(current);\\r\\n    hosts[current] = newParents;\\r\\n    const children = ns.scan(current).filter((element) => !parents.includes(element));\\r\\n    for (const child of children) {\\r\\n        mapHosts(ns, hosts, newParents, child);\\r\\n    }\\r\\n    return hosts;\\r\\n}\\r\\nexport function allHosts(ns) {\\r\\n    return Object.keys(mapHosts(ns));\\r\\n}\\r\\nexport function doProgramBuys(ns) {\\r\\n    const player = ns.getPlayer();\\r\\n    if (!player.tor && player.money > 200e3)\\r\\n        ns.purchaseTor();\\r\\n    if (!ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\") && player.money > 500e3)\\r\\n        ns.purchaseProgram(\\\"BruteSSH.exe\\\");\\r\\n    if (!ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\") && player.money > 1500e3)\\r\\n        ns.purchaseProgram(\\\"FTPCrack.exe\\\");\\r\\n    if (!ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\") && player.money > 5e6)\\r\\n        ns.purchaseProgram(\\\"relaySMTP.exe\\\");\\r\\n    if (!ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\") && player.money > 30e6)\\r\\n        ns.purchaseProgram(\\\"HTTPWorm.exe\\\");\\r\\n    if (!ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\") && player.money > 250e6)\\r\\n        ns.purchaseProgram(\\\"SQLInject.exe\\\");\\r\\n}\\r\\nexport function doBuyAndSoftenAll(ns) {\\r\\n    doProgramBuys(ns);\\r\\n    for (const hostname of allHosts(ns)) {\\r\\n        softenServer(ns, hostname);\\r\\n    }\\r\\n}\\r\\nexport function stFormat(ns, ms, showms = false, showfull = false) {\\r\\n    let timeLeft = ms;\\r\\n    const hours = Math.floor(ms / (1000 * 60 * 60));\\r\\n    timeLeft -= hours * (1000 * 60 * 60);\\r\\n    const minutes = Math.floor(timeLeft / (1000 * 60));\\r\\n    timeLeft -= minutes * (1000 * 60);\\r\\n    const seconds = Math.floor(timeLeft / 1000);\\r\\n    timeLeft -= seconds * 1000;\\r\\n    const milliseconds = timeLeft;\\r\\n    if (showms) {\\r\\n        if (hours > 0 || showfull)\\r\\n            return ns.sprintf(\\\"%02d:%02d:%02d.%03d\\\", hours, minutes, seconds, milliseconds);\\r\\n        if (minutes > 0)\\r\\n            return ns.sprintf(\\\"%02d:%02d.%03d\\\", minutes, seconds, milliseconds);\\r\\n        return ns.sprintf(\\\"%02d.%03d\\\", seconds, milliseconds);\\r\\n    }\\r\\n    else {\\r\\n        if (hours > 0 || showfull)\\r\\n            return ns.sprintf(\\\"%02d:%02d:%02d\\\", hours, minutes, seconds);\\r\\n        if (minutes > 0)\\r\\n            return ns.sprintf(\\\"%02d:%02d\\\", minutes, seconds);\\r\\n        return ns.sprintf(\\\"%02d\\\", seconds);\\r\\n    }\\r\\n}\\r\\nexport function stdFormat(ns, offset = 0, showms = false) {\\r\\n    const date = new Date(new Date().getTime() + offset);\\r\\n    if (showms) {\\r\\n        const ms = ns.sprintf(\\\"%03d\\\", date.getUTCMilliseconds());\\r\\n        return date.toLocaleTimeString(\\\"it-IT\\\") + \\\".\\\" + ms;\\r\\n    }\\r\\n    else {\\r\\n        return date.toLocaleTimeString(\\\"it-IT\\\");\\r\\n    }\\r\\n}\\r\\nexport async function doBackdoors(ns) {\\r\\n    //const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"w0r1d_d43m0n\\\", \\\"b-and-a\\\", \\\"ecorp\\\", \\\"fulcrumassets\\\", \\\"fulcrumtech\\\"];\\r\\n    //const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"omnitek\\\", \\\"kuai-gong\\\", \\\"megacorp\\\"];\\r\\n    const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"w0r1d_d43m0n\\\"];\\r\\n    const hosts = mapHosts(ns);\\r\\n    for (const [hostName, trail] of Object.entries(hosts)) {\\r\\n        const server = ns.getServer(hostName);\\r\\n        if (!targetHosts.includes(hostName) ||\\r\\n            server.backdoorInstalled ||\\r\\n            server.requiredHackingSkill > ns.getHackingLevel() ||\\r\\n            !server.hasAdminRights)\\r\\n            continue;\\r\\n        ns.print(hostName);\\r\\n        for (const hostHopName of trail) {\\r\\n            ns.connect(hostHopName);\\r\\n        }\\r\\n        await ns.installBackdoor();\\r\\n        ns.connect(\\\"home\\\");\\r\\n    }\\r\\n}\\r\\nexport function cleanLogs(ns) {\\r\\n    ns.disableLog(\\\"disableLog\\\");\\r\\n    ns.disableLog(\\\"ALL\\\");\\r\\n    // ns.disableLog(\\\"sleep\\\")\\r\\n    // ns.disableLog(\\\"exec\\\")\\r\\n    // ns.disableLog(\\\"getServerMaxRam\\\")\\r\\n    // ns.disableLog(\\\"getServerSecurityLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerMinSecurityLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerMaxMoney\\\")\\r\\n    // ns.disableLog(\\\"getHackingLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerRequiredHackingLevel\\\")\\r\\n    // ns.disableLog(\\\"scan\\\")\\r\\n    // ns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n    // ns.disableLog(\\\"getServerUsedRam\\\")\\r\\n}\\r\\nexport const ALL_FACTIONS = [\\r\\n    \\\"Illuminati\\\",\\r\\n    \\\"Daedalus\\\",\\r\\n    \\\"The Covenant\\\",\\r\\n    \\\"ECorp\\\",\\r\\n    \\\"MegaCorp\\\",\\r\\n    \\\"Bachman & Associates\\\",\\r\\n    \\\"Blade Industries\\\",\\r\\n    \\\"NWO\\\",\\r\\n    \\\"Clarke Incorporated\\\",\\r\\n    \\\"OmniTek Incorporated\\\",\\r\\n    \\\"Four Sigma\\\",\\r\\n    \\\"KuaiGong International\\\",\\r\\n    \\\"Fulcrum Secret Technologies\\\",\\r\\n    \\\"BitRunners\\\",\\r\\n    \\\"The Black Hand\\\",\\r\\n    \\\"NiteSec\\\",\\r\\n    \\\"Aevum\\\",\\r\\n    \\\"Chongqing\\\",\\r\\n    \\\"Ishima\\\",\\r\\n    \\\"New Tokyo\\\",\\r\\n    \\\"Sector-12\\\",\\r\\n    \\\"Volhaven\\\",\\r\\n    \\\"Speakers for the Dead\\\",\\r\\n    \\\"The Dark Army\\\",\\r\\n    \\\"The Syndicate\\\",\\r\\n    \\\"Silhouette\\\",\\r\\n    \\\"Tetrads\\\",\\r\\n    \\\"Slum Snakes\\\",\\r\\n    \\\"Netburners\\\",\\r\\n    \\\"Tian Di Hui\\\",\\r\\n    \\\"CyberSec\\\",\\r\\n    \\\"Bladeburners\\\",\\r\\n    \\\"Church of the Machine God\\\",\\r\\n];\\r\\nexport async function writeOut(ns, data, startTime, endTime, result, startSec, startCash) {\\r\\n    if (data.writeFile !== \\\"\\\") {\\r\\n        const outstr = ns.sprintf(\\\"%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\", data.target, data.uid, data.batchId, data.realTimeStart + data.offset, data.realTimeStart + data.finish, data.operationTime, startTime, endTime, endTime - startTime, startTime - (data.realTimeStart + data.offset), endTime - (data.realTimeStart + data.finish), endTime - startTime - data.operationTime, result, startSec.toFixed(2), ns.getServerSecurityLevel(data.target).toFixed(2), ns.nFormat(startCash, \\\"($0.000a)\\\"), ns.nFormat(ns.getServerMoneyAvailable(data.target), \\\"($0.000a)\\\"));\\r\\n        while (!await ns.tryWritePort(ReservedPorts.HACK_WRITE_INFO, [data.writeFile, outstr]))\\r\\n            ;\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi91dGlsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLE1BQU0sQ0FBTixJQUFZLGFBSVg7QUFKRCxXQUFZLGFBQWE7SUFDckIsaUVBQWdCLENBQUE7SUFDaEIsaUVBQVksQ0FBQTtJQUNaLHVFQUFlLENBQUE7QUFDbkIsQ0FBQyxFQUpXLGFBQWEsS0FBYixhQUFhLFFBSXhCO0FBRUQsTUFBTSxDQUFDLE1BQU0sUUFBUSxHQUFHLHFCQUFxQixDQUFDO0FBQzlDLE1BQU0sQ0FBQyxNQUFNLE1BQU0sR0FBRyxtQkFBbUIsQ0FBQztBQUMxQyxNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUcsbUJBQW1CLENBQUM7QUFDMUMsTUFBTSxDQUFDLE1BQU0sTUFBTSxHQUFHLGNBQWMsQ0FBQztBQUVyQyxNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUcsQ0FBQyxPQUFPLEVBQUUsV0FBVyxFQUFFLFdBQVcsRUFBRSxXQUFXLEVBQUUsUUFBUSxFQUFFLFVBQVUsQ0FBQyxDQUFDO0FBRTdGLE1BQU0sVUFBVSxJQUFJLENBQUMsRUFBTSxFQUFFLEdBQVcsRUFBRSxHQUFHLElBQXlCO0lBQ2xFLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEdBQUcsR0FBRyxFQUFFLElBQUksSUFBSSxFQUFFLENBQUMsa0JBQWtCLENBQUMsT0FBTyxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDO0FBQ3hGLENBQUM7QUFFRCxNQUFNLFVBQVUsWUFBWSxDQUFDLEVBQU0sRUFBRSxRQUFnQjtJQUNqRCxJQUFJLEVBQUUsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDNUIsT0FBTztLQUNWO0lBRUQsSUFBSSxLQUFLLEdBQUcsQ0FBQyxDQUFDO0lBQ2QsSUFBSSxFQUFFLENBQUMsVUFBVSxDQUFDLGNBQWMsRUFB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\",\"filename\":\"/lib/util.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":13.25,\"server\":\"pserv-12\",\"moduleSequenceNumber\":100633,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"purchaseTor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"purchaseProgram\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"connect\",\"cost\":2},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"suppression\":0,\"activeSuppressionThreads\":[],\"suppressionIntervalID\":null,\"suppressionLastUpdateTime\":0}},\"pserv-13\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-13\",\"httpPortOpen\":false,\"ip\":\"5.8.4.7\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":505,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"script\\\":\\\"/lib/exec/grow.js\\\",\\\"host\\\":\\\"pserv-13\\\",\\\"numThreads\\\":144,\\\"target\\\":\\\"phantasy\\\",\\\"hackLevelTiming\\\":153.19873646097005,\\\"hackLevelEffect\\\":204,\\\"batchId\\\":9,\\\"offset\\\":15200,\\\"operationTime\\\":142114,\\\"finish\\\":157314,\\\"realTimeStart\\\":1647907321842,\\\"uid\\\":\\\"009-2G-pserv-13\\\",\\\"writeFile\\\":\\\"\\\"}\"],\"dataMap\":{},\"filename\":\"/lib/exec/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":55.61000000000025,\"pid\":1288,\"ramUsage\":1.75,\"server\":\"pserv-13\",\"threads\":144,\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///e520f0d1-9568-4ef9-a46f-36a7ac4371c9\",\"moduleSequenceNumber\":100726}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"script\\\":\\\"/lib/exec/hack.js\\\",\\\"host\\\":\\\"pserv-13\\\",\\\"numThreads\\\":120,\\\"target\\\":\\\"phantasy\\\",\\\"hackLevelTiming\\\":13.499605144053142,\\\"hackLevelEffect\\\":204,\\\"batchId\\\":10,\\\"offset\\\":16000,\\\"operationTime\\\":142113,\\\"finish\\\":158113,\\\"realTimeStart\\\":1647907321842,\\\"uid\\\":\\\"010-0H-pserv-13\\\",\\\"writeFile\\\":\\\"\\\"}\"],\"dataMap\":{},\"filename\":\"/lib/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":54.81000000000024,\"pid\":1290,\"ramUsage\":1.7,\"server\":\"pserv-13\",\"threads\":120,\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///27318c38-e8ec-483a-ba07-a38069834e35\",\"moduleSequenceNumber\":100725}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"script\\\":\\\"/lib/exec/weaken.js\\\",\\\"host\\\":\\\"pserv-13\\\",\\\"numThreads\\\":3,\\\"target\\\":\\\"phantasy\\\",\\\"hackLevelTiming\\\":203.99842057621257,\\\"hackLevelEffect\\\":204,\\\"batchId\\\":13,\\\"offset\\\":21200,\\\"operationTime\\\":113691,\\\"finish\\\":134891,\\\"realTimeStart\\\":1647907321842,\\\"uid\\\":\\\"013-1WH-pserv-13\\\",\\\"writeFile\\\":\\\"\\\"}\"],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":49.61000000000017,\"pid\":1304,\"ramUsage\":1.75,\"server\":\"pserv-13\",\"threads\":3,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///3be7ec3f-cd79-4c5e-8439-2780ffd96e5e\",\"moduleSequenceNumber\":100723}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"script\\\":\\\"/lib/exec/weaken.js\\\",\\\"host\\\":\\\"pserv-13\\\",\\\"numThreads\\\":12,\\\"target\\\":\\\"phantasy\\\",\\\"hackLevelTiming\\\":203.99842057621257,\\\"hackLevelEffect\\\":204,\\\"batchId\\\":13,\\\"offset\\\":22000,\\\"operationTime\\\":113691,\\\"finish\\\":135691,\\\"realTimeStart\\\":1647907321842,\\\"uid\\\":\\\"013-3WG-pserv-13\\\",\\\"writeFile\\\":\\\"\\\"}\"],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":48.81000000000016,\"pid\":1307,\"ramUsage\":1.75,\"server\":\"pserv-13\",\"threads\":12,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///3be7ec3f-cd79-4c5e-8439-2780ffd96e5e\",\"moduleSequenceNumber\":100723}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"script\\\":\\\"/lib/exec/weaken.js\\\",\\\"host\\\":\\\"pserv-13\\\",\\\"numThreads\\\":5,\\\"target\\\":\\\"phantasy\\\",\\\"hackLevelTiming\\\":203.99842057621257,\\\"hackLevelEffect\\\":204,\\\"batchId\\\":14,\\\"offset\\\":22800,\\\"operationTime\\\":113691,\\\"finish\\\":136491,\\\"realTimeStart\\\":1647907321842,\\\"uid\\\":\\\"014-1WH-pserv-13\\\",\\\"writeFile\\\":\\\"\\\"}\"],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":48.01000000000015,\"pid\":1309,\"ramUsage\":1.75,\"server\":\"pserv-13\",\"threads\":5,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///3be7ec3f-cd79-4c5e-8439-2780ffd96e5e\",\"moduleSequenceNumber\":100723}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"script\\\":\\\"/lib/exec/weaken.js\\\",\\\"host\\\":\\\"pserv-13\\\",\\\"numThreads\\\":8,\\\"target\\\":\\\"phantasy\\\",\\\"hackLevelTiming\\\":203.99842057621257,\\\"hackLevelEffect\\\":204,\\\"batchId\\\":14,\\\"offset\\\":23600,\\\"operationTime\\\":113691,\\\"finish\\\":137291,\\\"realTimeStart\\\":1647907321842,\\\"uid\\\":\\\"014-3WG-pserv-13\\\",\\\"writeFile\\\":\\\"\\\"}\"],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":47.210000000000136,\"pid\":1312,\"ramUsage\":1.75,\"server\":\"pserv-13\",\"threads\":8,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///3be7ec3f-cd79-4c5e-8439-2780ffd96e5e\",\"moduleSequenceNumber\":100723}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.stanek.charge(ns.args[0], ns.args[1]);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hhcmdlLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL3N0YW5lay9jaGFyZ2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUM5QixPQUFPLElBQUksRUFBRTtRQUNULE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7S0FDakQ7QUFDTCxDQUFDIn0=\",\"filename\":\"/lib/stanek/charge.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/stanek/charge.js\",\"url\":\"blob:file:///57b10835-8829-4b37-898d-2752661c8c1d\",\"moduleSequenceNumber\":99915}],\"dependents\":[],\"ramUsage\":2,\"server\":\"pserv-13\",\"moduleSequenceNumber\":99915,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.charge\",\"cost\":0.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.grow(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLElBQUksR0FBdUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFFbkUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDdkIsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7UUFDeEMsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7S0FDM0MsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyJ9\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///e520f0d1-9568-4ef9-a46f-36a7ac4371c9\",\"moduleSequenceNumber\":100726}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-13\",\"moduleSequenceNumber\":100726,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.weaken(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxJQUFJLEdBQXVCLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO0lBRW5FLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFO1FBQ3pCLGtCQUFrQixFQUFFLElBQUksQ0FBQyxlQUFlO1FBQ3hDLGtCQUFrQixFQUFFLElBQUksQ0FBQyxlQUFlO0tBQzNDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///3be7ec3f-cd79-4c5e-8439-2780ffd96e5e\",\"moduleSequenceNumber\":100723}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-13\",\"moduleSequenceNumber\":100723,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.hack(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLElBQUksR0FBdUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFFbkUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDdkIsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7UUFDeEMsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7S0FDM0MsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyJ9\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///27318c38-e8ec-483a-ba07-a38069834e35\",\"moduleSequenceNumber\":100725}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-13\",\"moduleSequenceNumber\":100725,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export var ReservedPorts;\\r\\n(function (ReservedPorts) {\\r\\n    ReservedPorts[ReservedPorts[\\\"HACKING_INFO\\\"] = 1] = \\\"HACKING_INFO\\\";\\r\\n    ReservedPorts[ReservedPorts[\\\"HACKNET_INFO\\\"] = 2] = \\\"HACKNET_INFO\\\";\\r\\n    ReservedPorts[ReservedPorts[\\\"HACK_WRITE_INFO\\\"] = 3] = \\\"HACK_WRITE_INFO\\\";\\r\\n})(ReservedPorts || (ReservedPorts = {}));\\r\\nexport const WEAKENJS = \\\"/lib/exec/weaken.js\\\";\\r\\nexport const GROWJS = \\\"/lib/exec/grow.js\\\";\\r\\nexport const HACKJS = \\\"/lib/exec/hack.js\\\";\\r\\nexport const UTILJS = \\\"/lib/util.js\\\";\\r\\nexport const CITIES = [\\\"Aevum\\\", \\\"Chongqing\\\", \\\"Sector-12\\\", \\\"New Tokyo\\\", \\\"Ishima\\\", \\\"Volhaven\\\"];\\r\\nexport function llog(ns, str, ...args) {\\r\\n    ns.print(ns.sprintf(\\\"%8s \\\" + str, new Date().toLocaleTimeString(\\\"it-IT\\\"), ...args));\\r\\n}\\r\\nexport function softenServer(ns, hostname) {\\r\\n    if (ns.hasRootAccess(hostname)) {\\r\\n        return;\\r\\n    }\\r\\n    let ports = 0;\\r\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n        ns.brutessh(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n        ns.ftpcrack(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n        ns.httpworm(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n        ns.relaysmtp(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n        ns.sqlinject(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ports >= ns.getServerNumPortsRequired(hostname)) {\\r\\n        ns.nuke(hostname);\\r\\n    }\\r\\n}\\r\\nexport function serverIsHackable(ns, hostname) {\\r\\n    return ns.hasRootAccess(hostname) && ns.getHackingLevel() >= ns.getServerRequiredHackingLevel(hostname);\\r\\n}\\r\\nexport function canExecuteOnServer(ns, hostname) {\\r\\n    return ns.hasRootAccess(hostname) && ns.getServerMaxRam(hostname) > 0;\\r\\n}\\r\\nexport function mapHosts(ns, hosts = {}, parents = [], current = \\\"home\\\") {\\r\\n    const newParents = parents.concat(current);\\r\\n    hosts[current] = newParents;\\r\\n    const children = ns.scan(current).filter((element) => !parents.includes(element));\\r\\n    for (const child of children) {\\r\\n        mapHosts(ns, hosts, newParents, child);\\r\\n    }\\r\\n    return hosts;\\r\\n}\\r\\nexport function allHosts(ns) {\\r\\n    return Object.keys(mapHosts(ns));\\r\\n}\\r\\nexport function doProgramBuys(ns) {\\r\\n    const player = ns.getPlayer();\\r\\n    if (!player.tor && player.money > 200e3)\\r\\n        ns.purchaseTor();\\r\\n    if (!ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\") && player.money > 500e3)\\r\\n        ns.purchaseProgram(\\\"BruteSSH.exe\\\");\\r\\n    if (!ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\") && player.money > 1500e3)\\r\\n        ns.purchaseProgram(\\\"FTPCrack.exe\\\");\\r\\n    if (!ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\") && player.money > 5e6)\\r\\n        ns.purchaseProgram(\\\"relaySMTP.exe\\\");\\r\\n    if (!ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\") && player.money > 30e6)\\r\\n        ns.purchaseProgram(\\\"HTTPWorm.exe\\\");\\r\\n    if (!ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\") && player.money > 250e6)\\r\\n        ns.purchaseProgram(\\\"SQLInject.exe\\\");\\r\\n}\\r\\nexport function doBuyAndSoftenAll(ns) {\\r\\n    doProgramBuys(ns);\\r\\n    for (const hostname of allHosts(ns)) {\\r\\n        softenServer(ns, hostname);\\r\\n    }\\r\\n}\\r\\nexport function stFormat(ns, ms, showms = false, showfull = false) {\\r\\n    let timeLeft = ms;\\r\\n    const hours = Math.floor(ms / (1000 * 60 * 60));\\r\\n    timeLeft -= hours * (1000 * 60 * 60);\\r\\n    const minutes = Math.floor(timeLeft / (1000 * 60));\\r\\n    timeLeft -= minutes * (1000 * 60);\\r\\n    const seconds = Math.floor(timeLeft / 1000);\\r\\n    timeLeft -= seconds * 1000;\\r\\n    const milliseconds = timeLeft;\\r\\n    if (showms) {\\r\\n        if (hours > 0 || showfull)\\r\\n            return ns.sprintf(\\\"%02d:%02d:%02d.%03d\\\", hours, minutes, seconds, milliseconds);\\r\\n        if (minutes > 0)\\r\\n            return ns.sprintf(\\\"%02d:%02d.%03d\\\", minutes, seconds, milliseconds);\\r\\n        return ns.sprintf(\\\"%02d.%03d\\\", seconds, milliseconds);\\r\\n    }\\r\\n    else {\\r\\n        if (hours > 0 || showfull)\\r\\n            return ns.sprintf(\\\"%02d:%02d:%02d\\\", hours, minutes, seconds);\\r\\n        if (minutes > 0)\\r\\n            return ns.sprintf(\\\"%02d:%02d\\\", minutes, seconds);\\r\\n        return ns.sprintf(\\\"%02d\\\", seconds);\\r\\n    }\\r\\n}\\r\\nexport function stdFormat(ns, offset = 0, showms = false) {\\r\\n    const date = new Date(new Date().getTime() + offset);\\r\\n    if (showms) {\\r\\n        const ms = ns.sprintf(\\\"%03d\\\", date.getUTCMilliseconds());\\r\\n        return date.toLocaleTimeString(\\\"it-IT\\\") + \\\".\\\" + ms;\\r\\n    }\\r\\n    else {\\r\\n        return date.toLocaleTimeString(\\\"it-IT\\\");\\r\\n    }\\r\\n}\\r\\nexport async function doBackdoors(ns) {\\r\\n    //const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"w0r1d_d43m0n\\\", \\\"b-and-a\\\", \\\"ecorp\\\", \\\"fulcrumassets\\\", \\\"fulcrumtech\\\"];\\r\\n    //const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"omnitek\\\", \\\"kuai-gong\\\", \\\"megacorp\\\"];\\r\\n    const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"w0r1d_d43m0n\\\"];\\r\\n    const hosts = mapHosts(ns);\\r\\n    for (const [hostName, trail] of Object.entries(hosts)) {\\r\\n        const server = ns.getServer(hostName);\\r\\n        if (!targetHosts.includes(hostName) ||\\r\\n            server.backdoorInstalled ||\\r\\n            server.requiredHackingSkill > ns.getHackingLevel() ||\\r\\n            !server.hasAdminRights)\\r\\n            continue;\\r\\n        ns.print(hostName);\\r\\n        for (const hostHopName of trail) {\\r\\n            ns.connect(hostHopName);\\r\\n        }\\r\\n        await ns.installBackdoor();\\r\\n        ns.connect(\\\"home\\\");\\r\\n    }\\r\\n}\\r\\nexport function cleanLogs(ns) {\\r\\n    ns.disableLog(\\\"disableLog\\\");\\r\\n    ns.disableLog(\\\"ALL\\\");\\r\\n    // ns.disableLog(\\\"sleep\\\")\\r\\n    // ns.disableLog(\\\"exec\\\")\\r\\n    // ns.disableLog(\\\"getServerMaxRam\\\")\\r\\n    // ns.disableLog(\\\"getServerSecurityLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerMinSecurityLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerMaxMoney\\\")\\r\\n    // ns.disableLog(\\\"getHackingLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerRequiredHackingLevel\\\")\\r\\n    // ns.disableLog(\\\"scan\\\")\\r\\n    // ns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n    // ns.disableLog(\\\"getServerUsedRam\\\")\\r\\n}\\r\\nexport const ALL_FACTIONS = [\\r\\n    \\\"Illuminati\\\",\\r\\n    \\\"Daedalus\\\",\\r\\n    \\\"The Covenant\\\",\\r\\n    \\\"ECorp\\\",\\r\\n    \\\"MegaCorp\\\",\\r\\n    \\\"Bachman & Associates\\\",\\r\\n    \\\"Blade Industries\\\",\\r\\n    \\\"NWO\\\",\\r\\n    \\\"Clarke Incorporated\\\",\\r\\n    \\\"OmniTek Incorporated\\\",\\r\\n    \\\"Four Sigma\\\",\\r\\n    \\\"KuaiGong International\\\",\\r\\n    \\\"Fulcrum Secret Technologies\\\",\\r\\n    \\\"BitRunners\\\",\\r\\n    \\\"The Black Hand\\\",\\r\\n    \\\"NiteSec\\\",\\r\\n    \\\"Aevum\\\",\\r\\n    \\\"Chongqing\\\",\\r\\n    \\\"Ishima\\\",\\r\\n    \\\"New Tokyo\\\",\\r\\n    \\\"Sector-12\\\",\\r\\n    \\\"Volhaven\\\",\\r\\n    \\\"Speakers for the Dead\\\",\\r\\n    \\\"The Dark Army\\\",\\r\\n    \\\"The Syndicate\\\",\\r\\n    \\\"Silhouette\\\",\\r\\n    \\\"Tetrads\\\",\\r\\n    \\\"Slum Snakes\\\",\\r\\n    \\\"Netburners\\\",\\r\\n    \\\"Tian Di Hui\\\",\\r\\n    \\\"CyberSec\\\",\\r\\n    \\\"Bladeburners\\\",\\r\\n    \\\"Church of the Machine God\\\",\\r\\n];\\r\\nexport async function writeOut(ns, data, startTime, endTime, result, startSec, startCash) {\\r\\n    if (data.writeFile !== \\\"\\\") {\\r\\n        const outstr = ns.sprintf(\\\"%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\", data.target, data.uid, data.batchId, data.realTimeStart + data.offset, data.realTimeStart + data.finish, data.operationTime, startTime, endTime, endTime - startTime, startTime - (data.realTimeStart + data.offset), endTime - (data.realTimeStart + data.finish), endTime - startTime - data.operationTime, result, startSec.toFixed(2), ns.getServerSecurityLevel(data.target).toFixed(2), ns.nFormat(startCash, \\\"($0.000a)\\\"), ns.nFormat(ns.getServerMoneyAvailable(data.target), \\\"($0.000a)\\\"));\\r\\n        while (!await ns.tryWritePort(ReservedPorts.HACK_WRITE_INFO, [data.writeFile, outstr]))\\r\\n            ;\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi91dGlsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLE1BQU0sQ0FBTixJQUFZLGFBSVg7QUFKRCxXQUFZLGFBQWE7SUFDckIsaUVBQWdCLENBQUE7SUFDaEIsaUVBQVksQ0FBQTtJQUNaLHVFQUFlLENBQUE7QUFDbkIsQ0FBQyxFQUpXLGFBQWEsS0FBYixhQUFhLFFBSXhCO0FBRUQsTUFBTSxDQUFDLE1BQU0sUUFBUSxHQUFHLHFCQUFxQixDQUFDO0FBQzlDLE1BQU0sQ0FBQyxNQUFNLE1BQU0sR0FBRyxtQkFBbUIsQ0FBQztBQUMxQyxNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUcsbUJBQW1CLENBQUM7QUFDMUMsTUFBTSxDQUFDLE1BQU0sTUFBTSxHQUFHLGNBQWMsQ0FBQztBQUVyQyxNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUcsQ0FBQyxPQUFPLEVBQUUsV0FBVyxFQUFFLFdBQVcsRUFBRSxXQUFXLEVBQUUsUUFBUSxFQUFFLFVBQVUsQ0FBQyxDQUFDO0FBRTdGLE1BQU0sVUFBVSxJQUFJLENBQUMsRUFBTSxFQUFFLEdBQVcsRUFBRSxHQUFHLElBQXlCO0lBQ2xFLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEdBQUcsR0FBRyxFQUFFLElBQUksSUFBSSxFQUFFLENBQUMsa0JBQWtCLENBQUMsT0FBTyxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDO0FBQ3hGLENBQUM7QUFFRCxNQUFNLFVBQVUsWUFBWSxDQUFDLEVBQU0sRUFBRSxRQUFnQjtJQUNqRCxJQUFJLEVBQUUsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDNUIsT0FBTztLQUNWO0lBRUQsSUFBSSxLQUFLLEdBQUcsQ0FBQyxDQUFDO0lBQ2QsSUFBSSxFQUFFLENBQUMsVUFBVSxDQUFDLGNBQWMsRUFB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\",\"filename\":\"/lib/util.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":13.25,\"server\":\"pserv-13\",\"moduleSequenceNumber\":100641,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"purchaseTor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"purchaseProgram\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"connect\",\"cost\":2},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"suppression\":0,\"activeSuppressionThreads\":[],\"suppressionIntervalID\":null,\"suppressionLastUpdateTime\":0}},\"pserv-14\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-14\",\"httpPortOpen\":false,\"ip\":\"75.8.9.1\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":505,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"script\\\":\\\"/lib/exec/grow.js\\\",\\\"host\\\":\\\"pserv-14\\\",\\\"numThreads\\\":144,\\\"target\\\":\\\"phantasy\\\",\\\"hackLevelTiming\\\":153.19873646097005,\\\"hackLevelEffect\\\":204,\\\"batchId\\\":10,\\\"offset\\\":16800,\\\"operationTime\\\":142114,\\\"finish\\\":158914,\\\"realTimeStart\\\":1647907321842,\\\"uid\\\":\\\"010-2G-pserv-14\\\",\\\"writeFile\\\":\\\"\\\"}\"],\"dataMap\":{},\"filename\":\"/lib/exec/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":54.010000000000225,\"pid\":1292,\"ramUsage\":1.75,\"server\":\"pserv-14\",\"threads\":144,\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///8fd25301-ed9c-429b-91ef-5904a9651038\",\"moduleSequenceNumber\":100729}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"script\\\":\\\"/lib/exec/hack.js\\\",\\\"host\\\":\\\"pserv-14\\\",\\\"numThreads\\\":120,\\\"target\\\":\\\"phantasy\\\",\\\"hackLevelTiming\\\":13.499605144053142,\\\"hackLevelEffect\\\":204,\\\"batchId\\\":11,\\\"offset\\\":17600,\\\"operationTime\\\":142113,\\\"finish\\\":159713,\\\"realTimeStart\\\":1647907321842,\\\"uid\\\":\\\"011-0H-pserv-14\\\",\\\"writeFile\\\":\\\"\\\"}\"],\"dataMap\":{},\"filename\":\"/lib/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":53.210000000000214,\"pid\":1294,\"ramUsage\":1.7,\"server\":\"pserv-14\",\"threads\":120,\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///5d3183bd-134a-44a0-9998-bf5bd84d04c7\",\"moduleSequenceNumber\":100728}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"script\\\":\\\"/lib/exec/weaken.js\\\",\\\"host\\\":\\\"pserv-14\\\",\\\"numThreads\\\":4,\\\"target\\\":\\\"phantasy\\\",\\\"hackLevelTiming\\\":203.99842057621257,\\\"hackLevelEffect\\\":204,\\\"batchId\\\":14,\\\"offset\\\":23600,\\\"operationTime\\\":113691,\\\"finish\\\":137291,\\\"realTimeStart\\\":1647907321842,\\\"uid\\\":\\\"014-3WG-pserv-14\\\",\\\"writeFile\\\":\\\"\\\"}\"],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":47.210000000000136,\"pid\":1311,\"ramUsage\":1.75,\"server\":\"pserv-14\",\"threads\":4,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///6ca839fe-810e-48f8-81da-3f78a4450dfe\",\"moduleSequenceNumber\":100727}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"script\\\":\\\"/lib/exec/weaken.js\\\",\\\"host\\\":\\\"pserv-14\\\",\\\"numThreads\\\":5,\\\"target\\\":\\\"phantasy\\\",\\\"hackLevelTiming\\\":203.99842057621257,\\\"hackLevelEffect\\\":204,\\\"batchId\\\":15,\\\"offset\\\":24400,\\\"operationTime\\\":113691,\\\"finish\\\":138091,\\\"realTimeStart\\\":1647907321842,\\\"uid\\\":\\\"015-1WH-pserv-14\\\",\\\"writeFile\\\":\\\"\\\"}\"],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":46.410000000000124,\"pid\":1314,\"ramUsage\":1.75,\"server\":\"pserv-14\",\"threads\":5,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///6ca839fe-810e-48f8-81da-3f78a4450dfe\",\"moduleSequenceNumber\":100727}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"script\\\":\\\"/lib/exec/weaken.js\\\",\\\"host\\\":\\\"pserv-14\\\",\\\"numThreads\\\":12,\\\"target\\\":\\\"phantasy\\\",\\\"hackLevelTiming\\\":203.99842057621257,\\\"hackLevelEffect\\\":204,\\\"batchId\\\":15,\\\"offset\\\":25200,\\\"operationTime\\\":113691,\\\"finish\\\":138891,\\\"realTimeStart\\\":1647907321842,\\\"uid\\\":\\\"015-3WG-pserv-14\\\",\\\"writeFile\\\":\\\"\\\"}\"],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":45.61000000000011,\"pid\":1316,\"ramUsage\":1.75,\"server\":\"pserv-14\",\"threads\":12,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///6ca839fe-810e-48f8-81da-3f78a4450dfe\",\"moduleSequenceNumber\":100727}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"script\\\":\\\"/lib/exec/weaken.js\\\",\\\"host\\\":\\\"pserv-14\\\",\\\"numThreads\\\":5,\\\"target\\\":\\\"phantasy\\\",\\\"hackLevelTiming\\\":203.99842057621257,\\\"hackLevelEffect\\\":204,\\\"batchId\\\":16,\\\"offset\\\":26000,\\\"operationTime\\\":113691,\\\"finish\\\":139691,\\\"realTimeStart\\\":1647907321842,\\\"uid\\\":\\\"016-1WH-pserv-14\\\",\\\"writeFile\\\":\\\"\\\"}\"],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":44.8100000000001,\"pid\":1318,\"ramUsage\":1.75,\"server\":\"pserv-14\",\"threads\":5,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///6ca839fe-810e-48f8-81da-3f78a4450dfe\",\"moduleSequenceNumber\":100727}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"script\\\":\\\"/lib/exec/weaken.js\\\",\\\"host\\\":\\\"pserv-14\\\",\\\"numThreads\\\":2,\\\"target\\\":\\\"phantasy\\\",\\\"hackLevelTiming\\\":203.99842057621257,\\\"hackLevelEffect\\\":204,\\\"batchId\\\":16,\\\"offset\\\":26800,\\\"operationTime\\\":113691,\\\"finish\\\":140491,\\\"realTimeStart\\\":1647907321842,\\\"uid\\\":\\\"016-3WG-pserv-14\\\",\\\"writeFile\\\":\\\"\\\"}\"],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":44.01000000000009,\"pid\":1321,\"ramUsage\":1.75,\"server\":\"pserv-14\",\"threads\":2,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///6ca839fe-810e-48f8-81da-3f78a4450dfe\",\"moduleSequenceNumber\":100727}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.stanek.charge(ns.args[0], ns.args[1]);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hhcmdlLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL3N0YW5lay9jaGFyZ2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUM5QixPQUFPLElBQUksRUFBRTtRQUNULE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7S0FDakQ7QUFDTCxDQUFDIn0=\",\"filename\":\"/lib/stanek/charge.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/stanek/charge.js\",\"url\":\"blob:file:///6a89173f-bace-44e1-8af6-c598aeaece02\",\"moduleSequenceNumber\":99922}],\"dependents\":[],\"ramUsage\":2,\"server\":\"pserv-14\",\"moduleSequenceNumber\":99922,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.charge\",\"cost\":0.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.grow(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLElBQUksR0FBdUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFFbkUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDdkIsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7UUFDeEMsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7S0FDM0MsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyJ9\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///8fd25301-ed9c-429b-91ef-5904a9651038\",\"moduleSequenceNumber\":100729}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-14\",\"moduleSequenceNumber\":100729,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.weaken(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxJQUFJLEdBQXVCLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO0lBRW5FLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFO1FBQ3pCLGtCQUFrQixFQUFFLElBQUksQ0FBQyxlQUFlO1FBQ3hDLGtCQUFrQixFQUFFLElBQUksQ0FBQyxlQUFlO0tBQzNDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///6ca839fe-810e-48f8-81da-3f78a4450dfe\",\"moduleSequenceNumber\":100727}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-14\",\"moduleSequenceNumber\":100727,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.hack(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLElBQUksR0FBdUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFFbkUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDdkIsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7UUFDeEMsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7S0FDM0MsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyJ9\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///5d3183bd-134a-44a0-9998-bf5bd84d04c7\",\"moduleSequenceNumber\":100728}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-14\",\"moduleSequenceNumber\":100728,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export var ReservedPorts;\\r\\n(function (ReservedPorts) {\\r\\n    ReservedPorts[ReservedPorts[\\\"HACKING_INFO\\\"] = 1] = \\\"HACKING_INFO\\\";\\r\\n    ReservedPorts[ReservedPorts[\\\"HACKNET_INFO\\\"] = 2] = \\\"HACKNET_INFO\\\";\\r\\n    ReservedPorts[ReservedPorts[\\\"HACK_WRITE_INFO\\\"] = 3] = \\\"HACK_WRITE_INFO\\\";\\r\\n})(ReservedPorts || (ReservedPorts = {}));\\r\\nexport const WEAKENJS = \\\"/lib/exec/weaken.js\\\";\\r\\nexport const GROWJS = \\\"/lib/exec/grow.js\\\";\\r\\nexport const HACKJS = \\\"/lib/exec/hack.js\\\";\\r\\nexport const UTILJS = \\\"/lib/util.js\\\";\\r\\nexport const CITIES = [\\\"Aevum\\\", \\\"Chongqing\\\", \\\"Sector-12\\\", \\\"New Tokyo\\\", \\\"Ishima\\\", \\\"Volhaven\\\"];\\r\\nexport function llog(ns, str, ...args) {\\r\\n    ns.print(ns.sprintf(\\\"%8s \\\" + str, new Date().toLocaleTimeString(\\\"it-IT\\\"), ...args));\\r\\n}\\r\\nexport function softenServer(ns, hostname) {\\r\\n    if (ns.hasRootAccess(hostname)) {\\r\\n        return;\\r\\n    }\\r\\n    let ports = 0;\\r\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n        ns.brutessh(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n        ns.ftpcrack(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n        ns.httpworm(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n        ns.relaysmtp(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n        ns.sqlinject(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ports >= ns.getServerNumPortsRequired(hostname)) {\\r\\n        ns.nuke(hostname);\\r\\n    }\\r\\n}\\r\\nexport function serverIsHackable(ns, hostname) {\\r\\n    return ns.hasRootAccess(hostname) && ns.getHackingLevel() >= ns.getServerRequiredHackingLevel(hostname);\\r\\n}\\r\\nexport function canExecuteOnServer(ns, hostname) {\\r\\n    return ns.hasRootAccess(hostname) && ns.getServerMaxRam(hostname) > 0;\\r\\n}\\r\\nexport function mapHosts(ns, hosts = {}, parents = [], current = \\\"home\\\") {\\r\\n    const newParents = parents.concat(current);\\r\\n    hosts[current] = newParents;\\r\\n    const children = ns.scan(current).filter((element) => !parents.includes(element));\\r\\n    for (const child of children) {\\r\\n        mapHosts(ns, hosts, newParents, child);\\r\\n    }\\r\\n    return hosts;\\r\\n}\\r\\nexport function allHosts(ns) {\\r\\n    return Object.keys(mapHosts(ns));\\r\\n}\\r\\nexport function doProgramBuys(ns) {\\r\\n    const player = ns.getPlayer();\\r\\n    if (!player.tor && player.money > 200e3)\\r\\n        ns.purchaseTor();\\r\\n    if (!ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\") && player.money > 500e3)\\r\\n        ns.purchaseProgram(\\\"BruteSSH.exe\\\");\\r\\n    if (!ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\") && player.money > 1500e3)\\r\\n        ns.purchaseProgram(\\\"FTPCrack.exe\\\");\\r\\n    if (!ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\") && player.money > 5e6)\\r\\n        ns.purchaseProgram(\\\"relaySMTP.exe\\\");\\r\\n    if (!ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\") && player.money > 30e6)\\r\\n        ns.purchaseProgram(\\\"HTTPWorm.exe\\\");\\r\\n    if (!ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\") && player.money > 250e6)\\r\\n        ns.purchaseProgram(\\\"SQLInject.exe\\\");\\r\\n}\\r\\nexport function doBuyAndSoftenAll(ns) {\\r\\n    doProgramBuys(ns);\\r\\n    for (const hostname of allHosts(ns)) {\\r\\n        softenServer(ns, hostname);\\r\\n    }\\r\\n}\\r\\nexport function stFormat(ns, ms, showms = false, showfull = false) {\\r\\n    let timeLeft = ms;\\r\\n    const hours = Math.floor(ms / (1000 * 60 * 60));\\r\\n    timeLeft -= hours * (1000 * 60 * 60);\\r\\n    const minutes = Math.floor(timeLeft / (1000 * 60));\\r\\n    timeLeft -= minutes * (1000 * 60);\\r\\n    const seconds = Math.floor(timeLeft / 1000);\\r\\n    timeLeft -= seconds * 1000;\\r\\n    const milliseconds = timeLeft;\\r\\n    if (showms) {\\r\\n        if (hours > 0 || showfull)\\r\\n            return ns.sprintf(\\\"%02d:%02d:%02d.%03d\\\", hours, minutes, seconds, milliseconds);\\r\\n        if (minutes > 0)\\r\\n            return ns.sprintf(\\\"%02d:%02d.%03d\\\", minutes, seconds, milliseconds);\\r\\n        return ns.sprintf(\\\"%02d.%03d\\\", seconds, milliseconds);\\r\\n    }\\r\\n    else {\\r\\n        if (hours > 0 || showfull)\\r\\n            return ns.sprintf(\\\"%02d:%02d:%02d\\\", hours, minutes, seconds);\\r\\n        if (minutes > 0)\\r\\n            return ns.sprintf(\\\"%02d:%02d\\\", minutes, seconds);\\r\\n        return ns.sprintf(\\\"%02d\\\", seconds);\\r\\n    }\\r\\n}\\r\\nexport function stdFormat(ns, offset = 0, showms = false) {\\r\\n    const date = new Date(new Date().getTime() + offset);\\r\\n    if (showms) {\\r\\n        const ms = ns.sprintf(\\\"%03d\\\", date.getUTCMilliseconds());\\r\\n        return date.toLocaleTimeString(\\\"it-IT\\\") + \\\".\\\" + ms;\\r\\n    }\\r\\n    else {\\r\\n        return date.toLocaleTimeString(\\\"it-IT\\\");\\r\\n    }\\r\\n}\\r\\nexport async function doBackdoors(ns) {\\r\\n    //const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"w0r1d_d43m0n\\\", \\\"b-and-a\\\", \\\"ecorp\\\", \\\"fulcrumassets\\\", \\\"fulcrumtech\\\"];\\r\\n    //const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"omnitek\\\", \\\"kuai-gong\\\", \\\"megacorp\\\"];\\r\\n    const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"w0r1d_d43m0n\\\"];\\r\\n    const hosts = mapHosts(ns);\\r\\n    for (const [hostName, trail] of Object.entries(hosts)) {\\r\\n        const server = ns.getServer(hostName);\\r\\n        if (!targetHosts.includes(hostName) ||\\r\\n            server.backdoorInstalled ||\\r\\n            server.requiredHackingSkill > ns.getHackingLevel() ||\\r\\n            !server.hasAdminRights)\\r\\n            continue;\\r\\n        ns.print(hostName);\\r\\n        for (const hostHopName of trail) {\\r\\n            ns.connect(hostHopName);\\r\\n        }\\r\\n        await ns.installBackdoor();\\r\\n        ns.connect(\\\"home\\\");\\r\\n    }\\r\\n}\\r\\nexport function cleanLogs(ns) {\\r\\n    ns.disableLog(\\\"disableLog\\\");\\r\\n    ns.disableLog(\\\"ALL\\\");\\r\\n    // ns.disableLog(\\\"sleep\\\")\\r\\n    // ns.disableLog(\\\"exec\\\")\\r\\n    // ns.disableLog(\\\"getServerMaxRam\\\")\\r\\n    // ns.disableLog(\\\"getServerSecurityLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerMinSecurityLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerMaxMoney\\\")\\r\\n    // ns.disableLog(\\\"getHackingLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerRequiredHackingLevel\\\")\\r\\n    // ns.disableLog(\\\"scan\\\")\\r\\n    // ns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n    // ns.disableLog(\\\"getServerUsedRam\\\")\\r\\n}\\r\\nexport const ALL_FACTIONS = [\\r\\n    \\\"Illuminati\\\",\\r\\n    \\\"Daedalus\\\",\\r\\n    \\\"The Covenant\\\",\\r\\n    \\\"ECorp\\\",\\r\\n    \\\"MegaCorp\\\",\\r\\n    \\\"Bachman & Associates\\\",\\r\\n    \\\"Blade Industries\\\",\\r\\n    \\\"NWO\\\",\\r\\n    \\\"Clarke Incorporated\\\",\\r\\n    \\\"OmniTek Incorporated\\\",\\r\\n    \\\"Four Sigma\\\",\\r\\n    \\\"KuaiGong International\\\",\\r\\n    \\\"Fulcrum Secret Technologies\\\",\\r\\n    \\\"BitRunners\\\",\\r\\n    \\\"The Black Hand\\\",\\r\\n    \\\"NiteSec\\\",\\r\\n    \\\"Aevum\\\",\\r\\n    \\\"Chongqing\\\",\\r\\n    \\\"Ishima\\\",\\r\\n    \\\"New Tokyo\\\",\\r\\n    \\\"Sector-12\\\",\\r\\n    \\\"Volhaven\\\",\\r\\n    \\\"Speakers for the Dead\\\",\\r\\n    \\\"The Dark Army\\\",\\r\\n    \\\"The Syndicate\\\",\\r\\n    \\\"Silhouette\\\",\\r\\n    \\\"Tetrads\\\",\\r\\n    \\\"Slum Snakes\\\",\\r\\n    \\\"Netburners\\\",\\r\\n    \\\"Tian Di Hui\\\",\\r\\n    \\\"CyberSec\\\",\\r\\n    \\\"Bladeburners\\\",\\r\\n    \\\"Church of the Machine God\\\",\\r\\n];\\r\\nexport async function writeOut(ns, data, startTime, endTime, result, startSec, startCash) {\\r\\n    if (data.writeFile !== \\\"\\\") {\\r\\n        const outstr = ns.sprintf(\\\"%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\", data.target, data.uid, data.batchId, data.realTimeStart + data.offset, data.realTimeStart + data.finish, data.operationTime, startTime, endTime, endTime - startTime, startTime - (data.realTimeStart + data.offset), endTime - (data.realTimeStart + data.finish), endTime - startTime - data.operationTime, result, startSec.toFixed(2), ns.getServerSecurityLevel(data.target).toFixed(2), ns.nFormat(startCash, \\\"($0.000a)\\\"), ns.nFormat(ns.getServerMoneyAvailable(data.target), \\\"($0.000a)\\\"));\\r\\n        while (!await ns.tryWritePort(ReservedPorts.HACK_WRITE_INFO, [data.writeFile, outstr]))\\r\\n            ;\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi91dGlsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLE1BQU0sQ0FBTixJQUFZLGFBSVg7QUFKRCxXQUFZLGFBQWE7SUFDckIsaUVBQWdCLENBQUE7SUFDaEIsaUVBQVksQ0FBQTtJQUNaLHVFQUFlLENBQUE7QUFDbkIsQ0FBQyxFQUpXLGFBQWEsS0FBYixhQUFhLFFBSXhCO0FBRUQsTUFBTSxDQUFDLE1BQU0sUUFBUSxHQUFHLHFCQUFxQixDQUFDO0FBQzlDLE1BQU0sQ0FBQyxNQUFNLE1BQU0sR0FBRyxtQkFBbUIsQ0FBQztBQUMxQyxNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUcsbUJBQW1CLENBQUM7QUFDMUMsTUFBTSxDQUFDLE1BQU0sTUFBTSxHQUFHLGNBQWMsQ0FBQztBQUVyQyxNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUcsQ0FBQyxPQUFPLEVBQUUsV0FBVyxFQUFFLFdBQVcsRUFBRSxXQUFXLEVBQUUsUUFBUSxFQUFFLFVBQVUsQ0FBQyxDQUFDO0FBRTdGLE1BQU0sVUFBVSxJQUFJLENBQUMsRUFBTSxFQUFFLEdBQVcsRUFBRSxHQUFHLElBQXlCO0lBQ2xFLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEdBQUcsR0FBRyxFQUFFLElBQUksSUFBSSxFQUFFLENBQUMsa0JBQWtCLENBQUMsT0FBTyxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDO0FBQ3hGLENBQUM7QUFFRCxNQUFNLFVBQVUsWUFBWSxDQUFDLEVBQU0sRUFBRSxRQUFnQjtJQUNqRCxJQUFJLEVBQUUsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDNUIsT0FBTztLQUNWO0lBRUQsSUFBSSxLQUFLLEdBQUcsQ0FBQyxDQUFDO0lBQ2QsSUFBSSxFQUFFLENBQUMsVUFBVSxDQUFDLGNBQWMsRUFBRSxNQUFNLENBQUMsRUFBRTtRQUN2QyxFQUFFLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ3RCLEtBQUssRUFBRSxDQUFDO0tBQ1g7SUFFRCxJQUFJLEVBQUUsQ0FBQyxVQUFVLENBQUMsY0FBYyxFQUFFLE1BQU0sQ0FBQyxFQUFFO1FBQ3ZDLEVBQUUsQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDdEIsS0FBSyxFQUFFLENBQUM7S0FDWDtJQUVELElBQUksRUFBRSxDQUFDLFVBQVUsQ0FBQyxjQUFjLEVBQUUsTUFBTSxDQUFDLEVBQUU7UUFDdkMsRUFBRSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUN0QixLQUFLLEVBQUUsQ0FBQztLQUNYO0lBRUQsSUFBSSxFQUFFLENBQUMsVUFBVSxDQUFDLGVBQWUsRUFBRSxNQUFNLENBQUMsRUFBRTtRQUN4QyxFQUFFLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ3ZCLEtBQUssRUFBRSxDQUFDO0tBQ1g7SUFFRCxJQUFJLEVBQUUsQ0FBQyxVQUFVLENBQUMsZUFBZSxFQUFFLE1BQU0sQ0FBQyxFQUFFO1FBQ3hDLEVBQUUsQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDdkIsS0FBSyxFQUFFLENBQUM7S0FDWDtJQUVELElBQUksS0FBSyxJQUFJLEVBQUUsQ0FBQyx5QkFBeUIsQ0FBQyxRQUFRLENBQUMsRUFBRTtRQUNqRCxFQUFFLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0tBQ3JCO0FBQ0wsQ0FBQztBQUVELE1BQU0sVUFBVSxnQkFBZ0IsQ0FBQyxFQUFNLEVBQUUsUUFBZ0I7SUFDckQsT0FBTyxFQUFFLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxlQUFlLEVBQUUsSUFBSSxFQUFFLENBQUMsNkJBQTZCLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDNUcsQ0FBQztBQUVELE1BQU0sVUFBVSxrQkFBa0IsQ0FBQyxFQUFNLEVBQUUsUUFBZ0I7SUFDdkQsT0FBTyxFQUFFLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxlQUFlLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQzFFLENBQUM7QUFFRCxNQUFNLFVBQVUsUUFBUSxDQUNwQixFQUFNLEVBQ04sUUFBa0MsRUFBRSxFQUNwQyxVQUFvQixFQUFFLEVBQ3RCLE9BQU8sR0FBRyxNQUFNO0lBRWhCLE1BQU0sVUFBVSxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDM0MsS0FBSyxDQUFDLE9BQU8sQ0FBQyxHQUFHLFVBQVUsQ0FBQztJQUU1QixNQUFNLFFBQVEsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLE9BQU8sRUFBRSxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7SUFDbEYsS0FBSyxNQUFNLEtBQUssSUFBSSxRQUFRLEVBQUU7UUFDMUIsUUFBUSxDQUFDLEVBQUUsRUFBRSxLQUFLLEVBQUUsVUFBVSxFQUFFLEtBQUssQ0FBQyxDQUFDO0tBQzFDO0lBQ0QsT0FBTyxLQUFLLENBQUM7QUFDakIsQ0FBQztBQUVELE1BQU0sVUFBVSxRQUFRLENBQUMsRUFBTTtJQUMzQixPQUFPLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFDckMsQ0FBQztBQUVELE1BQU0sVUFBVSxhQUFhLENBQUMsRUFBTTtJQUNoQyxNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsU0FBUyxFQUFFLENBQUM7SUFFOUIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLElBQUksTUFBTSxDQUFDLEtBQUssR0FBRyxLQUFLO1FBQUUsRUFBRSxDQUFDLFdBQVcsRUFBRSxDQUFDO0lBRTFELElBQUksQ0FBQyxFQUFFLENBQUMsVUFBVSxDQUFDLGNBQWMsRUFBRSxNQUFNLENBQUMsSUFBSSxNQUFNLENBQUMsS0FBSyxHQUFHLEtBQUs7UUFBRSxFQUFFLENBQUMsZUFBZSxDQUFDLGNBQWMsQ0FBQyxDQUFDO0lBRXZHLElBQUksQ0FBQyxFQUFFLENBQUMsVUFBVSxDQUFDLGNBQWMsRUFBRSxNQUFNLENBQUMsSUFBSSxNQUFNLENBQUMsS0FBSyxHQUFHLE1BQU07UUFBRSxFQUFFLENBQUMsZUFBZSxDQUFDLGNBQWMsQ0FBQyxDQUFDO0lBRXhHLElBQUksQ0FBQyxFQUFFLENBQUMsVUFBVSxDQUFDLGVBQWUsRUFBRSxNQUFNLENBQUMsSUFBSSxNQUFNLENBQUMsS0FBSyxHQUFHLEdBQUc7UUFBRSxFQUFFLENBQUMsZUFBZSxDQUFDLGVBQWUsQ0FBQyxDQUFDO0lBRXZHLElBQUksQ0FBQyxFQUFFLENBQUMsVUFBVSxDQUFDLGNBQWMsRUFBRSxNQUFNLENBQUMsSUFBSSxNQUFNLENBQUMsS0FBSyxHQUFHLElBQUk7UUFBRSxFQUFFLENBQUMsZUFBZSxDQUFDLGNBQWMsQ0FBQyxDQUFDO0lBRXRHLElBQUksQ0FBQyxFQUFFLENBQUMsVUFBVSxDQUFDLGVBQWUsRUFBRSxNQUFNLENBQUMsSUFBSSxNQUFNLENBQUMsS0FBSyxHQUFHLEtBQUs7UUFBRSxFQUFFLENBQUMsZUFBZSxDQUFDLGVBQWUsQ0FBQyxDQUFDO0FBQzdHLENBQUM7QUFFRCxNQUFNLFVBQVUsaUJBQWlCLENBQUMsRUFBTTtJQUNwQyxhQUFhLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDbEIsS0FBSyxNQUFNLFFBQVEsSUFBSSxRQUFRLENBQUMsRUFBRSxDQUFDLEVBQUU7UUFDakMsWUFBWSxDQUFDLEVBQUUsRUFBRSxRQUFRLENBQUMsQ0FBQztLQUM5QjtBQUNMLENBQUM7QUFFRCxNQUFNLFVBQVUsUUFBUSxDQUFDLEVBQU0sRUFBRSxFQUFVLEVBQUUsTUFBTSxHQUFHLEtBQUssRUFBRSxRQUFRLEdBQUcsS0FBSztJQUN6RSxJQUFJLFFBQVEsR0FBRyxFQUFFLENBQUM7SUFDbEIsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLEdBQUcsQ0FBQyxJQUFJLEdBQUcsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDaEQsUUFBUSxJQUFJLEtBQUssR0FBRyxDQUFDLElBQUksR0FBRyxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUM7SUFDckMsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLEdBQUcsQ0FBQyxJQUFJLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUNuRCxRQUFRLElBQUksT0FBTyxHQUFHLENBQUMsSUFBSSxHQUFHLEVBQUUsQ0FBQyxDQUFDO0lBQ2xDLE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxDQUFDO0lBQzVDLFFBQVEsSUFBSSxPQUFPLEdBQUcsSUFBSSxDQUFDO0lBQzNCLE1BQU0sWUFBWSxHQUFHLFFBQVEsQ0FBQztJQUU5QixJQUFJLE1BQU0sRUFBRTtRQUNSLElBQUksS0FBSyxHQUFHLENBQUMsSUFBSSxRQUFRO1lBQUUsT0FBTyxFQUFFLENBQUMsT0FBTyxDQUFDLHFCQUFxQixFQUFFLEtBQUssRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLFlBQVksQ0FBQyxDQUFDO1FBQzNHLElBQUksT0FBTyxHQUFHLENBQUM7WUFBRSxPQUFPLEVBQUUsQ0FBQyxPQUFPLENBQUMsZ0JBQWdCLEVBQUUsT0FBTyxFQUFFLE9BQU8sRUFBRSxZQUFZLENBQUMsQ0FBQztRQUNyRixPQUFPLEVBQUUsQ0FBQyxPQUFPLENBQUMsV0FBVyxFQUFFLE9BQU8sRUFBRSxZQUFZLENBQUMsQ0FBQztLQUN6RDtTQUFNO1FBQ0gsSUFBSSxLQUFLLEdBQUcsQ0FBQyxJQUFJLFFBQVE7WUFBRSxPQUFPLEVBQUUsQ0FBQyxPQUFPLENBQUMsZ0JBQWdCLEVBQUUsS0FBSyxFQUFFLE9BQU8sRUFBRSxPQUFPLENBQUMsQ0FBQztRQUN4RixJQUFJLE9BQU8sR0FBRyxDQUFDO1lBQUUsT0FBTyxFQUFFLENBQUMsT0FBTyxDQUFDLFdBQVcsRUFBRSxPQUFPLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFDbEUsT0FBTyxFQUFFLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxPQUFPLENBQUMsQ0FBQztLQUN0QztBQUNMLENBQUM7QUFFRCxNQUFNLFVBQVUsU0FBUyxDQUFDLEVBQU0sRUFBRSxNQUFNLEdBQUcsQ0FBQyxFQUFFLE1BQU0sR0FBRyxLQUFLO0lBQ3hELE1BQU0sSUFBSSxHQUFHLElBQUksSUFBSSxDQUFDLElBQUksSUFBSSxFQUFFLENBQUMsT0FBTyxFQUFFLEdBQUcsTUFBTSxDQUFDLENBQUM7SUFFckQsSUFBSSxNQUFNLEVBQUU7UUFDUixNQUFNLEVBQUUsR0FBRyxFQUFFLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsa0JBQWtCLEVBQUUsQ0FBQyxDQUFDO1FBQ3pELE9BQU8sSUFBSSxDQUFDLGtCQUFrQixDQUFDLE9BQU8sQ0FBQyxHQUFHLEdBQUcsR0FBRyxFQUFFLENBQUM7S0FDdEQ7U0FBTTtRQUNILE9BQU8sSUFBSSxDQUFDLGtCQUFrQixDQUFDLE9BQU8sQ0FBQyxDQUFDO0tBQzNDO0FBQ0wsQ0FBQztBQUVELE1BQU0sQ0FBQyxLQUFLLFVBQVUsV0FBVyxDQUFDLEVBQU07SUFDcEMsNklBQTZJO0lBQzdJLDZHQUE2RztJQUM3RyxNQUFNLFdBQVcsR0FBRyxDQUFDLE1BQU0sRUFBRSxhQUFhLEVBQUUsU0FBUyxFQUFFLGNBQWMsRUFBRSxjQUFjLENBQUMsQ0FBQztJQUV2RixNQUFNLEtBQUssR0FBRyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUM7SUFFM0IsS0FBSyxNQUFNLENBQUMsUUFBUSxFQUFFLEtBQUssQ0FBQyxJQUFJLE1BQU0sQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEVBQUU7UUFDbkQsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUN0QyxJQUNJLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUM7WUFDL0IsTUFBTSxDQUFDLGlCQUFpQjtZQUN4QixNQUFNLENBQUMsb0JBQW9CLEdBQUcsRUFBRSxDQUFDLGVBQWUsRUFBRTtZQUNsRCxDQUFDLE1BQU0sQ0FBQyxjQUFjO1lBRXRCLFNBQVM7UUFFYixFQUFFLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ25CLEtBQUssTUFBTSxXQUFXLElBQUksS0FBSyxFQUFFO1lBQzdCLEVBQUUsQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLENBQUM7U0FDM0I7UUFFRCxNQUFNLEVBQUUsQ0FBQyxlQUFlLEVBQUUsQ0FBQztRQUMzQixFQUFFLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0tBQ3RCO0FBQ0wsQ0FBQztBQUVELE1BQU0sVUFBVSxTQUFTLENBQUMsRUFBTTtJQUM1QixFQUFFLENBQUMsVUFBVSxDQUFDLFlBQVksQ0FBQyxDQUFDO0lBQzVCLEVBQUUsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDckIseUJBQXlCO0lBQ3pCLHdCQUF3QjtJQUN4QixtQ0FBbUM7SUFDbkMsMENBQTBDO0lBQzFDLDZDQUE2QztJQUM3QyxxQ0FBcUM7SUFDckMsbUNBQW1DO0lBQ25DLGlEQUFpRDtJQUNqRCx3QkFBd0I7SUFDeEIsMkNBQTJDO0lBQzNDLG9DQUFvQztBQUN4QyxDQUFDO0FBRUQsTUFBTSxDQUFDLE1BQU0sWUFBWSxHQUFHO0lBQ3hCLFlBQVk7SUFDWixVQUFVO0lBQ1YsY0FBYztJQUNkLE9BQU87SUFDUCxVQUFVO0lBQ1Ysc0JBQXNCO0lBQ3RCLGtCQUFrQjtJQUNsQixLQUFLO0lBQ0wscUJBQXFCO0lBQ3JCLHNCQUFzQjtJQUN0QixZQUFZO0lBQ1osd0JBQXdCO0lBQ3hCLDZCQUE2QjtJQUM3QixZQUFZO0lBQ1osZ0JBQWdCO0lBQ2hCLFNBQVM7SUFDVCxPQUFPO0lBQ1AsV0FBVztJQUNYLFFBQVE7SUFDUixXQUFXO0lBQ1gsV0FBVztJQUNYLFVBQVU7SUFDVix1QkFBdUI7SUFDdkIsZUFBZTtJQUNmLGVBQWU7SUFDZixZQUFZO0lBQ1osU0FBUztJQUNULGFBQWE7SUFDYixZQUFZO0lBQ1osYUFBYTtJQUNiLFVBQVU7SUFDVixjQUFjO0lBQ2QsMkJBQTJCO0NBQzlCLENBQUM7QUFFRixNQUFNLENBQUMsS0FBSyxVQUFVLFFBQVEsQ0FDMUIsRUFBTSxFQUNOLElBQXdCLEVBQ3hCLFNBQWlCLEVBQ2pCLE9BQWUsRUFDZixNQUFjLEVBQ2QsUUFBZ0IsRUFDaEIsU0FBaUI7SUFFakIsSUFBSSxJQUFJLENBQUMsU0FBUyxLQUFLLEVBQUUsRUFBRTtRQUN2QixNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsT0FBTyxDQUNyQixzREFBc0QsRUFDdEQsSUFBSSxDQUFDLE1BQU0sRUFDWCxJQUFJLENBQUMsR0FBRyxFQUNSLElBQUksQ0FBQyxPQUFPLEVBQ1osSUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUMsTUFBTSxFQUNoQyxJQUFJLENBQUMsYUFBYSxHQUFHLElBQUksQ0FBQyxNQUFNLEVBQ2hDLElBQUksQ0FBQyxhQUFhLEVBQ2xCLFNBQVMsRUFDVCxPQUFPLEVBQ1AsT0FBTyxHQUFHLFNBQVMsRUFDbkIsU0FBUyxHQUFHLENBQUMsSUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQzlDLE9BQU8sR0FBRyxDQUFDLElBQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUM1QyxPQUFPLEdBQUcsU0FBUyxHQUFHLElBQUksQ0FBQyxhQUFhLEVBQ3hDLE1BQU0sRUFDTixRQUFRLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUNuQixFQUFFLENBQUMsc0JBQXNCLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFDakQsRUFBRSxDQUFDLE9BQU8sQ0FBQyxTQUFTLEVBQUUsV0FBVyxDQUFDLEVBQ2xDLEVBQUUsQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLHVCQUF1QixDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRSxXQUFXLENBQUMsQ0FDbkUsQ0FBQztRQUVGLE9BQU8sQ0FBQyxNQUFNLEVBQUUsQ0FBQyxZQUFZLENBQUMsYUFBYSxDQUFDLGVBQWUsRUFBRSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsTUFBTSxDQUFDLENBQUM7WUFBQyxDQUFDO0tBQzNGO0FBQ0wsQ0FBQyJ9\",\"filename\":\"/lib/util.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":13.25,\"server\":\"pserv-14\",\"moduleSequenceNumber\":100649,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"purchaseTor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"purchaseProgram\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"connect\",\"cost\":2},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"suppression\":0,\"activeSuppressionThreads\":[],\"suppressionIntervalID\":null,\"suppressionLastUpdateTime\":0}},\"pserv-15\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-15\",\"httpPortOpen\":false,\"ip\":\"58.0.7.7\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":505,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"script\\\":\\\"/lib/exec/grow.js\\\",\\\"host\\\":\\\"pserv-15\\\",\\\"numThreads\\\":144,\\\"target\\\":\\\"phantasy\\\",\\\"hackLevelTiming\\\":153.19873646097005,\\\"hackLevelEffect\\\":204,\\\"batchId\\\":11,\\\"offset\\\":18400,\\\"operationTime\\\":142114,\\\"finish\\\":160514,\\\"realTimeStart\\\":1647907321842,\\\"uid\\\":\\\"011-2G-pserv-15\\\",\\\"writeFile\\\":\\\"\\\"}\"],\"dataMap\":{},\"filename\":\"/lib/exec/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":52.4100000000002,\"pid\":1296,\"ramUsage\":1.75,\"server\":\"pserv-15\",\"threads\":144,\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///458caa4a-6f31-45cb-b759-7de7d4c2b6cd\",\"moduleSequenceNumber\":100732}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"script\\\":\\\"/lib/exec/hack.js\\\",\\\"host\\\":\\\"pserv-15\\\",\\\"numThreads\\\":120,\\\"target\\\":\\\"phantasy\\\",\\\"hackLevelTiming\\\":13.499605144053142,\\\"hackLevelEffect\\\":204,\\\"batchId\\\":12,\\\"offset\\\":19200,\\\"operationTime\\\":142113,\\\"finish\\\":161313,\\\"realTimeStart\\\":1647907321842,\\\"uid\\\":\\\"012-0H-pserv-15\\\",\\\"writeFile\\\":\\\"\\\"}\"],\"dataMap\":{},\"filename\":\"/lib/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":51.61000000000019,\"pid\":1299,\"ramUsage\":1.7,\"server\":\"pserv-15\",\"threads\":120,\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///f360a898-ec12-47c7-83ad-a1ed696b6ecf\",\"moduleSequenceNumber\":100731}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"script\\\":\\\"/lib/exec/weaken.js\\\",\\\"host\\\":\\\"pserv-15\\\",\\\"numThreads\\\":10,\\\"target\\\":\\\"phantasy\\\",\\\"hackLevelTiming\\\":203.99842057621257,\\\"hackLevelEffect\\\":204,\\\"batchId\\\":16,\\\"offset\\\":26800,\\\"operationTime\\\":113691,\\\"finish\\\":140491,\\\"realTimeStart\\\":1647907321842,\\\"uid\\\":\\\"016-3WG-pserv-15\\\",\\\"writeFile\\\":\\\"\\\"}\"],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":44.01000000000009,\"pid\":1320,\"ramUsage\":1.75,\"server\":\"pserv-15\",\"threads\":10,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///3341af4a-b2d3-485c-9818-9cd9a03efc76\",\"moduleSequenceNumber\":100730}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"script\\\":\\\"/lib/exec/weaken.js\\\",\\\"host\\\":\\\"pserv-15\\\",\\\"numThreads\\\":5,\\\"target\\\":\\\"phantasy\\\",\\\"hackLevelTiming\\\":203.99842057621257,\\\"hackLevelEffect\\\":204,\\\"batchId\\\":17,\\\"offset\\\":27600,\\\"operationTime\\\":113691,\\\"finish\\\":141291,\\\"realTimeStart\\\":1647907321842,\\\"uid\\\":\\\"017-1WH-pserv-15\\\",\\\"writeFile\\\":\\\"\\\"}\"],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":43.21000000000008,\"pid\":1323,\"ramUsage\":1.75,\"server\":\"pserv-15\",\"threads\":5,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///3341af4a-b2d3-485c-9818-9cd9a03efc76\",\"moduleSequenceNumber\":100730}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"script\\\":\\\"/lib/exec/weaken.js\\\",\\\"host\\\":\\\"pserv-15\\\",\\\"numThreads\\\":12,\\\"target\\\":\\\"phantasy\\\",\\\"hackLevelTiming\\\":203.99842057621257,\\\"hackLevelEffect\\\":204,\\\"batchId\\\":17,\\\"offset\\\":28400,\\\"operationTime\\\":113691,\\\"finish\\\":142091,\\\"realTimeStart\\\":1647907321842,\\\"uid\\\":\\\"017-3WG-pserv-15\\\",\\\"writeFile\\\":\\\"\\\"}\"],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":42.41000000000007,\"pid\":1325,\"ramUsage\":1.75,\"server\":\"pserv-15\",\"threads\":12,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///3341af4a-b2d3-485c-9818-9cd9a03efc76\",\"moduleSequenceNumber\":100730}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"script\\\":\\\"/lib/exec/weaken.js\\\",\\\"host\\\":\\\"pserv-15\\\",\\\"numThreads\\\":1,\\\"target\\\":\\\"phantasy\\\",\\\"hackLevelTiming\\\":203.99842057621257,\\\"hackLevelEffect\\\":204,\\\"batchId\\\":18,\\\"offset\\\":29200,\\\"operationTime\\\":113691,\\\"finish\\\":142891,\\\"realTimeStart\\\":1647907321842,\\\"uid\\\":\\\"018-1WH-pserv-15\\\",\\\"writeFile\\\":\\\"\\\"}\"],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":41.610000000000056,\"pid\":1328,\"ramUsage\":1.75,\"server\":\"pserv-15\",\"threads\":1,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///3341af4a-b2d3-485c-9818-9cd9a03efc76\",\"moduleSequenceNumber\":100730}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.stanek.charge(ns.args[0], ns.args[1]);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hhcmdlLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL3N0YW5lay9jaGFyZ2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUM5QixPQUFPLElBQUksRUFBRTtRQUNULE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7S0FDakQ7QUFDTCxDQUFDIn0=\",\"filename\":\"/lib/stanek/charge.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/stanek/charge.js\",\"url\":\"blob:file:///174b3a22-1e29-410f-a124-67cd3f14ac05\",\"moduleSequenceNumber\":99917}],\"dependents\":[],\"ramUsage\":2,\"server\":\"pserv-15\",\"moduleSequenceNumber\":99917,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.charge\",\"cost\":0.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.grow(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLElBQUksR0FBdUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFFbkUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDdkIsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7UUFDeEMsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7S0FDM0MsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyJ9\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///458caa4a-6f31-45cb-b759-7de7d4c2b6cd\",\"moduleSequenceNumber\":100732}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-15\",\"moduleSequenceNumber\":100732,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.weaken(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxJQUFJLEdBQXVCLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO0lBRW5FLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFO1FBQ3pCLGtCQUFrQixFQUFFLElBQUksQ0FBQyxlQUFlO1FBQ3hDLGtCQUFrQixFQUFFLElBQUksQ0FBQyxlQUFlO0tBQzNDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///3341af4a-b2d3-485c-9818-9cd9a03efc76\",\"moduleSequenceNumber\":100730}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-15\",\"moduleSequenceNumber\":100730,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.hack(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLElBQUksR0FBdUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFFbkUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDdkIsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7UUFDeEMsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7S0FDM0MsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyJ9\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///f360a898-ec12-47c7-83ad-a1ed696b6ecf\",\"moduleSequenceNumber\":100731}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-15\",\"moduleSequenceNumber\":100731,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export var ReservedPorts;\\r\\n(function (ReservedPorts) {\\r\\n    ReservedPorts[ReservedPorts[\\\"HACKING_INFO\\\"] = 1] = \\\"HACKING_INFO\\\";\\r\\n    ReservedPorts[ReservedPorts[\\\"HACKNET_INFO\\\"] = 2] = \\\"HACKNET_INFO\\\";\\r\\n    ReservedPorts[ReservedPorts[\\\"HACK_WRITE_INFO\\\"] = 3] = \\\"HACK_WRITE_INFO\\\";\\r\\n})(ReservedPorts || (ReservedPorts = {}));\\r\\nexport const WEAKENJS = \\\"/lib/exec/weaken.js\\\";\\r\\nexport const GROWJS = \\\"/lib/exec/grow.js\\\";\\r\\nexport const HACKJS = \\\"/lib/exec/hack.js\\\";\\r\\nexport const UTILJS = \\\"/lib/util.js\\\";\\r\\nexport const CITIES = [\\\"Aevum\\\", \\\"Chongqing\\\", \\\"Sector-12\\\", \\\"New Tokyo\\\", \\\"Ishima\\\", \\\"Volhaven\\\"];\\r\\nexport function llog(ns, str, ...args) {\\r\\n    ns.print(ns.sprintf(\\\"%8s \\\" + str, new Date().toLocaleTimeString(\\\"it-IT\\\"), ...args));\\r\\n}\\r\\nexport function softenServer(ns, hostname) {\\r\\n    if (ns.hasRootAccess(hostname)) {\\r\\n        return;\\r\\n    }\\r\\n    let ports = 0;\\r\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n        ns.brutessh(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n        ns.ftpcrack(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n        ns.httpworm(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n        ns.relaysmtp(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n        ns.sqlinject(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ports >= ns.getServerNumPortsRequired(hostname)) {\\r\\n        ns.nuke(hostname);\\r\\n    }\\r\\n}\\r\\nexport function serverIsHackable(ns, hostname) {\\r\\n    return ns.hasRootAccess(hostname) && ns.getHackingLevel() >= ns.getServerRequiredHackingLevel(hostname);\\r\\n}\\r\\nexport function canExecuteOnServer(ns, hostname) {\\r\\n    return ns.hasRootAccess(hostname) && ns.getServerMaxRam(hostname) > 0;\\r\\n}\\r\\nexport function mapHosts(ns, hosts = {}, parents = [], current = \\\"home\\\") {\\r\\n    const newParents = parents.concat(current);\\r\\n    hosts[current] = newParents;\\r\\n    const children = ns.scan(current).filter((element) => !parents.includes(element));\\r\\n    for (const child of children) {\\r\\n        mapHosts(ns, hosts, newParents, child);\\r\\n    }\\r\\n    return hosts;\\r\\n}\\r\\nexport function allHosts(ns) {\\r\\n    return Object.keys(mapHosts(ns));\\r\\n}\\r\\nexport function doProgramBuys(ns) {\\r\\n    const player = ns.getPlayer();\\r\\n    if (!player.tor && player.money > 200e3)\\r\\n        ns.purchaseTor();\\r\\n    if (!ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\") && player.money > 500e3)\\r\\n        ns.purchaseProgram(\\\"BruteSSH.exe\\\");\\r\\n    if (!ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\") && player.money > 1500e3)\\r\\n        ns.purchaseProgram(\\\"FTPCrack.exe\\\");\\r\\n    if (!ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\") && player.money > 5e6)\\r\\n        ns.purchaseProgram(\\\"relaySMTP.exe\\\");\\r\\n    if (!ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\") && player.money > 30e6)\\r\\n        ns.purchaseProgram(\\\"HTTPWorm.exe\\\");\\r\\n    if (!ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\") && player.money > 250e6)\\r\\n        ns.purchaseProgram(\\\"SQLInject.exe\\\");\\r\\n}\\r\\nexport function doBuyAndSoftenAll(ns) {\\r\\n    doProgramBuys(ns);\\r\\n    for (const hostname of allHosts(ns)) {\\r\\n        softenServer(ns, hostname);\\r\\n    }\\r\\n}\\r\\nexport function stFormat(ns, ms, showms = false, showfull = false) {\\r\\n    let timeLeft = ms;\\r\\n    const hours = Math.floor(ms / (1000 * 60 * 60));\\r\\n    timeLeft -= hours * (1000 * 60 * 60);\\r\\n    const minutes = Math.floor(timeLeft / (1000 * 60));\\r\\n    timeLeft -= minutes * (1000 * 60);\\r\\n    const seconds = Math.floor(timeLeft / 1000);\\r\\n    timeLeft -= seconds * 1000;\\r\\n    const milliseconds = timeLeft;\\r\\n    if (showms) {\\r\\n        if (hours > 0 || showfull)\\r\\n            return ns.sprintf(\\\"%02d:%02d:%02d.%03d\\\", hours, minutes, seconds, milliseconds);\\r\\n        if (minutes > 0)\\r\\n            return ns.sprintf(\\\"%02d:%02d.%03d\\\", minutes, seconds, milliseconds);\\r\\n        return ns.sprintf(\\\"%02d.%03d\\\", seconds, milliseconds);\\r\\n    }\\r\\n    else {\\r\\n        if (hours > 0 || showfull)\\r\\n            return ns.sprintf(\\\"%02d:%02d:%02d\\\", hours, minutes, seconds);\\r\\n        if (minutes > 0)\\r\\n            return ns.sprintf(\\\"%02d:%02d\\\", minutes, seconds);\\r\\n        return ns.sprintf(\\\"%02d\\\", seconds);\\r\\n    }\\r\\n}\\r\\nexport function stdFormat(ns, offset = 0, showms = false) {\\r\\n    const date = new Date(new Date().getTime() + offset);\\r\\n    if (showms) {\\r\\n        const ms = ns.sprintf(\\\"%03d\\\", date.getUTCMilliseconds());\\r\\n        return date.toLocaleTimeString(\\\"it-IT\\\") + \\\".\\\" + ms;\\r\\n    }\\r\\n    else {\\r\\n        return date.toLocaleTimeString(\\\"it-IT\\\");\\r\\n    }\\r\\n}\\r\\nexport async function doBackdoors(ns) {\\r\\n    //const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"w0r1d_d43m0n\\\", \\\"b-and-a\\\", \\\"ecorp\\\", \\\"fulcrumassets\\\", \\\"fulcrumtech\\\"];\\r\\n    //const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"omnitek\\\", \\\"kuai-gong\\\", \\\"megacorp\\\"];\\r\\n    const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"w0r1d_d43m0n\\\"];\\r\\n    const hosts = mapHosts(ns);\\r\\n    for (const [hostName, trail] of Object.entries(hosts)) {\\r\\n        const server = ns.getServer(hostName);\\r\\n        if (!targetHosts.includes(hostName) ||\\r\\n            server.backdoorInstalled ||\\r\\n            server.requiredHackingSkill > ns.getHackingLevel() ||\\r\\n            !server.hasAdminRights)\\r\\n            continue;\\r\\n        ns.print(hostName);\\r\\n        for (const hostHopName of trail) {\\r\\n            ns.connect(hostHopName);\\r\\n        }\\r\\n        await ns.installBackdoor();\\r\\n        ns.connect(\\\"home\\\");\\r\\n    }\\r\\n}\\r\\nexport function cleanLogs(ns) {\\r\\n    ns.disableLog(\\\"disableLog\\\");\\r\\n    ns.disableLog(\\\"ALL\\\");\\r\\n    // ns.disableLog(\\\"sleep\\\")\\r\\n    // ns.disableLog(\\\"exec\\\")\\r\\n    // ns.disableLog(\\\"getServerMaxRam\\\")\\r\\n    // ns.disableLog(\\\"getServerSecurityLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerMinSecurityLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerMaxMoney\\\")\\r\\n    // ns.disableLog(\\\"getHackingLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerRequiredHackingLevel\\\")\\r\\n    // ns.disableLog(\\\"scan\\\")\\r\\n    // ns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n    // ns.disableLog(\\\"getServerUsedRam\\\")\\r\\n}\\r\\nexport const ALL_FACTIONS = [\\r\\n    \\\"Illuminati\\\",\\r\\n    \\\"Daedalus\\\",\\r\\n    \\\"The Covenant\\\",\\r\\n    \\\"ECorp\\\",\\r\\n    \\\"MegaCorp\\\",\\r\\n    \\\"Bachman & Associates\\\",\\r\\n    \\\"Blade Industries\\\",\\r\\n    \\\"NWO\\\",\\r\\n    \\\"Clarke Incorporated\\\",\\r\\n    \\\"OmniTek Incorporated\\\",\\r\\n    \\\"Four Sigma\\\",\\r\\n    \\\"KuaiGong International\\\",\\r\\n    \\\"Fulcrum Secret Technologies\\\",\\r\\n    \\\"BitRunners\\\",\\r\\n    \\\"The Black Hand\\\",\\r\\n    \\\"NiteSec\\\",\\r\\n    \\\"Aevum\\\",\\r\\n    \\\"Chongqing\\\",\\r\\n    \\\"Ishima\\\",\\r\\n    \\\"New Tokyo\\\",\\r\\n    \\\"Sector-12\\\",\\r\\n    \\\"Volhaven\\\",\\r\\n    \\\"Speakers for the Dead\\\",\\r\\n    \\\"The Dark Army\\\",\\r\\n    \\\"The Syndicate\\\",\\r\\n    \\\"Silhouette\\\",\\r\\n    \\\"Tetrads\\\",\\r\\n    \\\"Slum Snakes\\\",\\r\\n    \\\"Netburners\\\",\\r\\n    \\\"Tian Di Hui\\\",\\r\\n    \\\"CyberSec\\\",\\r\\n    \\\"Bladeburners\\\",\\r\\n    \\\"Church of the Machine God\\\",\\r\\n];\\r\\nexport async function writeOut(ns, data, startTime, endTime, result, startSec, startCash) {\\r\\n    if (data.writeFile !== \\\"\\\") {\\r\\n        const outstr = ns.sprintf(\\\"%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\", data.target, data.uid, data.batchId, data.realTimeStart + data.offset, data.realTimeStart + data.finish, data.operationTime, startTime, endTime, endTime - startTime, startTime - (data.realTimeStart + data.offset), endTime - (data.realTimeStart + data.finish), endTime - startTime - data.operationTime, result, startSec.toFixed(2), ns.getServerSecurityLevel(data.target).toFixed(2), ns.nFormat(startCash, \\\"($0.000a)\\\"), ns.nFormat(ns.getServerMoneyAvailable(data.target), \\\"($0.000a)\\\"));\\r\\n        while (!await ns.tryWritePort(ReservedPorts.HACK_WRITE_INFO, [data.writeFile, outstr]))\\r\\n            ;\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi91dGlsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLE1BQU0sQ0FBTixJQUFZLGFBSVg7QUFKRCxXQUFZLGFBQWE7SUFDckIsaUVBQWdCLENBQUE7SUFDaEIsaUVBQVksQ0FBQTtJQUNaLHVFQUFlLENBQUE7QUFDbkIsQ0FBQyxFQUpXLGFBQWEsS0FBYixhQUFhLFFBSXhCO0FBRUQsTUFBTSxDQUFDLE1BQU0sUUFBUSxHQUFHLHFCQUFxQixDQUFDO0FBQzlDLE1BQU0sQ0FBQyxNQUFNLE1BQU0sR0FBRyxtQkFBbUIsQ0FBQztBQUMxQyxNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUcsbUJBQW1CLENBQUM7QUFDMUMsTUFBTSxDQUFDLE1BQU0sTUFBTSxHQUFHLGNBQWMsQ0FBQztBQUVyQyxNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUcsQ0FBQyxPQUFPLEVBQUUsV0FBVyxFQUFFLFdBQVcsRUFBRSxXQUFXLEVBQUUsUUFBUSxFQUFFLFVBQVUsQ0FBQyxDQUFDO0FBRTdGLE1BQU0sVUFBVSxJQUFJLENBQUMsRUFBTSxFQUFFLEdBQVcsRUFBRSxHQUFHLElBQXlCO0lBQ2xFLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEdBQUcsR0FBRyxFQUFFLElBQUksSUFBSSxFQUFFLENBQUMsa0JBQWtCLENBQUMsT0FBTyxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDO0FBQ3hGLENBQUM7QUFFRCxNQUFNLFVBQVUsWUFBWSxDQUFDLEVBQU0sRUFBRSxRQUFnQjtJQUNqRCxJQUFJLEVBQUUsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDNUIsT0FBTztLQUNWO0lBRUQsSUFBSSxLQUFLLEdBQUcsQ0FBQyxDQUFDO0lBQ2QsSUFBSSxFQUFFLENBQUMsVUFBVSxDQUFDLGNBQWMsRUFB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\",\"filename\":\"/lib/util.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":13.25,\"server\":\"pserv-15\",\"moduleSequenceNumber\":100657,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"purchaseTor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"purchaseProgram\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"connect\",\"cost\":2},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"suppression\":0,\"activeSuppressionThreads\":[],\"suppressionIntervalID\":null,\"suppressionLastUpdateTime\":0}},\"pserv-16\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-16\",\"httpPortOpen\":false,\"ip\":\"83.2.0.6\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":505,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"script\\\":\\\"/lib/exec/grow.js\\\",\\\"host\\\":\\\"pserv-16\\\",\\\"numThreads\\\":144,\\\"target\\\":\\\"phantasy\\\",\\\"hackLevelTiming\\\":153.19873646097005,\\\"hackLevelEffect\\\":204,\\\"batchId\\\":12,\\\"offset\\\":20000,\\\"operationTime\\\":142114,\\\"finish\\\":162114,\\\"realTimeStart\\\":1647907321842,\\\"uid\\\":\\\"012-2G-pserv-16\\\",\\\"writeFile\\\":\\\"\\\"}\"],\"dataMap\":{},\"filename\":\"/lib/exec/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":50.81000000000018,\"pid\":1301,\"ramUsage\":1.75,\"server\":\"pserv-16\",\"threads\":144,\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///ff4def12-602e-45ea-bc7e-18b2a959070f\",\"moduleSequenceNumber\":100735}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"script\\\":\\\"/lib/exec/hack.js\\\",\\\"host\\\":\\\"pserv-16\\\",\\\"numThreads\\\":120,\\\"target\\\":\\\"phantasy\\\",\\\"hackLevelTiming\\\":13.499605144053142,\\\"hackLevelEffect\\\":204,\\\"batchId\\\":13,\\\"offset\\\":20800,\\\"operationTime\\\":142113,\\\"finish\\\":162913,\\\"realTimeStart\\\":1647907321842,\\\"uid\\\":\\\"013-0H-pserv-16\\\",\\\"writeFile\\\":\\\"\\\"}\"],\"dataMap\":{},\"filename\":\"/lib/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":50.01000000000017,\"pid\":1303,\"ramUsage\":1.7,\"server\":\"pserv-16\",\"threads\":120,\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///c42c7d9c-6e68-48e3-840a-6cc1e616cf34\",\"moduleSequenceNumber\":100733}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"script\\\":\\\"/lib/exec/weaken.js\\\",\\\"host\\\":\\\"pserv-16\\\",\\\"numThreads\\\":4,\\\"target\\\":\\\"phantasy\\\",\\\"hackLevelTiming\\\":203.99842057621257,\\\"hackLevelEffect\\\":204,\\\"batchId\\\":18,\\\"offset\\\":29200,\\\"operationTime\\\":113691,\\\"finish\\\":142891,\\\"realTimeStart\\\":1647907321842,\\\"uid\\\":\\\"018-1WH-pserv-16\\\",\\\"writeFile\\\":\\\"\\\"}\"],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":41.610000000000056,\"pid\":1327,\"ramUsage\":1.75,\"server\":\"pserv-16\",\"threads\":4,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///d0dc7623-9549-4005-b7ac-abf181a338a7\",\"moduleSequenceNumber\":100734}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"script\\\":\\\"/lib/exec/weaken.js\\\",\\\"host\\\":\\\"pserv-16\\\",\\\"numThreads\\\":12,\\\"target\\\":\\\"phantasy\\\",\\\"hackLevelTiming\\\":203.99842057621257,\\\"hackLevelEffect\\\":204,\\\"batchId\\\":18,\\\"offset\\\":30000,\\\"operationTime\\\":113691,\\\"finish\\\":143691,\\\"realTimeStart\\\":1647907321842,\\\"uid\\\":\\\"018-3WG-pserv-16\\\",\\\"writeFile\\\":\\\"\\\"}\"],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":40.810000000000045,\"pid\":1330,\"ramUsage\":1.75,\"server\":\"pserv-16\",\"threads\":12,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///d0dc7623-9549-4005-b7ac-abf181a338a7\",\"moduleSequenceNumber\":100734}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"script\\\":\\\"/lib/exec/weaken.js\\\",\\\"host\\\":\\\"pserv-16\\\",\\\"numThreads\\\":5,\\\"target\\\":\\\"phantasy\\\",\\\"hackLevelTiming\\\":203.99842057621257,\\\"hackLevelEffect\\\":204,\\\"batchId\\\":19,\\\"offset\\\":30800,\\\"operationTime\\\":113691,\\\"finish\\\":144491,\\\"realTimeStart\\\":1647907321842,\\\"uid\\\":\\\"019-1WH-pserv-16\\\",\\\"writeFile\\\":\\\"\\\"}\"],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":40.01000000000003,\"pid\":1332,\"ramUsage\":1.75,\"server\":\"pserv-16\",\"threads\":5,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///d0dc7623-9549-4005-b7ac-abf181a338a7\",\"moduleSequenceNumber\":100734}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"script\\\":\\\"/lib/exec/weaken.js\\\",\\\"host\\\":\\\"pserv-16\\\",\\\"numThreads\\\":7,\\\"target\\\":\\\"phantasy\\\",\\\"hackLevelTiming\\\":203.99842057621257,\\\"hackLevelEffect\\\":204,\\\"batchId\\\":19,\\\"offset\\\":31600,\\\"operationTime\\\":113691,\\\"finish\\\":145291,\\\"realTimeStart\\\":1647907321842,\\\"uid\\\":\\\"019-3WG-pserv-16\\\",\\\"writeFile\\\":\\\"\\\"}\"],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":39.21000000000002,\"pid\":1335,\"ramUsage\":1.75,\"server\":\"pserv-16\",\"threads\":7,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///d0dc7623-9549-4005-b7ac-abf181a338a7\",\"moduleSequenceNumber\":100734}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.stanek.charge(ns.args[0], ns.args[1]);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hhcmdlLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL3N0YW5lay9jaGFyZ2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUM5QixPQUFPLElBQUksRUFBRTtRQUNULE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7S0FDakQ7QUFDTCxDQUFDIn0=\",\"filename\":\"/lib/stanek/charge.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/stanek/charge.js\",\"url\":\"blob:file:///e18917c3-355a-41f1-9afc-ac0095b89424\",\"moduleSequenceNumber\":99918}],\"dependents\":[],\"ramUsage\":2,\"server\":\"pserv-16\",\"moduleSequenceNumber\":99918,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.charge\",\"cost\":0.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.grow(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLElBQUksR0FBdUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFFbkUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDdkIsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7UUFDeEMsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7S0FDM0MsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyJ9\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///ff4def12-602e-45ea-bc7e-18b2a959070f\",\"moduleSequenceNumber\":100735}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-16\",\"moduleSequenceNumber\":100735,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.weaken(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxJQUFJLEdBQXVCLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO0lBRW5FLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFO1FBQ3pCLGtCQUFrQixFQUFFLElBQUksQ0FBQyxlQUFlO1FBQ3hDLGtCQUFrQixFQUFFLElBQUksQ0FBQyxlQUFlO0tBQzNDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///d0dc7623-9549-4005-b7ac-abf181a338a7\",\"moduleSequenceNumber\":100734}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-16\",\"moduleSequenceNumber\":100734,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.hack(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLElBQUksR0FBdUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFFbkUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDdkIsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7UUFDeEMsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7S0FDM0MsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyJ9\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///c42c7d9c-6e68-48e3-840a-6cc1e616cf34\",\"moduleSequenceNumber\":100733}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-16\",\"moduleSequenceNumber\":100733,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export var ReservedPorts;\\r\\n(function (ReservedPorts) {\\r\\n    ReservedPorts[ReservedPorts[\\\"HACKING_INFO\\\"] = 1] = \\\"HACKING_INFO\\\";\\r\\n    ReservedPorts[ReservedPorts[\\\"HACKNET_INFO\\\"] = 2] = \\\"HACKNET_INFO\\\";\\r\\n    ReservedPorts[ReservedPorts[\\\"HACK_WRITE_INFO\\\"] = 3] = \\\"HACK_WRITE_INFO\\\";\\r\\n})(ReservedPorts || (ReservedPorts = {}));\\r\\nexport const WEAKENJS = \\\"/lib/exec/weaken.js\\\";\\r\\nexport const GROWJS = \\\"/lib/exec/grow.js\\\";\\r\\nexport const HACKJS = \\\"/lib/exec/hack.js\\\";\\r\\nexport const UTILJS = \\\"/lib/util.js\\\";\\r\\nexport const CITIES = [\\\"Aevum\\\", \\\"Chongqing\\\", \\\"Sector-12\\\", \\\"New Tokyo\\\", \\\"Ishima\\\", \\\"Volhaven\\\"];\\r\\nexport function llog(ns, str, ...args) {\\r\\n    ns.print(ns.sprintf(\\\"%8s \\\" + str, new Date().toLocaleTimeString(\\\"it-IT\\\"), ...args));\\r\\n}\\r\\nexport function softenServer(ns, hostname) {\\r\\n    if (ns.hasRootAccess(hostname)) {\\r\\n        return;\\r\\n    }\\r\\n    let ports = 0;\\r\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n        ns.brutessh(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n        ns.ftpcrack(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n        ns.httpworm(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n        ns.relaysmtp(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n        ns.sqlinject(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ports >= ns.getServerNumPortsRequired(hostname)) {\\r\\n        ns.nuke(hostname);\\r\\n    }\\r\\n}\\r\\nexport function serverIsHackable(ns, hostname) {\\r\\n    return ns.hasRootAccess(hostname) && ns.getHackingLevel() >= ns.getServerRequiredHackingLevel(hostname);\\r\\n}\\r\\nexport function canExecuteOnServer(ns, hostname) {\\r\\n    return ns.hasRootAccess(hostname) && ns.getServerMaxRam(hostname) > 0;\\r\\n}\\r\\nexport function mapHosts(ns, hosts = {}, parents = [], current = \\\"home\\\") {\\r\\n    const newParents = parents.concat(current);\\r\\n    hosts[current] = newParents;\\r\\n    const children = ns.scan(current).filter((element) => !parents.includes(element));\\r\\n    for (const child of children) {\\r\\n        mapHosts(ns, hosts, newParents, child);\\r\\n    }\\r\\n    return hosts;\\r\\n}\\r\\nexport function allHosts(ns) {\\r\\n    return Object.keys(mapHosts(ns));\\r\\n}\\r\\nexport function doProgramBuys(ns) {\\r\\n    const player = ns.getPlayer();\\r\\n    if (!player.tor && player.money > 200e3)\\r\\n        ns.purchaseTor();\\r\\n    if (!ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\") && player.money > 500e3)\\r\\n        ns.purchaseProgram(\\\"BruteSSH.exe\\\");\\r\\n    if (!ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\") && player.money > 1500e3)\\r\\n        ns.purchaseProgram(\\\"FTPCrack.exe\\\");\\r\\n    if (!ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\") && player.money > 5e6)\\r\\n        ns.purchaseProgram(\\\"relaySMTP.exe\\\");\\r\\n    if (!ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\") && player.money > 30e6)\\r\\n        ns.purchaseProgram(\\\"HTTPWorm.exe\\\");\\r\\n    if (!ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\") && player.money > 250e6)\\r\\n        ns.purchaseProgram(\\\"SQLInject.exe\\\");\\r\\n}\\r\\nexport function doBuyAndSoftenAll(ns) {\\r\\n    doProgramBuys(ns);\\r\\n    for (const hostname of allHosts(ns)) {\\r\\n        softenServer(ns, hostname);\\r\\n    }\\r\\n}\\r\\nexport function stFormat(ns, ms, showms = false, showfull = false) {\\r\\n    let timeLeft = ms;\\r\\n    const hours = Math.floor(ms / (1000 * 60 * 60));\\r\\n    timeLeft -= hours * (1000 * 60 * 60);\\r\\n    const minutes = Math.floor(timeLeft / (1000 * 60));\\r\\n    timeLeft -= minutes * (1000 * 60);\\r\\n    const seconds = Math.floor(timeLeft / 1000);\\r\\n    timeLeft -= seconds * 1000;\\r\\n    const milliseconds = timeLeft;\\r\\n    if (showms) {\\r\\n        if (hours > 0 || showfull)\\r\\n            return ns.sprintf(\\\"%02d:%02d:%02d.%03d\\\", hours, minutes, seconds, milliseconds);\\r\\n        if (minutes > 0)\\r\\n            return ns.sprintf(\\\"%02d:%02d.%03d\\\", minutes, seconds, milliseconds);\\r\\n        return ns.sprintf(\\\"%02d.%03d\\\", seconds, milliseconds);\\r\\n    }\\r\\n    else {\\r\\n        if (hours > 0 || showfull)\\r\\n            return ns.sprintf(\\\"%02d:%02d:%02d\\\", hours, minutes, seconds);\\r\\n        if (minutes > 0)\\r\\n            return ns.sprintf(\\\"%02d:%02d\\\", minutes, seconds);\\r\\n        return ns.sprintf(\\\"%02d\\\", seconds);\\r\\n    }\\r\\n}\\r\\nexport function stdFormat(ns, offset = 0, showms = false) {\\r\\n    const date = new Date(new Date().getTime() + offset);\\r\\n    if (showms) {\\r\\n        const ms = ns.sprintf(\\\"%03d\\\", date.getUTCMilliseconds());\\r\\n        return date.toLocaleTimeString(\\\"it-IT\\\") + \\\".\\\" + ms;\\r\\n    }\\r\\n    else {\\r\\n        return date.toLocaleTimeString(\\\"it-IT\\\");\\r\\n    }\\r\\n}\\r\\nexport async function doBackdoors(ns) {\\r\\n    //const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"w0r1d_d43m0n\\\", \\\"b-and-a\\\", \\\"ecorp\\\", \\\"fulcrumassets\\\", \\\"fulcrumtech\\\"];\\r\\n    //const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"omnitek\\\", \\\"kuai-gong\\\", \\\"megacorp\\\"];\\r\\n    const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"w0r1d_d43m0n\\\"];\\r\\n    const hosts = mapHosts(ns);\\r\\n    for (const [hostName, trail] of Object.entries(hosts)) {\\r\\n        const server = ns.getServer(hostName);\\r\\n        if (!targetHosts.includes(hostName) ||\\r\\n            server.backdoorInstalled ||\\r\\n            server.requiredHackingSkill > ns.getHackingLevel() ||\\r\\n            !server.hasAdminRights)\\r\\n            continue;\\r\\n        ns.print(hostName);\\r\\n        for (const hostHopName of trail) {\\r\\n            ns.connect(hostHopName);\\r\\n        }\\r\\n        await ns.installBackdoor();\\r\\n        ns.connect(\\\"home\\\");\\r\\n    }\\r\\n}\\r\\nexport function cleanLogs(ns) {\\r\\n    ns.disableLog(\\\"disableLog\\\");\\r\\n    ns.disableLog(\\\"ALL\\\");\\r\\n    // ns.disableLog(\\\"sleep\\\")\\r\\n    // ns.disableLog(\\\"exec\\\")\\r\\n    // ns.disableLog(\\\"getServerMaxRam\\\")\\r\\n    // ns.disableLog(\\\"getServerSecurityLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerMinSecurityLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerMaxMoney\\\")\\r\\n    // ns.disableLog(\\\"getHackingLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerRequiredHackingLevel\\\")\\r\\n    // ns.disableLog(\\\"scan\\\")\\r\\n    // ns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n    // ns.disableLog(\\\"getServerUsedRam\\\")\\r\\n}\\r\\nexport const ALL_FACTIONS = [\\r\\n    \\\"Illuminati\\\",\\r\\n    \\\"Daedalus\\\",\\r\\n    \\\"The Covenant\\\",\\r\\n    \\\"ECorp\\\",\\r\\n    \\\"MegaCorp\\\",\\r\\n    \\\"Bachman & Associates\\\",\\r\\n    \\\"Blade Industries\\\",\\r\\n    \\\"NWO\\\",\\r\\n    \\\"Clarke Incorporated\\\",\\r\\n    \\\"OmniTek Incorporated\\\",\\r\\n    \\\"Four Sigma\\\",\\r\\n    \\\"KuaiGong International\\\",\\r\\n    \\\"Fulcrum Secret Technologies\\\",\\r\\n    \\\"BitRunners\\\",\\r\\n    \\\"The Black Hand\\\",\\r\\n    \\\"NiteSec\\\",\\r\\n    \\\"Aevum\\\",\\r\\n    \\\"Chongqing\\\",\\r\\n    \\\"Ishima\\\",\\r\\n    \\\"New Tokyo\\\",\\r\\n    \\\"Sector-12\\\",\\r\\n    \\\"Volhaven\\\",\\r\\n    \\\"Speakers for the Dead\\\",\\r\\n    \\\"The Dark Army\\\",\\r\\n    \\\"The Syndicate\\\",\\r\\n    \\\"Silhouette\\\",\\r\\n    \\\"Tetrads\\\",\\r\\n    \\\"Slum Snakes\\\",\\r\\n    \\\"Netburners\\\",\\r\\n    \\\"Tian Di Hui\\\",\\r\\n    \\\"CyberSec\\\",\\r\\n    \\\"Bladeburners\\\",\\r\\n    \\\"Church of the Machine God\\\",\\r\\n];\\r\\nexport async function writeOut(ns, data, startTime, endTime, result, startSec, startCash) {\\r\\n    if (data.writeFile !== \\\"\\\") {\\r\\n        const outstr = ns.sprintf(\\\"%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\", data.target, data.uid, data.batchId, data.realTimeStart + data.offset, data.realTimeStart + data.finish, data.operationTime, startTime, endTime, endTime - startTime, startTime - (data.realTimeStart + data.offset), endTime - (data.realTimeStart + data.finish), endTime - startTime - data.operationTime, result, startSec.toFixed(2), ns.getServerSecurityLevel(data.target).toFixed(2), ns.nFormat(startCash, \\\"($0.000a)\\\"), ns.nFormat(ns.getServerMoneyAvailable(data.target), \\\"($0.000a)\\\"));\\r\\n        while (!await ns.tryWritePort(ReservedPorts.HACK_WRITE_INFO, [data.writeFile, outstr]))\\r\\n            ;\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi91dGlsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLE1BQU0sQ0FBTixJQUFZLGFBSVg7QUFKRCxXQUFZLGFBQWE7SUFDckIsaUVBQWdCLENBQUE7SUFDaEIsaUVBQVksQ0FBQTtJQUNaLHVFQUFlLENBQUE7QUFDbkIsQ0FBQyxFQUpXLGFBQWEsS0FBYixhQUFhLFFBSXhCO0FBRUQsTUFBTSxDQUFDLE1BQU0sUUFBUSxHQUFHLHFCQUFxQixDQUFDO0FBQzlDLE1BQU0sQ0FBQyxNQUFNLE1BQU0sR0FBRyxtQkFBbUIsQ0FBQztBQUMxQyxNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUcsbUJBQW1CLENBQUM7QUFDMUMsTUFBTSxDQUFDLE1BQU0sTUFBTSxHQUFHLGNBQWMsQ0FBQztBQUVyQyxNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUcsQ0FBQyxPQUFPLEVBQUUsV0FBVyxFQUFFLFdBQVcsRUFBRSxXQUFXLEVBQUUsUUFBUSxFQUFFLFVBQVUsQ0FBQyxDQUFDO0FBRTdGLE1BQU0sVUFBVSxJQUFJLENBQUMsRUFBTSxFQUFFLEdBQVcsRUFBRSxHQUFHLElBQXlCO0lBQ2xFLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEdBQUcsR0FBRyxFQUFFLElBQUksSUFBSSxFQUFFLENBQUMsa0JBQWtCLENBQUMsT0FBTyxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDO0FBQ3hGLENBQUM7QUFFRCxNQUFNLFVBQVUsWUFBWSxDQUFDLEVBQU0sRUFBRSxRQUFnQjtJQUNqRCxJQUFJLEVBQUUsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDNUIsT0FBTztLQUNWO0lBRUQsSUFBSSxLQUFLLEdBQUcsQ0FBQyxDQUFDO0lBQ2QsSUFBSSxFQUFFLENBQUMsVUFBVSxDQUFDLGNBQWMsRUFB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\",\"filename\":\"/lib/util.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":13.25,\"server\":\"pserv-16\",\"moduleSequenceNumber\":100665,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"purchaseTor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"purchaseProgram\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"connect\",\"cost\":2},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"suppression\":0,\"activeSuppressionThreads\":[],\"suppressionIntervalID\":null,\"suppressionLastUpdateTime\":0}},\"pserv-17\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-17\",\"httpPortOpen\":false,\"ip\":\"87.1.7.5\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":505,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"script\\\":\\\"/lib/exec/grow.js\\\",\\\"host\\\":\\\"pserv-17\\\",\\\"numThreads\\\":144,\\\"target\\\":\\\"phantasy\\\",\\\"hackLevelTiming\\\":153.19873646097005,\\\"hackLevelEffect\\\":204,\\\"batchId\\\":13,\\\"offset\\\":21600,\\\"operationTime\\\":142114,\\\"finish\\\":163714,\\\"realTimeStart\\\":1647907321842,\\\"uid\\\":\\\"013-2G-pserv-17\\\",\\\"writeFile\\\":\\\"\\\"}\"],\"dataMap\":{},\"filename\":\"/lib/exec/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":49.210000000000164,\"pid\":1306,\"ramUsage\":1.75,\"server\":\"pserv-17\",\"threads\":144,\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///b0af7b32-4b26-40d1-8e70-b2a2cce95d69\",\"moduleSequenceNumber\":100737}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"script\\\":\\\"/lib/exec/hack.js\\\",\\\"host\\\":\\\"pserv-17\\\",\\\"numThreads\\\":120,\\\"target\\\":\\\"phantasy\\\",\\\"hackLevelTiming\\\":13.499605144053142,\\\"hackLevelEffect\\\":204,\\\"batchId\\\":14,\\\"offset\\\":22400,\\\"operationTime\\\":142113,\\\"finish\\\":164513,\\\"realTimeStart\\\":1647907321842,\\\"uid\\\":\\\"014-0H-pserv-17\\\",\\\"writeFile\\\":\\\"\\\"}\"],\"dataMap\":{},\"filename\":\"/lib/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":48.41000000000015,\"pid\":1308,\"ramUsage\":1.7,\"server\":\"pserv-17\",\"threads\":120,\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///93186801-89cc-4e5d-87d3-1cc1ccf8438e\",\"moduleSequenceNumber\":100736}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"script\\\":\\\"/lib/exec/weaken.js\\\",\\\"host\\\":\\\"pserv-17\\\",\\\"numThreads\\\":5,\\\"target\\\":\\\"phantasy\\\",\\\"hackLevelTiming\\\":203.99842057621257,\\\"hackLevelEffect\\\":204,\\\"batchId\\\":19,\\\"offset\\\":31600,\\\"operationTime\\\":113691,\\\"finish\\\":145291,\\\"realTimeStart\\\":1647907321842,\\\"uid\\\":\\\"019-3WG-pserv-17\\\",\\\"writeFile\\\":\\\"\\\"}\"],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":39.21000000000002,\"pid\":1334,\"ramUsage\":1.75,\"server\":\"pserv-17\",\"threads\":5,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///e8196ec4-868e-4f37-9a31-8657ab212cdd\",\"moduleSequenceNumber\":100738}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"script\\\":\\\"/lib/exec/weaken.js\\\",\\\"host\\\":\\\"pserv-17\\\",\\\"numThreads\\\":5,\\\"target\\\":\\\"phantasy\\\",\\\"hackLevelTiming\\\":203.99842057621257,\\\"hackLevelEffect\\\":204,\\\"batchId\\\":20,\\\"offset\\\":32400,\\\"operationTime\\\":113691,\\\"finish\\\":146091,\\\"realTimeStart\\\":1647907321842,\\\"uid\\\":\\\"020-1WH-pserv-17\\\",\\\"writeFile\\\":\\\"\\\"}\"],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38.41000000000001,\"pid\":1337,\"ramUsage\":1.75,\"server\":\"pserv-17\",\"threads\":5,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///e8196ec4-868e-4f37-9a31-8657ab212cdd\",\"moduleSequenceNumber\":100738}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"script\\\":\\\"/lib/exec/weaken.js\\\",\\\"host\\\":\\\"pserv-17\\\",\\\"numThreads\\\":12,\\\"target\\\":\\\"phantasy\\\",\\\"hackLevelTiming\\\":203.99842057621257,\\\"hackLevelEffect\\\":204,\\\"batchId\\\":20,\\\"offset\\\":33200,\\\"operationTime\\\":113691,\\\"finish\\\":146891,\\\"realTimeStart\\\":1647907321842,\\\"uid\\\":\\\"020-3WG-pserv-17\\\",\\\"writeFile\\\":\\\"\\\"}\"],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":37.61,\"pid\":1339,\"ramUsage\":1.75,\"server\":\"pserv-17\",\"threads\":12,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///e8196ec4-868e-4f37-9a31-8657ab212cdd\",\"moduleSequenceNumber\":100738}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"script\\\":\\\"/lib/exec/weaken.js\\\",\\\"host\\\":\\\"pserv-17\\\",\\\"numThreads\\\":5,\\\"target\\\":\\\"phantasy\\\",\\\"hackLevelTiming\\\":203.99842057621257,\\\"hackLevelEffect\\\":204,\\\"batchId\\\":21,\\\"offset\\\":34000,\\\"operationTime\\\":113691,\\\"finish\\\":147691,\\\"realTimeStart\\\":1647907321842,\\\"uid\\\":\\\"021-1WH-pserv-17\\\",\\\"writeFile\\\":\\\"\\\"}\"],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":36.80999999999999,\"pid\":1341,\"ramUsage\":1.75,\"server\":\"pserv-17\",\"threads\":5,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///e8196ec4-868e-4f37-9a31-8657ab212cdd\",\"moduleSequenceNumber\":100738}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"script\\\":\\\"/lib/exec/weaken.js\\\",\\\"host\\\":\\\"pserv-17\\\",\\\"numThreads\\\":1,\\\"target\\\":\\\"phantasy\\\",\\\"hackLevelTiming\\\":203.99842057621257,\\\"hackLevelEffect\\\":204,\\\"batchId\\\":21,\\\"offset\\\":34800,\\\"operationTime\\\":113691,\\\"finish\\\":148491,\\\"realTimeStart\\\":1647907321842,\\\"uid\\\":\\\"021-3WG-pserv-17\\\",\\\"writeFile\\\":\\\"\\\"}\"],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":36.00999999999998,\"pid\":1344,\"ramUsage\":1.75,\"server\":\"pserv-17\",\"threads\":1,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///e8196ec4-868e-4f37-9a31-8657ab212cdd\",\"moduleSequenceNumber\":100738}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.stanek.charge(ns.args[0], ns.args[1]);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hhcmdlLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL3N0YW5lay9jaGFyZ2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUM5QixPQUFPLElBQUksRUFBRTtRQUNULE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7S0FDakQ7QUFDTCxDQUFDIn0=\",\"filename\":\"/lib/stanek/charge.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/stanek/charge.js\",\"url\":\"blob:file:///c28d45fc-afbc-41c1-9137-87c258b27ba6\",\"moduleSequenceNumber\":99919}],\"dependents\":[],\"ramUsage\":2,\"server\":\"pserv-17\",\"moduleSequenceNumber\":99919,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.charge\",\"cost\":0.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.grow(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLElBQUksR0FBdUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFFbkUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDdkIsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7UUFDeEMsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7S0FDM0MsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyJ9\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///b0af7b32-4b26-40d1-8e70-b2a2cce95d69\",\"moduleSequenceNumber\":100737}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-17\",\"moduleSequenceNumber\":100737,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.weaken(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxJQUFJLEdBQXVCLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO0lBRW5FLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFO1FBQ3pCLGtCQUFrQixFQUFFLElBQUksQ0FBQyxlQUFlO1FBQ3hDLGtCQUFrQixFQUFFLElBQUksQ0FBQyxlQUFlO0tBQzNDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///e8196ec4-868e-4f37-9a31-8657ab212cdd\",\"moduleSequenceNumber\":100738}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-17\",\"moduleSequenceNumber\":100738,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.hack(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLElBQUksR0FBdUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFFbkUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDdkIsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7UUFDeEMsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7S0FDM0MsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyJ9\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///93186801-89cc-4e5d-87d3-1cc1ccf8438e\",\"moduleSequenceNumber\":100736}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-17\",\"moduleSequenceNumber\":100736,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export var ReservedPorts;\\r\\n(function (ReservedPorts) {\\r\\n    ReservedPorts[ReservedPorts[\\\"HACKING_INFO\\\"] = 1] = \\\"HACKING_INFO\\\";\\r\\n    ReservedPorts[ReservedPorts[\\\"HACKNET_INFO\\\"] = 2] = \\\"HACKNET_INFO\\\";\\r\\n    ReservedPorts[ReservedPorts[\\\"HACK_WRITE_INFO\\\"] = 3] = \\\"HACK_WRITE_INFO\\\";\\r\\n})(ReservedPorts || (ReservedPorts = {}));\\r\\nexport const WEAKENJS = \\\"/lib/exec/weaken.js\\\";\\r\\nexport const GROWJS = \\\"/lib/exec/grow.js\\\";\\r\\nexport const HACKJS = \\\"/lib/exec/hack.js\\\";\\r\\nexport const UTILJS = \\\"/lib/util.js\\\";\\r\\nexport const CITIES = [\\\"Aevum\\\", \\\"Chongqing\\\", \\\"Sector-12\\\", \\\"New Tokyo\\\", \\\"Ishima\\\", \\\"Volhaven\\\"];\\r\\nexport function llog(ns, str, ...args) {\\r\\n    ns.print(ns.sprintf(\\\"%8s \\\" + str, new Date().toLocaleTimeString(\\\"it-IT\\\"), ...args));\\r\\n}\\r\\nexport function softenServer(ns, hostname) {\\r\\n    if (ns.hasRootAccess(hostname)) {\\r\\n        return;\\r\\n    }\\r\\n    let ports = 0;\\r\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n        ns.brutessh(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n        ns.ftpcrack(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n        ns.httpworm(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n        ns.relaysmtp(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n        ns.sqlinject(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ports >= ns.getServerNumPortsRequired(hostname)) {\\r\\n        ns.nuke(hostname);\\r\\n    }\\r\\n}\\r\\nexport function serverIsHackable(ns, hostname) {\\r\\n    return ns.hasRootAccess(hostname) && ns.getHackingLevel() >= ns.getServerRequiredHackingLevel(hostname);\\r\\n}\\r\\nexport function canExecuteOnServer(ns, hostname) {\\r\\n    return ns.hasRootAccess(hostname) && ns.getServerMaxRam(hostname) > 0;\\r\\n}\\r\\nexport function mapHosts(ns, hosts = {}, parents = [], current = \\\"home\\\") {\\r\\n    const newParents = parents.concat(current);\\r\\n    hosts[current] = newParents;\\r\\n    const children = ns.scan(current).filter((element) => !parents.includes(element));\\r\\n    for (const child of children) {\\r\\n        mapHosts(ns, hosts, newParents, child);\\r\\n    }\\r\\n    return hosts;\\r\\n}\\r\\nexport function allHosts(ns) {\\r\\n    return Object.keys(mapHosts(ns));\\r\\n}\\r\\nexport function doProgramBuys(ns) {\\r\\n    const player = ns.getPlayer();\\r\\n    if (!player.tor && player.money > 200e3)\\r\\n        ns.purchaseTor();\\r\\n    if (!ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\") && player.money > 500e3)\\r\\n        ns.purchaseProgram(\\\"BruteSSH.exe\\\");\\r\\n    if (!ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\") && player.money > 1500e3)\\r\\n        ns.purchaseProgram(\\\"FTPCrack.exe\\\");\\r\\n    if (!ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\") && player.money > 5e6)\\r\\n        ns.purchaseProgram(\\\"relaySMTP.exe\\\");\\r\\n    if (!ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\") && player.money > 30e6)\\r\\n        ns.purchaseProgram(\\\"HTTPWorm.exe\\\");\\r\\n    if (!ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\") && player.money > 250e6)\\r\\n        ns.purchaseProgram(\\\"SQLInject.exe\\\");\\r\\n}\\r\\nexport function doBuyAndSoftenAll(ns) {\\r\\n    doProgramBuys(ns);\\r\\n    for (const hostname of allHosts(ns)) {\\r\\n        softenServer(ns, hostname);\\r\\n    }\\r\\n}\\r\\nexport function stFormat(ns, ms, showms = false, showfull = false) {\\r\\n    let timeLeft = ms;\\r\\n    const hours = Math.floor(ms / (1000 * 60 * 60));\\r\\n    timeLeft -= hours * (1000 * 60 * 60);\\r\\n    const minutes = Math.floor(timeLeft / (1000 * 60));\\r\\n    timeLeft -= minutes * (1000 * 60);\\r\\n    const seconds = Math.floor(timeLeft / 1000);\\r\\n    timeLeft -= seconds * 1000;\\r\\n    const milliseconds = timeLeft;\\r\\n    if (showms) {\\r\\n        if (hours > 0 || showfull)\\r\\n            return ns.sprintf(\\\"%02d:%02d:%02d.%03d\\\", hours, minutes, seconds, milliseconds);\\r\\n        if (minutes > 0)\\r\\n            return ns.sprintf(\\\"%02d:%02d.%03d\\\", minutes, seconds, milliseconds);\\r\\n        return ns.sprintf(\\\"%02d.%03d\\\", seconds, milliseconds);\\r\\n    }\\r\\n    else {\\r\\n        if (hours > 0 || showfull)\\r\\n            return ns.sprintf(\\\"%02d:%02d:%02d\\\", hours, minutes, seconds);\\r\\n        if (minutes > 0)\\r\\n            return ns.sprintf(\\\"%02d:%02d\\\", minutes, seconds);\\r\\n        return ns.sprintf(\\\"%02d\\\", seconds);\\r\\n    }\\r\\n}\\r\\nexport function stdFormat(ns, offset = 0, showms = false) {\\r\\n    const date = new Date(new Date().getTime() + offset);\\r\\n    if (showms) {\\r\\n        const ms = ns.sprintf(\\\"%03d\\\", date.getUTCMilliseconds());\\r\\n        return date.toLocaleTimeString(\\\"it-IT\\\") + \\\".\\\" + ms;\\r\\n    }\\r\\n    else {\\r\\n        return date.toLocaleTimeString(\\\"it-IT\\\");\\r\\n    }\\r\\n}\\r\\nexport async function doBackdoors(ns) {\\r\\n    //const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"w0r1d_d43m0n\\\", \\\"b-and-a\\\", \\\"ecorp\\\", \\\"fulcrumassets\\\", \\\"fulcrumtech\\\"];\\r\\n    //const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"omnitek\\\", \\\"kuai-gong\\\", \\\"megacorp\\\"];\\r\\n    const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"w0r1d_d43m0n\\\"];\\r\\n    const hosts = mapHosts(ns);\\r\\n    for (const [hostName, trail] of Object.entries(hosts)) {\\r\\n        const server = ns.getServer(hostName);\\r\\n        if (!targetHosts.includes(hostName) ||\\r\\n            server.backdoorInstalled ||\\r\\n            server.requiredHackingSkill > ns.getHackingLevel() ||\\r\\n            !server.hasAdminRights)\\r\\n            continue;\\r\\n        ns.print(hostName);\\r\\n        for (const hostHopName of trail) {\\r\\n            ns.connect(hostHopName);\\r\\n        }\\r\\n        await ns.installBackdoor();\\r\\n        ns.connect(\\\"home\\\");\\r\\n    }\\r\\n}\\r\\nexport function cleanLogs(ns) {\\r\\n    ns.disableLog(\\\"disableLog\\\");\\r\\n    ns.disableLog(\\\"ALL\\\");\\r\\n    // ns.disableLog(\\\"sleep\\\")\\r\\n    // ns.disableLog(\\\"exec\\\")\\r\\n    // ns.disableLog(\\\"getServerMaxRam\\\")\\r\\n    // ns.disableLog(\\\"getServerSecurityLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerMinSecurityLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerMaxMoney\\\")\\r\\n    // ns.disableLog(\\\"getHackingLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerRequiredHackingLevel\\\")\\r\\n    // ns.disableLog(\\\"scan\\\")\\r\\n    // ns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n    // ns.disableLog(\\\"getServerUsedRam\\\")\\r\\n}\\r\\nexport const ALL_FACTIONS = [\\r\\n    \\\"Illuminati\\\",\\r\\n    \\\"Daedalus\\\",\\r\\n    \\\"The Covenant\\\",\\r\\n    \\\"ECorp\\\",\\r\\n    \\\"MegaCorp\\\",\\r\\n    \\\"Bachman & Associates\\\",\\r\\n    \\\"Blade Industries\\\",\\r\\n    \\\"NWO\\\",\\r\\n    \\\"Clarke Incorporated\\\",\\r\\n    \\\"OmniTek Incorporated\\\",\\r\\n    \\\"Four Sigma\\\",\\r\\n    \\\"KuaiGong International\\\",\\r\\n    \\\"Fulcrum Secret Technologies\\\",\\r\\n    \\\"BitRunners\\\",\\r\\n    \\\"The Black Hand\\\",\\r\\n    \\\"NiteSec\\\",\\r\\n    \\\"Aevum\\\",\\r\\n    \\\"Chongqing\\\",\\r\\n    \\\"Ishima\\\",\\r\\n    \\\"New Tokyo\\\",\\r\\n    \\\"Sector-12\\\",\\r\\n    \\\"Volhaven\\\",\\r\\n    \\\"Speakers for the Dead\\\",\\r\\n    \\\"The Dark Army\\\",\\r\\n    \\\"The Syndicate\\\",\\r\\n    \\\"Silhouette\\\",\\r\\n    \\\"Tetrads\\\",\\r\\n    \\\"Slum Snakes\\\",\\r\\n    \\\"Netburners\\\",\\r\\n    \\\"Tian Di Hui\\\",\\r\\n    \\\"CyberSec\\\",\\r\\n    \\\"Bladeburners\\\",\\r\\n    \\\"Church of the Machine God\\\",\\r\\n];\\r\\nexport async function writeOut(ns, data, startTime, endTime, result, startSec, startCash) {\\r\\n    if (data.writeFile !== \\\"\\\") {\\r\\n        const outstr = ns.sprintf(\\\"%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\", data.target, data.uid, data.batchId, data.realTimeStart + data.offset, data.realTimeStart + data.finish, data.operationTime, startTime, endTime, endTime - startTime, startTime - (data.realTimeStart + data.offset), endTime - (data.realTimeStart + data.finish), endTime - startTime - data.operationTime, result, startSec.toFixed(2), ns.getServerSecurityLevel(data.target).toFixed(2), ns.nFormat(startCash, \\\"($0.000a)\\\"), ns.nFormat(ns.getServerMoneyAvailable(data.target), \\\"($0.000a)\\\"));\\r\\n        while (!await ns.tryWritePort(ReservedPorts.HACK_WRITE_INFO, [data.writeFile, outstr]))\\r\\n            ;\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi91dGlsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLE1BQU0sQ0FBTixJQUFZLGFBSVg7QUFKRCxXQUFZLGFBQWE7SUFDckIsaUVBQWdCLENBQUE7SUFDaEIsaUVBQVksQ0FBQTtJQUNaLHVFQUFlLENBQUE7QUFDbkIsQ0FBQyxFQUpXLGFBQWEsS0FBYixhQUFhLFFBSXhCO0FBRUQsTUFBTSxDQUFDLE1BQU0sUUFBUSxHQUFHLHFCQUFxQixDQUFDO0FBQzlDLE1BQU0sQ0FBQyxNQUFNLE1BQU0sR0FBRyxtQkFBbUIsQ0FBQztBQUMxQyxNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUcsbUJBQW1CLENBQUM7QUFDMUMsTUFBTSxDQUFDLE1BQU0sTUFBTSxHQUFHLGNBQWMsQ0FBQztBQUVyQyxNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUcsQ0FBQyxPQUFPLEVBQUUsV0FBVyxFQUFFLFdBQVcsRUFBRSxXQUFXLEVBQUUsUUFBUSxFQUFFLFVBQVUsQ0FBQyxDQUFDO0FBRTdGLE1BQU0sVUFBVSxJQUFJLENBQUMsRUFBTSxFQUFFLEdBQVcsRUFBRSxHQUFHLElBQXlCO0lBQ2xFLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEdBQUcsR0FBRyxFQUFFLElBQUksSUFBSSxFQUFFLENBQUMsa0JBQWtCLENBQUMsT0FBTyxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDO0FBQ3hGLENBQUM7QUFFRCxNQUFNLFVBQVUsWUFBWSxDQUFDLEVBQU0sRUFBRSxRQUFnQjtJQUNqRCxJQUFJLEVBQUUsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDNUIsT0FBTztLQUNWO0lBRUQsSUFBSSxLQUFLLEdBQUcsQ0FBQyxDQUFDO0lBQ2QsSUFBSSxFQUFFLENBQUMsVUFBVSxDQUFDLGNBQWMsRUFB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\",\"filename\":\"/lib/util.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":13.25,\"server\":\"pserv-17\",\"moduleSequenceNumber\":100673,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"purchaseTor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"purchaseProgram\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"connect\",\"cost\":2},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"suppression\":0,\"activeSuppressionThreads\":[],\"suppressionIntervalID\":null,\"suppressionLastUpdateTime\":0}},\"pserv-18\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-18\",\"httpPortOpen\":false,\"ip\":\"73.2.8.4\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":505,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"script\\\":\\\"/lib/exec/grow.js\\\",\\\"host\\\":\\\"pserv-18\\\",\\\"numThreads\\\":144,\\\"target\\\":\\\"phantasy\\\",\\\"hackLevelTiming\\\":153.19873646097005,\\\"hackLevelEffect\\\":204,\\\"batchId\\\":14,\\\"offset\\\":23200,\\\"operationTime\\\":142114,\\\"finish\\\":165314,\\\"realTimeStart\\\":1647907321842,\\\"uid\\\":\\\"014-2G-pserv-18\\\",\\\"writeFile\\\":\\\"\\\"}\"],\"dataMap\":{},\"filename\":\"/lib/exec/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":47.61000000000014,\"pid\":1310,\"ramUsage\":1.75,\"server\":\"pserv-18\",\"threads\":144,\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///82afaa7f-1cff-4c91-ad31-db9335ec173d\",\"moduleSequenceNumber\":100740}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"script\\\":\\\"/lib/exec/hack.js\\\",\\\"host\\\":\\\"pserv-18\\\",\\\"numThreads\\\":120,\\\"target\\\":\\\"phantasy\\\",\\\"hackLevelTiming\\\":13.499605144053142,\\\"hackLevelEffect\\\":204,\\\"batchId\\\":15,\\\"offset\\\":24000,\\\"operationTime\\\":142113,\\\"finish\\\":166113,\\\"realTimeStart\\\":1647907321842,\\\"uid\\\":\\\"015-0H-pserv-18\\\",\\\"writeFile\\\":\\\"\\\"}\"],\"dataMap\":{},\"filename\":\"/lib/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":46.81000000000013,\"pid\":1313,\"ramUsage\":1.7,\"server\":\"pserv-18\",\"threads\":120,\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///2da546f2-e126-46b1-8dc5-91abceac15f5\",\"moduleSequenceNumber\":100739}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"script\\\":\\\"/lib/exec/weaken.js\\\",\\\"host\\\":\\\"pserv-18\\\",\\\"numThreads\\\":11,\\\"target\\\":\\\"phantasy\\\",\\\"hackLevelTiming\\\":203.99842057621257,\\\"hackLevelEffect\\\":204,\\\"batchId\\\":21,\\\"offset\\\":34800,\\\"operationTime\\\":113691,\\\"finish\\\":148491,\\\"realTimeStart\\\":1647907321842,\\\"uid\\\":\\\"021-3WG-pserv-18\\\",\\\"writeFile\\\":\\\"\\\"}\"],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":36.00999999999998,\"pid\":1343,\"ramUsage\":1.75,\"server\":\"pserv-18\",\"threads\":11,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///0ce58b4f-109d-455b-9ec7-02178cbdd7b8\",\"moduleSequenceNumber\":100741}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"script\\\":\\\"/lib/exec/weaken.js\\\",\\\"host\\\":\\\"pserv-18\\\",\\\"numThreads\\\":5,\\\"target\\\":\\\"phantasy\\\",\\\"hackLevelTiming\\\":203.99842057621257,\\\"hackLevelEffect\\\":204,\\\"batchId\\\":22,\\\"offset\\\":35600,\\\"operationTime\\\":113691,\\\"finish\\\":149291,\\\"realTimeStart\\\":1647907321842,\\\"uid\\\":\\\"022-1WH-pserv-18\\\",\\\"writeFile\\\":\\\"\\\"}\"],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":35.209999999999965,\"pid\":1346,\"ramUsage\":1.75,\"server\":\"pserv-18\",\"threads\":5,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///0ce58b4f-109d-455b-9ec7-02178cbdd7b8\",\"moduleSequenceNumber\":100741}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"script\\\":\\\"/lib/exec/weaken.js\\\",\\\"host\\\":\\\"pserv-18\\\",\\\"numThreads\\\":12,\\\"target\\\":\\\"phantasy\\\",\\\"hackLevelTiming\\\":203.99842057621257,\\\"hackLevelEffect\\\":204,\\\"batchId\\\":22,\\\"offset\\\":36400,\\\"operationTime\\\":113691,\\\"finish\\\":150091,\\\"realTimeStart\\\":1647907321842,\\\"uid\\\":\\\"022-3WG-pserv-18\\\",\\\"writeFile\\\":\\\"\\\"}\"],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":34.409999999999954,\"pid\":1348,\"ramUsage\":1.75,\"server\":\"pserv-18\",\"threads\":12,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///0ce58b4f-109d-455b-9ec7-02178cbdd7b8\",\"moduleSequenceNumber\":100741}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.stanek.charge(ns.args[0], ns.args[1]);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hhcmdlLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL3N0YW5lay9jaGFyZ2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUM5QixPQUFPLElBQUksRUFBRTtRQUNULE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7S0FDakQ7QUFDTCxDQUFDIn0=\",\"filename\":\"/lib/stanek/charge.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/stanek/charge.js\",\"url\":\"blob:file:///19a83d51-ebec-4486-967a-506be54737cb\",\"moduleSequenceNumber\":99920}],\"dependents\":[],\"ramUsage\":2,\"server\":\"pserv-18\",\"moduleSequenceNumber\":99920,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.charge\",\"cost\":0.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.grow(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLElBQUksR0FBdUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFFbkUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDdkIsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7UUFDeEMsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7S0FDM0MsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyJ9\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///82afaa7f-1cff-4c91-ad31-db9335ec173d\",\"moduleSequenceNumber\":100740}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-18\",\"moduleSequenceNumber\":100740,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.weaken(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxJQUFJLEdBQXVCLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO0lBRW5FLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFO1FBQ3pCLGtCQUFrQixFQUFFLElBQUksQ0FBQyxlQUFlO1FBQ3hDLGtCQUFrQixFQUFFLElBQUksQ0FBQyxlQUFlO0tBQzNDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///0ce58b4f-109d-455b-9ec7-02178cbdd7b8\",\"moduleSequenceNumber\":100741}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-18\",\"moduleSequenceNumber\":100741,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.hack(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLElBQUksR0FBdUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFFbkUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDdkIsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7UUFDeEMsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7S0FDM0MsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyJ9\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///2da546f2-e126-46b1-8dc5-91abceac15f5\",\"moduleSequenceNumber\":100739}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-18\",\"moduleSequenceNumber\":100739,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export var ReservedPorts;\\r\\n(function (ReservedPorts) {\\r\\n    ReservedPorts[ReservedPorts[\\\"HACKING_INFO\\\"] = 1] = \\\"HACKING_INFO\\\";\\r\\n    ReservedPorts[ReservedPorts[\\\"HACKNET_INFO\\\"] = 2] = \\\"HACKNET_INFO\\\";\\r\\n    ReservedPorts[ReservedPorts[\\\"HACK_WRITE_INFO\\\"] = 3] = \\\"HACK_WRITE_INFO\\\";\\r\\n})(ReservedPorts || (ReservedPorts = {}));\\r\\nexport const WEAKENJS = \\\"/lib/exec/weaken.js\\\";\\r\\nexport const GROWJS = \\\"/lib/exec/grow.js\\\";\\r\\nexport const HACKJS = \\\"/lib/exec/hack.js\\\";\\r\\nexport const UTILJS = \\\"/lib/util.js\\\";\\r\\nexport const CITIES = [\\\"Aevum\\\", \\\"Chongqing\\\", \\\"Sector-12\\\", \\\"New Tokyo\\\", \\\"Ishima\\\", \\\"Volhaven\\\"];\\r\\nexport function llog(ns, str, ...args) {\\r\\n    ns.print(ns.sprintf(\\\"%8s \\\" + str, new Date().toLocaleTimeString(\\\"it-IT\\\"), ...args));\\r\\n}\\r\\nexport function softenServer(ns, hostname) {\\r\\n    if (ns.hasRootAccess(hostname)) {\\r\\n        return;\\r\\n    }\\r\\n    let ports = 0;\\r\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n        ns.brutessh(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n        ns.ftpcrack(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n        ns.httpworm(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n        ns.relaysmtp(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n        ns.sqlinject(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ports >= ns.getServerNumPortsRequired(hostname)) {\\r\\n        ns.nuke(hostname);\\r\\n    }\\r\\n}\\r\\nexport function serverIsHackable(ns, hostname) {\\r\\n    return ns.hasRootAccess(hostname) && ns.getHackingLevel() >= ns.getServerRequiredHackingLevel(hostname);\\r\\n}\\r\\nexport function canExecuteOnServer(ns, hostname) {\\r\\n    return ns.hasRootAccess(hostname) && ns.getServerMaxRam(hostname) > 0;\\r\\n}\\r\\nexport function mapHosts(ns, hosts = {}, parents = [], current = \\\"home\\\") {\\r\\n    const newParents = parents.concat(current);\\r\\n    hosts[current] = newParents;\\r\\n    const children = ns.scan(current).filter((element) => !parents.includes(element));\\r\\n    for (const child of children) {\\r\\n        mapHosts(ns, hosts, newParents, child);\\r\\n    }\\r\\n    return hosts;\\r\\n}\\r\\nexport function allHosts(ns) {\\r\\n    return Object.keys(mapHosts(ns));\\r\\n}\\r\\nexport function doProgramBuys(ns) {\\r\\n    const player = ns.getPlayer();\\r\\n    if (!player.tor && player.money > 200e3)\\r\\n        ns.purchaseTor();\\r\\n    if (!ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\") && player.money > 500e3)\\r\\n        ns.purchaseProgram(\\\"BruteSSH.exe\\\");\\r\\n    if (!ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\") && player.money > 1500e3)\\r\\n        ns.purchaseProgram(\\\"FTPCrack.exe\\\");\\r\\n    if (!ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\") && player.money > 5e6)\\r\\n        ns.purchaseProgram(\\\"relaySMTP.exe\\\");\\r\\n    if (!ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\") && player.money > 30e6)\\r\\n        ns.purchaseProgram(\\\"HTTPWorm.exe\\\");\\r\\n    if (!ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\") && player.money > 250e6)\\r\\n        ns.purchaseProgram(\\\"SQLInject.exe\\\");\\r\\n}\\r\\nexport function doBuyAndSoftenAll(ns) {\\r\\n    doProgramBuys(ns);\\r\\n    for (const hostname of allHosts(ns)) {\\r\\n        softenServer(ns, hostname);\\r\\n    }\\r\\n}\\r\\nexport function stFormat(ns, ms, showms = false, showfull = false) {\\r\\n    let timeLeft = ms;\\r\\n    const hours = Math.floor(ms / (1000 * 60 * 60));\\r\\n    timeLeft -= hours * (1000 * 60 * 60);\\r\\n    const minutes = Math.floor(timeLeft / (1000 * 60));\\r\\n    timeLeft -= minutes * (1000 * 60);\\r\\n    const seconds = Math.floor(timeLeft / 1000);\\r\\n    timeLeft -= seconds * 1000;\\r\\n    const milliseconds = timeLeft;\\r\\n    if (showms) {\\r\\n        if (hours > 0 || showfull)\\r\\n            return ns.sprintf(\\\"%02d:%02d:%02d.%03d\\\", hours, minutes, seconds, milliseconds);\\r\\n        if (minutes > 0)\\r\\n            return ns.sprintf(\\\"%02d:%02d.%03d\\\", minutes, seconds, milliseconds);\\r\\n        return ns.sprintf(\\\"%02d.%03d\\\", seconds, milliseconds);\\r\\n    }\\r\\n    else {\\r\\n        if (hours > 0 || showfull)\\r\\n            return ns.sprintf(\\\"%02d:%02d:%02d\\\", hours, minutes, seconds);\\r\\n        if (minutes > 0)\\r\\n            return ns.sprintf(\\\"%02d:%02d\\\", minutes, seconds);\\r\\n        return ns.sprintf(\\\"%02d\\\", seconds);\\r\\n    }\\r\\n}\\r\\nexport function stdFormat(ns, offset = 0, showms = false) {\\r\\n    const date = new Date(new Date().getTime() + offset);\\r\\n    if (showms) {\\r\\n        const ms = ns.sprintf(\\\"%03d\\\", date.getUTCMilliseconds());\\r\\n        return date.toLocaleTimeString(\\\"it-IT\\\") + \\\".\\\" + ms;\\r\\n    }\\r\\n    else {\\r\\n        return date.toLocaleTimeString(\\\"it-IT\\\");\\r\\n    }\\r\\n}\\r\\nexport async function doBackdoors(ns) {\\r\\n    //const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"w0r1d_d43m0n\\\", \\\"b-and-a\\\", \\\"ecorp\\\", \\\"fulcrumassets\\\", \\\"fulcrumtech\\\"];\\r\\n    //const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"omnitek\\\", \\\"kuai-gong\\\", \\\"megacorp\\\"];\\r\\n    const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"w0r1d_d43m0n\\\"];\\r\\n    const hosts = mapHosts(ns);\\r\\n    for (const [hostName, trail] of Object.entries(hosts)) {\\r\\n        const server = ns.getServer(hostName);\\r\\n        if (!targetHosts.includes(hostName) ||\\r\\n            server.backdoorInstalled ||\\r\\n            server.requiredHackingSkill > ns.getHackingLevel() ||\\r\\n            !server.hasAdminRights)\\r\\n            continue;\\r\\n        ns.print(hostName);\\r\\n        for (const hostHopName of trail) {\\r\\n            ns.connect(hostHopName);\\r\\n        }\\r\\n        await ns.installBackdoor();\\r\\n        ns.connect(\\\"home\\\");\\r\\n    }\\r\\n}\\r\\nexport function cleanLogs(ns) {\\r\\n    ns.disableLog(\\\"disableLog\\\");\\r\\n    ns.disableLog(\\\"ALL\\\");\\r\\n    // ns.disableLog(\\\"sleep\\\")\\r\\n    // ns.disableLog(\\\"exec\\\")\\r\\n    // ns.disableLog(\\\"getServerMaxRam\\\")\\r\\n    // ns.disableLog(\\\"getServerSecurityLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerMinSecurityLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerMaxMoney\\\")\\r\\n    // ns.disableLog(\\\"getHackingLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerRequiredHackingLevel\\\")\\r\\n    // ns.disableLog(\\\"scan\\\")\\r\\n    // ns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n    // ns.disableLog(\\\"getServerUsedRam\\\")\\r\\n}\\r\\nexport const ALL_FACTIONS = [\\r\\n    \\\"Illuminati\\\",\\r\\n    \\\"Daedalus\\\",\\r\\n    \\\"The Covenant\\\",\\r\\n    \\\"ECorp\\\",\\r\\n    \\\"MegaCorp\\\",\\r\\n    \\\"Bachman & Associates\\\",\\r\\n    \\\"Blade Industries\\\",\\r\\n    \\\"NWO\\\",\\r\\n    \\\"Clarke Incorporated\\\",\\r\\n    \\\"OmniTek Incorporated\\\",\\r\\n    \\\"Four Sigma\\\",\\r\\n    \\\"KuaiGong International\\\",\\r\\n    \\\"Fulcrum Secret Technologies\\\",\\r\\n    \\\"BitRunners\\\",\\r\\n    \\\"The Black Hand\\\",\\r\\n    \\\"NiteSec\\\",\\r\\n    \\\"Aevum\\\",\\r\\n    \\\"Chongqing\\\",\\r\\n    \\\"Ishima\\\",\\r\\n    \\\"New Tokyo\\\",\\r\\n    \\\"Sector-12\\\",\\r\\n    \\\"Volhaven\\\",\\r\\n    \\\"Speakers for the Dead\\\",\\r\\n    \\\"The Dark Army\\\",\\r\\n    \\\"The Syndicate\\\",\\r\\n    \\\"Silhouette\\\",\\r\\n    \\\"Tetrads\\\",\\r\\n    \\\"Slum Snakes\\\",\\r\\n    \\\"Netburners\\\",\\r\\n    \\\"Tian Di Hui\\\",\\r\\n    \\\"CyberSec\\\",\\r\\n    \\\"Bladeburners\\\",\\r\\n    \\\"Church of the Machine God\\\",\\r\\n];\\r\\nexport async function writeOut(ns, data, startTime, endTime, result, startSec, startCash) {\\r\\n    if (data.writeFile !== \\\"\\\") {\\r\\n        const outstr = ns.sprintf(\\\"%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\", data.target, data.uid, data.batchId, data.realTimeStart + data.offset, data.realTimeStart + data.finish, data.operationTime, startTime, endTime, endTime - startTime, startTime - (data.realTimeStart + data.offset), endTime - (data.realTimeStart + data.finish), endTime - startTime - data.operationTime, result, startSec.toFixed(2), ns.getServerSecurityLevel(data.target).toFixed(2), ns.nFormat(startCash, \\\"($0.000a)\\\"), ns.nFormat(ns.getServerMoneyAvailable(data.target), \\\"($0.000a)\\\"));\\r\\n        while (!await ns.tryWritePort(ReservedPorts.HACK_WRITE_INFO, [data.writeFile, outstr]))\\r\\n            ;\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi91dGlsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLE1BQU0sQ0FBTixJQUFZLGFBSVg7QUFKRCxXQUFZLGFBQWE7SUFDckIsaUVBQWdCLENBQUE7SUFDaEIsaUVBQVksQ0FBQTtJQUNaLHVFQUFlLENBQUE7QUFDbkIsQ0FBQyxFQUpXLGFBQWEsS0FBYixhQUFhLFFBSXhCO0FBRUQsTUFBTSxDQUFDLE1BQU0sUUFBUSxHQUFHLHFCQUFxQixDQUFDO0FBQzlDLE1BQU0sQ0FBQyxNQUFNLE1BQU0sR0FBRyxtQkFBbUIsQ0FBQztBQUMxQyxNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUcsbUJBQW1CLENBQUM7QUFDMUMsTUFBTSxDQUFDLE1BQU0sTUFBTSxHQUFHLGNBQWMsQ0FBQztBQUVyQyxNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUcsQ0FBQyxPQUFPLEVBQUUsV0FBVyxFQUFFLFdBQVcsRUFBRSxXQUFXLEVBQUUsUUFBUSxFQUFFLFVBQVUsQ0FBQyxDQUFDO0FBRTdGLE1BQU0sVUFBVSxJQUFJLENBQUMsRUFBTSxFQUFFLEdBQVcsRUFBRSxHQUFHLElBQXlCO0lBQ2xFLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEdBQUcsR0FBRyxFQUFFLElBQUksSUFBSSxFQUFFLENBQUMsa0JBQWtCLENBQUMsT0FBTyxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDO0FBQ3hGLENBQUM7QUFFRCxNQUFNLFVBQVUsWUFBWSxDQUFDLEVBQU0sRUFBRSxRQUFnQjtJQUNqRCxJQUFJLEVBQUUsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDNUIsT0FBTztLQUNWO0lBRUQsSUFBSSxLQUFLLEdBQUcsQ0FBQyxDQUFDO0lBQ2QsSUFBSSxFQUFFLENBQUMsVUFBVSxDQUFDLGNBQWMsRUFB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\",\"filename\":\"/lib/util.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":13.25,\"server\":\"pserv-18\",\"moduleSequenceNumber\":100681,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"purchaseTor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"purchaseProgram\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"connect\",\"cost\":2},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"suppression\":0,\"activeSuppressionThreads\":[],\"suppressionIntervalID\":null,\"suppressionLastUpdateTime\":0}},\"pserv-19\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-19\",\"httpPortOpen\":false,\"ip\":\"41.4.6.8\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":505,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"script\\\":\\\"/lib/exec/grow.js\\\",\\\"host\\\":\\\"pserv-19\\\",\\\"numThreads\\\":144,\\\"target\\\":\\\"phantasy\\\",\\\"hackLevelTiming\\\":153.19873646097005,\\\"hackLevelEffect\\\":204,\\\"batchId\\\":15,\\\"offset\\\":24800,\\\"operationTime\\\":142114,\\\"finish\\\":166914,\\\"realTimeStart\\\":1647907321842,\\\"uid\\\":\\\"015-2G-pserv-19\\\",\\\"writeFile\\\":\\\"\\\"}\"],\"dataMap\":{},\"filename\":\"/lib/exec/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":46.01000000000012,\"pid\":1315,\"ramUsage\":1.75,\"server\":\"pserv-19\",\"threads\":144,\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///f71fe13f-b621-4411-b1d4-e4a04587d864\",\"moduleSequenceNumber\":100743}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"script\\\":\\\"/lib/exec/hack.js\\\",\\\"host\\\":\\\"pserv-19\\\",\\\"numThreads\\\":120,\\\"target\\\":\\\"phantasy\\\",\\\"hackLevelTiming\\\":13.499605144053142,\\\"hackLevelEffect\\\":204,\\\"batchId\\\":16,\\\"offset\\\":25600,\\\"operationTime\\\":142113,\\\"finish\\\":167713,\\\"realTimeStart\\\":1647907321842,\\\"uid\\\":\\\"016-0H-pserv-19\\\",\\\"writeFile\\\":\\\"\\\"}\"],\"dataMap\":{},\"filename\":\"/lib/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":45.21000000000011,\"pid\":1317,\"ramUsage\":1.7,\"server\":\"pserv-19\",\"threads\":120,\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///f3e954ec-40e7-4d8b-9e9d-a5ffefd37935\",\"moduleSequenceNumber\":100742}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"script\\\":\\\"/lib/exec/weaken.js\\\",\\\"host\\\":\\\"pserv-19\\\",\\\"numThreads\\\":5,\\\"target\\\":\\\"phantasy\\\",\\\"hackLevelTiming\\\":203.99842057621257,\\\"hackLevelEffect\\\":204,\\\"batchId\\\":23,\\\"offset\\\":37200,\\\"operationTime\\\":113691,\\\"finish\\\":150891,\\\"realTimeStart\\\":1647907321842,\\\"uid\\\":\\\"023-1WH-pserv-19\\\",\\\"writeFile\\\":\\\"\\\"}\"],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":33.60999999999994,\"pid\":1350,\"ramUsage\":1.75,\"server\":\"pserv-19\",\"threads\":5,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///50aa0b55-e7ee-4eb3-a654-fdd98f4beba3\",\"moduleSequenceNumber\":100745}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"script\\\":\\\"/lib/exec/weaken.js\\\",\\\"host\\\":\\\"pserv-19\\\",\\\"numThreads\\\":12,\\\"target\\\":\\\"phantasy\\\",\\\"hackLevelTiming\\\":203.99842057621257,\\\"hackLevelEffect\\\":204,\\\"batchId\\\":23,\\\"offset\\\":38000,\\\"operationTime\\\":113691,\\\"finish\\\":151691,\\\"realTimeStart\\\":1647907321842,\\\"uid\\\":\\\"023-3WG-pserv-19\\\",\\\"writeFile\\\":\\\"\\\"}\"],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":32.80999999999994,\"pid\":1352,\"ramUsage\":1.75,\"server\":\"pserv-19\",\"threads\":12,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///50aa0b55-e7ee-4eb3-a654-fdd98f4beba3\",\"moduleSequenceNumber\":100745}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"script\\\":\\\"/lib/exec/weaken.js\\\",\\\"host\\\":\\\"pserv-19\\\",\\\"numThreads\\\":5,\\\"target\\\":\\\"phantasy\\\",\\\"hackLevelTiming\\\":203.99842057621257,\\\"hackLevelEffect\\\":204,\\\"batchId\\\":24,\\\"offset\\\":38800,\\\"operationTime\\\":113691,\\\"finish\\\":152491,\\\"realTimeStart\\\":1647907321842,\\\"uid\\\":\\\"024-1WH-pserv-19\\\",\\\"writeFile\\\":\\\"\\\"}\"],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":32.00999999999993,\"pid\":1354,\"ramUsage\":1.75,\"server\":\"pserv-19\",\"threads\":5,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///50aa0b55-e7ee-4eb3-a654-fdd98f4beba3\",\"moduleSequenceNumber\":100745}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"script\\\":\\\"/lib/exec/weaken.js\\\",\\\"host\\\":\\\"pserv-19\\\",\\\"numThreads\\\":6,\\\"target\\\":\\\"phantasy\\\",\\\"hackLevelTiming\\\":203.99842057621257,\\\"hackLevelEffect\\\":204,\\\"batchId\\\":24,\\\"offset\\\":39600,\\\"operationTime\\\":113691,\\\"finish\\\":153291,\\\"realTimeStart\\\":1647907321842,\\\"uid\\\":\\\"024-3WG-pserv-19\\\",\\\"writeFile\\\":\\\"\\\"}\"],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":31.209999999999926,\"pid\":1357,\"ramUsage\":1.75,\"server\":\"pserv-19\",\"threads\":6,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///50aa0b55-e7ee-4eb3-a654-fdd98f4beba3\",\"moduleSequenceNumber\":100745}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.stanek.charge(ns.args[0], ns.args[1]);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hhcmdlLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL3N0YW5lay9jaGFyZ2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUM5QixPQUFPLElBQUksRUFBRTtRQUNULE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7S0FDakQ7QUFDTCxDQUFDIn0=\",\"filename\":\"/lib/stanek/charge.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/stanek/charge.js\",\"url\":\"blob:file:///d7dab853-fe83-4a9a-bc35-cc053b812031\",\"moduleSequenceNumber\":99923}],\"dependents\":[],\"ramUsage\":2,\"server\":\"pserv-19\",\"moduleSequenceNumber\":99923,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.charge\",\"cost\":0.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.grow(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLElBQUksR0FBdUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFFbkUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDdkIsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7UUFDeEMsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7S0FDM0MsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyJ9\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///f71fe13f-b621-4411-b1d4-e4a04587d864\",\"moduleSequenceNumber\":100743}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-19\",\"moduleSequenceNumber\":100743,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.weaken(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxJQUFJLEdBQXVCLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO0lBRW5FLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFO1FBQ3pCLGtCQUFrQixFQUFFLElBQUksQ0FBQyxlQUFlO1FBQ3hDLGtCQUFrQixFQUFFLElBQUksQ0FBQyxlQUFlO0tBQzNDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///50aa0b55-e7ee-4eb3-a654-fdd98f4beba3\",\"moduleSequenceNumber\":100745}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-19\",\"moduleSequenceNumber\":100745,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.hack(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLElBQUksR0FBdUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFFbkUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDdkIsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7UUFDeEMsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7S0FDM0MsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyJ9\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///f3e954ec-40e7-4d8b-9e9d-a5ffefd37935\",\"moduleSequenceNumber\":100742}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-19\",\"moduleSequenceNumber\":100742,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export var ReservedPorts;\\r\\n(function (ReservedPorts) {\\r\\n    ReservedPorts[ReservedPorts[\\\"HACKING_INFO\\\"] = 1] = \\\"HACKING_INFO\\\";\\r\\n    ReservedPorts[ReservedPorts[\\\"HACKNET_INFO\\\"] = 2] = \\\"HACKNET_INFO\\\";\\r\\n    ReservedPorts[ReservedPorts[\\\"HACK_WRITE_INFO\\\"] = 3] = \\\"HACK_WRITE_INFO\\\";\\r\\n})(ReservedPorts || (ReservedPorts = {}));\\r\\nexport const WEAKENJS = \\\"/lib/exec/weaken.js\\\";\\r\\nexport const GROWJS = \\\"/lib/exec/grow.js\\\";\\r\\nexport const HACKJS = \\\"/lib/exec/hack.js\\\";\\r\\nexport const UTILJS = \\\"/lib/util.js\\\";\\r\\nexport const CITIES = [\\\"Aevum\\\", \\\"Chongqing\\\", \\\"Sector-12\\\", \\\"New Tokyo\\\", \\\"Ishima\\\", \\\"Volhaven\\\"];\\r\\nexport function llog(ns, str, ...args) {\\r\\n    ns.print(ns.sprintf(\\\"%8s \\\" + str, new Date().toLocaleTimeString(\\\"it-IT\\\"), ...args));\\r\\n}\\r\\nexport function softenServer(ns, hostname) {\\r\\n    if (ns.hasRootAccess(hostname)) {\\r\\n        return;\\r\\n    }\\r\\n    let ports = 0;\\r\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n        ns.brutessh(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n        ns.ftpcrack(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n        ns.httpworm(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n        ns.relaysmtp(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n        ns.sqlinject(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ports >= ns.getServerNumPortsRequired(hostname)) {\\r\\n        ns.nuke(hostname);\\r\\n    }\\r\\n}\\r\\nexport function serverIsHackable(ns, hostname) {\\r\\n    return ns.hasRootAccess(hostname) && ns.getHackingLevel() >= ns.getServerRequiredHackingLevel(hostname);\\r\\n}\\r\\nexport function canExecuteOnServer(ns, hostname) {\\r\\n    return ns.hasRootAccess(hostname) && ns.getServerMaxRam(hostname) > 0;\\r\\n}\\r\\nexport function mapHosts(ns, hosts = {}, parents = [], current = \\\"home\\\") {\\r\\n    const newParents = parents.concat(current);\\r\\n    hosts[current] = newParents;\\r\\n    const children = ns.scan(current).filter((element) => !parents.includes(element));\\r\\n    for (const child of children) {\\r\\n        mapHosts(ns, hosts, newParents, child);\\r\\n    }\\r\\n    return hosts;\\r\\n}\\r\\nexport function allHosts(ns) {\\r\\n    return Object.keys(mapHosts(ns));\\r\\n}\\r\\nexport function doProgramBuys(ns) {\\r\\n    const player = ns.getPlayer();\\r\\n    if (!player.tor && player.money > 200e3)\\r\\n        ns.purchaseTor();\\r\\n    if (!ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\") && player.money > 500e3)\\r\\n        ns.purchaseProgram(\\\"BruteSSH.exe\\\");\\r\\n    if (!ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\") && player.money > 1500e3)\\r\\n        ns.purchaseProgram(\\\"FTPCrack.exe\\\");\\r\\n    if (!ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\") && player.money > 5e6)\\r\\n        ns.purchaseProgram(\\\"relaySMTP.exe\\\");\\r\\n    if (!ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\") && player.money > 30e6)\\r\\n        ns.purchaseProgram(\\\"HTTPWorm.exe\\\");\\r\\n    if (!ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\") && player.money > 250e6)\\r\\n        ns.purchaseProgram(\\\"SQLInject.exe\\\");\\r\\n}\\r\\nexport function doBuyAndSoftenAll(ns) {\\r\\n    doProgramBuys(ns);\\r\\n    for (const hostname of allHosts(ns)) {\\r\\n        softenServer(ns, hostname);\\r\\n    }\\r\\n}\\r\\nexport function stFormat(ns, ms, showms = false, showfull = false) {\\r\\n    let timeLeft = ms;\\r\\n    const hours = Math.floor(ms / (1000 * 60 * 60));\\r\\n    timeLeft -= hours * (1000 * 60 * 60);\\r\\n    const minutes = Math.floor(timeLeft / (1000 * 60));\\r\\n    timeLeft -= minutes * (1000 * 60);\\r\\n    const seconds = Math.floor(timeLeft / 1000);\\r\\n    timeLeft -= seconds * 1000;\\r\\n    const milliseconds = timeLeft;\\r\\n    if (showms) {\\r\\n        if (hours > 0 || showfull)\\r\\n            return ns.sprintf(\\\"%02d:%02d:%02d.%03d\\\", hours, minutes, seconds, milliseconds);\\r\\n        if (minutes > 0)\\r\\n            return ns.sprintf(\\\"%02d:%02d.%03d\\\", minutes, seconds, milliseconds);\\r\\n        return ns.sprintf(\\\"%02d.%03d\\\", seconds, milliseconds);\\r\\n    }\\r\\n    else {\\r\\n        if (hours > 0 || showfull)\\r\\n            return ns.sprintf(\\\"%02d:%02d:%02d\\\", hours, minutes, seconds);\\r\\n        if (minutes > 0)\\r\\n            return ns.sprintf(\\\"%02d:%02d\\\", minutes, seconds);\\r\\n        return ns.sprintf(\\\"%02d\\\", seconds);\\r\\n    }\\r\\n}\\r\\nexport function stdFormat(ns, offset = 0, showms = false) {\\r\\n    const date = new Date(new Date().getTime() + offset);\\r\\n    if (showms) {\\r\\n        const ms = ns.sprintf(\\\"%03d\\\", date.getUTCMilliseconds());\\r\\n        return date.toLocaleTimeString(\\\"it-IT\\\") + \\\".\\\" + ms;\\r\\n    }\\r\\n    else {\\r\\n        return date.toLocaleTimeString(\\\"it-IT\\\");\\r\\n    }\\r\\n}\\r\\nexport async function doBackdoors(ns) {\\r\\n    //const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"w0r1d_d43m0n\\\", \\\"b-and-a\\\", \\\"ecorp\\\", \\\"fulcrumassets\\\", \\\"fulcrumtech\\\"];\\r\\n    //const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"omnitek\\\", \\\"kuai-gong\\\", \\\"megacorp\\\"];\\r\\n    const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"w0r1d_d43m0n\\\"];\\r\\n    const hosts = mapHosts(ns);\\r\\n    for (const [hostName, trail] of Object.entries(hosts)) {\\r\\n        const server = ns.getServer(hostName);\\r\\n        if (!targetHosts.includes(hostName) ||\\r\\n            server.backdoorInstalled ||\\r\\n            server.requiredHackingSkill > ns.getHackingLevel() ||\\r\\n            !server.hasAdminRights)\\r\\n            continue;\\r\\n        ns.print(hostName);\\r\\n        for (const hostHopName of trail) {\\r\\n            ns.connect(hostHopName);\\r\\n        }\\r\\n        await ns.installBackdoor();\\r\\n        ns.connect(\\\"home\\\");\\r\\n    }\\r\\n}\\r\\nexport function cleanLogs(ns) {\\r\\n    ns.disableLog(\\\"disableLog\\\");\\r\\n    ns.disableLog(\\\"ALL\\\");\\r\\n    // ns.disableLog(\\\"sleep\\\")\\r\\n    // ns.disableLog(\\\"exec\\\")\\r\\n    // ns.disableLog(\\\"getServerMaxRam\\\")\\r\\n    // ns.disableLog(\\\"getServerSecurityLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerMinSecurityLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerMaxMoney\\\")\\r\\n    // ns.disableLog(\\\"getHackingLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerRequiredHackingLevel\\\")\\r\\n    // ns.disableLog(\\\"scan\\\")\\r\\n    // ns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n    // ns.disableLog(\\\"getServerUsedRam\\\")\\r\\n}\\r\\nexport const ALL_FACTIONS = [\\r\\n    \\\"Illuminati\\\",\\r\\n    \\\"Daedalus\\\",\\r\\n    \\\"The Covenant\\\",\\r\\n    \\\"ECorp\\\",\\r\\n    \\\"MegaCorp\\\",\\r\\n    \\\"Bachman & Associates\\\",\\r\\n    \\\"Blade Industries\\\",\\r\\n    \\\"NWO\\\",\\r\\n    \\\"Clarke Incorporated\\\",\\r\\n    \\\"OmniTek Incorporated\\\",\\r\\n    \\\"Four Sigma\\\",\\r\\n    \\\"KuaiGong International\\\",\\r\\n    \\\"Fulcrum Secret Technologies\\\",\\r\\n    \\\"BitRunners\\\",\\r\\n    \\\"The Black Hand\\\",\\r\\n    \\\"NiteSec\\\",\\r\\n    \\\"Aevum\\\",\\r\\n    \\\"Chongqing\\\",\\r\\n    \\\"Ishima\\\",\\r\\n    \\\"New Tokyo\\\",\\r\\n    \\\"Sector-12\\\",\\r\\n    \\\"Volhaven\\\",\\r\\n    \\\"Speakers for the Dead\\\",\\r\\n    \\\"The Dark Army\\\",\\r\\n    \\\"The Syndicate\\\",\\r\\n    \\\"Silhouette\\\",\\r\\n    \\\"Tetrads\\\",\\r\\n    \\\"Slum Snakes\\\",\\r\\n    \\\"Netburners\\\",\\r\\n    \\\"Tian Di Hui\\\",\\r\\n    \\\"CyberSec\\\",\\r\\n    \\\"Bladeburners\\\",\\r\\n    \\\"Church of the Machine God\\\",\\r\\n];\\r\\nexport async function writeOut(ns, data, startTime, endTime, result, startSec, startCash) {\\r\\n    if (data.writeFile !== \\\"\\\") {\\r\\n        const outstr = ns.sprintf(\\\"%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\", data.target, data.uid, data.batchId, data.realTimeStart + data.offset, data.realTimeStart + data.finish, data.operationTime, startTime, endTime, endTime - startTime, startTime - (data.realTimeStart + data.offset), endTime - (data.realTimeStart + data.finish), endTime - startTime - data.operationTime, result, startSec.toFixed(2), ns.getServerSecurityLevel(data.target).toFixed(2), ns.nFormat(startCash, \\\"($0.000a)\\\"), ns.nFormat(ns.getServerMoneyAvailable(data.target), \\\"($0.000a)\\\"));\\r\\n        while (!await ns.tryWritePort(ReservedPorts.HACK_WRITE_INFO, [data.writeFile, outstr]))\\r\\n            ;\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi91dGlsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLE1BQU0sQ0FBTixJQUFZLGFBSVg7QUFKRCxXQUFZLGFBQWE7SUFDckIsaUVBQWdCLENBQUE7SUFDaEIsaUVBQVksQ0FBQTtJQUNaLHVFQUFlLENBQUE7QUFDbkIsQ0FBQyxFQUpXLGFBQWEsS0FBYixhQUFhLFFBSXhCO0FBRUQsTUFBTSxDQUFDLE1BQU0sUUFBUSxHQUFHLHFCQUFxQixDQUFDO0FBQzlDLE1BQU0sQ0FBQyxNQUFNLE1BQU0sR0FBRyxtQkFBbUIsQ0FBQztBQUMxQyxNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUcsbUJBQW1CLENBQUM7QUFDMUMsTUFBTSxDQUFDLE1BQU0sTUFBTSxHQUFHLGNBQWMsQ0FBQztBQUVyQyxNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUcsQ0FBQyxPQUFPLEVBQUUsV0FBVyxFQUFFLFdBQVcsRUFBRSxXQUFXLEVBQUUsUUFBUSxFQUFFLFVBQVUsQ0FBQyxDQUFDO0FBRTdGLE1BQU0sVUFBVSxJQUFJLENBQUMsRUFBTSxFQUFFLEdBQVcsRUFBRSxHQUFHLElBQXlCO0lBQ2xFLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEdBQUcsR0FBRyxFQUFFLElBQUksSUFBSSxFQUFFLENBQUMsa0JBQWtCLENBQUMsT0FBTyxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDO0FBQ3hGLENBQUM7QUFFRCxNQUFNLFVBQVUsWUFBWSxDQUFDLEVBQU0sRUFBRSxRQUFnQjtJQUNqRCxJQUFJLEVBQUUsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDNUIsT0FBTztLQUNWO0lBRUQsSUFBSSxLQUFLLEdBQUcsQ0FBQyxDQUFDO0lBQ2QsSUFBSSxFQUFFLENBQUMsVUFBVSxDQUFDLGNBQWMsRUFB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\",\"filename\":\"/lib/util.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":13.25,\"server\":\"pserv-19\",\"moduleSequenceNumber\":100689,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"purchaseTor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"purchaseProgram\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"connect\",\"cost\":2},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"suppression\":0,\"activeSuppressionThreads\":[],\"suppressionIntervalID\":null,\"suppressionLastUpdateTime\":0}},\"pserv-20\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-20\",\"httpPortOpen\":false,\"ip\":\"78.5.3.4\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":505,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"script\\\":\\\"/lib/exec/grow.js\\\",\\\"host\\\":\\\"pserv-20\\\",\\\"numThreads\\\":144,\\\"target\\\":\\\"phantasy\\\",\\\"hackLevelTiming\\\":153.19873646097005,\\\"hackLevelEffect\\\":204,\\\"batchId\\\":16,\\\"offset\\\":26400,\\\"operationTime\\\":142114,\\\"finish\\\":168514,\\\"realTimeStart\\\":1647907321842,\\\"uid\\\":\\\"016-2G-pserv-20\\\",\\\"writeFile\\\":\\\"\\\"}\"],\"dataMap\":{},\"filename\":\"/lib/exec/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":44.410000000000096,\"pid\":1319,\"ramUsage\":1.75,\"server\":\"pserv-20\",\"threads\":144,\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///75a3438c-3a4e-44c7-81c4-67383c849da0\",\"moduleSequenceNumber\":100746}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"script\\\":\\\"/lib/exec/hack.js\\\",\\\"host\\\":\\\"pserv-20\\\",\\\"numThreads\\\":120,\\\"target\\\":\\\"phantasy\\\",\\\"hackLevelTiming\\\":13.499605144053142,\\\"hackLevelEffect\\\":204,\\\"batchId\\\":17,\\\"offset\\\":27200,\\\"operationTime\\\":142113,\\\"finish\\\":169313,\\\"realTimeStart\\\":1647907321842,\\\"uid\\\":\\\"017-0H-pserv-20\\\",\\\"writeFile\\\":\\\"\\\"}\"],\"dataMap\":{},\"filename\":\"/lib/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":43.610000000000085,\"pid\":1322,\"ramUsage\":1.7,\"server\":\"pserv-20\",\"threads\":120,\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///6581e742-52bf-48f0-bdac-f308d9366d6c\",\"moduleSequenceNumber\":100744}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"script\\\":\\\"/lib/exec/weaken.js\\\",\\\"host\\\":\\\"pserv-20\\\",\\\"numThreads\\\":6,\\\"target\\\":\\\"phantasy\\\",\\\"hackLevelTiming\\\":203.99842057621257,\\\"hackLevelEffect\\\":204,\\\"batchId\\\":24,\\\"offset\\\":39600,\\\"operationTime\\\":113691,\\\"finish\\\":153291,\\\"realTimeStart\\\":1647907321842,\\\"uid\\\":\\\"024-3WG-pserv-20\\\",\\\"writeFile\\\":\\\"\\\"}\"],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":31.209999999999926,\"pid\":1356,\"ramUsage\":1.75,\"server\":\"pserv-20\",\"threads\":6,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///f30a0306-6ab7-46e4-ab79-c334a07c4eb2\",\"moduleSequenceNumber\":100749}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"script\\\":\\\"/lib/exec/weaken.js\\\",\\\"host\\\":\\\"pserv-20\\\",\\\"numThreads\\\":5,\\\"target\\\":\\\"phantasy\\\",\\\"hackLevelTiming\\\":203.99842057621257,\\\"hackLevelEffect\\\":204,\\\"batchId\\\":25,\\\"offset\\\":40400,\\\"operationTime\\\":113691,\\\"finish\\\":154091,\\\"realTimeStart\\\":1647907321842,\\\"uid\\\":\\\"025-1WH-pserv-20\\\",\\\"writeFile\\\":\\\"\\\"}\"],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":30.40999999999993,\"pid\":1359,\"ramUsage\":1.75,\"server\":\"pserv-20\",\"threads\":5,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///f30a0306-6ab7-46e4-ab79-c334a07c4eb2\",\"moduleSequenceNumber\":100749}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"script\\\":\\\"/lib/exec/weaken.js\\\",\\\"host\\\":\\\"pserv-20\\\",\\\"numThreads\\\":12,\\\"target\\\":\\\"phantasy\\\",\\\"hackLevelTiming\\\":203.99842057621257,\\\"hackLevelEffect\\\":204,\\\"batchId\\\":25,\\\"offset\\\":41200,\\\"operationTime\\\":113691,\\\"finish\\\":154891,\\\"realTimeStart\\\":1647907321842,\\\"uid\\\":\\\"025-3WG-pserv-20\\\",\\\"writeFile\\\":\\\"\\\"}\"],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":29.609999999999932,\"pid\":1361,\"ramUsage\":1.75,\"server\":\"pserv-20\",\"threads\":12,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///f30a0306-6ab7-46e4-ab79-c334a07c4eb2\",\"moduleSequenceNumber\":100749}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"script\\\":\\\"/lib/exec/weaken.js\\\",\\\"host\\\":\\\"pserv-20\\\",\\\"numThreads\\\":5,\\\"target\\\":\\\"phantasy\\\",\\\"hackLevelTiming\\\":203.99842057621257,\\\"hackLevelEffect\\\":204,\\\"batchId\\\":26,\\\"offset\\\":42000,\\\"operationTime\\\":113691,\\\"finish\\\":155691,\\\"realTimeStart\\\":1647907321842,\\\"uid\\\":\\\"026-1WH-pserv-20\\\",\\\"writeFile\\\":\\\"\\\"}\"],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":28.809999999999935,\"pid\":1363,\"ramUsage\":1.75,\"server\":\"pserv-20\",\"threads\":5,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///f30a0306-6ab7-46e4-ab79-c334a07c4eb2\",\"moduleSequenceNumber\":100749}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.stanek.charge(ns.args[0], ns.args[1]);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hhcmdlLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL3N0YW5lay9jaGFyZ2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUM5QixPQUFPLElBQUksRUFBRTtRQUNULE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7S0FDakQ7QUFDTCxDQUFDIn0=\",\"filename\":\"/lib/stanek/charge.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/stanek/charge.js\",\"url\":\"blob:file:///bb7d5542-3225-4814-9410-a9882f846c7d\",\"moduleSequenceNumber\":99924}],\"dependents\":[],\"ramUsage\":2,\"server\":\"pserv-20\",\"moduleSequenceNumber\":99924,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.charge\",\"cost\":0.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.grow(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLElBQUksR0FBdUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFFbkUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDdkIsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7UUFDeEMsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7S0FDM0MsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyJ9\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///75a3438c-3a4e-44c7-81c4-67383c849da0\",\"moduleSequenceNumber\":100746}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-20\",\"moduleSequenceNumber\":100746,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.weaken(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxJQUFJLEdBQXVCLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO0lBRW5FLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFO1FBQ3pCLGtCQUFrQixFQUFFLElBQUksQ0FBQyxlQUFlO1FBQ3hDLGtCQUFrQixFQUFFLElBQUksQ0FBQyxlQUFlO0tBQzNDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///f30a0306-6ab7-46e4-ab79-c334a07c4eb2\",\"moduleSequenceNumber\":100749}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-20\",\"moduleSequenceNumber\":100749,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.hack(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLElBQUksR0FBdUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFFbkUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDdkIsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7UUFDeEMsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7S0FDM0MsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyJ9\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///6581e742-52bf-48f0-bdac-f308d9366d6c\",\"moduleSequenceNumber\":100744}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-20\",\"moduleSequenceNumber\":100744,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export var ReservedPorts;\\r\\n(function (ReservedPorts) {\\r\\n    ReservedPorts[ReservedPorts[\\\"HACKING_INFO\\\"] = 1] = \\\"HACKING_INFO\\\";\\r\\n    ReservedPorts[ReservedPorts[\\\"HACKNET_INFO\\\"] = 2] = \\\"HACKNET_INFO\\\";\\r\\n    ReservedPorts[ReservedPorts[\\\"HACK_WRITE_INFO\\\"] = 3] = \\\"HACK_WRITE_INFO\\\";\\r\\n})(ReservedPorts || (ReservedPorts = {}));\\r\\nexport const WEAKENJS = \\\"/lib/exec/weaken.js\\\";\\r\\nexport const GROWJS = \\\"/lib/exec/grow.js\\\";\\r\\nexport const HACKJS = \\\"/lib/exec/hack.js\\\";\\r\\nexport const UTILJS = \\\"/lib/util.js\\\";\\r\\nexport const CITIES = [\\\"Aevum\\\", \\\"Chongqing\\\", \\\"Sector-12\\\", \\\"New Tokyo\\\", \\\"Ishima\\\", \\\"Volhaven\\\"];\\r\\nexport function llog(ns, str, ...args) {\\r\\n    ns.print(ns.sprintf(\\\"%8s \\\" + str, new Date().toLocaleTimeString(\\\"it-IT\\\"), ...args));\\r\\n}\\r\\nexport function softenServer(ns, hostname) {\\r\\n    if (ns.hasRootAccess(hostname)) {\\r\\n        return;\\r\\n    }\\r\\n    let ports = 0;\\r\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n        ns.brutessh(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n        ns.ftpcrack(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n        ns.httpworm(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n        ns.relaysmtp(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n        ns.sqlinject(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ports >= ns.getServerNumPortsRequired(hostname)) {\\r\\n        ns.nuke(hostname);\\r\\n    }\\r\\n}\\r\\nexport function serverIsHackable(ns, hostname) {\\r\\n    return ns.hasRootAccess(hostname) && ns.getHackingLevel() >= ns.getServerRequiredHackingLevel(hostname);\\r\\n}\\r\\nexport function canExecuteOnServer(ns, hostname) {\\r\\n    return ns.hasRootAccess(hostname) && ns.getServerMaxRam(hostname) > 0;\\r\\n}\\r\\nexport function mapHosts(ns, hosts = {}, parents = [], current = \\\"home\\\") {\\r\\n    const newParents = parents.concat(current);\\r\\n    hosts[current] = newParents;\\r\\n    const children = ns.scan(current).filter((element) => !parents.includes(element));\\r\\n    for (const child of children) {\\r\\n        mapHosts(ns, hosts, newParents, child);\\r\\n    }\\r\\n    return hosts;\\r\\n}\\r\\nexport function allHosts(ns) {\\r\\n    return Object.keys(mapHosts(ns));\\r\\n}\\r\\nexport function doProgramBuys(ns) {\\r\\n    const player = ns.getPlayer();\\r\\n    if (!player.tor && player.money > 200e3)\\r\\n        ns.purchaseTor();\\r\\n    if (!ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\") && player.money > 500e3)\\r\\n        ns.purchaseProgram(\\\"BruteSSH.exe\\\");\\r\\n    if (!ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\") && player.money > 1500e3)\\r\\n        ns.purchaseProgram(\\\"FTPCrack.exe\\\");\\r\\n    if (!ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\") && player.money > 5e6)\\r\\n        ns.purchaseProgram(\\\"relaySMTP.exe\\\");\\r\\n    if (!ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\") && player.money > 30e6)\\r\\n        ns.purchaseProgram(\\\"HTTPWorm.exe\\\");\\r\\n    if (!ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\") && player.money > 250e6)\\r\\n        ns.purchaseProgram(\\\"SQLInject.exe\\\");\\r\\n}\\r\\nexport function doBuyAndSoftenAll(ns) {\\r\\n    doProgramBuys(ns);\\r\\n    for (const hostname of allHosts(ns)) {\\r\\n        softenServer(ns, hostname);\\r\\n    }\\r\\n}\\r\\nexport function stFormat(ns, ms, showms = false, showfull = false) {\\r\\n    let timeLeft = ms;\\r\\n    const hours = Math.floor(ms / (1000 * 60 * 60));\\r\\n    timeLeft -= hours * (1000 * 60 * 60);\\r\\n    const minutes = Math.floor(timeLeft / (1000 * 60));\\r\\n    timeLeft -= minutes * (1000 * 60);\\r\\n    const seconds = Math.floor(timeLeft / 1000);\\r\\n    timeLeft -= seconds * 1000;\\r\\n    const milliseconds = timeLeft;\\r\\n    if (showms) {\\r\\n        if (hours > 0 || showfull)\\r\\n            return ns.sprintf(\\\"%02d:%02d:%02d.%03d\\\", hours, minutes, seconds, milliseconds);\\r\\n        if (minutes > 0)\\r\\n            return ns.sprintf(\\\"%02d:%02d.%03d\\\", minutes, seconds, milliseconds);\\r\\n        return ns.sprintf(\\\"%02d.%03d\\\", seconds, milliseconds);\\r\\n    }\\r\\n    else {\\r\\n        if (hours > 0 || showfull)\\r\\n            return ns.sprintf(\\\"%02d:%02d:%02d\\\", hours, minutes, seconds);\\r\\n        if (minutes > 0)\\r\\n            return ns.sprintf(\\\"%02d:%02d\\\", minutes, seconds);\\r\\n        return ns.sprintf(\\\"%02d\\\", seconds);\\r\\n    }\\r\\n}\\r\\nexport function stdFormat(ns, offset = 0, showms = false) {\\r\\n    const date = new Date(new Date().getTime() + offset);\\r\\n    if (showms) {\\r\\n        const ms = ns.sprintf(\\\"%03d\\\", date.getUTCMilliseconds());\\r\\n        return date.toLocaleTimeString(\\\"it-IT\\\") + \\\".\\\" + ms;\\r\\n    }\\r\\n    else {\\r\\n        return date.toLocaleTimeString(\\\"it-IT\\\");\\r\\n    }\\r\\n}\\r\\nexport async function doBackdoors(ns) {\\r\\n    //const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"w0r1d_d43m0n\\\", \\\"b-and-a\\\", \\\"ecorp\\\", \\\"fulcrumassets\\\", \\\"fulcrumtech\\\"];\\r\\n    //const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"omnitek\\\", \\\"kuai-gong\\\", \\\"megacorp\\\"];\\r\\n    const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"w0r1d_d43m0n\\\"];\\r\\n    const hosts = mapHosts(ns);\\r\\n    for (const [hostName, trail] of Object.entries(hosts)) {\\r\\n        const server = ns.getServer(hostName);\\r\\n        if (!targetHosts.includes(hostName) ||\\r\\n            server.backdoorInstalled ||\\r\\n            server.requiredHackingSkill > ns.getHackingLevel() ||\\r\\n            !server.hasAdminRights)\\r\\n            continue;\\r\\n        ns.print(hostName);\\r\\n        for (const hostHopName of trail) {\\r\\n            ns.connect(hostHopName);\\r\\n        }\\r\\n        await ns.installBackdoor();\\r\\n        ns.connect(\\\"home\\\");\\r\\n    }\\r\\n}\\r\\nexport function cleanLogs(ns) {\\r\\n    ns.disableLog(\\\"disableLog\\\");\\r\\n    ns.disableLog(\\\"ALL\\\");\\r\\n    // ns.disableLog(\\\"sleep\\\")\\r\\n    // ns.disableLog(\\\"exec\\\")\\r\\n    // ns.disableLog(\\\"getServerMaxRam\\\")\\r\\n    // ns.disableLog(\\\"getServerSecurityLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerMinSecurityLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerMaxMoney\\\")\\r\\n    // ns.disableLog(\\\"getHackingLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerRequiredHackingLevel\\\")\\r\\n    // ns.disableLog(\\\"scan\\\")\\r\\n    // ns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n    // ns.disableLog(\\\"getServerUsedRam\\\")\\r\\n}\\r\\nexport const ALL_FACTIONS = [\\r\\n    \\\"Illuminati\\\",\\r\\n    \\\"Daedalus\\\",\\r\\n    \\\"The Covenant\\\",\\r\\n    \\\"ECorp\\\",\\r\\n    \\\"MegaCorp\\\",\\r\\n    \\\"Bachman & Associates\\\",\\r\\n    \\\"Blade Industries\\\",\\r\\n    \\\"NWO\\\",\\r\\n    \\\"Clarke Incorporated\\\",\\r\\n    \\\"OmniTek Incorporated\\\",\\r\\n    \\\"Four Sigma\\\",\\r\\n    \\\"KuaiGong International\\\",\\r\\n    \\\"Fulcrum Secret Technologies\\\",\\r\\n    \\\"BitRunners\\\",\\r\\n    \\\"The Black Hand\\\",\\r\\n    \\\"NiteSec\\\",\\r\\n    \\\"Aevum\\\",\\r\\n    \\\"Chongqing\\\",\\r\\n    \\\"Ishima\\\",\\r\\n    \\\"New Tokyo\\\",\\r\\n    \\\"Sector-12\\\",\\r\\n    \\\"Volhaven\\\",\\r\\n    \\\"Speakers for the Dead\\\",\\r\\n    \\\"The Dark Army\\\",\\r\\n    \\\"The Syndicate\\\",\\r\\n    \\\"Silhouette\\\",\\r\\n    \\\"Tetrads\\\",\\r\\n    \\\"Slum Snakes\\\",\\r\\n    \\\"Netburners\\\",\\r\\n    \\\"Tian Di Hui\\\",\\r\\n    \\\"CyberSec\\\",\\r\\n    \\\"Bladeburners\\\",\\r\\n    \\\"Church of the Machine God\\\",\\r\\n];\\r\\nexport async function writeOut(ns, data, startTime, endTime, result, startSec, startCash) {\\r\\n    if (data.writeFile !== \\\"\\\") {\\r\\n        const outstr = ns.sprintf(\\\"%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\", data.target, data.uid, data.batchId, data.realTimeStart + data.offset, data.realTimeStart + data.finish, data.operationTime, startTime, endTime, endTime - startTime, startTime - (data.realTimeStart + data.offset), endTime - (data.realTimeStart + data.finish), endTime - startTime - data.operationTime, result, startSec.toFixed(2), ns.getServerSecurityLevel(data.target).toFixed(2), ns.nFormat(startCash, \\\"($0.000a)\\\"), ns.nFormat(ns.getServerMoneyAvailable(data.target), \\\"($0.000a)\\\"));\\r\\n        while (!await ns.tryWritePort(ReservedPorts.HACK_WRITE_INFO, [data.writeFile, outstr]))\\r\\n            ;\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi91dGlsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLE1BQU0sQ0FBTixJQUFZLGFBSVg7QUFKRCxXQUFZLGFBQWE7SUFDckIsaUVBQWdCLENBQUE7SUFDaEIsaUVBQVksQ0FBQTtJQUNaLHVFQUFlLENBQUE7QUFDbkIsQ0FBQyxFQUpXLGFBQWEsS0FBYixhQUFhLFFBSXhCO0FBRUQsTUFBTSxDQUFDLE1BQU0sUUFBUSxHQUFHLHFCQUFxQixDQUFDO0FBQzlDLE1BQU0sQ0FBQyxNQUFNLE1BQU0sR0FBRyxtQkFBbUIsQ0FBQztBQUMxQyxNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUcsbUJBQW1CLENBQUM7QUFDMUMsTUFBTSxDQUFDLE1BQU0sTUFBTSxHQUFHLGNBQWMsQ0FBQztBQUVyQyxNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUcsQ0FBQyxPQUFPLEVBQUUsV0FBVyxFQUFFLFdBQVcsRUFBRSxXQUFXLEVBQUUsUUFBUSxFQUFFLFVBQVUsQ0FBQyxDQUFDO0FBRTdGLE1BQU0sVUFBVSxJQUFJLENBQUMsRUFBTSxFQUFFLEdBQVcsRUFBRSxHQUFHLElBQXlCO0lBQ2xFLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEdBQUcsR0FBRyxFQUFFLElBQUksSUFBSSxFQUFFLENBQUMsa0JBQWtCLENBQUMsT0FBTyxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDO0FBQ3hGLENBQUM7QUFFRCxNQUFNLFVBQVUsWUFBWSxDQUFDLEVBQU0sRUFBRSxRQUFnQjtJQUNqRCxJQUFJLEVBQUUsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDNUIsT0FBTztLQUNWO0lBRUQsSUFBSSxLQUFLLEdBQUcsQ0FBQyxDQUFDO0lBQ2QsSUFBSSxFQUFFLENBQUMsVUFBVSxDQUFDLGNBQWMsRUFB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\",\"filename\":\"/lib/util.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":13.25,\"server\":\"pserv-20\",\"moduleSequenceNumber\":100697,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"purchaseTor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"purchaseProgram\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"connect\",\"cost\":2},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"suppression\":0,\"activeSuppressionThreads\":[],\"suppressionIntervalID\":null,\"suppressionLastUpdateTime\":0}},\"pserv-21\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-21\",\"httpPortOpen\":false,\"ip\":\"72.7.5.5\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":477,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"script\\\":\\\"/lib/exec/grow.js\\\",\\\"host\\\":\\\"pserv-21\\\",\\\"numThreads\\\":144,\\\"target\\\":\\\"phantasy\\\",\\\"hackLevelTiming\\\":153.19873646097005,\\\"hackLevelEffect\\\":204,\\\"batchId\\\":17,\\\"offset\\\":28000,\\\"operationTime\\\":142114,\\\"finish\\\":170114,\\\"realTimeStart\\\":1647907321842,\\\"uid\\\":\\\"017-2G-pserv-21\\\",\\\"writeFile\\\":\\\"\\\"}\"],\"dataMap\":{},\"filename\":\"/lib/exec/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":42.81000000000007,\"pid\":1324,\"ramUsage\":1.75,\"server\":\"pserv-21\",\"threads\":144,\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///dce8da26-0896-4427-b908-8b7db5061794\",\"moduleSequenceNumber\":100748}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"script\\\":\\\"/lib/exec/hack.js\\\",\\\"host\\\":\\\"pserv-21\\\",\\\"numThreads\\\":120,\\\"target\\\":\\\"phantasy\\\",\\\"hackLevelTiming\\\":13.499605144053142,\\\"hackLevelEffect\\\":204,\\\"batchId\\\":18,\\\"offset\\\":28800,\\\"operationTime\\\":142113,\\\"finish\\\":170913,\\\"realTimeStart\\\":1647907321842,\\\"uid\\\":\\\"018-0H-pserv-21\\\",\\\"writeFile\\\":\\\"\\\"}\"],\"dataMap\":{},\"filename\":\"/lib/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":42.01000000000006,\"pid\":1326,\"ramUsage\":1.7,\"server\":\"pserv-21\",\"threads\":120,\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///7d2ce839-a29e-4c36-ae53-2557c954af42\",\"moduleSequenceNumber\":100747}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"script\\\":\\\"/lib/exec/weaken.js\\\",\\\"host\\\":\\\"pserv-21\\\",\\\"numThreads\\\":12,\\\"target\\\":\\\"phantasy\\\",\\\"hackLevelTiming\\\":203.99842057621257,\\\"hackLevelEffect\\\":204,\\\"batchId\\\":26,\\\"offset\\\":42800,\\\"operationTime\\\":113691,\\\"finish\\\":156491,\\\"realTimeStart\\\":1647907321842,\\\"uid\\\":\\\"026-3WG-pserv-21\\\",\\\"writeFile\\\":\\\"\\\"}\"],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":28.009999999999938,\"pid\":1365,\"ramUsage\":1.75,\"server\":\"pserv-21\",\"threads\":12,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///0332087c-5cc1-4652-8e79-ea5c5b36c5df\",\"moduleSequenceNumber\":100752}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.stanek.charge(ns.args[0], ns.args[1]);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hhcmdlLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL3N0YW5lay9jaGFyZ2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUM5QixPQUFPLElBQUksRUFBRTtRQUNULE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7S0FDakQ7QUFDTCxDQUFDIn0=\",\"filename\":\"/lib/stanek/charge.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/stanek/charge.js\",\"url\":\"blob:file:///2cee41f7-411c-4024-a3f0-3318f12f9482\",\"moduleSequenceNumber\":99925}],\"dependents\":[],\"ramUsage\":2,\"server\":\"pserv-21\",\"moduleSequenceNumber\":99925,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.charge\",\"cost\":0.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.grow(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLElBQUksR0FBdUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFFbkUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDdkIsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7UUFDeEMsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7S0FDM0MsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyJ9\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///dce8da26-0896-4427-b908-8b7db5061794\",\"moduleSequenceNumber\":100748}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-21\",\"moduleSequenceNumber\":100748,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.weaken(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxJQUFJLEdBQXVCLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO0lBRW5FLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFO1FBQ3pCLGtCQUFrQixFQUFFLElBQUksQ0FBQyxlQUFlO1FBQ3hDLGtCQUFrQixFQUFFLElBQUksQ0FBQyxlQUFlO0tBQzNDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///0332087c-5cc1-4652-8e79-ea5c5b36c5df\",\"moduleSequenceNumber\":100752}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-21\",\"moduleSequenceNumber\":100752,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.hack(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLElBQUksR0FBdUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFFbkUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDdkIsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7UUFDeEMsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7S0FDM0MsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyJ9\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///7d2ce839-a29e-4c36-ae53-2557c954af42\",\"moduleSequenceNumber\":100747}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-21\",\"moduleSequenceNumber\":100747,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export var ReservedPorts;\\r\\n(function (ReservedPorts) {\\r\\n    ReservedPorts[ReservedPorts[\\\"HACKING_INFO\\\"] = 1] = \\\"HACKING_INFO\\\";\\r\\n    ReservedPorts[ReservedPorts[\\\"HACKNET_INFO\\\"] = 2] = \\\"HACKNET_INFO\\\";\\r\\n    ReservedPorts[ReservedPorts[\\\"HACK_WRITE_INFO\\\"] = 3] = \\\"HACK_WRITE_INFO\\\";\\r\\n})(ReservedPorts || (ReservedPorts = {}));\\r\\nexport const WEAKENJS = \\\"/lib/exec/weaken.js\\\";\\r\\nexport const GROWJS = \\\"/lib/exec/grow.js\\\";\\r\\nexport const HACKJS = \\\"/lib/exec/hack.js\\\";\\r\\nexport const UTILJS = \\\"/lib/util.js\\\";\\r\\nexport const CITIES = [\\\"Aevum\\\", \\\"Chongqing\\\", \\\"Sector-12\\\", \\\"New Tokyo\\\", \\\"Ishima\\\", \\\"Volhaven\\\"];\\r\\nexport function llog(ns, str, ...args) {\\r\\n    ns.print(ns.sprintf(\\\"%8s \\\" + str, new Date().toLocaleTimeString(\\\"it-IT\\\"), ...args));\\r\\n}\\r\\nexport function softenServer(ns, hostname) {\\r\\n    if (ns.hasRootAccess(hostname)) {\\r\\n        return;\\r\\n    }\\r\\n    let ports = 0;\\r\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n        ns.brutessh(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n        ns.ftpcrack(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n        ns.httpworm(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n        ns.relaysmtp(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n        ns.sqlinject(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ports >= ns.getServerNumPortsRequired(hostname)) {\\r\\n        ns.nuke(hostname);\\r\\n    }\\r\\n}\\r\\nexport function serverIsHackable(ns, hostname) {\\r\\n    return ns.hasRootAccess(hostname) && ns.getHackingLevel() >= ns.getServerRequiredHackingLevel(hostname);\\r\\n}\\r\\nexport function canExecuteOnServer(ns, hostname) {\\r\\n    return ns.hasRootAccess(hostname) && ns.getServerMaxRam(hostname) > 0;\\r\\n}\\r\\nexport function mapHosts(ns, hosts = {}, parents = [], current = \\\"home\\\") {\\r\\n    const newParents = parents.concat(current);\\r\\n    hosts[current] = newParents;\\r\\n    const children = ns.scan(current).filter((element) => !parents.includes(element));\\r\\n    for (const child of children) {\\r\\n        mapHosts(ns, hosts, newParents, child);\\r\\n    }\\r\\n    return hosts;\\r\\n}\\r\\nexport function allHosts(ns) {\\r\\n    return Object.keys(mapHosts(ns));\\r\\n}\\r\\nexport function doProgramBuys(ns) {\\r\\n    const player = ns.getPlayer();\\r\\n    if (!player.tor && player.money > 200e3)\\r\\n        ns.purchaseTor();\\r\\n    if (!ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\") && player.money > 500e3)\\r\\n        ns.purchaseProgram(\\\"BruteSSH.exe\\\");\\r\\n    if (!ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\") && player.money > 1500e3)\\r\\n        ns.purchaseProgram(\\\"FTPCrack.exe\\\");\\r\\n    if (!ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\") && player.money > 5e6)\\r\\n        ns.purchaseProgram(\\\"relaySMTP.exe\\\");\\r\\n    if (!ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\") && player.money > 30e6)\\r\\n        ns.purchaseProgram(\\\"HTTPWorm.exe\\\");\\r\\n    if (!ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\") && player.money > 250e6)\\r\\n        ns.purchaseProgram(\\\"SQLInject.exe\\\");\\r\\n}\\r\\nexport function doBuyAndSoftenAll(ns) {\\r\\n    doProgramBuys(ns);\\r\\n    for (const hostname of allHosts(ns)) {\\r\\n        softenServer(ns, hostname);\\r\\n    }\\r\\n}\\r\\nexport function stFormat(ns, ms, showms = false, showfull = false) {\\r\\n    let timeLeft = ms;\\r\\n    const hours = Math.floor(ms / (1000 * 60 * 60));\\r\\n    timeLeft -= hours * (1000 * 60 * 60);\\r\\n    const minutes = Math.floor(timeLeft / (1000 * 60));\\r\\n    timeLeft -= minutes * (1000 * 60);\\r\\n    const seconds = Math.floor(timeLeft / 1000);\\r\\n    timeLeft -= seconds * 1000;\\r\\n    const milliseconds = timeLeft;\\r\\n    if (showms) {\\r\\n        if (hours > 0 || showfull)\\r\\n            return ns.sprintf(\\\"%02d:%02d:%02d.%03d\\\", hours, minutes, seconds, milliseconds);\\r\\n        if (minutes > 0)\\r\\n            return ns.sprintf(\\\"%02d:%02d.%03d\\\", minutes, seconds, milliseconds);\\r\\n        return ns.sprintf(\\\"%02d.%03d\\\", seconds, milliseconds);\\r\\n    }\\r\\n    else {\\r\\n        if (hours > 0 || showfull)\\r\\n            return ns.sprintf(\\\"%02d:%02d:%02d\\\", hours, minutes, seconds);\\r\\n        if (minutes > 0)\\r\\n            return ns.sprintf(\\\"%02d:%02d\\\", minutes, seconds);\\r\\n        return ns.sprintf(\\\"%02d\\\", seconds);\\r\\n    }\\r\\n}\\r\\nexport function stdFormat(ns, offset = 0, showms = false) {\\r\\n    const date = new Date(new Date().getTime() + offset);\\r\\n    if (showms) {\\r\\n        const ms = ns.sprintf(\\\"%03d\\\", date.getUTCMilliseconds());\\r\\n        return date.toLocaleTimeString(\\\"it-IT\\\") + \\\".\\\" + ms;\\r\\n    }\\r\\n    else {\\r\\n        return date.toLocaleTimeString(\\\"it-IT\\\");\\r\\n    }\\r\\n}\\r\\nexport async function doBackdoors(ns) {\\r\\n    //const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"w0r1d_d43m0n\\\", \\\"b-and-a\\\", \\\"ecorp\\\", \\\"fulcrumassets\\\", \\\"fulcrumtech\\\"];\\r\\n    //const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"omnitek\\\", \\\"kuai-gong\\\", \\\"megacorp\\\"];\\r\\n    const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"w0r1d_d43m0n\\\"];\\r\\n    const hosts = mapHosts(ns);\\r\\n    for (const [hostName, trail] of Object.entries(hosts)) {\\r\\n        const server = ns.getServer(hostName);\\r\\n        if (!targetHosts.includes(hostName) ||\\r\\n            server.backdoorInstalled ||\\r\\n            server.requiredHackingSkill > ns.getHackingLevel() ||\\r\\n            !server.hasAdminRights)\\r\\n            continue;\\r\\n        ns.print(hostName);\\r\\n        for (const hostHopName of trail) {\\r\\n            ns.connect(hostHopName);\\r\\n        }\\r\\n        await ns.installBackdoor();\\r\\n        ns.connect(\\\"home\\\");\\r\\n    }\\r\\n}\\r\\nexport function cleanLogs(ns) {\\r\\n    ns.disableLog(\\\"disableLog\\\");\\r\\n    ns.disableLog(\\\"ALL\\\");\\r\\n    // ns.disableLog(\\\"sleep\\\")\\r\\n    // ns.disableLog(\\\"exec\\\")\\r\\n    // ns.disableLog(\\\"getServerMaxRam\\\")\\r\\n    // ns.disableLog(\\\"getServerSecurityLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerMinSecurityLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerMaxMoney\\\")\\r\\n    // ns.disableLog(\\\"getHackingLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerRequiredHackingLevel\\\")\\r\\n    // ns.disableLog(\\\"scan\\\")\\r\\n    // ns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n    // ns.disableLog(\\\"getServerUsedRam\\\")\\r\\n}\\r\\nexport const ALL_FACTIONS = [\\r\\n    \\\"Illuminati\\\",\\r\\n    \\\"Daedalus\\\",\\r\\n    \\\"The Covenant\\\",\\r\\n    \\\"ECorp\\\",\\r\\n    \\\"MegaCorp\\\",\\r\\n    \\\"Bachman & Associates\\\",\\r\\n    \\\"Blade Industries\\\",\\r\\n    \\\"NWO\\\",\\r\\n    \\\"Clarke Incorporated\\\",\\r\\n    \\\"OmniTek Incorporated\\\",\\r\\n    \\\"Four Sigma\\\",\\r\\n    \\\"KuaiGong International\\\",\\r\\n    \\\"Fulcrum Secret Technologies\\\",\\r\\n    \\\"BitRunners\\\",\\r\\n    \\\"The Black Hand\\\",\\r\\n    \\\"NiteSec\\\",\\r\\n    \\\"Aevum\\\",\\r\\n    \\\"Chongqing\\\",\\r\\n    \\\"Ishima\\\",\\r\\n    \\\"New Tokyo\\\",\\r\\n    \\\"Sector-12\\\",\\r\\n    \\\"Volhaven\\\",\\r\\n    \\\"Speakers for the Dead\\\",\\r\\n    \\\"The Dark Army\\\",\\r\\n    \\\"The Syndicate\\\",\\r\\n    \\\"Silhouette\\\",\\r\\n    \\\"Tetrads\\\",\\r\\n    \\\"Slum Snakes\\\",\\r\\n    \\\"Netburners\\\",\\r\\n    \\\"Tian Di Hui\\\",\\r\\n    \\\"CyberSec\\\",\\r\\n    \\\"Bladeburners\\\",\\r\\n    \\\"Church of the Machine God\\\",\\r\\n];\\r\\nexport async function writeOut(ns, data, startTime, endTime, result, startSec, startCash) {\\r\\n    if (data.writeFile !== \\\"\\\") {\\r\\n        const outstr = ns.sprintf(\\\"%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\", data.target, data.uid, data.batchId, data.realTimeStart + data.offset, data.realTimeStart + data.finish, data.operationTime, startTime, endTime, endTime - startTime, startTime - (data.realTimeStart + data.offset), endTime - (data.realTimeStart + data.finish), endTime - startTime - data.operationTime, result, startSec.toFixed(2), ns.getServerSecurityLevel(data.target).toFixed(2), ns.nFormat(startCash, \\\"($0.000a)\\\"), ns.nFormat(ns.getServerMoneyAvailable(data.target), \\\"($0.000a)\\\"));\\r\\n        while (!await ns.tryWritePort(ReservedPorts.HACK_WRITE_INFO, [data.writeFile, outstr]))\\r\\n            ;\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi91dGlsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLE1BQU0sQ0FBTixJQUFZLGFBSVg7QUFKRCxXQUFZLGFBQWE7SUFDckIsaUVBQWdCLENBQUE7SUFDaEIsaUVBQVksQ0FBQTtJQUNaLHVFQUFlLENBQUE7QUFDbkIsQ0FBQyxFQUpXLGFBQWEsS0FBYixhQUFhLFFBSXhCO0FBRUQsTUFBTSxDQUFDLE1BQU0sUUFBUSxHQUFHLHFCQUFxQixDQUFDO0FBQzlDLE1BQU0sQ0FBQyxNQUFNLE1BQU0sR0FBRyxtQkFBbUIsQ0FBQztBQUMxQyxNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUcsbUJBQW1CLENBQUM7QUFDMUMsTUFBTSxDQUFDLE1BQU0sTUFBTSxHQUFHLGNBQWMsQ0FBQztBQUVyQyxNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUcsQ0FBQyxPQUFPLEVBQUUsV0FBVyxFQUFFLFdBQVcsRUFBRSxXQUFXLEVBQUUsUUFBUSxFQUFFLFVBQVUsQ0FBQyxDQUFDO0FBRTdGLE1BQU0sVUFBVSxJQUFJLENBQUMsRUFBTSxFQUFFLEdBQVcsRUFBRSxHQUFHLElBQXlCO0lBQ2xFLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEdBQUcsR0FBRyxFQUFFLElBQUksSUFBSSxFQUFFLENBQUMsa0JBQWtCLENBQUMsT0FBTyxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDO0FBQ3hGLENBQUM7QUFFRCxNQUFNLFVBQVUsWUFBWSxDQUFDLEVBQU0sRUFBRSxRQUFnQjtJQUNqRCxJQUFJLEVBQUUsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDNUIsT0FBTztLQUNWO0lBRUQsSUFBSSxLQUFLLEdBQUcsQ0FBQyxDQUFDO0lBQ2QsSUFBSSxFQUFFLENBQUMsVUFBVSxDQUFDLGNBQWMsRUFB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\",\"filename\":\"/lib/util.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":13.25,\"server\":\"pserv-21\",\"moduleSequenceNumber\":100705,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"purchaseTor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"purchaseProgram\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"connect\",\"cost\":2},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"suppression\":0,\"activeSuppressionThreads\":[],\"suppressionIntervalID\":null,\"suppressionLastUpdateTime\":0}},\"pserv-22\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-22\",\"httpPortOpen\":false,\"ip\":\"44.5.9.2\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":456,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"script\\\":\\\"/lib/exec/grow.js\\\",\\\"host\\\":\\\"pserv-22\\\",\\\"numThreads\\\":144,\\\"target\\\":\\\"phantasy\\\",\\\"hackLevelTiming\\\":153.19873646097005,\\\"hackLevelEffect\\\":204,\\\"batchId\\\":18,\\\"offset\\\":29600,\\\"operationTime\\\":142114,\\\"finish\\\":171714,\\\"realTimeStart\\\":1647907321842,\\\"uid\\\":\\\"018-2G-pserv-22\\\",\\\"writeFile\\\":\\\"\\\"}\"],\"dataMap\":{},\"filename\":\"/lib/exec/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":41.21000000000005,\"pid\":1329,\"ramUsage\":1.75,\"server\":\"pserv-22\",\"threads\":144,\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///6c7ccdd5-25e3-4294-b9f9-4283af91d037\",\"moduleSequenceNumber\":100751}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"script\\\":\\\"/lib/exec/hack.js\\\",\\\"host\\\":\\\"pserv-22\\\",\\\"numThreads\\\":120,\\\"target\\\":\\\"phantasy\\\",\\\"hackLevelTiming\\\":13.499605144053142,\\\"hackLevelEffect\\\":204,\\\"batchId\\\":19,\\\"offset\\\":30400,\\\"operationTime\\\":142113,\\\"finish\\\":172513,\\\"realTimeStart\\\":1647907321842,\\\"uid\\\":\\\"019-0H-pserv-22\\\",\\\"writeFile\\\":\\\"\\\"}\"],\"dataMap\":{},\"filename\":\"/lib/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":40.41000000000004,\"pid\":1331,\"ramUsage\":1.7,\"server\":\"pserv-22\",\"threads\":120,\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///8e26aad0-4990-4f4c-8251-e6e67589ca37\",\"moduleSequenceNumber\":100750}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.stanek.charge(ns.args[0], ns.args[1]);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hhcmdlLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL3N0YW5lay9jaGFyZ2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUM5QixPQUFPLElBQUksRUFBRTtRQUNULE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7S0FDakQ7QUFDTCxDQUFDIn0=\",\"filename\":\"/lib/stanek/charge.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/stanek/charge.js\",\"url\":\"blob:file:///dc4e4b9d-fe11-413c-babf-30a95144fb0c\",\"moduleSequenceNumber\":99926}],\"dependents\":[],\"ramUsage\":2,\"server\":\"pserv-22\",\"moduleSequenceNumber\":99926,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.charge\",\"cost\":0.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.grow(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLElBQUksR0FBdUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFFbkUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDdkIsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7UUFDeEMsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7S0FDM0MsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyJ9\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///6c7ccdd5-25e3-4294-b9f9-4283af91d037\",\"moduleSequenceNumber\":100751}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-22\",\"moduleSequenceNumber\":100751,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.weaken(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxJQUFJLEdBQXVCLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO0lBRW5FLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFO1FBQ3pCLGtCQUFrQixFQUFFLElBQUksQ0FBQyxlQUFlO1FBQ3hDLGtCQUFrQixFQUFFLElBQUksQ0FBQyxlQUFlO0tBQzNDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///62199bf9-aea5-42fc-97ba-f16205456548\",\"moduleSequenceNumber\":100755}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-22\",\"moduleSequenceNumber\":100755,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.hack(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLElBQUksR0FBdUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFFbkUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDdkIsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7UUFDeEMsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7S0FDM0MsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyJ9\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///8e26aad0-4990-4f4c-8251-e6e67589ca37\",\"moduleSequenceNumber\":100750}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-22\",\"moduleSequenceNumber\":100750,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export var ReservedPorts;\\r\\n(function (ReservedPorts) {\\r\\n    ReservedPorts[ReservedPorts[\\\"HACKING_INFO\\\"] = 1] = \\\"HACKING_INFO\\\";\\r\\n    ReservedPorts[ReservedPorts[\\\"HACKNET_INFO\\\"] = 2] = \\\"HACKNET_INFO\\\";\\r\\n    ReservedPorts[ReservedPorts[\\\"HACK_WRITE_INFO\\\"] = 3] = \\\"HACK_WRITE_INFO\\\";\\r\\n})(ReservedPorts || (ReservedPorts = {}));\\r\\nexport const WEAKENJS = \\\"/lib/exec/weaken.js\\\";\\r\\nexport const GROWJS = \\\"/lib/exec/grow.js\\\";\\r\\nexport const HACKJS = \\\"/lib/exec/hack.js\\\";\\r\\nexport const UTILJS = \\\"/lib/util.js\\\";\\r\\nexport const CITIES = [\\\"Aevum\\\", \\\"Chongqing\\\", \\\"Sector-12\\\", \\\"New Tokyo\\\", \\\"Ishima\\\", \\\"Volhaven\\\"];\\r\\nexport function llog(ns, str, ...args) {\\r\\n    ns.print(ns.sprintf(\\\"%8s \\\" + str, new Date().toLocaleTimeString(\\\"it-IT\\\"), ...args));\\r\\n}\\r\\nexport function softenServer(ns, hostname) {\\r\\n    if (ns.hasRootAccess(hostname)) {\\r\\n        return;\\r\\n    }\\r\\n    let ports = 0;\\r\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n        ns.brutessh(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n        ns.ftpcrack(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n        ns.httpworm(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n        ns.relaysmtp(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n        ns.sqlinject(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ports >= ns.getServerNumPortsRequired(hostname)) {\\r\\n        ns.nuke(hostname);\\r\\n    }\\r\\n}\\r\\nexport function serverIsHackable(ns, hostname) {\\r\\n    return ns.hasRootAccess(hostname) && ns.getHackingLevel() >= ns.getServerRequiredHackingLevel(hostname);\\r\\n}\\r\\nexport function canExecuteOnServer(ns, hostname) {\\r\\n    return ns.hasRootAccess(hostname) && ns.getServerMaxRam(hostname) > 0;\\r\\n}\\r\\nexport function mapHosts(ns, hosts = {}, parents = [], current = \\\"home\\\") {\\r\\n    const newParents = parents.concat(current);\\r\\n    hosts[current] = newParents;\\r\\n    const children = ns.scan(current).filter((element) => !parents.includes(element));\\r\\n    for (const child of children) {\\r\\n        mapHosts(ns, hosts, newParents, child);\\r\\n    }\\r\\n    return hosts;\\r\\n}\\r\\nexport function allHosts(ns) {\\r\\n    return Object.keys(mapHosts(ns));\\r\\n}\\r\\nexport function doProgramBuys(ns) {\\r\\n    const player = ns.getPlayer();\\r\\n    if (!player.tor && player.money > 200e3)\\r\\n        ns.purchaseTor();\\r\\n    if (!ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\") && player.money > 500e3)\\r\\n        ns.purchaseProgram(\\\"BruteSSH.exe\\\");\\r\\n    if (!ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\") && player.money > 1500e3)\\r\\n        ns.purchaseProgram(\\\"FTPCrack.exe\\\");\\r\\n    if (!ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\") && player.money > 5e6)\\r\\n        ns.purchaseProgram(\\\"relaySMTP.exe\\\");\\r\\n    if (!ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\") && player.money > 30e6)\\r\\n        ns.purchaseProgram(\\\"HTTPWorm.exe\\\");\\r\\n    if (!ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\") && player.money > 250e6)\\r\\n        ns.purchaseProgram(\\\"SQLInject.exe\\\");\\r\\n}\\r\\nexport function doBuyAndSoftenAll(ns) {\\r\\n    doProgramBuys(ns);\\r\\n    for (const hostname of allHosts(ns)) {\\r\\n        softenServer(ns, hostname);\\r\\n    }\\r\\n}\\r\\nexport function stFormat(ns, ms, showms = false, showfull = false) {\\r\\n    let timeLeft = ms;\\r\\n    const hours = Math.floor(ms / (1000 * 60 * 60));\\r\\n    timeLeft -= hours * (1000 * 60 * 60);\\r\\n    const minutes = Math.floor(timeLeft / (1000 * 60));\\r\\n    timeLeft -= minutes * (1000 * 60);\\r\\n    const seconds = Math.floor(timeLeft / 1000);\\r\\n    timeLeft -= seconds * 1000;\\r\\n    const milliseconds = timeLeft;\\r\\n    if (showms) {\\r\\n        if (hours > 0 || showfull)\\r\\n            return ns.sprintf(\\\"%02d:%02d:%02d.%03d\\\", hours, minutes, seconds, milliseconds);\\r\\n        if (minutes > 0)\\r\\n            return ns.sprintf(\\\"%02d:%02d.%03d\\\", minutes, seconds, milliseconds);\\r\\n        return ns.sprintf(\\\"%02d.%03d\\\", seconds, milliseconds);\\r\\n    }\\r\\n    else {\\r\\n        if (hours > 0 || showfull)\\r\\n            return ns.sprintf(\\\"%02d:%02d:%02d\\\", hours, minutes, seconds);\\r\\n        if (minutes > 0)\\r\\n            return ns.sprintf(\\\"%02d:%02d\\\", minutes, seconds);\\r\\n        return ns.sprintf(\\\"%02d\\\", seconds);\\r\\n    }\\r\\n}\\r\\nexport function stdFormat(ns, offset = 0, showms = false) {\\r\\n    const date = new Date(new Date().getTime() + offset);\\r\\n    if (showms) {\\r\\n        const ms = ns.sprintf(\\\"%03d\\\", date.getUTCMilliseconds());\\r\\n        return date.toLocaleTimeString(\\\"it-IT\\\") + \\\".\\\" + ms;\\r\\n    }\\r\\n    else {\\r\\n        return date.toLocaleTimeString(\\\"it-IT\\\");\\r\\n    }\\r\\n}\\r\\nexport async function doBackdoors(ns) {\\r\\n    //const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"w0r1d_d43m0n\\\", \\\"b-and-a\\\", \\\"ecorp\\\", \\\"fulcrumassets\\\", \\\"fulcrumtech\\\"];\\r\\n    //const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"omnitek\\\", \\\"kuai-gong\\\", \\\"megacorp\\\"];\\r\\n    const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"w0r1d_d43m0n\\\"];\\r\\n    const hosts = mapHosts(ns);\\r\\n    for (const [hostName, trail] of Object.entries(hosts)) {\\r\\n        const server = ns.getServer(hostName);\\r\\n        if (!targetHosts.includes(hostName) ||\\r\\n            server.backdoorInstalled ||\\r\\n            server.requiredHackingSkill > ns.getHackingLevel() ||\\r\\n            !server.hasAdminRights)\\r\\n            continue;\\r\\n        ns.print(hostName);\\r\\n        for (const hostHopName of trail) {\\r\\n            ns.connect(hostHopName);\\r\\n        }\\r\\n        await ns.installBackdoor();\\r\\n        ns.connect(\\\"home\\\");\\r\\n    }\\r\\n}\\r\\nexport function cleanLogs(ns) {\\r\\n    ns.disableLog(\\\"disableLog\\\");\\r\\n    ns.disableLog(\\\"ALL\\\");\\r\\n    // ns.disableLog(\\\"sleep\\\")\\r\\n    // ns.disableLog(\\\"exec\\\")\\r\\n    // ns.disableLog(\\\"getServerMaxRam\\\")\\r\\n    // ns.disableLog(\\\"getServerSecurityLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerMinSecurityLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerMaxMoney\\\")\\r\\n    // ns.disableLog(\\\"getHackingLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerRequiredHackingLevel\\\")\\r\\n    // ns.disableLog(\\\"scan\\\")\\r\\n    // ns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n    // ns.disableLog(\\\"getServerUsedRam\\\")\\r\\n}\\r\\nexport const ALL_FACTIONS = [\\r\\n    \\\"Illuminati\\\",\\r\\n    \\\"Daedalus\\\",\\r\\n    \\\"The Covenant\\\",\\r\\n    \\\"ECorp\\\",\\r\\n    \\\"MegaCorp\\\",\\r\\n    \\\"Bachman & Associates\\\",\\r\\n    \\\"Blade Industries\\\",\\r\\n    \\\"NWO\\\",\\r\\n    \\\"Clarke Incorporated\\\",\\r\\n    \\\"OmniTek Incorporated\\\",\\r\\n    \\\"Four Sigma\\\",\\r\\n    \\\"KuaiGong International\\\",\\r\\n    \\\"Fulcrum Secret Technologies\\\",\\r\\n    \\\"BitRunners\\\",\\r\\n    \\\"The Black Hand\\\",\\r\\n    \\\"NiteSec\\\",\\r\\n    \\\"Aevum\\\",\\r\\n    \\\"Chongqing\\\",\\r\\n    \\\"Ishima\\\",\\r\\n    \\\"New Tokyo\\\",\\r\\n    \\\"Sector-12\\\",\\r\\n    \\\"Volhaven\\\",\\r\\n    \\\"Speakers for the Dead\\\",\\r\\n    \\\"The Dark Army\\\",\\r\\n    \\\"The Syndicate\\\",\\r\\n    \\\"Silhouette\\\",\\r\\n    \\\"Tetrads\\\",\\r\\n    \\\"Slum Snakes\\\",\\r\\n    \\\"Netburners\\\",\\r\\n    \\\"Tian Di Hui\\\",\\r\\n    \\\"CyberSec\\\",\\r\\n    \\\"Bladeburners\\\",\\r\\n    \\\"Church of the Machine God\\\",\\r\\n];\\r\\nexport async function writeOut(ns, data, startTime, endTime, result, startSec, startCash) {\\r\\n    if (data.writeFile !== \\\"\\\") {\\r\\n        const outstr = ns.sprintf(\\\"%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\", data.target, data.uid, data.batchId, data.realTimeStart + data.offset, data.realTimeStart + data.finish, data.operationTime, startTime, endTime, endTime - startTime, startTime - (data.realTimeStart + data.offset), endTime - (data.realTimeStart + data.finish), endTime - startTime - data.operationTime, result, startSec.toFixed(2), ns.getServerSecurityLevel(data.target).toFixed(2), ns.nFormat(startCash, \\\"($0.000a)\\\"), ns.nFormat(ns.getServerMoneyAvailable(data.target), \\\"($0.000a)\\\"));\\r\\n        while (!await ns.tryWritePort(ReservedPorts.HACK_WRITE_INFO, [data.writeFile, outstr]))\\r\\n            ;\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi91dGlsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLE1BQU0sQ0FBTixJQUFZLGFBSVg7QUFKRCxXQUFZLGFBQWE7SUFDckIsaUVBQWdCLENBQUE7SUFDaEIsaUVBQVksQ0FBQTtJQUNaLHVFQUFlLENBQUE7QUFDbkIsQ0FBQyxFQUpXLGFBQWEsS0FBYixhQUFhLFFBSXhCO0FBRUQsTUFBTSxDQUFDLE1BQU0sUUFBUSxHQUFHLHFCQUFxQixDQUFDO0FBQzlDLE1BQU0sQ0FBQyxNQUFNLE1BQU0sR0FBRyxtQkFBbUIsQ0FBQztBQUMxQyxNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUcsbUJBQW1CLENBQUM7QUFDMUMsTUFBTSxDQUFDLE1BQU0sTUFBTSxHQUFHLGNBQWMsQ0FBQztBQUVyQyxNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUcsQ0FBQyxPQUFPLEVBQUUsV0FBVyxFQUFFLFdBQVcsRUFBRSxXQUFXLEVBQUUsUUFBUSxFQUFFLFVBQVUsQ0FBQyxDQUFDO0FBRTdGLE1BQU0sVUFBVSxJQUFJLENBQUMsRUFBTSxFQUFFLEdBQVcsRUFBRSxHQUFHLElBQXlCO0lBQ2xFLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEdBQUcsR0FBRyxFQUFFLElBQUksSUFBSSxFQUFFLENBQUMsa0JBQWtCLENBQUMsT0FBTyxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDO0FBQ3hGLENBQUM7QUFFRCxNQUFNLFVBQVUsWUFBWSxDQUFDLEVBQU0sRUFBRSxRQUFnQjtJQUNqRCxJQUFJLEVBQUUsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDNUIsT0FBTztLQUNWO0lBRUQsSUFBSSxLQUFLLEdBQUcsQ0FBQyxDQUFDO0lBQ2QsSUFBSSxFQUFFLENBQUMsVUFBVSxDQUFDLGNBQWMsRUFB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\",\"filename\":\"/lib/util.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":13.25,\"server\":\"pserv-22\",\"moduleSequenceNumber\":100713,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"purchaseTor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"purchaseProgram\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"connect\",\"cost\":2},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"suppression\":0,\"activeSuppressionThreads\":[],\"suppressionIntervalID\":null,\"suppressionLastUpdateTime\":0}},\"pserv-23\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-23\",\"httpPortOpen\":false,\"ip\":\"20.6.1.0\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":456,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"script\\\":\\\"/lib/exec/grow.js\\\",\\\"host\\\":\\\"pserv-23\\\",\\\"numThreads\\\":144,\\\"target\\\":\\\"phantasy\\\",\\\"hackLevelTiming\\\":153.19873646097005,\\\"hackLevelEffect\\\":204,\\\"batchId\\\":19,\\\"offset\\\":31200,\\\"operationTime\\\":142114,\\\"finish\\\":173314,\\\"realTimeStart\\\":1647907321842,\\\"uid\\\":\\\"019-2G-pserv-23\\\",\\\"writeFile\\\":\\\"\\\"}\"],\"dataMap\":{},\"filename\":\"/lib/exec/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":39.61000000000003,\"pid\":1333,\"ramUsage\":1.75,\"server\":\"pserv-23\",\"threads\":144,\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///6c08b156-4743-4523-a050-e3cb9a543ddd\",\"moduleSequenceNumber\":100754}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"script\\\":\\\"/lib/exec/hack.js\\\",\\\"host\\\":\\\"pserv-23\\\",\\\"numThreads\\\":120,\\\"target\\\":\\\"phantasy\\\",\\\"hackLevelTiming\\\":13.499605144053142,\\\"hackLevelEffect\\\":204,\\\"batchId\\\":20,\\\"offset\\\":32000,\\\"operationTime\\\":142113,\\\"finish\\\":174113,\\\"realTimeStart\\\":1647907321842,\\\"uid\\\":\\\"020-0H-pserv-23\\\",\\\"writeFile\\\":\\\"\\\"}\"],\"dataMap\":{},\"filename\":\"/lib/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38.81000000000002,\"pid\":1336,\"ramUsage\":1.7,\"server\":\"pserv-23\",\"threads\":120,\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///63ab5cb9-2204-4436-850f-54e2b9062173\",\"moduleSequenceNumber\":100753}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.stanek.charge(ns.args[0], ns.args[1]);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hhcmdlLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL3N0YW5lay9jaGFyZ2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUM5QixPQUFPLElBQUksRUFBRTtRQUNULE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7S0FDakQ7QUFDTCxDQUFDIn0=\",\"filename\":\"/lib/stanek/charge.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/stanek/charge.js\",\"url\":\"blob:file:///a675da8e-c7d4-4aad-a27f-1ba00212e783\",\"moduleSequenceNumber\":99927}],\"dependents\":[],\"ramUsage\":2,\"server\":\"pserv-23\",\"moduleSequenceNumber\":99927,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.charge\",\"cost\":0.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.grow(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLElBQUksR0FBdUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFFbkUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDdkIsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7UUFDeEMsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7S0FDM0MsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyJ9\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///6c08b156-4743-4523-a050-e3cb9a543ddd\",\"moduleSequenceNumber\":100754}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-23\",\"moduleSequenceNumber\":100754,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.weaken(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxJQUFJLEdBQXVCLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO0lBRW5FLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFO1FBQ3pCLGtCQUFrQixFQUFFLElBQUksQ0FBQyxlQUFlO1FBQ3hDLGtCQUFrQixFQUFFLElBQUksQ0FBQyxlQUFlO0tBQzNDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///3f809a4c-de51-47b4-819b-12241bd3d043\",\"moduleSequenceNumber\":100756}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-23\",\"moduleSequenceNumber\":100756,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.hack(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLElBQUksR0FBdUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFFbkUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDdkIsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7UUFDeEMsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7S0FDM0MsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyJ9\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///63ab5cb9-2204-4436-850f-54e2b9062173\",\"moduleSequenceNumber\":100753}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-23\",\"moduleSequenceNumber\":100753,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export var ReservedPorts;\\r\\n(function (ReservedPorts) {\\r\\n    ReservedPorts[ReservedPorts[\\\"HACKING_INFO\\\"] = 1] = \\\"HACKING_INFO\\\";\\r\\n    ReservedPorts[ReservedPorts[\\\"HACKNET_INFO\\\"] = 2] = \\\"HACKNET_INFO\\\";\\r\\n    ReservedPorts[ReservedPorts[\\\"HACK_WRITE_INFO\\\"] = 3] = \\\"HACK_WRITE_INFO\\\";\\r\\n})(ReservedPorts || (ReservedPorts = {}));\\r\\nexport const WEAKENJS = \\\"/lib/exec/weaken.js\\\";\\r\\nexport const GROWJS = \\\"/lib/exec/grow.js\\\";\\r\\nexport const HACKJS = \\\"/lib/exec/hack.js\\\";\\r\\nexport const UTILJS = \\\"/lib/util.js\\\";\\r\\nexport const CITIES = [\\\"Aevum\\\", \\\"Chongqing\\\", \\\"Sector-12\\\", \\\"New Tokyo\\\", \\\"Ishima\\\", \\\"Volhaven\\\"];\\r\\nexport function llog(ns, str, ...args) {\\r\\n    ns.print(ns.sprintf(\\\"%8s \\\" + str, new Date().toLocaleTimeString(\\\"it-IT\\\"), ...args));\\r\\n}\\r\\nexport function softenServer(ns, hostname) {\\r\\n    if (ns.hasRootAccess(hostname)) {\\r\\n        return;\\r\\n    }\\r\\n    let ports = 0;\\r\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n        ns.brutessh(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n        ns.ftpcrack(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n        ns.httpworm(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n        ns.relaysmtp(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n        ns.sqlinject(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ports >= ns.getServerNumPortsRequired(hostname)) {\\r\\n        ns.nuke(hostname);\\r\\n    }\\r\\n}\\r\\nexport function serverIsHackable(ns, hostname) {\\r\\n    return ns.hasRootAccess(hostname) && ns.getHackingLevel() >= ns.getServerRequiredHackingLevel(hostname);\\r\\n}\\r\\nexport function canExecuteOnServer(ns, hostname) {\\r\\n    return ns.hasRootAccess(hostname) && ns.getServerMaxRam(hostname) > 0;\\r\\n}\\r\\nexport function mapHosts(ns, hosts = {}, parents = [], current = \\\"home\\\") {\\r\\n    const newParents = parents.concat(current);\\r\\n    hosts[current] = newParents;\\r\\n    const children = ns.scan(current).filter((element) => !parents.includes(element));\\r\\n    for (const child of children) {\\r\\n        mapHosts(ns, hosts, newParents, child);\\r\\n    }\\r\\n    return hosts;\\r\\n}\\r\\nexport function allHosts(ns) {\\r\\n    return Object.keys(mapHosts(ns));\\r\\n}\\r\\nexport function doProgramBuys(ns) {\\r\\n    const player = ns.getPlayer();\\r\\n    if (!player.tor && player.money > 200e3)\\r\\n        ns.purchaseTor();\\r\\n    if (!ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\") && player.money > 500e3)\\r\\n        ns.purchaseProgram(\\\"BruteSSH.exe\\\");\\r\\n    if (!ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\") && player.money > 1500e3)\\r\\n        ns.purchaseProgram(\\\"FTPCrack.exe\\\");\\r\\n    if (!ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\") && player.money > 5e6)\\r\\n        ns.purchaseProgram(\\\"relaySMTP.exe\\\");\\r\\n    if (!ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\") && player.money > 30e6)\\r\\n        ns.purchaseProgram(\\\"HTTPWorm.exe\\\");\\r\\n    if (!ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\") && player.money > 250e6)\\r\\n        ns.purchaseProgram(\\\"SQLInject.exe\\\");\\r\\n}\\r\\nexport function doBuyAndSoftenAll(ns) {\\r\\n    doProgramBuys(ns);\\r\\n    for (const hostname of allHosts(ns)) {\\r\\n        softenServer(ns, hostname);\\r\\n    }\\r\\n}\\r\\nexport function stFormat(ns, ms, showms = false, showfull = false) {\\r\\n    let timeLeft = ms;\\r\\n    const hours = Math.floor(ms / (1000 * 60 * 60));\\r\\n    timeLeft -= hours * (1000 * 60 * 60);\\r\\n    const minutes = Math.floor(timeLeft / (1000 * 60));\\r\\n    timeLeft -= minutes * (1000 * 60);\\r\\n    const seconds = Math.floor(timeLeft / 1000);\\r\\n    timeLeft -= seconds * 1000;\\r\\n    const milliseconds = timeLeft;\\r\\n    if (showms) {\\r\\n        if (hours > 0 || showfull)\\r\\n            return ns.sprintf(\\\"%02d:%02d:%02d.%03d\\\", hours, minutes, seconds, milliseconds);\\r\\n        if (minutes > 0)\\r\\n            return ns.sprintf(\\\"%02d:%02d.%03d\\\", minutes, seconds, milliseconds);\\r\\n        return ns.sprintf(\\\"%02d.%03d\\\", seconds, milliseconds);\\r\\n    }\\r\\n    else {\\r\\n        if (hours > 0 || showfull)\\r\\n            return ns.sprintf(\\\"%02d:%02d:%02d\\\", hours, minutes, seconds);\\r\\n        if (minutes > 0)\\r\\n            return ns.sprintf(\\\"%02d:%02d\\\", minutes, seconds);\\r\\n        return ns.sprintf(\\\"%02d\\\", seconds);\\r\\n    }\\r\\n}\\r\\nexport function stdFormat(ns, offset = 0, showms = false) {\\r\\n    const date = new Date(new Date().getTime() + offset);\\r\\n    if (showms) {\\r\\n        const ms = ns.sprintf(\\\"%03d\\\", date.getUTCMilliseconds());\\r\\n        return date.toLocaleTimeString(\\\"it-IT\\\") + \\\".\\\" + ms;\\r\\n    }\\r\\n    else {\\r\\n        return date.toLocaleTimeString(\\\"it-IT\\\");\\r\\n    }\\r\\n}\\r\\nexport async function doBackdoors(ns) {\\r\\n    //const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"w0r1d_d43m0n\\\", \\\"b-and-a\\\", \\\"ecorp\\\", \\\"fulcrumassets\\\", \\\"fulcrumtech\\\"];\\r\\n    //const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"omnitek\\\", \\\"kuai-gong\\\", \\\"megacorp\\\"];\\r\\n    const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"w0r1d_d43m0n\\\"];\\r\\n    const hosts = mapHosts(ns);\\r\\n    for (const [hostName, trail] of Object.entries(hosts)) {\\r\\n        const server = ns.getServer(hostName);\\r\\n        if (!targetHosts.includes(hostName) ||\\r\\n            server.backdoorInstalled ||\\r\\n            server.requiredHackingSkill > ns.getHackingLevel() ||\\r\\n            !server.hasAdminRights)\\r\\n            continue;\\r\\n        ns.print(hostName);\\r\\n        for (const hostHopName of trail) {\\r\\n            ns.connect(hostHopName);\\r\\n        }\\r\\n        await ns.installBackdoor();\\r\\n        ns.connect(\\\"home\\\");\\r\\n    }\\r\\n}\\r\\nexport function cleanLogs(ns) {\\r\\n    ns.disableLog(\\\"disableLog\\\");\\r\\n    ns.disableLog(\\\"ALL\\\");\\r\\n    // ns.disableLog(\\\"sleep\\\")\\r\\n    // ns.disableLog(\\\"exec\\\")\\r\\n    // ns.disableLog(\\\"getServerMaxRam\\\")\\r\\n    // ns.disableLog(\\\"getServerSecurityLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerMinSecurityLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerMaxMoney\\\")\\r\\n    // ns.disableLog(\\\"getHackingLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerRequiredHackingLevel\\\")\\r\\n    // ns.disableLog(\\\"scan\\\")\\r\\n    // ns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n    // ns.disableLog(\\\"getServerUsedRam\\\")\\r\\n}\\r\\nexport const ALL_FACTIONS = [\\r\\n    \\\"Illuminati\\\",\\r\\n    \\\"Daedalus\\\",\\r\\n    \\\"The Covenant\\\",\\r\\n    \\\"ECorp\\\",\\r\\n    \\\"MegaCorp\\\",\\r\\n    \\\"Bachman & Associates\\\",\\r\\n    \\\"Blade Industries\\\",\\r\\n    \\\"NWO\\\",\\r\\n    \\\"Clarke Incorporated\\\",\\r\\n    \\\"OmniTek Incorporated\\\",\\r\\n    \\\"Four Sigma\\\",\\r\\n    \\\"KuaiGong International\\\",\\r\\n    \\\"Fulcrum Secret Technologies\\\",\\r\\n    \\\"BitRunners\\\",\\r\\n    \\\"The Black Hand\\\",\\r\\n    \\\"NiteSec\\\",\\r\\n    \\\"Aevum\\\",\\r\\n    \\\"Chongqing\\\",\\r\\n    \\\"Ishima\\\",\\r\\n    \\\"New Tokyo\\\",\\r\\n    \\\"Sector-12\\\",\\r\\n    \\\"Volhaven\\\",\\r\\n    \\\"Speakers for the Dead\\\",\\r\\n    \\\"The Dark Army\\\",\\r\\n    \\\"The Syndicate\\\",\\r\\n    \\\"Silhouette\\\",\\r\\n    \\\"Tetrads\\\",\\r\\n    \\\"Slum Snakes\\\",\\r\\n    \\\"Netburners\\\",\\r\\n    \\\"Tian Di Hui\\\",\\r\\n    \\\"CyberSec\\\",\\r\\n    \\\"Bladeburners\\\",\\r\\n    \\\"Church of the Machine God\\\",\\r\\n];\\r\\nexport async function writeOut(ns, data, startTime, endTime, result, startSec, startCash) {\\r\\n    if (data.writeFile !== \\\"\\\") {\\r\\n        const outstr = ns.sprintf(\\\"%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\", data.target, data.uid, data.batchId, data.realTimeStart + data.offset, data.realTimeStart + data.finish, data.operationTime, startTime, endTime, endTime - startTime, startTime - (data.realTimeStart + data.offset), endTime - (data.realTimeStart + data.finish), endTime - startTime - data.operationTime, result, startSec.toFixed(2), ns.getServerSecurityLevel(data.target).toFixed(2), ns.nFormat(startCash, \\\"($0.000a)\\\"), ns.nFormat(ns.getServerMoneyAvailable(data.target), \\\"($0.000a)\\\"));\\r\\n        while (!await ns.tryWritePort(ReservedPorts.HACK_WRITE_INFO, [data.writeFile, outstr]))\\r\\n            ;\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi91dGlsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLE1BQU0sQ0FBTixJQUFZLGFBSVg7QUFKRCxXQUFZLGFBQWE7SUFDckIsaUVBQWdCLENBQUE7SUFDaEIsaUVBQVksQ0FBQTtJQUNaLHVFQUFlLENBQUE7QUFDbkIsQ0FBQyxFQUpXLGFBQWEsS0FBYixhQUFhLFFBSXhCO0FBRUQsTUFBTSxDQUFDLE1BQU0sUUFBUSxHQUFHLHFCQUFxQixDQUFDO0FBQzlDLE1BQU0sQ0FBQyxNQUFNLE1BQU0sR0FBRyxtQkFBbUIsQ0FBQztBQUMxQyxNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUcsbUJBQW1CLENBQUM7QUFDMUMsTUFBTSxDQUFDLE1BQU0sTUFBTSxHQUFHLGNBQWMsQ0FBQztBQUVyQyxNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUcsQ0FBQyxPQUFPLEVBQUUsV0FBVyxFQUFFLFdBQVcsRUFBRSxXQUFXLEVBQUUsUUFBUSxFQUFFLFVBQVUsQ0FBQyxDQUFDO0FBRTdGLE1BQU0sVUFBVSxJQUFJLENBQUMsRUFBTSxFQUFFLEdBQVcsRUFBRSxHQUFHLElBQXlCO0lBQ2xFLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEdBQUcsR0FBRyxFQUFFLElBQUksSUFBSSxFQUFFLENBQUMsa0JBQWtCLENBQUMsT0FBTyxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDO0FBQ3hGLENBQUM7QUFFRCxNQUFNLFVBQVUsWUFBWSxDQUFDLEVBQU0sRUFBRSxRQUFnQjtJQUNqRCxJQUFJLEVBQUUsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDNUIsT0FBTztLQUNWO0lBRUQsSUFBSSxLQUFLLEdBQUcsQ0FBQyxDQUFDO0lBQ2QsSUFBSSxFQUFFLENBQUMsVUFBVSxDQUFDLGNBQWMsRUFB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\",\"filename\":\"/lib/util.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":13.25,\"server\":\"pserv-23\",\"moduleSequenceNumber\":100721,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"purchaseTor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"purchaseProgram\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"connect\",\"cost\":2},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"suppression\":0,\"activeSuppressionThreads\":[],\"suppressionIntervalID\":null,\"suppressionLastUpdateTime\":0}},\"hacknet-node-0\":{\"ctor\":\"HacknetServer\",\"data\":{\"contracts\":[],\"cpuCores\":7,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hacknet-node-0\",\"httpPortOpen\":false,\"ip\":\"86.2.6.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"cache\":7,\"cores\":7,\"hashCapacity\":4096,\"hashRate\":0.053296830285616194,\"level\":25,\"onlineTimeSeconds\":207.39999999999677,\"totalHashesGenerated\":10.9086269124302}},\"hacknet-node-1\":{\"ctor\":\"HacknetServer\",\"data\":{\"contracts\":[],\"cpuCores\":7,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hacknet-node-1\",\"httpPortOpen\":false,\"ip\":\"15.9.7.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"cache\":1,\"cores\":7,\"hashCapacity\":64,\"hashRate\":0.053296830285616194,\"level\":25,\"onlineTimeSeconds\":207.39999999999677,\"totalHashesGenerated\":10.899011934634194}},\"hacknet-node-2\":{\"ctor\":\"HacknetServer\",\"data\":{\"contracts\":[],\"cpuCores\":7,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hacknet-node-2\",\"httpPortOpen\":false,\"ip\":\"88.7.8.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"cache\":1,\"cores\":7,\"hashCapacity\":64,\"hashRate\":0.053296830285616194,\"level\":25,\"onlineTimeSeconds\":207.39999999999677,\"totalHashesGenerated\":10.896263041760987}},\"hacknet-node-3\":{\"ctor\":\"HacknetServer\",\"data\":{\"contracts\":[],\"cpuCores\":7,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hacknet-node-3\",\"httpPortOpen\":false,\"ip\":\"31.2.6.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"cache\":1,\"cores\":7,\"hashCapacity\":64,\"hashRate\":0.053296830285616194,\"level\":25,\"onlineTimeSeconds\":206.5999999999968,\"totalHashesGenerated\":10.88911052633865}},\"hacknet-node-4\":{\"ctor\":\"HacknetServer\",\"data\":{\"contracts\":[],\"cpuCores\":7,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hacknet-node-4\",\"httpPortOpen\":false,\"ip\":\"77.7.4.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"cache\":1,\"cores\":7,\"hashCapacity\":64,\"hashRate\":0.053296830285616194,\"level\":25,\"onlineTimeSeconds\":205.59999999999687,\"totalHashesGenerated\":10.872022260545508}},\"hacknet-node-5\":{\"ctor\":\"HacknetServer\",\"data\":{\"contracts\":[],\"cpuCores\":7,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hacknet-node-5\",\"httpPortOpen\":false,\"ip\":\"65.7.6.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"cache\":1,\"cores\":7,\"hashCapacity\":64,\"hashRate\":0.053296830285616194,\"level\":25,\"onlineTimeSeconds\":204.39999999999694,\"totalHashesGenerated\":10.833325537439363}},\"hacknet-node-6\":{\"ctor\":\"HacknetServer\",\"data\":{\"contracts\":[],\"cpuCores\":4,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hacknet-node-6\",\"httpPortOpen\":false,\"ip\":\"34.4.6.9\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"cache\":1,\"cores\":4,\"hashCapacity\":64,\"hashRate\":0.020286304135901493,\"level\":14,\"onlineTimeSeconds\":201.79999999999708,\"totalHashesGenerated\":4.085646053882522}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"ECorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"MegaCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Bachman & Associates\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.6,\"salaryMultiplier\":2.6,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Blade Industries\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NWO\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Clarke Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"OmniTek Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Four Sigma\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.5,\"salaryMultiplier\":2.5,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"name\":\"KuaiGong International\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.2,\"salaryMultiplier\":2.2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Fulcrum Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Storm Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DefComm\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Helios Labs\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"name\":\"VitaLife\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Icarus Microsystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Universal Energy\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Galactic Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"AeroCorp\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omnia Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Solaris Space Systems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DeltaOne\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.6,\"salaryMultiplier\":1.6,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Nova Medical\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Central Intelligence Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"National Security Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Watchdog Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"LexoCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.4,\"salaryMultiplier\":1.4,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Rho Construction\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Alpha Enterprises\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Aevum Police Headquarters\",\"info\":\"\",\"companyPositions\":{\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"name\":\"SysCore Securities\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"name\":\"CompuTek\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NetLink Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Carmichael Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"name\":\"FoodNStuff\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Joe's Guns\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omega Software\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true},\"expMultiplier\":1.1,\"salaryMultiplier\":1.1,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Noodle Bar\",\"info\":\"\",\"companyPositions\":{\"Waiter\":true,\"Part-time Waiter\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"QLink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Illuminati\",\"playerReputation\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"The Red Pill\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Daedalus\",\"playerReputation\":0}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib III\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"SPTN-97 Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Covenant\",\"playerReputation\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"ECorp HVMind Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"ECorp\",\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"CordiARC Fusion Reactor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"MegaCorp\",\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"SmartJaw\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bachman & Associates\",\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Neotra\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Blade Industries\",\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\",\"Power Recirculation Core\",\"Xanipher\",\"Hydroflame Left Arm\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NWO\",\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Neuronal Densification\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"nextSENS Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Clarke Incorporated\",\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"NeuroFlux Governor\",\"OmniTek InfoLoad\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"OmniTek Incorporated\",\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"PC Direct-Neural Interface\",\"ADR-V1 Pheromone Gene\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Four Sigma\",\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module Core V2 Upgrade\",\"Speech Enhancement\",\"FocusWire\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Photosynthetic Cells\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"KuaiGong International\",\"playerReputation\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface Optimization Submodule\",\"PC Direct-Neural Interface NeuroNet Injector\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Fulcrum Secret Technologies\",\"playerReputation\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Neural Accelerator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"Cranial Signal Processors - Gen V\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"BitRunners Neurolink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"BitRunners\",\"playerReputation\":0}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Artificial Synaptic Potentiation\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Neuralstimulator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"NeuroFlux Governor\",\"The Black Hand\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Black Hand\",\"playerReputation\":0}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"BitWire\",\"Artificial Synaptic Potentiation\",\"Neural-Retention Enhancement\",\"DataJack\",\"Embedded Netburner Module\",\"Cranial Signal Processors - Gen II\",\"Cranial Signal Processors - Gen III\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"CRTX42-AA Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NiteSec\",\"playerReputation\":0}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Wired Reflexes\",\"Speech Processor Implant\",\"Synaptic Enhancement Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"Neurotrainer I\",\"PCMatrix\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Aevum\",\"playerReputation\":0}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"Neuregen Gene Modification\"],\"favor\":74.4526,\"isBanned\":false,\"isMember\":false,\"name\":\"Chongqing\",\"playerReputation\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"INFRARET Enhancement\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Ishima\",\"playerReputation\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"NutriGen Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"New Tokyo\",\"playerReputation\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"CashRoot Starter Kit\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Sector-12\",\"playerReputation\":0}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"DermaForce Particle Barrier\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Volhaven\",\"playerReputation\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Unstable Circadian Modulator\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"Speech Enhancement\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Graphene BrachiBlades Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Speakers for the Dead\",\"playerReputation\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Wired Reflexes\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"Graphene Bionic Arms Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Dark Army\",\"playerReputation\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"ADR-V1 Pheromone Gene\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"BrachiBlades\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Syndicate\",\"playerReputation\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"TITN-41 Gene-Modification Injection\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Silhouette\",\"playerReputation\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"HemoRecirculator\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"Power Recirculation Core\",\"Bionic Arms\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Tetrads\",\"playerReputation\":0}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"SmartSonar Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Slum Snakes\",\"playerReputation\":0}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Hacknet Node CPU Architecture Neural-Upload\",\"Hacknet Node Cache Architecture Neural-Upload\",\"Hacknet Node NIC Architecture Neural-Upload\",\"Hacknet Node Kernel Direct-Neural Interface\",\"Hacknet Node Core Direct-Neural Interface\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Netburners\",\"playerReputation\":0}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Nanofiber Weave\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Social Negotiation Assistant (S.N.A)\",\"Neuroreceptor Management Implant\"],\"favor\":27.1237,\"isBanned\":false,\"isMember\":false,\"name\":\"Tian Di Hui\",\"playerReputation\":0}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"BitWire\",\"Synaptic Enhancement Implant\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"NeuroFlux Governor\",\"Neurotrainer I\"],\"favor\":65.2468,\"isBanned\":false,\"isMember\":false,\"name\":\"CyberSec\",\"playerReputation\":0}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"EsperTech Bladeburner Eyewear\",\"EMS-4 Recombination\",\"ORION-MKIV Shoulder\",\"Hyperion Plasma Cannon V1\",\"Hyperion Plasma Cannon V2\",\"GOLEM Serum\",\"Vangelis Virus\",\"Vangelis Virus 3.0\",\"I.N.T.E.R.L.I.N.K.E.D\",\"Blade's Runners\",\"BLADE-51b Tesla Armor\",\"BLADE-51b Tesla Armor: Power Cells Upgrade\",\"BLADE-51b Tesla Armor: Energy Shielding Upgrade\",\"BLADE-51b Tesla Armor: Unibeam Upgrade\",\"BLADE-51b Tesla Armor: Omnibeam Upgrade\",\"BLADE-51b Tesla Armor: IPU Upgrade\",\"The Blade's Simulacrum\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bladeburners\",\"playerReputation\":0}},\"Church of the Machine God\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Stanek's Gift - Genesis\",\"Stanek's Gift - Awakening\",\"Stanek's Gift - Serenity\"],\"favor\":281.999,\"isBanned\":false,\"isMember\":true,\"name\":\"Church of the Machine God\",\"playerReputation\":689862.029397035}}}","AliasesSave":"{\"sa\":\"scan-analyze\",\"ll\":\"run ll.js\",\"as\":\"run assess.js\",\"mcp\":\"run mcp.js\",\"ka\":\"run ka.js\",\"cct\":\"run cct.js\",\"bs\":\"run buy_server.js\",\"bp\":\"run buy_programs.js\",\"crawl\":\"run crawl.js\",\"fav\":\"run favor.js\",\"c\":\"run clock.js\",\"hn\":\"run hacknet.js\",\"hnk\":\"kill hacknet.js\",\"corp\":\"run corp.js\",\"sh\":\"run smart_hack.js\",\"leech\":\"run leech.js\",\"kleech\":\"run kleech.js\",\"test\":\"run test.js\",\"mug\":\"run crime.js mug; tail crime.js\",\"hom\":\"run crime.js homicide; tail crime.js\",\"crime\":\"run crime.js; tail crime.js\",\"gang\":\"run hacking_gang.js\",\"sleeve\":\"run sleeve.js\",\"pss\":\"run ps.js\",\"join\":\"run join.js\",\"bribe\":\"run bribe.js\",\"reset\":\"run reset.js\",\"bb\":\"run bladeburner.js\",\"kbb\":\"kill bladeburner.js\",\"mh\":\"run mod_hack.js\",\"bsa\":\"run buy_server_all.js\"}","GlobalAliasesSave":"{}","MessagesSave":"{\"j0.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j0.msg\",\"msg\":\"I know you can sense it. I know you're searching for it. It's why you spend night after night at your computer. <br><br>It's real, I've seen it. And I can help you find it. But not right now. You're not ready yet.<br><br>Use this program to track your progress<br><br>The fl1ght.exe program was added to your home computer<br><br>-jump3R\",\"recvd\":true}},\"j1.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j1.msg\",\"msg\":\"Soon you will be contacted by a hacking group known as CyberSec. They can help you with your search. <br><br>You should join them, garner their favor, and exploit them for their Augmentations. But do not trust them. They are not what they seem. No one is.<br><br>-jump3R\",\"recvd\":true}},\"j2.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j2.msg\",\"msg\":\"Do not try to save the world. There is no world to save. If you want to find the truth, worry only about yourself. Ethics and morals will get you killed. <br><br>Watch out for a hacking group known as NiteSec.<br><br>-jump3R\",\"recvd\":true}},\"j3.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j3.msg\",\"msg\":\"You must learn to walk before you can run. And you must run before you can fly. Look for the black hand. <br><br>I.I.I.I <br><br>-jump3R\",\"recvd\":false}},\"j4.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j4.msg\",\"msg\":\"To find what you are searching for, you must understand the bits. The bits are all around us. The runners will help you.<br><br>-jump3R\",\"recvd\":false}},\"csec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"csec-test.msg\",\"msg\":\"We've been watching you. Your skills are very impressive. But you're wasting your talents. If you join us, you can put your skills to good use and change the world for the better. If you join us, we can unlock your full potential. <br><br>But first, you must pass our test. Find and install the backdoor on our server. <br><br>-CyberSec\",\"recvd\":true}},\"nitesec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"nitesec-test.msg\",\"msg\":\"People say that the corrupted governments and corporations rule the world. Yes, maybe they do. But do you know who everyone really fears? People like us. Because they can't hide from us. Because they can't fight shadows and ideas with bullets. <br><br>Join us, and people will fear you, too. <br><br>Find and install the backdoor on our server. Then, we will contact you again.<br><br>-NiteSec\",\"recvd\":true}},\"19dfj3l1nd.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"19dfj3l1nd.msg\",\"msg\":\"We know what you are doing. We know what drives you. We know what you are looking for. <br><br> We can help you find the answers.<br><br>run4theh111z\",\"recvd\":false}},\"icarus.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"icarus.msg\",\"msg\":\"@)(#V%*N)@(#*)*C)@#%*)*V)@#(*%V@)(#VN%*)@#(*%<br>)@B(*#%)@)M#B*%V)____FIND___#$@)#%(B*)@#(*%B)<br>@_#(%_@#M(BDSPOMB__THE-CAVE_#)$(*@#$)@#BNBEGB<br>DFLSMFVMV)#@($*)@#*$MV)@#(*$V)M#(*$)M@(#*VM$)\",\"recvd\":false}}}","StockMarketSave":"{\"lastUpdate\":0,\"Orders\":{},\"storedCycles\":0,\"ticksUntilCycle\":0}","SettingsSave":"{\"ActiveScriptsServerPageSize\":100,\"ActiveScriptsScriptPageSize\":10,\"AutosaveInterval\":60,\"CodeInstructionRunTime\":25,\"DisableASCIIArt\":false,\"DisableHotkeys\":false,\"DisableTextEffects\":false,\"DisableOverviewProgressBars\":false,\"EnableBashHotkeys\":false,\"TimestampsFormat\":\"\",\"Locale\":\"en\",\"MaxLogCapacity\":500,\"MaxPortCapacity\":100,\"MaxTerminalCapacity\":500,\"OwnedAugmentationsOrder\":0,\"PurchaseAugmentationsOrder\":0,\"SaveGameOnFileSave\":true,\"SuppressBuyAugmentationConfirmation\":true,\"SuppressFactionInvites\":true,\"SuppressMessages\":true,\"SuppressTravelConfirmation\":true,\"SuppressBladeburnerPopup\":false,\"SuppressTIXPopup\":false,\"SuppressSavedGameToast\":true,\"UseIEC60027_2\":false,\"ExcludeRunningScriptsFromSave\":false,\"IsSidebarOpened\":true,\"MonacoTheme\":\"monokai\",\"MonacoInsertSpaces\":false,\"MonacoFontSize\":20,\"MonacoVim\":false,\"MonacoWordWrap\":\"off\",\"theme\":{\"primarylight\":\"#FFF\",\"primary\":\"#F8F8F2\",\"primarydark\":\"#FAFAEB\",\"successlight\":\"#ADE146\",\"success\":\"#A6E22E\",\"successdark\":\"#98E104\",\"errorlight\":\"#FF69A0\",\"error\":\"#F92672\",\"errordark\":\"#D10F56\",\"secondarylight\":\"#AAA\",\"secondary\":\"#888\",\"secondarydark\":\"#666\",\"warninglight\":\"#E1D992\",\"warning\":\"#E6DB74\",\"warningdark\":\"#EDDD54\",\"infolight\":\"#92E1F1\",\"info\":\"#66D9EF\",\"infodark\":\"#31CDED\",\"welllight\":\"#444\",\"well\":\"#222\",\"white\":\"#fff\",\"black\":\"#000\",\"hp\":\"#F92672\",\"money\":\"#E6DB74\",\"hack\":\"#A6E22E\",\"combat\":\"#75715E\",\"cha\":\"#AE81FF\",\"int\":\"#66D9EF\",\"rep\":\"#E69F66\",\"disabled\":\"#66cfbc\",\"backgroundprimary\":\"#272822\",\"backgroundsecondary\":\"#1B1C18\",\"button\":\"#333\"},\"styles\":{\"lineHeight\":1.5,\"fontFamily\":\"Lucida Console, Lucida Sans Unicode, Fira Mono, Consolas, Courier New, Courier, monospace, Times New Roman\"},\"overview\":{\"x\":0,\"y\":0,\"opened\":true}}","VersionSave":"10","AllGangsSave":"","LastExportBonus":"1647882296341","StaneksGiftSave":"{\"ctor\":\"StaneksGift\",\"data\":{\"storedCycles\":0,\"fragments\":[{\"ctor\":\"ActiveFragment\",\"data\":{\"id\":0,\"x\":0,\"y\":0,\"avgCharge\":125.37692307692295,\"numCharge\":1430,\"rotation\":0}},{\"ctor\":\"ActiveFragment\",\"data\":{\"id\":1,\"x\":1,\"y\":1,\"avgCharge\":116.6486662329212,\"numCharge\":1537,\"rotation\":1}},{\"ctor\":\"ActiveFragment\",\"data\":{\"id\":5,\"x\":1,\"y\":4,\"avgCharge\":51.77274039849841,\"numCharge\":3463,\"rotation\":2}},{\"ctor\":\"ActiveFragment\",\"data\":{\"id\":6,\"x\":3,\"y\":0,\"avgCharge\":165.21130782410077,\"numCharge\":1751,\"rotation\":1}},{\"ctor\":\"ActiveFragment\",\"data\":{\"id\":7,\"x\":3,\"y\":0,\"avgCharge\":0,\"numCharge\":0,\"rotation\":3}},{\"ctor\":\"ActiveFragment\",\"data\":{\"id\":25,\"x\":4,\"y\":0,\"avgCharge\":200.32290502793293,\"numCharge\":895,\"rotation\":3}},{\"ctor\":\"ActiveFragment\",\"data\":{\"id\":100,\"x\":0,\"y\":2,\"avgCharge\":0,\"numCharge\":0,\"rotation\":3}},{\"ctor\":\"ActiveFragment\",\"data\":{\"id\":101,\"x\":3,\"y\":1,\"avgCharge\":0,\"numCharge\":0,\"rotation\":3}},{\"ctor\":\"ActiveFragment\",\"data\":{\"id\":102,\"x\":4,\"y\":2,\"avgCharge\":0,\"numCharge\":0,\"rotation\":3}},{\"ctor\":\"ActiveFragment\",\"data\":{\"id\":103,\"x\":4,\"y\":2,\"avgCharge\":0,\"numCharge\":0,\"rotation\":1}},{\"ctor\":\"ActiveFragment\",\"data\":{\"id\":104,\"x\":3,\"y\":3,\"avgCharge\":0,\"numCharge\":0,\"rotation\":1}}]}}"}}