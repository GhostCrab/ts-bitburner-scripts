{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hacking\":341,\"hp\":21,\"max_hp\":21,\"strength\":117,\"defense\":117,\"dexterity\":117,\"agility\":117,\"charisma\":1,\"intelligence\":114,\"hacking_chance_mult\":1.98264592590984,\"hacking_speed_mult\":2.0036166551033205,\"hacking_money_mult\":1.8882342151522284,\"hacking_grow_mult\":1.8882342151522284,\"hacking_exp\":14776574.838691685,\"strength_exp\":49494.91979995261,\"defense_exp\":49794.919799952586,\"dexterity_exp\":49794.919799952586,\"agility_exp\":49794.919799952586,\"charisma_exp\":0,\"intelligence_exp\":18064.867878934725,\"hacking_mult\":2.081778222205332,\"strength_mult\":1.7888534669863216,\"defense_mult\":1.7888534669863216,\"dexterity_mult\":1.7888534669863216,\"agility_mult\":1.7888534669863216,\"charisma_mult\":2.5401719231205764,\"hacking_exp_mult\":2.180910518500824,\"strength_exp_mult\":1.9677388136849538,\"defense_exp_mult\":1.9677388136849538,\"dexterity_exp_mult\":1.9677388136849538,\"agility_exp_mult\":1.9677388136849538,\"charisma_exp_mult\":1.8219803830416237,\"company_rep_mult\":1.6563458027651126,\"faction_rep_mult\":1.6563458027651126,\"money\":16950323855.102928,\"city\":\"Sector-12\",\"location\":\"The Slums\",\"jobs\":{},\"companyName\":\"\",\"currentServer\":\"home\",\"purchasedServers\":[],\"hacknetNodes\":[\"hacknet-node-0\",\"hacknet-node-1\",\"hacknet-node-2\",\"hacknet-node-3\",\"hacknet-node-4\",\"hacknet-node-5\",\"hacknet-node-6\",\"hacknet-node-7\",\"hacknet-node-8\",\"hacknet-node-9\",\"hacknet-node-10\",\"hacknet-node-11\",\"hacknet-node-12\"],\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":131840,\"hashes\":45.38291538760203,\"upgrades\":{\"Sell for Money\":305896,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0}}},\"factions\":[\"CyberSec\",\"Netburners\",\"Slum Snakes\",\"NiteSec\"],\"factionInvitations\":[\"Sector-12\"],\"queuedAugmentations\":[],\"augmentations\":[{\"name\":\"NeuroFlux Governor\",\"level\":25},{\"level\":1,\"name\":\"Hacknet Node CPU Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Hacknet Node Cache Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Hacknet Node NIC Architecture Neural-Upload\"},{\"level\":1,\"name\":\"CashRoot Starter Kit\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen I\"},{\"level\":1,\"name\":\"Hacknet Node Core Direct-Neural Interface\"},{\"level\":1,\"name\":\"Hacknet Node Kernel Direct-Neural Interface\"},{\"level\":1,\"name\":\"BitWire\"},{\"level\":1,\"name\":\"Synaptic Enhancement Implant\"},{\"level\":1,\"name\":\"Neurotrainer I\"},{\"level\":1,\"name\":\"Artificial Synaptic Potentiation\"}],\"sourceFiles\":[{\"lvl\":3,\"n\":1},{\"lvl\":3,\"n\":5},{\"lvl\":3,\"n\":4},{\"lvl\":1,\"n\":10},{\"lvl\":1,\"n\":6},{\"lvl\":2,\"n\":9},{\"lvl\":3,\"n\":12},{\"lvl\":3,\"n\":2},{\"lvl\":1,\"n\":3}],\"numPeopleKilled\":1233,\"karma\":-26721.849999999453,\"crime_money_mult\":2.3520110399264595,\"crime_success_mult\":2.3520110399264595,\"isWorking\":true,\"focus\":false,\"workType\":\"Working for Faction\",\"workCostMult\":5,\"workExpMult\":4,\"currentWorkFactionName\":\"NiteSec\",\"currentWorkFactionDescription\":\"carrying out hacking contracts\",\"workHackExpGainRate\":0.32713657777512356,\"workStrExpGainRate\":0,\"workDefExpGainRate\":0,\"workDexExpGainRate\":0,\"workAgiExpGainRate\":0,\"workChaExpGainRate\":0,\"workRepGainRate\":0.8082906775770953,\"workMoneyGainRate\":0,\"workMoneyLossRate\":0,\"workHackExpGained\":48264.814702635034,\"workStrExpGained\":0,\"workDefExpGained\":0,\"workDexExpGained\":0,\"workAgiExpGained\":0,\"workChaExpGained\":0,\"workRepGained\":109976.55807254073,\"workMoneyGained\":0,\"createProgramName\":\"\",\"createProgramReqLvl\":50,\"className\":\"\",\"crimeType\":\"\",\"timeWorked\":29540600,\"timeWorkedCreateProgram\":0,\"timeNeededToCompleteWork\":72000000,\"work_money_mult\":1.7888534669863216,\"hacknet_node_money_mult\":4.678754524631738,\"hacknet_node_purchase_cost_mult\":0.3736335469193525,\"hacknet_node_ram_cost_mult\":0.48840986525405555,\"hacknet_node_core_cost_mult\":0.48840986525405555,\"hacknet_node_level_cost_mult\":0.41514838546594723,\"hasWseAccount\":false,\"hasTixApiAccess\":false,\"has4SData\":false,\"has4SDataTixApi\":false,\"gang\":null,\"corporation\":null,\"bladeburner\":null,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"sleeves\":[{\"ctor\":\"Sleeve\",\"data\":{\"hacking\":163,\"strength\":62,\"defense\":62,\"dexterity\":62,\"agility\":62,\"charisma\":1,\"intelligence\":1,\"hp\":16,\"max_hp\":16,\"hacking_exp\":14549299.629600001,\"strength_exp\":39609,\"defense_exp\":39909,\"dexterity_exp\":39909,\"agility_exp\":39909,\"charisma_exp\":0,\"intelligence_exp\":0,\"hacking_mult\":1,\"strength_mult\":1,\"defense_mult\":1,\"dexterity_mult\":1,\"agility_mult\":1,\"charisma_mult\":1,\"hacking_exp_mult\":1,\"strength_exp_mult\":1,\"defense_exp_mult\":1,\"dexterity_exp_mult\":1,\"agility_exp_mult\":1,\"charisma_exp_mult\":1,\"hacking_chance_mult\":31.012985283975254,\"hacking_speed_mult\":18.34013176272983,\"hacking_money_mult\":15419.479616433073,\"hacking_grow_mult\":226.68743133544928,\"company_rep_mult\":1,\"faction_rep_mult\":1,\"crime_money_mult\":1,\"crime_success_mult\":1,\"work_money_mult\":1,\"hacknet_node_money_mult\":19.251515520748644,\"hacknet_node_purchase_cost_mult\":0.38054255625,\"hacknet_node_ram_cost_mult\":0.85,\"hacknet_node_core_cost_mult\":0.85,\"hacknet_node_level_cost_mult\":0.5220062499999999,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"augmentations\":[],\"queuedAugmentations\":[],\"city\":\"Volhaven\",\"className\":\"Algorithms\",\"crimeType\":\"\",\"currentTask\":4,\"currentTaskLocation\":\"ZB Institute of Technology\",\"currentTaskMaxTime\":0,\"currentTaskTime\":30307400,\"earningsForSleeves\":{\"hack\":2424883.2716,\"str\":6624,\"def\":6674,\"dex\":6674,\"agi\":6674,\"cha\":0,\"money\":0},\"earningsForPlayer\":{\"hack\":2424883.2716,\"str\":6624,\"def\":6674,\"dex\":6674,\"agi\":6674,\"cha\":0,\"money\":-225021200},\"earningsForTask\":{\"hack\":2424592,\"str\":0,\"def\":0,\"dex\":0,\"agi\":0,\"cha\":0,\"money\":-242459200},\"factionWorkType\":2,\"gainRatesForTask\":{\"hack\":16,\"str\":0,\"def\":0,\"dex\":0,\"agi\":0,\"cha\":0,\"money\":-1600},\"gymStatType\":\"\",\"logs\":[],\"memory\":100,\"shock\":100,\"storedCycles\":0,\"sync\":100}},{\"ctor\":\"Sleeve\",\"data\":{\"hacking\":163,\"strength\":62,\"defense\":62,\"dexterity\":62,\"agility\":62,\"charisma\":1,\"intelligence\":1,\"hp\":16,\"max_hp\":16,\"hacking_exp\":14549299.629600001,\"strength_exp\":39609,\"defense_exp\":39909,\"dexterity_exp\":39909,\"agility_exp\":39909,\"charisma_exp\":0,\"intelligence_exp\":0,\"hacking_mult\":1,\"strength_mult\":1,\"defense_mult\":1,\"dexterity_mult\":1,\"agility_mult\":1,\"charisma_mult\":1,\"hacking_exp_mult\":1,\"strength_exp_mult\":1,\"defense_exp_mult\":1,\"dexterity_exp_mult\":1,\"agility_exp_mult\":1,\"charisma_exp_mult\":1,\"hacking_chance_mult\":4.0951522306636665,\"hacking_speed_mult\":3.051386092639325,\"hacking_money_mult\":67.09496647958106,\"hacking_grow_mult\":15.791015625000004,\"company_rep_mult\":1,\"faction_rep_mult\":1,\"crime_money_mult\":1,\"crime_success_mult\":1,\"work_money_mult\":1,\"hacknet_node_money_mult\":2.52209375,\"hacknet_node_purchase_cost_mult\":0.765,\"hacknet_node_ram_cost_mult\":1,\"hacknet_node_core_cost_mult\":1,\"hacknet_node_level_cost_mult\":0.85,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"augmentations\":[],\"queuedAugmentations\":[],\"city\":\"Volhaven\",\"className\":\"Algorithms\",\"crimeType\":\"\",\"currentTask\":4,\"currentTaskLocation\":\"ZB Institute of Technology\",\"currentTaskMaxTime\":0,\"currentTaskTime\":30307400,\"earningsForSleeves\":{\"hack\":2424883.2716,\"str\":6594,\"def\":6644,\"dex\":6644,\"agi\":6644,\"cha\":0,\"money\":0},\"earningsForPlayer\":{\"hack\":2424883.2716,\"str\":6594,\"def\":6644,\"dex\":6644,\"agi\":6644,\"cha\":0,\"money\":-225201200},\"earningsForTask\":{\"hack\":2424592,\"str\":0,\"def\":0,\"dex\":0,\"agi\":0,\"cha\":0,\"money\":-242459200},\"factionWorkType\":2,\"gainRatesForTask\":{\"hack\":16,\"str\":0,\"def\":0,\"dex\":0,\"agi\":0,\"cha\":0,\"money\":-1600},\"gymStatType\":\"\",\"logs\":[],\"memory\":100,\"shock\":100,\"storedCycles\":0,\"sync\":100}},{\"ctor\":\"Sleeve\",\"data\":{\"hacking\":163,\"strength\":62,\"defense\":62,\"dexterity\":62,\"agility\":62,\"charisma\":1,\"intelligence\":1,\"hp\":16,\"max_hp\":16,\"hacking_exp\":14549299.629600001,\"strength_exp\":39609,\"defense_exp\":39909,\"dexterity_exp\":39909,\"agility_exp\":39909,\"charisma_exp\":0,\"intelligence_exp\":0,\"hacking_mult\":1,\"strength_mult\":1,\"defense_mult\":1,\"dexterity_mult\":1,\"agility_mult\":1,\"charisma_mult\":1,\"hacking_exp_mult\":1,\"strength_exp_mult\":1,\"defense_exp_mult\":1,\"dexterity_exp_mult\":1,\"agility_exp_mult\":1,\"charisma_exp_mult\":1,\"hacking_chance_mult\":4.0951522306636665,\"hacking_speed_mult\":3.0513860926393246,\"hacking_money_mult\":67.09496647958106,\"hacking_grow_mult\":15.791015625000004,\"company_rep_mult\":1,\"faction_rep_mult\":1,\"crime_money_mult\":1,\"crime_success_mult\":1,\"work_money_mult\":1,\"hacknet_node_money_mult\":2.52209375,\"hacknet_node_purchase_cost_mult\":0.765,\"hacknet_node_ram_cost_mult\":1,\"hacknet_node_core_cost_mult\":1,\"hacknet_node_level_cost_mult\":0.85,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"augmentations\":[],\"queuedAugmentations\":[],\"city\":\"Volhaven\",\"className\":\"Algorithms\",\"crimeType\":\"\",\"currentTask\":4,\"currentTaskLocation\":\"ZB Institute of Technology\",\"currentTaskMaxTime\":0,\"currentTaskTime\":30307400,\"earningsForSleeves\":{\"hack\":2424883.2716,\"str\":6594,\"def\":6644,\"dex\":6644,\"agi\":6644,\"cha\":0,\"money\":0},\"earningsForPlayer\":{\"hack\":2424883.2716,\"str\":6594,\"def\":6644,\"dex\":6644,\"agi\":6644,\"cha\":0,\"money\":-225201200},\"earningsForTask\":{\"hack\":2424592,\"str\":0,\"def\":0,\"dex\":0,\"agi\":0,\"cha\":0,\"money\":-242459200},\"factionWorkType\":2,\"gainRatesForTask\":{\"hack\":16,\"str\":0,\"def\":0,\"dex\":0,\"agi\":0,\"cha\":0,\"money\":-1600},\"gymStatType\":\"\",\"logs\":[],\"memory\":100,\"shock\":100,\"storedCycles\":0,\"sync\":100}},{\"ctor\":\"Sleeve\",\"data\":{\"hacking\":163,\"strength\":62,\"defense\":62,\"dexterity\":62,\"agility\":62,\"charisma\":1,\"intelligence\":1,\"hp\":16,\"max_hp\":16,\"hacking_exp\":14549299.629600001,\"strength_exp\":39609,\"defense_exp\":39909,\"dexterity_exp\":39909,\"agility_exp\":39909,\"charisma_exp\":0,\"intelligence_exp\":0,\"hacking_mult\":1,\"strength_mult\":1,\"defense_mult\":1,\"dexterity_mult\":1,\"agility_mult\":1,\"charisma_mult\":1,\"hacking_exp_mult\":1,\"strength_exp_mult\":1,\"defense_exp_mult\":1,\"dexterity_exp_mult\":1,\"agility_exp_mult\":1,\"charisma_exp_mult\":1,\"hacking_chance_mult\":4.0951522306636665,\"hacking_speed_mult\":3.0513860926393255,\"hacking_money_mult\":67.09496647958106,\"hacking_grow_mult\":15.791015625000004,\"company_rep_mult\":1,\"faction_rep_mult\":1,\"crime_money_mult\":1,\"crime_success_mult\":1,\"work_money_mult\":1,\"hacknet_node_money_mult\":2.52209375,\"hacknet_node_purchase_cost_mult\":0.765,\"hacknet_node_ram_cost_mult\":1,\"hacknet_node_core_cost_mult\":1,\"hacknet_node_level_cost_mult\":0.85,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"augmentations\":[],\"queuedAugmentations\":[],\"city\":\"Volhaven\",\"className\":\"Algorithms\",\"crimeType\":\"\",\"currentTask\":4,\"currentTaskLocation\":\"ZB Institute of Technology\",\"currentTaskMaxTime\":0,\"currentTaskTime\":30307400,\"earningsForSleeves\":{\"hack\":2424883.2716,\"str\":6567,\"def\":6617,\"dex\":6617,\"agi\":6617,\"cha\":0,\"money\":0},\"earningsForPlayer\":{\"hack\":2424883.2716,\"str\":6567,\"def\":6617,\"dex\":6617,\"agi\":6617,\"cha\":0,\"money\":-225363200},\"earningsForTask\":{\"hack\":2424592,\"str\":0,\"def\":0,\"dex\":0,\"agi\":0,\"cha\":0,\"money\":-242459200},\"factionWorkType\":2,\"gainRatesForTask\":{\"hack\":16,\"str\":0,\"def\":0,\"dex\":0,\"agi\":0,\"cha\":0,\"money\":-1600},\"gymStatType\":\"\",\"logs\":[],\"memory\":100,\"shock\":100,\"storedCycles\":0,\"sync\":100}},{\"ctor\":\"Sleeve\",\"data\":{\"hacking\":163,\"strength\":62,\"defense\":62,\"dexterity\":62,\"agility\":62,\"charisma\":1,\"intelligence\":1,\"hp\":16,\"max_hp\":16,\"hacking_exp\":14549299.629600001,\"strength_exp\":39609,\"defense_exp\":39909,\"dexterity_exp\":39909,\"agility_exp\":39909,\"charisma_exp\":0,\"intelligence_exp\":0,\"hacking_mult\":1,\"strength_mult\":1,\"defense_mult\":1,\"dexterity_mult\":1,\"agility_mult\":1,\"charisma_mult\":1,\"hacking_exp_mult\":1,\"strength_exp_mult\":1,\"defense_exp_mult\":1,\"dexterity_exp_mult\":1,\"agility_exp_mult\":1,\"charisma_exp_mult\":1,\"hacking_chance_mult\":4.095152230663667,\"hacking_speed_mult\":3.0513860926393255,\"hacking_money_mult\":67.09496647958107,\"hacking_grow_mult\":15.791015625000004,\"company_rep_mult\":1,\"faction_rep_mult\":1,\"crime_money_mult\":1,\"crime_success_mult\":1,\"work_money_mult\":1,\"hacknet_node_money_mult\":2.52209375,\"hacknet_node_purchase_cost_mult\":0.765,\"hacknet_node_ram_cost_mult\":1,\"hacknet_node_core_cost_mult\":1,\"hacknet_node_level_cost_mult\":0.85,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"augmentations\":[],\"queuedAugmentations\":[],\"city\":\"Volhaven\",\"className\":\"Algorithms\",\"crimeType\":\"\",\"currentTask\":4,\"currentTaskLocation\":\"ZB Institute of Technology\",\"currentTaskMaxTime\":0,\"currentTaskTime\":30307400,\"earningsForSleeves\":{\"hack\":2424883.2716,\"str\":6645,\"def\":6695,\"dex\":6695,\"agi\":6695,\"cha\":0,\"money\":0},\"earningsForPlayer\":{\"hack\":2424883.2716,\"str\":6645,\"def\":6695,\"dex\":6695,\"agi\":6695,\"cha\":0,\"money\":-224895200},\"earningsForTask\":{\"hack\":2424592,\"str\":0,\"def\":0,\"dex\":0,\"agi\":0,\"cha\":0,\"money\":-242459200},\"factionWorkType\":2,\"gainRatesForTask\":{\"hack\":16,\"str\":0,\"def\":0,\"dex\":0,\"agi\":0,\"cha\":0,\"money\":-1600},\"gymStatType\":\"\",\"logs\":[],\"memory\":100,\"shock\":100,\"storedCycles\":0,\"sync\":100}},{\"ctor\":\"Sleeve\",\"data\":{\"hacking\":163,\"strength\":62,\"defense\":62,\"dexterity\":62,\"agility\":62,\"charisma\":1,\"intelligence\":1,\"hp\":16,\"max_hp\":16,\"hacking_exp\":14549299.629600001,\"strength_exp\":39609,\"defense_exp\":39909,\"dexterity_exp\":39909,\"agility_exp\":39909,\"charisma_exp\":0,\"intelligence_exp\":0,\"hacking_mult\":1,\"strength_mult\":1,\"defense_mult\":1,\"dexterity_mult\":1,\"agility_mult\":1,\"charisma_mult\":1,\"hacking_exp_mult\":1,\"strength_exp_mult\":1,\"defense_exp_mult\":1,\"dexterity_exp_mult\":1,\"agility_exp_mult\":1,\"charisma_exp_mult\":1,\"hacking_chance_mult\":4.0951522306636665,\"hacking_speed_mult\":3.0513860926393246,\"hacking_money_mult\":67.09496647958106,\"hacking_grow_mult\":15.791015625000004,\"company_rep_mult\":1,\"faction_rep_mult\":1,\"crime_money_mult\":1,\"crime_success_mult\":1,\"work_money_mult\":1,\"hacknet_node_money_mult\":2.5220937500000002,\"hacknet_node_purchase_cost_mult\":0.765,\"hacknet_node_ram_cost_mult\":1,\"hacknet_node_core_cost_mult\":1,\"hacknet_node_level_cost_mult\":0.85,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"augmentations\":[],\"queuedAugmentations\":[],\"city\":\"Volhaven\",\"className\":\"Algorithms\",\"crimeType\":\"\",\"currentTask\":4,\"currentTaskLocation\":\"ZB Institute of Technology\",\"currentTaskMaxTime\":0,\"currentTaskTime\":30307400,\"earningsForSleeves\":{\"hack\":2424883.2716,\"str\":6585,\"def\":6635,\"dex\":6635,\"agi\":6635,\"cha\":0,\"money\":0},\"earningsForPlayer\":{\"hack\":2424883.2716,\"str\":6585,\"def\":6635,\"dex\":6635,\"agi\":6635,\"cha\":0,\"money\":-225255200},\"earningsForTask\":{\"hack\":2424592,\"str\":0,\"def\":0,\"dex\":0,\"agi\":0,\"cha\":0,\"money\":-242459200},\"factionWorkType\":2,\"gainRatesForTask\":{\"hack\":16,\"str\":0,\"def\":0,\"dex\":0,\"agi\":0,\"cha\":0,\"money\":-1600},\"gymStatType\":\"\",\"logs\":[],\"memory\":100,\"shock\":100,\"storedCycles\":0,\"sync\":100}}],\"resleeves\":[],\"sleevesFromCovenant\":5,\"bitNodeN\":9,\"lastUpdate\":1644424425717,\"totalPlaytime\":4717252400,\"playtimeSinceLastAug\":34629800,\"playtimeSinceLastBitnode\":122789400,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":0,\"codingcontract\":1762500000,\"corporation\":0,\"crime\":65716364.46106707,\"gang\":0,\"hacking\":6769842,\"hacknet\":305896000000,\"hacknet_expenses\":-289138265151.3583,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":-1356697200,\"stock\":0,\"total\":16949323855.102928,\"work\":0,\"servers\":0,\"other\":-286700000,\"augmentations\":0}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":0,\"codingcontract\":7125000000,\"corporation\":0,\"crime\":448894565.12021405,\"gang\":0,\"hacking\":276867477.23030806,\"hacknet\":458365000000,\"hacknet_expenses\":-395646180984.8806,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":-1358137200,\"stock\":0,\"total\":28348278377.335686,\"work\":0,\"servers\":-7121163123.546151,\"other\":-1147800000,\"augmentations\":-32594202356.586452}},\"scriptProdSinceLastAug\":6769842,\"exploits\":[\"EditSaveFile\",\"N00dles\",\"YoureNotMeantToAccessThis\",\"Unclickable\",\"RealityAlteration\",\"Bypass\",\"TimeCompression\",\"UndocumentedFunctionCall\",\"PrototypeTampering\"],\"achievements\":[{\"ID\":\"FORMULAS.EXE\",\"unlockedOn\":1641708178429},{\"ID\":\"SF1.1\",\"unlockedOn\":1641708178438},{\"ID\":\"SF4.1\",\"unlockedOn\":1641708178440},{\"ID\":\"SF5.1\",\"unlockedOn\":1641708178443},{\"ID\":\"INSTALL_1\",\"unlockedOn\":1641708178445},{\"ID\":\"NS2\",\"unlockedOn\":1641708178447},{\"ID\":\"SCRIPT_32GB\",\"unlockedOn\":1641708178450},{\"ID\":\"BRUTESSH.EXE\",\"unlockedOn\":1641708238434},{\"ID\":\"FTPCRACK.EXE\",\"unlockedOn\":1641708238441},{\"ID\":\"RELAYSMTP.EXE\",\"unlockedOn\":1641708238443},{\"ID\":\"TOR\",\"unlockedOn\":1641708238444},{\"ID\":\"CYBERSEC\",\"unlockedOn\":1641709738429},{\"ID\":\"NITESEC\",\"unlockedOn\":1641709738432},{\"ID\":\"THE_BLACK_HAND\",\"unlockedOn\":1641709738433},{\"ID\":\"HTTPWORM.EXE\",\"unlockedOn\":1641709798438},{\"ID\":\"SQLINJECT.EXE\",\"unlockedOn\":1641710578432},{\"ID\":\"TRAVEL\",\"unlockedOn\":1641715138431},{\"ID\":\"BITRUNNERS\",\"unlockedOn\":1641715978434},{\"ID\":\"DRAIN_SERVER\",\"unlockedOn\":1641749518438},{\"ID\":\"FROZE\",\"unlockedOn\":1641796192129},{\"ID\":\"DONATION\",\"unlockedOn\":1641837570104},{\"ID\":\"RUNNING_SCRIPTS_1000\",\"unlockedOn\":1641847680353},{\"ID\":\"DAEDALUS\",\"unlockedOn\":1641854828167},{\"ID\":\"REPUTATION_10M\",\"unlockedOn\":1641856807959},{\"ID\":\"FAST_BN\",\"unlockedOn\":1642127766724},{\"ID\":\"SCRIPTS_30\",\"unlockedOn\":1642182124813},{\"ID\":\"N00DLES\",\"unlockedOn\":1642182124817},{\"ID\":\"WORKOUT\",\"unlockedOn\":1642449915574},{\"ID\":\"FIRST_HACKNET_NODE\",\"unlockedOn\":1642464675621},{\"ID\":\"30_HACKNET_NODE\",\"unlockedOn\":1642464675627},{\"ID\":\"MAX_HACKNET_NODE\",\"unlockedOn\":1642464675630},{\"ID\":\"HACKNET_NODE_10M\",\"unlockedOn\":1642464795526},{\"ID\":\"THE_COVENANT\",\"unlockedOn\":1642481669631},{\"ID\":\"ILLUMINATI\",\"unlockedOn\":1642487205385},{\"ID\":\"COMBAT_3000\",\"unlockedOn\":1642500348152},{\"ID\":\"MAX_CORES\",\"unlockedOn\":1642522248149},{\"ID\":\"SF10.1\",\"unlockedOn\":1642522608143},{\"ID\":\"BLADEBURNER_DIVISION\",\"unlockedOn\":1642576495422},{\"ID\":\"HOSPITALIZED\",\"unlockedOn\":1642577095422},{\"ID\":\"BLADEBURNER_OVERCLOCK\",\"unlockedOn\":1642730615920},{\"ID\":\"DEVMENU\",\"unlockedOn\":1642744104484},{\"ID\":\"EDITSAVEFILE\",\"unlockedOn\":1642744273812},{\"ID\":\"UNCLICKABLE\",\"unlockedOn\":1642744333814},{\"ID\":\"REALITYALTERATION\",\"unlockedOn\":1642744725024},{\"ID\":\"BYPASS\",\"unlockedOn\":1642744801529},{\"ID\":\"UNDOCUMENTEDFUNCTIONCALL\",\"unlockedOn\":1642744981454},{\"ID\":\"TIMECOMPRESSION\",\"unlockedOn\":1642744981461},{\"ID\":\"PROTOTYPETAMPERING\",\"unlockedOn\":1642745701455},{\"ID\":\"SF6.1\",\"unlockedOn\":1642785770037},{\"ID\":\"FIRST_HACKNET_SERVER\",\"unlockedOn\":1642788950040},{\"ID\":\"HACKNET_SERVER_1B\",\"unlockedOn\":1642807972554},{\"ID\":\"MAX_CACHE\",\"unlockedOn\":1642816068703},{\"ID\":\"SF9.1\",\"unlockedOn\":1643235429747},{\"ID\":\"SF12.1\",\"unlockedOn\":1643323114293},{\"ID\":\"GANG\",\"unlockedOn\":1643331994294},{\"ID\":\"FULL_GANG\",\"unlockedOn\":1643355274307},{\"ID\":\"GANG_MEMBER_POWER\",\"unlockedOn\":1643359714297},{\"ID\":\"SF2.1\",\"unlockedOn\":1643416557483},{\"ID\":\"CORPORATION\",\"unlockedOn\":1643613074511},{\"ID\":\"CORPORATION_BRIBE\",\"unlockedOn\":1643779578015},{\"ID\":\"MONEY_1Q\",\"unlockedOn\":1643788362347},{\"ID\":\"QUEUE_40\",\"unlockedOn\":1643788362355},{\"ID\":\"SF3.1\",\"unlockedOn\":1643790288945},{\"ID\":\"CORPORATION_REAL_ESTATE\",\"unlockedOn\":1643950278393}],\"factionWorkType\":\"Faction Hacking Work\",\"committingCrimeThruSingFn\":false,\"singFnCrimeWorkerScript\":null}}","AllServersSave":"{\"home\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":false,\"ip\":\"78.9.5.3\",\"isConnectedTo\":true,\"maxRam\":1024,\"messages\":[\"hackers-starting-handbook.lit\",\"j0.msg\",\"j1.msg\",\"csec-test.msg\",\"j2.msg\",\"nitesec-test.msg\"],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"b1t_flum3.exe\",\"BruteSSH.exe\",\"Formulas.exe\",\"fl1ght.exe\",\"FTPCrack.exe\",\"relaySMTP.exe\",\"HTTPWorm.exe\",\"SQLInject.exe\"],\"ramUsed\":55.85,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"clock.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":34608.21000005736,\"pid\":12,\"ramUsage\":1.6,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"clock.js\",\"url\":\"blob:file:///e4469283-d462-461c-9ef9-d8b0243a4915\",\"moduleSequenceNumber\":21293}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"cct.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1944.4100000003052,\"pid\":10637,\"ramUsage\":27,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"bbutil.js\",\"url\":\"blob:file:///dd83dd80-16e5-422e-aed8-3a54913a6672\",\"moduleSequenceNumber\":58876},{\"filename\":\"cct.js\",\"url\":\"blob:file:///6562c9bd-92e8-4059-857c-0cc6403e4ee7\",\"moduleSequenceNumber\":58877}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"leech.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1920.0100000002997,\"pid\":10640,\"ramUsage\":6.1,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"leech.js\",\"url\":\"blob:file:///b7df40d0-dc36-46c0-86a5-2e0f03dcf721\",\"moduleSequenceNumber\":63909}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[30],\"dataMap\":{},\"filename\":\"smart_hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":44170.87262250675,\"onlineMoneyMade\":1671197,\"onlineRunningTime\":1893.6100000002937,\"pid\":10643,\"ramUsage\":21.15,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"bbutil.js\",\"url\":\"blob:file:///2e5eefc0-e4f2-4909-99be-7714f3012bd5\",\"moduleSequenceNumber\":58876},{\"filename\":\"smart_hack_env.js\",\"url\":\"blob:file:///b70e1a78-56b8-4481-9ae8-2545fd2330e3\",\"moduleSequenceNumber\":58872},{\"filename\":\"bbutil.js\",\"url\":\"blob:file:///6eed1f36-cef4-4b75-9884-842f79d4c9af\",\"moduleSequenceNumber\":58876},{\"filename\":\"smart_hack.js\",\"url\":\"blob:file:///b35130ef-09e0-4763-9543-a3d359f95260\",\"moduleSequenceNumber\":58881}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"test me\",\"filename\":\"job.txt\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":58847,\"_hash\":\"e437d8916edcbc62e47f2dfa71786a999732804cbd1e99c5341e1659728e9753\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"12/20/2021, 10:46:49 AM:\\n  hack_me.ns {t=1600} phantasy\\n  job.ns {t=1} \\n12/20/2021, 10:47:20 AM:\\n  hack_me.ns {t=1600} phantasy\\n  job.ns {t=1} \\n12/20/2021, 10:47:23 AM:\\n  hack_me.ns {t=1600} phantasy\\n  job.ns {t=1} \\n12/20/2021, 10:47:25 AM:\\n  hack_me.ns {t=1600} phantasy\\n  job.ns {t=1}\",\"filename\":\"out.txt\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":0,\"server\":\"home\",\"moduleSequenceNumber\":58848,\"_hash\":\"cd9e9b4b8033ea304743475d442987cf5760d0bb94e63296c690c3e821b6c5d9\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    if (typeof ns.args[0] !== \\\"string\\\" && typeof ns.args[0] !== undefined) {\\r\\n        ns.tprintf(\\\"ERROR: Bad Server Name: %s\\\", ns.args[0]);\\r\\n        return;\\r\\n    }\\r\\n    if (typeof ns.args[0] === \\\"string\\\" && !ns.serverExists(ns.args[0])) {\\r\\n        ns.tprintf(\\\"ERROR: Server Doesn't Exist: %s\\\", ns.args[0]);\\r\\n        return;\\r\\n    }\\r\\n    const targetServer = ns.getServer();\\r\\n    const availableFunds = targetServer.moneyAvailable <= 1 ? 1 : targetServer.moneyAvailable;\\r\\n    const growthRequired = targetServer.moneyMax / availableFunds;\\r\\n    let growThreadsNeeded = 0;\\r\\n    if (growthRequired > 1)\\r\\n        growThreadsNeeded = Math.ceil(ns.growthAnalyze(targetServer.hostname, growthRequired));\\r\\n    const targetGrowTime = ns.getGrowTime(targetServer.hostname);\\r\\n    const targetWeakenTime = ns.getWeakenTime(targetServer.hostname);\\r\\n    ns.tprintf(\\\"%s:\\\", targetServer.hostname);\\r\\n    ns.tprintf(\\\"  %25s: %s/%s\\\", \\\"Target Funds\\\", ns.nFormat(targetServer.moneyAvailable, \\\"($0.000a)\\\"), ns.nFormat(targetServer.moneyMax, \\\"($0.000a)\\\"));\\r\\n    ns.tprintf(\\\"  %25s: %.2fx, %d Threads\\\", \\\"Growth Required\\\", growthRequired, growThreadsNeeded);\\r\\n    ns.tprintf(\\\"  %25s: %s @ %s\\\", \\\"Server Growth\\\", targetServer.serverGrowth, ns.tFormat(targetGrowTime));\\r\\n    ns.tprintf(\\\"  %25s: %s\\\", \\\"Weaken Time\\\", ns.tFormat(targetWeakenTime));\\r\\n    ns.tprintf(\\\"  %25s: %s / %s / %s\\\", \\\"Hack Difficulty [M/B/H]\\\", targetServer.minDifficulty, targetServer.baseDifficulty, targetServer.hackDifficulty);\\r\\n    ns.tprintf(\\\"  %25s: %d/%d\\\", \\\"Ram Available\\\", targetServer.maxRam - targetServer.ramUsed, targetServer.maxRam);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXNzZXNzLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsiYXNzZXNzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsSUFBSSxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssUUFBUSxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxTQUFTLEVBQUU7UUFDbkUsRUFBRSxDQUFDLE9BQU8sQ0FBQyw0QkFBNEIsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDckQsT0FBTztLQUNWO0lBQ0QsSUFBSSxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssUUFBUSxJQUFJLENBQUMsRUFBRSxDQUFDLFlBQVksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUU7UUFDaEUsRUFBRSxDQUFDLE9BQU8sQ0FBQyxpQ0FBaUMsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDMUQsT0FBTztLQUNWO0lBQ0QsTUFBTSxZQUFZLEdBQUcsRUFBRSxDQUFDLFNBQVMsRUFBRSxDQUFDO0lBQ3BDLE1BQU0sY0FBYyxHQUFHLFlBQVksQ0FBQyxjQUFjLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxjQUFjLENBQUM7SUFDMUYsTUFBTSxjQUFjLEdBQUcsWUFBWSxDQUFDLFFBQVEsR0FBRyxjQUFjLENBQUM7SUFDOUQsSUFBSSxpQkFBaUIsR0FBRyxDQUFDLENBQUM7SUFDMUIsSUFBSSxjQUFjLEdBQUcsQ0FBQztRQUFFLGlCQUFpQixHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsQ0FBQyxZQUFZLENBQUMsUUFBUSxFQUFFLGNBQWMsQ0FBQyxDQUFDLENBQUM7SUFFL0csTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDLFdBQVcsQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDN0QsTUFBTSxnQkFBZ0IsR0FBRyxFQUFFLENBQUMsYUFBYSxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUVqRSxFQUFFLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxZQUFZLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDekMsRUFBRSxDQUFDLE9BQU8sQ0FDTixlQUFlLEVBQ2YsY0FBYyxFQUNkLEVBQUUsQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLGNBQWMsRUFBRSxXQUFXLENBQUMsRUFDcEQsRUFBRSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsUUFBUSxFQUFFLFdBQVcsQ0FBQyxDQUNqRCxDQUFDO0lBQ0YsRUFBRSxDQUFDLE9BQU8sQ0FBQywyQkFBMkIsRUFBRSxpQkFBaUIsRUFBRSxjQUFjLEVBQUUsaUJBQWlCLENBQUMsQ0FBQztJQUM5RixFQUFFLENBQUMsT0FBTyxDQUFDLGlCQUFpQixFQUFFLGVBQWUsRUFBRSxZQUFZLENBQUMsWUFBWSxFQUFFLEVBQUUsQ0FBQyxPQUFPLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQztJQUN0RyxFQUFFLENBQUMsT0FBTyxDQUFDLFlBQVksRUFBRSxhQUFhLEVBQUUsRUFBRSxDQUFDLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUM7SUFDdEUsRUFBRSxDQUFDLE9BQU8sQ0FDTixzQkFBc0IsRUFDdEIseUJBQXlCLEVBQ3pCLFlBQVksQ0FBQyxhQUFhLEVBQzFCLFlBQVksQ0FBQyxjQUFjLEVBQzNCLFlBQVksQ0FBQyxjQUFjLENBQzlCLENBQUM7SUFDRixFQUFFLENBQUMsT0FBTyxDQUFDLGVBQWUsRUFBRSxlQUFlLEVBQUUsWUFBWSxDQUFDLE1BQU0sR0FBRyxZQUFZLENBQUMsT0FBTyxFQUFFLFlBQVksQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUNsSCxDQUFDIn0=\",\"filename\":\"assess.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"assess.js\",\"url\":\"blob:file:///2925623c-c78c-4ab2-8d25-6ba581e06e93\",\"moduleSequenceNumber\":14813}],\"dependents\":[],\"ramUsage\":4.8,\"server\":\"home\",\"moduleSequenceNumber\":137776,\"_hash\":\"482a9beb35dd25b989f01392d4ab4a49e02be0cd92ad83fe35cbb3ce92bb8677\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"serverExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let ram = Number(ns.args[0]);\\r\\n    let count = Number(ns.args[1]);\\r\\n    const cash = ns.getServerMoneyAvailable(\\\"home\\\");\\r\\n    if (isNaN(count))\\r\\n        count = 1;\\r\\n    if (isNaN(ram)) {\\r\\n        // ns.tprintf(\\\"Calculating maximum ram allocation for new server (Cash: %s)\\\", ns.nFormat(cash, '($0.000a)'))\\r\\n        ram = 0;\\r\\n        for (let i = 0; i <= 20; i++) {\\r\\n            const curRam = Math.pow(2, i);\\r\\n            const cost = ns.getPurchasedServerCost(curRam);\\r\\n            if (cost <= cash)\\r\\n                ram = curRam;\\r\\n            else\\r\\n                break;\\r\\n        }\\r\\n        let cost = ns.getPurchasedServerCost(ram);\\r\\n        let maxServers = Math.min(Math.floor(cash / cost), 25);\\r\\n        ns.tprintf(\\\"run buy_server.js %d %d %s\\\", ram, maxServers, ns.nFormat(cost * maxServers, \\\"($0.000a)\\\"));\\r\\n        ram /= 2;\\r\\n        if (ram < 256)\\r\\n            return;\\r\\n        cost = ns.getPurchasedServerCost(ram);\\r\\n        maxServers = Math.min(Math.floor(cash / cost), 25);\\r\\n        ns.tprintf(\\\"run buy_server.js %d %d %s\\\", ram, maxServers, ns.nFormat(cost * maxServers, \\\"($0.000a)\\\"));\\r\\n        ram /= 2;\\r\\n        if (ram < 256)\\r\\n            return;\\r\\n        cost = ns.getPurchasedServerCost(ram);\\r\\n        maxServers = Math.min(Math.floor(cash / cost), 25);\\r\\n        ns.tprintf(\\\"run buy_server.js %d %d %s\\\", ram, maxServers, ns.nFormat(cost * maxServers, \\\"($0.000a)\\\"));\\r\\n        ram /= 2;\\r\\n        if (ram < 256)\\r\\n            return;\\r\\n        cost = ns.getPurchasedServerCost(ram);\\r\\n        maxServers = Math.min(Math.floor(cash / cost), 25);\\r\\n        ns.tprintf(\\\"run buy_server.js %d %d %s\\\", ram, maxServers, ns.nFormat(cost * maxServers, \\\"($0.000a)\\\"));\\r\\n        ram /= 2;\\r\\n        if (ram < 256)\\r\\n            return;\\r\\n        cost = ns.getPurchasedServerCost(ram);\\r\\n        maxServers = Math.min(Math.floor(cash / cost), 25);\\r\\n        ns.tprintf(\\\"run buy_server.js %d %d %s\\\", ram, maxServers, ns.nFormat(cost * maxServers, \\\"($0.000a)\\\"));\\r\\n        ram /= 2;\\r\\n        if (ram < 256)\\r\\n            return;\\r\\n        cost = ns.getPurchasedServerCost(ram);\\r\\n        maxServers = Math.min(Math.floor(cash / cost), 25);\\r\\n        ns.tprintf(\\\"run buy_server.js %d %d %s\\\", ram, maxServers, ns.nFormat(cost * maxServers, \\\"($0.000a)\\\"));\\r\\n        return;\\r\\n    }\\r\\n    const cost = ns.getPurchasedServerCost(ram) * count;\\r\\n    if (cash < cost) {\\r\\n        ns.tprintf(\\\"Unable to purchase %d server(s) with %d ram (%s < %s)\\\", count, ram, ns.nFormat(cash, \\\"($0.000a)\\\"), ns.nFormat(cost, \\\"($0.000a)\\\"));\\r\\n        return;\\r\\n    }\\r\\n    for (let i = 0; i < count; i++) {\\r\\n        const pservers = ns.getPurchasedServers().sort((a, b) => ns.getServerMaxRam(a) - ns.getServerMaxRam(b));\\r\\n        const nextIdx = pservers.length;\\r\\n        let nextServerName = \\\"pserv-\\\" + nextIdx;\\r\\n        if (pservers.length === ns.getPurchasedServerLimit()) {\\r\\n            const delServer = ns.getServer(pservers[0]);\\r\\n            if (delServer.maxRam >= ram) {\\r\\n                ns.tprintf(\\\"Max servers reached and new server is not an improvement (%dGB/%dGB ram)\\\", delServer.maxRam, ram);\\r\\n                return;\\r\\n            }\\r\\n            ns.tprintf(\\\"Deleting server %s with %dGB ram\\\", delServer.hostname, delServer.maxRam);\\r\\n            nextServerName = delServer.hostname;\\r\\n            ns.killall(delServer.hostname);\\r\\n            ns.deleteServer(delServer.hostname);\\r\\n        }\\r\\n        const hostname = ns.purchaseServer(nextServerName, ram);\\r\\n        ns.tprintf(\\\"Purchased server %s with %d ram for %s\\\", hostname, ram, ns.nFormat(cost / count, \\\"($0.000a)\\\"));\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnV5X3NlcnZlci5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImJ1eV9zZXJ2ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUM5QixJQUFJLEdBQUcsR0FBRyxNQUFNLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzdCLElBQUksS0FBSyxHQUFHLE1BQU0sQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFL0IsTUFBTSxJQUFJLEdBQUcsRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBRWhELElBQUksS0FBSyxDQUFDLEtBQUssQ0FBQztRQUFFLEtBQUssR0FBRyxDQUFDLENBQUM7SUFFNUIsSUFBSSxLQUFLLENBQUMsR0FBRyxDQUFDLEVBQUU7UUFDWiw0R0FBNEc7UUFDNUcsR0FBRyxHQUFHLENBQUMsQ0FBQztRQUNSLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDMUIsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFDOUIsTUFBTSxJQUFJLEdBQUcsRUFBRSxDQUFDLHNCQUFzQixDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQy9DLElBQUksSUFBSSxJQUFJLElBQUk7Z0JBQUUsR0FBRyxHQUFHLE1BQU0sQ0FBQzs7Z0JBQzFCLE1BQU07U0FDZDtRQUVELElBQUksSUFBSSxHQUFHLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUMxQyxJQUFJLFVBQVUsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxHQUFHLElBQUks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\",\"filename\":\"buy_server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"buy_server.js\",\"url\":\"blob:file:///6552377a-258d-4ced-b3fe-783dbe72673d\",\"moduleSequenceNumber\":128}],\"dependents\":[],\"ramUsage\":11.3,\"server\":\"home\",\"moduleSequenceNumber\":137780,\"_hash\":\"c381d9613086b2403bd33c0a5aed251ff3a52b0ae780de338dc3f3b541e9bb75\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { allHosts } from \\\"bbutil\\\";\\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\nfunction printCCT(ns, cct) {\\r\\n    ns.tprintf(\\\"%s %s:\\\", cct.host, cct.name);\\r\\n    ns.tprintf(\\\"  %s\\\", cct.type);\\r\\n    ns.tprintf(\\\"  %s\\\", cct.desc);\\r\\n    ns.tprintf(\\\"  %s\\\", cct.data);\\r\\n}\\r\\nfunction answerCCT(ns, cct, answer) {\\r\\n    const reward = ns.codingcontract.attempt(answer, cct.name, cct.host, { returnReward: true });\\r\\n    if (reward === \\\"\\\") {\\r\\n        ns.tprintf(\\\"ERROR: Failed to solve %s:%s of type %s\\\", cct.host, cct.name, cct.type);\\r\\n        ns.tprintf(\\\"  data: %s; answer: %s\\\", cct.data.toString(), answer.toString());\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(\\\"SUCCESS: Solved %s:%s => %s\\\", cct.host, cct.name, reward);\\r\\n    }\\r\\n}\\r\\nclass CCT {\\r\\n    constructor(ns, hostname, filename) {\\r\\n        this.name = filename;\\r\\n        this.host = hostname;\\r\\n        this.type = ns.codingcontract.getContractType(filename, hostname);\\r\\n        this.desc = ns.codingcontract.getDescription(filename, hostname);\\r\\n        this.data = ns.codingcontract.getData(filename, hostname);\\r\\n        this.solve = _.bind(CCT[\\\"solve\\\" + this.type.replace(/\\\\s/g, \\\"\\\")], null, _, this);\\r\\n        //this.print(ns);\\r\\n    }\\r\\n    print(ns) {\\r\\n        ns.tprintf(\\\"%s %s:\\\", this.host, this.name);\\r\\n        ns.tprintf(\\\"  %s\\\", this.type);\\r\\n        ns.tprintf(\\\"  %s\\\", this.desc);\\r\\n        ns.tprintf(\\\"  %s\\\", this.data);\\r\\n    }\\r\\n    static solveTotalWaystoSum(ns, cct) {\\r\\n        const ways = [1];\\r\\n        ways.length = cct.data + 1;\\r\\n        ways.fill(0, 1);\\r\\n        for (let i = 1; i < cct.data; ++i) {\\r\\n            for (let j = i; j <= cct.data; ++j) {\\r\\n                ways[j] += ways[j - i];\\r\\n            }\\r\\n        }\\r\\n        answerCCT(ns, cct, ways[cct.data]);\\r\\n    }\\r\\n    static solveSubarraywithMaximumSum(ns, cct) {\\r\\n        const nums = cct.data.slice();\\r\\n        for (let i = 1; i < nums.length; i++) {\\r\\n            nums[i] = Math.max(nums[i], nums[i] + nums[i - 1]);\\r\\n        }\\r\\n        answerCCT(ns, cct, Math.max(...nums));\\r\\n    }\\r\\n    static solveSpiralizeMatrix(ns, cct) {\\r\\n        const spiral = [];\\r\\n        const m = cct.data.length;\\r\\n        const n = cct.data[0].length;\\r\\n        let u = 0;\\r\\n        let d = m - 1;\\r\\n        let l = 0;\\r\\n        let r = n - 1;\\r\\n        let k = 0;\\r\\n        while (true) {\\r\\n            // Up\\r\\n            for (let col = l; col <= r; col++) {\\r\\n                spiral[k] = cct.data[u][col];\\r\\n                ++k;\\r\\n            }\\r\\n            if (++u > d) {\\r\\n                break;\\r\\n            }\\r\\n            // Right\\r\\n            for (let row = u; row <= d; row++) {\\r\\n                spiral[k] = cct.data[row][r];\\r\\n                ++k;\\r\\n            }\\r\\n            if (--r < l) {\\r\\n                break;\\r\\n            }\\r\\n            // Down\\r\\n            for (let col = r; col >= l; col--) {\\r\\n                spiral[k] = cct.data[d][col];\\r\\n                ++k;\\r\\n            }\\r\\n            if (--d < u) {\\r\\n                break;\\r\\n            }\\r\\n            // Left\\r\\n            for (let row = d; row >= u; row--) {\\r\\n                spiral[k] = cct.data[row][l];\\r\\n                ++k;\\r\\n            }\\r\\n            if (++l > r) {\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n        answerCCT(ns, cct, spiral);\\r\\n    }\\r\\n    static solveArrayJumpingGame(ns, cct) {\\r\\n        const n = cct.data.length;\\r\\n        let i = 0;\\r\\n        for (let reach = 0; i < n && i <= reach; ++i) {\\r\\n            reach = Math.max(i + cct.data[i], reach);\\r\\n        }\\r\\n        answerCCT(ns, cct, i === n ? 1 : 0);\\r\\n    }\\r\\n    static solveMergeOverlappingIntervals(ns, cct) {\\r\\n        const intervals = cct.data.slice();\\r\\n        intervals.sort((a, b) => {\\r\\n            return a[0] - b[0];\\r\\n        });\\r\\n        const result = [];\\r\\n        let start = intervals[0][0];\\r\\n        let end = intervals[0][1];\\r\\n        for (const interval of intervals) {\\r\\n            if (interval[0] <= end) {\\r\\n                end = Math.max(end, interval[1]);\\r\\n            }\\r\\n            else {\\r\\n                result.push([start, end]);\\r\\n                start = interval[0];\\r\\n                end = interval[1];\\r\\n            }\\r\\n        }\\r\\n        result.push([start, end]);\\r\\n        answerCCT(ns, cct, result);\\r\\n    }\\r\\n    static solveGenerateIPAddresses(ns, cct) {\\r\\n        function validate(str) {\\r\\n            if (str === \\\"0\\\")\\r\\n                return true;\\r\\n            if (str.length > 1 && str[0] === \\\"0\\\")\\r\\n                return false;\\r\\n            if (str.length > 3)\\r\\n                return false;\\r\\n            return parseInt(str) < 255;\\r\\n        }\\r\\n        const results = [];\\r\\n        for (let i = 1; i <= 3; i++) {\\r\\n            if (cct.data.length - i > 9)\\r\\n                continue;\\r\\n            const a = cct.data.substr(0, i);\\r\\n            if (!validate(a))\\r\\n                continue;\\r\\n            for (let j = 1; j <= 3; j++) {\\r\\n                if (cct.data.length - (i + j) > 6)\\r\\n                    continue;\\r\\n                const b = cct.data.substr(i, j);\\r\\n                if (!validate(b))\\r\\n                    continue;\\r\\n                for (let k = 1; k <= 3; k++) {\\r\\n                    if (cct.data.length - (i + j + k) > 3)\\r\\n                        continue;\\r\\n                    const c = cct.data.substr(i + j, k);\\r\\n                    const d = cct.data.substr(i + j + k);\\r\\n                    if (validate(c) && validate(d)) {\\r\\n                        results.push(a + \\\".\\\" + b + \\\".\\\" + c + \\\".\\\" + d);\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        answerCCT(ns, cct, results);\\r\\n    }\\r\\n    static solveAlgorithmicStockTraderI(ns, cct) {\\r\\n        let maxCur = 0;\\r\\n        let maxSoFar = 0;\\r\\n        for (let i = 1; i < cct.data.length; ++i) {\\r\\n            maxCur = Math.max(0, (maxCur += cct.data[i] - cct.data[i - 1]));\\r\\n            maxSoFar = Math.max(maxCur, maxSoFar);\\r\\n        }\\r\\n        answerCCT(ns, cct, maxSoFar);\\r\\n    }\\r\\n    static solveAlgorithmicStockTraderII(ns, cct) {\\r\\n        let profit = 0;\\r\\n        for (let p = 1; p < cct.data.length; ++p) {\\r\\n            profit += Math.max(cct.data[p] - cct.data[p - 1], 0);\\r\\n        }\\r\\n        answerCCT(ns, cct, profit);\\r\\n    }\\r\\n    static solveAlgorithmicStockTraderIII(ns, cct) {\\r\\n        let hold1 = Number.MIN_SAFE_INTEGER;\\r\\n        let hold2 = Number.MIN_SAFE_INTEGER;\\r\\n        let release1 = 0;\\r\\n        let release2 = 0;\\r\\n        for (const price of cct.data) {\\r\\n            release2 = Math.max(release2, hold2 + price);\\r\\n            hold2 = Math.max(hold2, release1 - price);\\r\\n            release1 = Math.max(release1, hold1 + price);\\r\\n            hold1 = Math.max(hold1, price * -1);\\r\\n        }\\r\\n        answerCCT(ns, cct, release2);\\r\\n    }\\r\\n    static solveAlgorithmicStockTraderIV(ns, cct) {\\r\\n        const k = cct.data[0];\\r\\n        const prices = cct.data[1];\\r\\n        const len = prices.length;\\r\\n        if (len < 2) {\\r\\n            return parseInt(ans) === 0;\\r\\n        }\\r\\n        if (k > len / 2) {\\r\\n            let res = 0;\\r\\n            for (let i = 1; i < len; ++i) {\\r\\n                res += Math.max(prices[i] - prices[i - 1], 0);\\r\\n            }\\r\\n            return parseInt(ans) === res;\\r\\n        }\\r\\n        const hold = [];\\r\\n        const rele = [];\\r\\n        hold.length = k + 1;\\r\\n        rele.length = k + 1;\\r\\n        for (let i = 0; i <= k; ++i) {\\r\\n            hold[i] = Number.MIN_SAFE_INTEGER;\\r\\n            rele[i] = 0;\\r\\n        }\\r\\n        let cur;\\r\\n        for (let i = 0; i < len; ++i) {\\r\\n            cur = prices[i];\\r\\n            for (let j = k; j > 0; --j) {\\r\\n                rele[j] = Math.max(rele[j], hold[j] + cur);\\r\\n                hold[j] = Math.max(hold[j], rele[j - 1] - cur);\\r\\n            }\\r\\n        }\\r\\n        answerCCT(ns, cct, rele[k]);\\r\\n    }\\r\\n    static solveMinimumPathSuminaTriangle(ns, cct) {\\r\\n        function trav(tree, paths = [], tally = 0, level = 0, idx = 0) {\\r\\n            const newTally = tally + tree[level][idx];\\r\\n            if (level === tree.length - 1) {\\r\\n                paths.push(newTally);\\r\\n            }\\r\\n            else {\\r\\n                trav(tree, paths, newTally, level + 1, idx);\\r\\n                trav(tree, paths, newTally, level + 1, idx + 1);\\r\\n            }\\r\\n            return paths;\\r\\n        }\\r\\n        answerCCT(ns, cct, trav(cct.data).sort((a, b) => a - b)[0]);\\r\\n    }\\r\\n    static solveUniquePathsinaGridI(ns, cct) {\\r\\n        const n = cct.data[0]; // Number of rows\\r\\n        const m = cct.data[1]; // Number of columns\\r\\n        const currentRow = [];\\r\\n        currentRow.length = n;\\r\\n        for (let i = 0; i < n; i++) {\\r\\n            currentRow[i] = 1;\\r\\n        }\\r\\n        for (let row = 1; row < m; row++) {\\r\\n            for (let i = 1; i < n; i++) {\\r\\n                currentRow[i] += currentRow[i - 1];\\r\\n            }\\r\\n        }\\r\\n        answerCCT(ns, cct, currentRow[n - 1]);\\r\\n    }\\r\\n    static solveUniquePathsinaGridII(ns, cct) {\\r\\n        const obstacleGrid = [];\\r\\n        obstacleGrid.length = cct.data.length;\\r\\n        for (let i = 0; i < obstacleGrid.length; ++i) {\\r\\n            obstacleGrid[i] = cct.data[i].slice();\\r\\n        }\\r\\n        for (let i = 0; i < obstacleGrid.length; i++) {\\r\\n            for (let j = 0; j < obstacleGrid[0].length; j++) {\\r\\n                if (obstacleGrid[i][j] == 1) {\\r\\n                    obstacleGrid[i][j] = 0;\\r\\n                }\\r\\n                else if (i == 0 && j == 0) {\\r\\n                    obstacleGrid[0][0] = 1;\\r\\n                }\\r\\n                else {\\r\\n                    obstacleGrid[i][j] = (i > 0 ? obstacleGrid[i - 1][j] : 0) + (j > 0 ? obstacleGrid[i][j - 1] : 0);\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        answerCCT(ns, cct, obstacleGrid[obstacleGrid.length - 1][obstacleGrid[0].length - 1]);\\r\\n    }\\r\\n    static solveSanitizeParenthesesinExpression(ns, cct) {\\r\\n        let left = 0;\\r\\n        let right = 0;\\r\\n        const res = [];\\r\\n        for (let i = 0; i < cct.data.length; ++i) {\\r\\n            if (cct.data[i] === \\\"(\\\") {\\r\\n                ++left;\\r\\n            }\\r\\n            else if (cct.data[i] === \\\")\\\") {\\r\\n                left > 0 ? --left : ++right;\\r\\n            }\\r\\n        }\\r\\n        function dfs(pair, index, left, right, s, solution, res) {\\r\\n            if (s.length === index) {\\r\\n                if (left === 0 && right === 0 && pair === 0) {\\r\\n                    for (let i = 0; i < res.length; i++) {\\r\\n                        if (res[i] === solution) {\\r\\n                            return;\\r\\n                        }\\r\\n                    }\\r\\n                    res.push(solution);\\r\\n                }\\r\\n                return;\\r\\n            }\\r\\n            if (s[index] === \\\"(\\\") {\\r\\n                if (left > 0) {\\r\\n                    dfs(pair, index + 1, left - 1, right, s, solution, res);\\r\\n                }\\r\\n                dfs(pair + 1, index + 1, left, right, s, solution + s[index], res);\\r\\n            }\\r\\n            else if (s[index] === \\\")\\\") {\\r\\n                if (right > 0)\\r\\n                    dfs(pair, index + 1, left, right - 1, s, solution, res);\\r\\n                if (pair > 0)\\r\\n                    dfs(pair - 1, index + 1, left, right, s, solution + s[index], res);\\r\\n            }\\r\\n            else {\\r\\n                dfs(pair, index + 1, left, right, s, solution + s[index], res);\\r\\n            }\\r\\n        }\\r\\n        dfs(0, 0, left, right, cct.data, \\\"\\\", res);\\r\\n        answerCCT(ns, cct, res);\\r\\n    }\\r\\n    static solveFindAllValidMathExpressions(ns, cct) {\\r\\n        const num = cct.data[0];\\r\\n        const target = cct.data[1];\\r\\n        function helper(res, path, num, target, pos, evaluated, multed) {\\r\\n            if (pos === num.length) {\\r\\n                if (target === evaluated) {\\r\\n                    res.push(path);\\r\\n                }\\r\\n                return;\\r\\n            }\\r\\n            for (let i = pos; i < num.length; ++i) {\\r\\n                if (i != pos && num[pos] == \\\"0\\\") {\\r\\n                    break;\\r\\n                }\\r\\n                const cur = parseInt(num.substring(pos, i + 1));\\r\\n                if (pos === 0) {\\r\\n                    helper(res, path + cur, num, target, i + 1, cur, cur);\\r\\n                }\\r\\n                else {\\r\\n                    helper(res, path + \\\"+\\\" + cur, num, target, i + 1, evaluated + cur, cur);\\r\\n                    helper(res, path + \\\"-\\\" + cur, num, target, i + 1, evaluated - cur, -cur);\\r\\n                    helper(res, path + \\\"*\\\" + cur, num, target, i + 1, evaluated - multed + multed * cur, multed * cur);\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        const result = [];\\r\\n        helper(result, \\\"\\\", num, target, 0, 0, 0);\\r\\n        answerCCT(ns, cct, result);\\r\\n    }\\r\\n    static solveFindLargestPrimeFactor(ns, cct) {\\r\\n        let fac = 2;\\r\\n        let n = cct.data;\\r\\n        while (n > (fac - 1) * (fac - 1)) {\\r\\n            while (n % fac === 0) {\\r\\n                n = Math.round(n / fac);\\r\\n            }\\r\\n            ++fac;\\r\\n        }\\r\\n        answerCCT(ns, cct, n === 1 ? fac - 1 : n);\\r\\n    }\\r\\n}\\r\\nexport async function main(ns) {\\r\\n    const hosts = allHosts(ns);\\r\\n    while (true) {\\r\\n        const ccts = [];\\r\\n        for (const hostname of hosts) {\\r\\n            const ls = ns.ls(hostname).filter((filename) => filename.indexOf(\\\".cct\\\") !== -1);\\r\\n            if (ls.length === 0)\\r\\n                continue;\\r\\n            ccts.push(new CCT(ns, hostname, ls[0]));\\r\\n        }\\r\\n        sprintf(\\\"found %d ccts\\\", ccts.length);\\r\\n        for (const cct of ccts) {\\r\\n            cct.solve(ns);\\r\\n        }\\r\\n        await ns.sleep(60 * 1000);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2N0LmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsiY2N0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFFbEMsNkRBQTZEO0FBQzdELFNBQVMsUUFBUSxDQUFDLEVBQUUsRUFBRSxHQUFHO0lBQ3JCLEVBQUUsQ0FBQyxPQUFPLENBQUMsUUFBUSxFQUFFLEdBQUcsQ0FBQyxJQUFJLEVBQUUsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3pDLEVBQUUsQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUM3QixFQUFFLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDN0IsRUFBRSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUUsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ2pDLENBQUM7QUFFRCxTQUFTLFNBQVMsQ0FBQyxFQUFFLEVBQUUsR0FBRyxFQUFFLE1BQU07SUFDOUIsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLGNBQWMsQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFLEdBQUcsQ0FBQyxJQUFJLEVBQUUsR0FBRyxDQUFDLElBQUksRUFBRSxFQUFFLFlBQVksRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO0lBRTdGLElBQUksTUFBTSxLQUFLLEVBQUUsRUFBRTtRQUNmLEVBQUUsQ0FBQyxPQUFPLENBQUMseUNBQXlDLEVBQUUsR0FBRyxDQUFDLElBQUksRUFBRSxHQUFHLENBQUMsSUFBSSxFQUFFLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNwRixFQUFFLENBQUMsT0FBTyxDQUFDLHdCQUF3QixFQUFFLEdBQUcsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLEVBQUUsTUFBTSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7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LENBQUMsQ0FBQyxLQUFLLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQzthQUN0RTtpQkFBTSxJQUFJLENBQUMsQ0FBQyxLQUFLLENBQUMsS0FBSyxHQUFHLEVBQUU7Z0JBQ3pCLElBQUksS0FBSyxHQUFHLENBQUM7b0JBQUUsR0FBRyxDQUFDLElBQUksRUFBRSxLQUFLLEdBQUcsQ0FBQyxFQUFFLElBQUksRUFBRSxLQUFLLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxRQUFRLEVBQUUsR0FBRyxDQUFDLENBQUM7Z0JBQ3ZFLElBQUksSUFBSSxHQUFHLENBQUM7b0JBQUUsR0FBRyxDQUFDLElBQUksR0FBRyxDQUFDLEVBQUUsS0FBSyxHQUFHLENBQUMsRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBRSxRQUFRLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDO2FBQ3BGO2lCQUFNO2dCQUNILEdBQUcsQ0FBQyxJQUFJLEVBQUUsS0FBSyxHQUFHLENBQUMsRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBRSxRQUFRLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDO2FBQ2xFO1FBQ0wsQ0FBQztRQUVELEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsR0FBRyxDQUFDLElBQUksRUFBRSxFQUFFLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFFMUMsU0FBUyxDQUFDLEVBQUUsRUFBRSxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDNUIsQ0FBQztJQUNELE1BQU0sQ0FBQyxnQ0FBZ0MsQ0FBQyxFQUFFLEVBQUUsR0FBRztRQUMzQyxNQUFNLEdBQUcsR0FBRyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3hCLE1BQU0sTUFBTSxHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFFM0IsU0FBUyxNQUFNLENBQUMsR0FBRyxFQUFFLElBQUks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\",\"filename\":\"cct.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"bbutil.js\",\"url\":\"blob:file:///f40524f7-4b80-43b6-96bb-132ee7ee9eb0\",\"moduleSequenceNumber\":137774},{\"filename\":\"cct.js\",\"url\":\"blob:file:///619594d9-803c-4f7d-af5c-41b653e19ee6\",\"moduleSequenceNumber\":137826}],\"dependents\":[],\"ramUsage\":27,\"server\":\"home\",\"moduleSequenceNumber\":137826,\"_hash\":\"e7414618ba83a6c445e80e1c6a20c93e5657417f1683c1a0fe207f5abd260f87\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"codingcontract.getContractType\",\"cost\":5},{\"type\":\"fn\",\"name\":\"codingcontract.getDescription\",\"cost\":5},{\"type\":\"fn\",\"name\":\"codingcontract.getData\",\"cost\":5},{\"type\":\"fn\",\"name\":\"codingcontract.attempt\",\"cost\":10},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { allHosts, softenServer } from \\\"bbutil\\\";\\r\\nfunction listServers(ns, hostnames) {\\r\\n    const hackableHosts = hostnames.sort(\\r\\n    //(a, b) => ns.getServerRequiredHackingLevel(b) - ns.getServerRequiredHackingLevel(a)\\r\\n    (a, b) => ns.getServerMaxMoney(b) - ns.getServerMaxMoney(a));\\r\\n    for (const hostname of hackableHosts) {\\r\\n        const rootStr = ns.hasRootAccess(hostname) ? \\\"[O]\\\" : \\\"[X]\\\";\\r\\n        const hackStr = ns.getHackingLevel() >= ns.getServerRequiredHackingLevel(hostname) ? \\\"[O]\\\" : \\\"[X]\\\";\\r\\n        ns.tprintf(\\\"%20s %-9s %4d %s %s %6dGB %8.2f\\\", hostname, ns.nFormat(ns.getServerMaxMoney(hostname), \\\"($0.000a)\\\"), ns.getServerRequiredHackingLevel(hostname), rootStr, hackStr, ns.getServerMaxRam(hostname), Math.ceil(ns.getWeakenTime(hostname) / 1000) / 60);\\r\\n    }\\r\\n}\\r\\nexport async function main(ns) {\\r\\n    const hostnames = allHosts(ns);\\r\\n    for (const hostname of hostnames) {\\r\\n        softenServer(ns, hostname);\\r\\n    }\\r\\n    listServers(ns, hostnames);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3Jhd2wuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJjcmF3bC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsUUFBUSxFQUFFLFlBQVksRUFBRSxNQUFNLFFBQVEsQ0FBQztBQUVoRCxTQUFTLFdBQVcsQ0FBQyxFQUFNLEVBQUUsU0FBbUI7SUFDNUMsTUFBTSxhQUFhLEdBQUcsU0FBUyxDQUFDLElBQUk7SUFDaEMscUZBQXFGO0lBQ3JGLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLGlCQUFpQixDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLENBQUMsQ0FDOUQsQ0FBQztJQUVGLEtBQUssTUFBTSxRQUFRLElBQUksYUFBYSxFQUFFO1FBQ2xDLE1BQU0sT0FBTyxHQUFHLEVBQUUsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDO1FBQzNELE1BQU0sT0FBTyxHQUFHLEVBQUUsQ0FBQyxlQUFlLEVBQUUsSUFBSSxFQUFFLENBQUMsNkJBQTZCLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDO1FBQ25HLEVBQUUsQ0FBQyxPQUFPLENBQ04saUNBQWlDLEVBQ2pDLFFBQVEsRUFDUixFQUFFLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxRQUFRLENBQUMsRUFBRSxXQUFXLENBQUMsRUFDdkQsRUFBRSxDQUFDLDZCQUE2QixDQUFDLFFBQVEsQ0FBQyxFQUMxQyxPQUFPLEVBQ1AsT0FBTyxFQUNQLEVBQUUsQ0FBQyxlQUFlLENBQUMsUUFBUSxDQUFDLEVBQzVCLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQ3BELENBQUM7S0FDTDtBQUNMLENBQUM7QUFFRCxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUUvQixLQUFLLE1BQU0sUUFBUSxJQUFJLFNBQVMsRUFBRTtRQUM5QixZQUFZLENBQUMsRUFBRSxFQUFFLFFBQVEsQ0FBQyxDQUFDO0tBQzlCO0lBRUQsV0FBVyxDQUFDLEVBQUUsRUFBRSxTQUFTLENBQUMsQ0FBQztBQUMvQixDQUFDIn0=\",\"filename\":\"crawl.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"bbutil.js\",\"url\":\"blob:file:///c12fc582-0a3e-4ca6-bb18-51f7d359cfaf\",\"moduleSequenceNumber\":58876},{\"filename\":\"crawl.js\",\"url\":\"blob:file:///29b8ce7b-af26-4c8d-a21a-960c1b299387\",\"moduleSequenceNumber\":58878}],\"dependents\":[],\"ramUsage\":2.7,\"server\":\"home\",\"moduleSequenceNumber\":137786,\"_hash\":\"f794cb5c9400e1bd7590de9d4c74f655abc7a9f0983d213a5828b9fb77b56e2e\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { allHosts, serverIsHackable, softenServer, doProgramBuys, canExecuteOnServer } from \\\"bbutil\\\";\\r\\nimport { SmartHackEnv } from \\\"smart_hack_env\\\";\\r\\nasync function calcIncome(ns, target, hosts, simMinutes = 2) {\\r\\n    return await new SmartHackEnv(ns, target, hosts).fastSim(ns, 1000 * 60 * simMinutes);\\r\\n}\\r\\nasync function getOrderedTargetArr(ns, _host, simMinutes) {\\r\\n    let host = _host;\\r\\n    if (typeof host === \\\"string\\\" || host instanceof String)\\r\\n        host = ns.getServer(host);\\r\\n    const hackRates = [];\\r\\n    const targetnames = allHosts(ns)\\r\\n        .filter(serverIsHackable.bind(null, ns))\\r\\n        .filter((hostname) => ns.getServerMaxMoney(hostname) > 0);\\r\\n    for (const targetname of targetnames) {\\r\\n        hackRates.push([targetname, await calcIncome(ns, targetname, [host.hostname], simMinutes)]);\\r\\n    }\\r\\n    return hackRates.sort((a, b) => b[1] - a[1]);\\r\\n}\\r\\nexport async function main(ns) {\\r\\n    const allHostnames = allHosts(ns);\\r\\n    const attackScript = \\\"super_hack_adv.js\\\";\\r\\n    const attackLib = \\\"super_hack_env.js\\\";\\r\\n    doProgramBuys(ns);\\r\\n    // soften all servers\\r\\n    for (const hostName of allHostnames) {\\r\\n        softenServer(ns, hostName);\\r\\n    }\\r\\n    // create a dictionary mapping server size to server name array (with a special bucket for \\\"home\\\")\\r\\n    const hostSizeDict = {};\\r\\n    for (const hostname of allHostnames\\r\\n        .filter(canExecuteOnServer.bind(null, ns))\\r\\n        .filter((hostname) => ns.getServerMaxRam(hostname) >= 32)) {\\r\\n        let key = ns.getServerMaxRam(hostname);\\r\\n        if (hostname === \\\"home\\\")\\r\\n            key = \\\"home\\\";\\r\\n        if (!(key in hostSizeDict))\\r\\n            hostSizeDict[key] = [];\\r\\n        hostSizeDict[key].push(hostname);\\r\\n    }\\r\\n    // create a dictionary mapping host server sizes to ordered target arrays\\r\\n    const targetArrDict = {};\\r\\n    const badhosts = [];\\r\\n    for (const [key, value] of Object.entries(hostSizeDict)) {\\r\\n        const orderedTargetArr = await getOrderedTargetArr(ns, value[0], ns.args[0]);\\r\\n        if (orderedTargetArr[0][1] === 0) {\\r\\n            ns.tprintf(\\\"Host %s does not have enough ram (%d) to execute a hack script\\\", value[0], ns.getServerMaxRam(value[0]));\\r\\n            badhosts.push(value[0]);\\r\\n        }\\r\\n        else {\\r\\n            targetArrDict[key] = orderedTargetArr;\\r\\n        }\\r\\n    }\\r\\n    // purge hosts that can't sustain hack scripts\\r\\n    for (const hostname of badhosts) {\\r\\n        delete hostSizeDict[hostname];\\r\\n    }\\r\\n    // collect target arrays into a single array ordered by value and including the server size bucket information\\r\\n    let allTargets = [];\\r\\n    for (const [key, values] of Object.entries(targetArrDict)) {\\r\\n        for (const value of values) {\\r\\n            allTargets.push({\\r\\n                size: key,\\r\\n                targetname: value[0],\\r\\n                income: value[1],\\r\\n            });\\r\\n        }\\r\\n    }\\r\\n    allTargets = allTargets.sort((a, b) => b.income - a.income);\\r\\n    // Set up tracker to decide how many targets are needed for each bucket\\r\\n    const bucketTracker = {};\\r\\n    for (const [key, value] of Object.entries(hostSizeDict)) {\\r\\n        bucketTracker[key] = value.length;\\r\\n    }\\r\\n    // Iterate over allTargets, taking the next best target/bucket pair and removing all lesser targets in the\\r\\n    // array. If all hosts in a bucket are accounted for, remove all lesser targets using that bucket. Finish\\r\\n    // iterating once either all host servers are accounted for, or we've run out of targets.\\r\\n    const finalTargets = [];\\r\\n    while (allTargets.length > 0) {\\r\\n        const target = allTargets.shift();\\r\\n        allTargets = allTargets.filter((t) => target.targetname !== t.targetname);\\r\\n        if (--bucketTracker[target.size] === 0) {\\r\\n            allTargets = allTargets.filter((t) => target.size !== t.size);\\r\\n        }\\r\\n        finalTargets.push(target);\\r\\n    }\\r\\n    // Assign a target to a host in the target's bucket. Kill all hosts that are attacking targets not in this bucket.\\r\\n    // Check to see if a host in the target's bucket is already attacking the target. If it is, skip the target. Otherwise\\r\\n    // kick off attack on that target.\\r\\n    for (const [bucket, hostnames] of Object.entries(hostSizeDict)) {\\r\\n        // get all targets for this bucket\\r\\n        const targetnames = [];\\r\\n        for (const target of finalTargets) {\\r\\n            if (target.size === bucket)\\r\\n                targetnames.push(target.targetname);\\r\\n        }\\r\\n        // iterate over all hosts in this bucket, if the host is free, run the attack script on it with one of the targets\\r\\n        for (const hostname of hostnames) {\\r\\n            await ns.scp(attackScript, \\\"home\\\", hostname);\\r\\n            await ns.scp(attackLib, \\\"home\\\", hostname);\\r\\n            const targetname = targetnames.shift();\\r\\n            ns.tprintf(\\\"Starting %s on %s targeting %s\\\", attackScript, hostname, targetname);\\r\\n            ns.exec(attackScript, hostname, 1, targetname);\\r\\n        }\\r\\n    }\\r\\n    for (const target of finalTargets) {\\r\\n        ns.tprintf(\\\"%20s: %10s/s %s\\\", target.targetname, ns.nFormat(target.income, \\\"($0.000a)\\\"), target.size.toString());\\r\\n    }\\r\\n    /*\\r\\n    Algorithm:\\r\\n        collect target arrays for each server size for all purchased servers and home\\r\\n        collate targets per income for all servers of size purchasedServers.length + 1 (+1 for home) ???\\r\\n        go down list from top to bottom, inspect servers at the same tier to see if the current target is being run at that tier\\r\\n            if the target is being run at that tier, continue to the next target\\r\\n            else kill the lowest producing target and start the current target on the newly freed server\\r\\n        when starting a new target, specify the income of the target in the arg list so it can be compared later\\r\\n\\r\\n    Colate:\\r\\n        Iterate over all tier arrays at the same time\\r\\n        Compare current item on all arrays, pick item with the highest income\\r\\n        if item.server is not in the master list, pop the item, add the item to the master list and increment a tracking variable for that tier\\r\\n            if the tier is full (tracker === tier.length) then clear out that tier's list or stop tracking it\\r\\n        if item.server is in the master list already, pop the item without adding it to the list\\r\\n        if all tiers are full, you're done\\r\\n\\r\\n    Launching new dispatcher:\\r\\n        scp dispatcher.js to the host server, exec dispatcher.js with the target, 1 thread\\r\\n    */\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWZmLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsiZWZmLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxRQUFRLEVBQUUsZ0JBQWdCLEVBQUUsWUFBWSxFQUFFLGFBQWEsRUFBRSxrQkFBa0IsRUFBRSxNQUFNLFFBQVEsQ0FBQztBQUNyRyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFOUMsS0FBSyxVQUFVLFVBQVUsQ0FBQyxFQUFFLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxVQUFVLEdBQUcsQ0FBQztJQUN2RCxPQUFPLE1BQU0sSUFBSSxZQUFZLENBQUMsRUFBRSxFQUFFLE1BQU0sRUFBRSxLQUFLLENBQUMsQ0FBQyxPQUFPLENBQUMsRUFBRSxFQUFFLElBQUksR0FBRyxFQUFFLEdBQUcsVUFBVSxDQUFDLENBQUM7QUFDekYsQ0FBQztBQUVELEtBQUssVUFBVSxtQkFBbUIsQ0FBQyxFQUFFLEVBQUUsS0FBSyxFQUFFLFVBQVU7SUFDcEQsSUFBSSxJQUFJLEdBQUcsS0FBSyxDQUFDO0lBQ2pCLElBQUksT0FBTyxJQUFJLEtBQUssUUFBUSxJQUFJLElBQUksWUFBWSxNQUFNO1FBQUUsSUFBSSxHQUFHLEVBQUUsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFbEYsTUFBTSxTQUFTLEdBQUcsRUFBRSxDQUFDO0lBQ3JCLE1BQU0sV0FBVyxHQUFHLFFBQVEsQ0FBQyxFQUFFLENBQUM7U0FDM0IsTUFBTSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLENBQUM7U0FDdkMsTUFBTSxDQUFDLENBQUMsUUFBUSxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsaUJBQWlCLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDOUQsS0FBSyxNQUFNLFVBQVUsSUFBSSxXQUFXLEVBQUU7UUFD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\",\"filename\":\"eff.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"super_hack_env.js\",\"url\":\"blob:file:///b1e8fedd-bb3c-4576-8e77-f028dc740123\",\"moduleSequenceNumber\":167684},{\"filename\":\"util.js\",\"url\":\"blob:file:///bf410739-e899-46b9-8a95-dda844715459\",\"moduleSequenceNumber\":167680},{\"filename\":\"eff.js\",\"url\":\"blob:file:///cf0828a5-144e-4fe3-9fec-cdbb3b233bc7\",\"moduleSequenceNumber\":171422}],\"dependents\":[],\"ramUsage\":21.15,\"server\":\"home\",\"moduleSequenceNumber\":58853,\"_hash\":\"deca27d53fa75b3fb893f3efb941a97068eb3c26e73668b8710896e640f1781e\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getBitNodeMultipliers\",\"cost\":4},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getScriptIncome\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"purchaseTor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"purchaseProgram\",\"cost\":2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const script = ns.args[0].toString();\\r\\n    let host = ns.args[1].toString();\\r\\n    const args = ns.args.slice(2);\\r\\n    let doSpawn = false;\\r\\n    if (host === \\\"local\\\") {\\r\\n        host = ns.getHostname();\\r\\n        doSpawn = true;\\r\\n    }\\r\\n    if (!ns.fileExists(script, \\\"home\\\")) {\\r\\n        ns.tprintf(\\\"[%s] ERROR: %s does not exist on home server\\\", ns.getScriptName(), script, host);\\r\\n        return;\\r\\n    }\\r\\n    await ns.scp(script, \\\"home\\\", host);\\r\\n    const scriptRam = ns.getScriptRam(script, host);\\r\\n    let hostMaxRam = ns.getServerMaxRam(host);\\r\\n    if (host === \\\"home\\\")\\r\\n        hostMaxRam -= 128;\\r\\n    const threads = Math.floor(hostMaxRam / scriptRam);\\r\\n    if (threads <= 0)\\r\\n        return;\\r\\n    if (doSpawn) {\\r\\n        ns.tprintf(\\\"Spawning %s@%s on %s over %d threads\\\", script, host, args.toString(), threads);\\r\\n        ns.spawn(script, threads, ...args.map(x => x.toString()));\\r\\n    }\\r\\n    else {\\r\\n        ns.killall(host);\\r\\n        const pid = ns.exec(script, host, threads, ...args);\\r\\n        ns.tprintf(\\\"Executing %s@%s on %s over %d threads [pid: %d]\\\", script, host, args.toString(), threads, pid);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhlY19tYXguanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJleGVjX21heC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFPO0lBQzlCLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDckMsSUFBSSxJQUFJLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUNqQyxNQUFNLElBQUksR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUM5QixJQUFJLE9BQU8sR0FBRyxLQUFLLENBQUM7SUFFcEIsSUFBSSxJQUFJLEtBQUssT0FBTyxFQUFFO1FBQ2xCLElBQUksR0FBRyxFQUFFLENBQUMsV0FBVyxFQUFFLENBQUM7UUFDeEIsT0FBTyxHQUFHLElBQUksQ0FBQztLQUNsQjtJQUVELElBQUksQ0FBQyxFQUFFLENBQUMsVUFBVSxDQUFDLE1BQU0sRUFBRSxNQUFNLENBQUMsRUFBRTtRQUNoQyxFQUFFLENBQUMsT0FBTyxDQUFDLDhDQUE4QyxFQUFFLEVBQUUsQ0FBQyxhQUFhLEVBQUUsRUFBRSxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDN0YsT0FBTztLQUNWO0lBQ0QsTUFBTSxFQUFFLENBQUMsR0FBRyxDQUFDLE1BQU0sRUFBRSxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFFbkMsTUFBTSxTQUFTLEdBQUcsRUFBRSxDQUFDLFlBQVksQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDaEQsSUFBSSxVQUFVLEdBQUcsRUFBRSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUUxQyxJQUFJLElBQUksS0FBSyxNQUFNO1FBQUUsVUFBVSxJQUFJLEdBQUcsQ0FBQztJQUV2QyxNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLFVBQVUsR0FBRyxTQUFTLENBQUMsQ0FBQztJQUVuRCxJQUFJLE9BQU8sSUFBSSxDQUFDO1FBQUUsT0FBTztJQUV6QixJQUFJLE9BQU8sRUFBRTtRQUNULEVBQUUsQ0FBQyxPQUFPLENBQUMsc0NBQXNDLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsUUFBUSxFQUFFLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFDM0YsRUFBRSxDQUFDLEtBQUssQ0FBQyxNQUFNLEVBQUUsT0FBTyxFQUFFLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDLENBQUM7S0FDN0Q7U0FBTTtRQUNILEVBQUUsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDakIsTUFBTSxHQUFHLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxHQUFHLElBQUksQ0FBQyxDQUFDO1FBQ3BELEVBQUUsQ0FBQyxPQUFPLENBQUMsaURBQWlELEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsUUFBUSxFQUFFLEVBQUUsT0FBTyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0tBQzlHO0FBQ0wsQ0FBQyJ9\",\"filename\":\"exec_max.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.3,\"server\":\"home\",\"moduleSequenceNumber\":137792,\"_hash\":\"263e1c80029d743a6ea1734d9ee826478a5d4b882ff9b19eede2d3aeeb026061\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    function favorToRep(f) {\\r\\n        const raw = 25000 * (Math.pow(1.02, f) - 1);\\r\\n        return Math.round(raw * 10000) / 10000; // round to make things easier.\\r\\n    }\\r\\n    function repToFavor(r) {\\r\\n        const raw = Math.log(r / 25000 + 1) / Math.log(1.02);\\r\\n        return Math.round(raw * 10000) / 10000; // round to make things easier.\\r\\n    }\\r\\n    for (const faction of ns.getPlayer().factions) {\\r\\n        const favor = ns.getFactionFavor(faction);\\r\\n        const targetRep = favorToRep(75);\\r\\n        const currentRep = ns.getFactionRep(faction) +\\r\\n            (ns.getPlayer().currentWorkFactionName === faction ? ns.getPlayer().workRepGained : 0);\\r\\n        const storedRep = Math.max(0, favorToRep(favor));\\r\\n        const totalRep = currentRep + storedRep;\\r\\n        const fTotal = repToFavor(currentRep + storedRep);\\r\\n        const fGain = fTotal - favor;\\r\\n        if (favor > 75)\\r\\n            continue;\\r\\n        let successStr = \\\"\\\";\\r\\n        if (favor + fGain > 75) {\\r\\n            successStr = \\\" (SUCCESS)\\\";\\r\\n        }\\r\\n        let needStr = \\\" \\\";\\r\\n        if (totalRep < targetRep) {\\r\\n            needStr = ns.sprintf(\\\" | Need +%s Rep\\\", ns.nFormat(targetRep - totalRep, \\\"0.000a\\\"));\\r\\n        }\\r\\n        ns.tprintf(\\\"%s => %.2f + %.2f = %.2f%s%s\\\", faction, favor, fGain, favor + fGain, needStr, successStr);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmF2b3IuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJmYXZvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLFNBQVMsVUFBVSxDQUFDLENBQVM7UUFDekIsTUFBTSxHQUFHLEdBQUcsS0FBSyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDNUMsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsR0FBRyxLQUFLLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQywrQkFBK0I7SUFDM0UsQ0FBQztJQUVELFNBQVMsVUFBVSxDQUFDLENBQVM7UUFDekIsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsS0FBSyxHQUFHLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDckQsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsR0FBRyxLQUFLLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQywrQkFBK0I7SUFDM0UsQ0FBQztJQUVELEtBQUssTUFBTSxPQUFPLElBQUksRUFBRSxDQUFDLFNBQVMsRUFBRSxDQUFDLFFBQVEsRUFBRTtRQUMzQyxNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsZUFBZSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQzFDLE1BQU0sU0FBUyxHQUFHLFVBQVUsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUNqQyxNQUFNLFVBQVUsR0FDWixFQUFFLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQztZQUN6QixDQUFDLEVBQUUsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxzQkFBc0IsS0FBSyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzNGLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1FBQ2pELE1BQU0sUUFBUSxHQUFHLFVBQVUsR0FBRyxTQUFTLENBQUM7UUFFeEMsTUFBTSxNQUFNLEdBQUcsVUFBVSxDQUFDLFVBQVUsR0FBRyxTQUFTLENBQUMsQ0FBQztRQUNsRCxNQUFNLEtBQUssR0FBRyxNQUFNLEdBQUcsS0FBSyxDQUFDO1FBRTdCLElBQUksS0FBSyxHQUFHLEVBQUU7WUFBRSxTQUFTO1FBRXpCLElBQUksVUFBVSxHQUFHLEVBQUUsQ0FBQztRQUNwQixJQUFJLEtBQUssR0FBRyxLQUFLLEdBQUcsRUFBRSxFQUFFO1lBQ3BCLFVBQVUsR0FBRyxZQUFZLENBQUM7U0FDN0I7UUFFRCxJQUFJLE9BQU8sR0FBRyxHQUFHLENBQUM7UUFDbEIsSUFBSSxRQUFRLEdBQUcsU0FBUyxFQUFFO1lBQ3RCLE9BQU8sR0FBRyxFQUFFLENBQUMsT0FBTyxDQUFDLGlCQUFpQixFQUFFLEVBQUUsQ0FBQyxPQUFPLENBQUMsU0FBUyxHQUFHLFFBQVEsRUFBRSxRQUFRLENBQUMsQ0FBQyxDQUFDO1NBQ3ZGO1FBRUQsRUFBRSxDQUFDLE9BQU8sQ0FBQyw4QkFBOEIsRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEdBQUcsS0FBSyxFQUFFLE9BQU8sRUFBRSxVQUFVLENBQUMsQ0FBQztLQUN6RztBQUNMLENBQUMifQ==\",\"filename\":\"favor.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"favor.js\",\"url\":\"blob:file:///b357a2b6-6832-493f-a826-638b99c0be16\",\"moduleSequenceNumber\":16673}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"home\",\"moduleSequenceNumber\":137794,\"_hash\":\"04341c97a4a67c1392a728df7896aa6866c240d584c64972c20e7a19fb1bd555\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getFactionFavor\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getFactionRep\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const hostname = ns.args[0].toString();\\r\\n    await ns.grow(hostname);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImdyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLFFBQVEsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ3ZDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUM1QixDQUFDIn0=\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///12de2241-66de-443e-b925-9ba84f9e6461\",\"moduleSequenceNumber\":59028}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":137798,\"_hash\":\"b08d8b036d0b2405f07120006bb2f146642e99e52fb3f7a04700372e957b55da\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const hostname = ns.args[0].toString();\\r\\n    await ns.hack(hostname);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImhhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLFFBQVEsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ3ZDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUM1QixDQUFDIn0=\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///d5f2be22-3e5c-49a1-a3bc-e21e0aef41d0\",\"moduleSequenceNumber\":138057}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"home\",\"moduleSequenceNumber\":138057,\"_hash\":\"75544967ee336490ed82243eb65d4eecaa83f5628336585be9654906e865df41\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { allHosts } from \\\"bbutil\\\";\\r\\nexport async function main(ns) {\\r\\n    for (const hostname of allHosts(ns)) {\\r\\n        if (hostname === \\\"home\\\")\\r\\n            continue;\\r\\n        ns.killall(hostname);\\r\\n    }\\r\\n    for (const ps of ns.ps(\\\"home\\\")) {\\r\\n        if (ps.filename === \\\"ka.js\\\" ||\\r\\n            ps.filename === \\\"clock.js\\\" ||\\r\\n            ps.filename === \\\"leech.js\\\" ||\\r\\n            ps.filename === \\\"hacknet.js\\\" ||\\r\\n            ps.filename === \\\"hacking_gang.js\\\" ||\\r\\n            ps.filename === \\\"corp.js\\\" ||\\r\\n            ps.filename === \\\"cct.js\\\")\\r\\n            continue;\\r\\n        ns.kill(ps.pid);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoia2EuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJrYS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sUUFBUSxDQUFDO0FBRWxDLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsS0FBSyxNQUFNLFFBQVEsSUFBSSxRQUFRLENBQUMsRUFBRSxDQUFDLEVBQUU7UUFDakMsSUFBSSxRQUFRLEtBQUssTUFBTTtZQUFFLFNBQVM7UUFDbEMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQztLQUN4QjtJQUVELEtBQUssTUFBTSxFQUFFLElBQUksRUFBRSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsRUFBRTtRQUM1QixJQUNJLEVBQUUsQ0FBQyxRQUFRLEtBQUssT0FBTztZQUN2QixFQUFFLENBQUMsUUFBUSxLQUFLLFVBQVU7WUFDMUIsRUFBRSxDQUFDLFFBQVEsS0FBSyxVQUFVO1lBQzFCLEVBQUUsQ0FBQyxRQUFRLEtBQUssWUFBWTtZQUM1QixFQUFFLENBQUMsUUFBUSxLQUFLLGlCQUFpQjtZQUNqQyxFQUFFLENBQUMsUUFBUSxLQUFLLFNBQVM7WUFDekIsRUFBRSxDQUFDLFFBQVEsS0FBSyxRQUFRO1lBRXhCLFNBQVM7UUFDYixFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQztLQUNuQjtBQUNMLENBQUMifQ==\",\"filename\":\"ka.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"bbutil.js\",\"url\":\"blob:file:///496b6125-e6f6-445c-8f6b-19986e362994\",\"moduleSequenceNumber\":58876},{\"filename\":\"ka.js\",\"url\":\"blob:file:///ba40d58b-47a5-4f11-a9f1-e4dc018feb43\",\"moduleSequenceNumber\":63726}],\"dependents\":[],\"ramUsage\":3,\"server\":\"home\",\"moduleSequenceNumber\":137806,\"_hash\":\"c40b1517138d1fdaecb947feb5f5efdce507af5e0d6ea51141442ab63b12abc5\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function isScript(filename) {\\r\\n    return filename.indexOf(\\\".js\\\") != -1;\\r\\n}\\r\\nfunction isProgram(filename) {\\r\\n    return filename.indexOf(\\\".exe\\\") != -1;\\r\\n}\\r\\nfunction isOther(filename) {\\r\\n    return !isScript(filename) && !isProgram(filename);\\r\\n}\\r\\nexport async function main(ns) {\\r\\n    let hostname = ns.getHostname();\\r\\n    if (ns.args[0] && ns.serverExists(ns.args[0].toString())) {\\r\\n        hostname = ns.args[0].toString();\\r\\n    }\\r\\n    const filenames = ns.ls(hostname);\\r\\n    const scriptnames = filenames.filter(isScript);\\r\\n    const programnames = filenames.filter(isProgram);\\r\\n    const othernames = filenames.filter(isOther);\\r\\n    let maxFileLength = 0;\\r\\n    scriptnames.map(function (name) {\\r\\n        const len = name.length + 2;\\r\\n        if (len > maxFileLength)\\r\\n            maxFileLength = len;\\r\\n    });\\r\\n    if (scriptnames.length) {\\r\\n        ns.tprintf(\\\"======== SCRIPTS ========\\\");\\r\\n        for (const filename of scriptnames)\\r\\n            ns.tprintf(`  %-${maxFileLength}s %7.2fGB %s`, filename, ns.getScriptRam(filename, hostname), ns.scriptRunning(filename, hostname) ? \\\"RUNNING\\\" : \\\"\\\");\\r\\n    }\\r\\n    if (programnames.length) {\\r\\n        ns.tprintf(\\\"======== PROGRAMS =======\\\");\\r\\n        for (const filename of programnames)\\r\\n            ns.tprintf(`  %-${maxFileLength}s`, filename);\\r\\n    }\\r\\n    if (othernames.length) {\\r\\n        ns.tprintf(\\\"========= OTHER =========\\\");\\r\\n        for (const filename of othernames)\\r\\n            ns.tprintf(`  %-${maxFileLength}s`, filename);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGwuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxTQUFTLFFBQVEsQ0FBQyxRQUFnQjtJQUM5QixPQUFPLFFBQVEsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7QUFDekMsQ0FBQztBQUVELFNBQVMsU0FBUyxDQUFDLFFBQWdCO0lBQy9CLE9BQU8sUUFBUSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztBQUMxQyxDQUFDO0FBRUQsU0FBUyxPQUFPLENBQUMsUUFBZ0I7SUFDN0IsT0FBTyxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUN2RCxDQUFDO0FBRUQsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUM5QixJQUFJLFFBQVEsR0FBRyxFQUFFLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDaEMsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxZQUFZLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxFQUFFO1FBQ3RELFFBQVEsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO0tBQ3BDO0lBRUQsTUFBTSxTQUFTLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUNsQyxNQUFNLFdBQVcsR0FBRyxTQUFTLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQy9DLE1BQU0sWUFBWSxHQUFHLFNBQVMsQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDakQsTUFBTSxVQUFVLEdBQUcsU0FBUyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUU3QyxJQUFJLGFBQWEsR0FBRyxDQUFDLENBQUM7SUFDdEIsV0FBVyxDQUFDLEdBQUcsQ0FBQyxVQUFVLElBQUk7UUFDMUIsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUE7UUFDM0IsSUFBSSxHQUFHLEdBQUcsYUFBYTtZQUFFLGFBQWEsR0FBRyxHQUFHLENBQUM7SUFDakQsQ0FBQyxDQUFDLENBQUM7SUFFSCxJQUFJLFdBQVcsQ0FBQyxNQUFNLEVBQUU7UUFDcEIsRUFBRSxDQUFDLE9BQU8sQ0FBQywyQkFBMkIsQ0FBQyxDQUFDO1FBQ3hDLEtBQUssTUFBTSxRQUFRLElBQUksV0FBVztZQUM5QixFQUFFLENBQUMsT0FBTyxDQUNOLE9BQU8sYUFBYSxjQUFjLEVBQ2xDLFFBQVEsRUFDUixFQUFFLENBQUMsWUFBWSxDQUFDLFFBQVEsRUFBRSxRQUFRLENBQUMsRUFDbkMsRUFBRSxDQUFDLGFBQWEsQ0FBQyxRQUFRLEVBQUUsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUN4RCxDQUFDO0tBQ1Q7SUFFRCxJQUFJLFlBQVksQ0FBQyxNQUFNLEVBQUU7UUFDckIsRUFBRSxDQUFDLE9BQU8sQ0FBQywyQkFBMkIsQ0FBQyxDQUFDO1FBQ3hDLEtBQUssTUFBTSxRQUFRLElBQUksWUFBWTtZQUFFLEVBQUUsQ0FBQyxPQUFPLENBQUMsT0FBTyxhQUFhLEdBQUcsRUFBRSxRQUFRLENBQUMsQ0FBQztLQUN0RjtJQUVELElBQUksVUFBVSxDQUFDLE1BQU0sRUFBRTtRQUNuQixFQUFFLENBQUMsT0FBTyxDQUFDLDJCQUEyQixDQUFDLENBQUM7UUFDeEMsS0FBSyxNQUFNLFFBQVEsSUFBSSxVQUFVO1lBQUUsRUFBRSxDQUFDLE9BQU8sQ0FBQyxPQUFPLGFBQWEsR0FBRyxFQUFFLFFBQVEsQ0FBQyxDQUFDO0tBQ3BGO0FBQ0wsQ0FBQyJ9\",\"filename\":\"ll.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"ll.js\",\"url\":\"blob:file:///e48ded60-cee1-47e3-9de8-aa0df07b346d\",\"moduleSequenceNumber\":6188}],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"home\",\"moduleSequenceNumber\":137810,\"_hash\":\"82ebb9254df0112b191fded0adee64cb18a800b6a4e61a6c2b36ba22a3106445\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"serverExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\nimport { doBuyAndSoftenAll, doBackdoors, stFormat } from \\\"bbutil\\\";\\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\nfunction printAugStats(ns, stats) {\\r\\n    for (const [key, val] of Object.entries(stats)) {\\r\\n        ns.tprintf(\\\"%30s %s\\\", key, val);\\r\\n    }\\r\\n}\\r\\nclass Augmentation {\\r\\n    name;\\r\\n    faction;\\r\\n    price;\\r\\n    rep;\\r\\n    stats;\\r\\n    owned;\\r\\n    installed;\\r\\n    purchaseable;\\r\\n    dep;\\r\\n    str;\\r\\n    constructor(ns, name, faction) {\\r\\n        const ownedAugs = ns.getOwnedAugmentations(true);\\r\\n        const installedAugs = ns.getOwnedAugmentations();\\r\\n        const factionRep = (ns.getPlayer().currentWorkFactionName === faction ? ns.getPlayer().workRepGained : 0) +\\r\\n            ns.getFactionRep(faction);\\r\\n        this.name = name;\\r\\n        this.faction = faction;\\r\\n        this.price = ns.getAugmentationPrice(this.name);\\r\\n        this.rep = ns.getAugmentationRepReq(this.name);\\r\\n        this.stats = ns.getAugmentationStats(this.name);\\r\\n        this.owned = ownedAugs.includes(this.name);\\r\\n        this.installed = installedAugs.includes(this.name);\\r\\n        this.purchaseable = factionRep >= this.rep;\\r\\n        let dep = ns.getAugmentationPrereq(this.name)[0];\\r\\n        if (dep === undefined || ownedAugs.includes(dep) || installedAugs.includes(dep))\\r\\n            dep = \\\"\\\";\\r\\n        this.dep = dep;\\r\\n        let installedStr = this.installed\\r\\n            ? \\\"INSTALLED\\\"\\r\\n            : this.owned\\r\\n                ? \\\"OWNED\\\"\\r\\n                : this.purchaseable\\r\\n                    ? \\\"PURCHASEABLE\\\"\\r\\n                    : \\\"\\\";\\r\\n        if (ns.getPlayer().currentWorkFactionName === faction && installedStr === \\\"\\\") {\\r\\n            const repGainPerMs = (ns.getPlayer().workRepGainRate * 5) / 1000;\\r\\n            installedStr = stFormat(ns, (this.rep - factionRep) / repGainPerMs);\\r\\n        }\\r\\n        this.str = ns.sprintf(\\\"%s: %s - %s [%s] %s\\\", this.faction, this.name, ns.nFormat(this.price, \\\"$0.000a\\\"), ns.nFormat(this.rep, \\\"0.000a\\\"), installedStr);\\r\\n    }\\r\\n    toString() {\\r\\n        return this.str;\\r\\n    }\\r\\n    isHackUseful() {\\r\\n        if (this.name === \\\"Neuroflux Governor\\\")\\r\\n            return false;\\r\\n        //return true;\\r\\n        // if (this.stats.company_rep_mult) return true;\\r\\n        // if (this.stats.faction_rep_mult) return true;\\r\\n        if (this.stats.hacking_chance_mult)\\r\\n            return true;\\r\\n        if (this.stats.hacking_exp_mult)\\r\\n            return true;\\r\\n        if (this.stats.hacking_grow_mult)\\r\\n            return true;\\r\\n        if (this.stats.hacking_money_mult)\\r\\n            return true;\\r\\n        if (this.stats.hacking_mult)\\r\\n            return true;\\r\\n        if (this.stats.hacking_speed_mult)\\r\\n            return true;\\r\\n        if (this.stats.hacknet_node_core_cost_mult)\\r\\n            return true;\\r\\n        if (this.stats.hacknet_node_level_cost_mult)\\r\\n            return true;\\r\\n        if (this.stats.hacknet_node_money_mult)\\r\\n            return true;\\r\\n        if (this.stats.hacknet_node_purchase_cost_mult)\\r\\n            return true;\\r\\n        if (this.stats.hacknet_node_ram_cost_mult)\\r\\n            return true;\\r\\n        if (this.name === \\\"BitRunners Neurolink\\\" ||\\r\\n            this.name === \\\"CashRoot Starter Kit\\\" ||\\r\\n            this.name === \\\"PCMatrix\\\" ||\\r\\n            this.name === \\\"Neuroreceptor Management Implant\\\" ||\\r\\n            this.name === \\\"The Red Pill\\\")\\r\\n            return true;\\r\\n        return false;\\r\\n    }\\r\\n}\\r\\nexport async function main(ns) {\\r\\n    doBuyAndSoftenAll(ns);\\r\\n    await doBackdoors(ns);\\r\\n    const player = ns.getPlayer();\\r\\n    const checkFactions = player.factions.concat(ns.checkFactionInvitations());\\r\\n    const sortedFactions = checkFactions.sort((a, b) => (ns.getPlayer().currentWorkFactionName === b ? ns.getPlayer().workRepGained : 0) +\\r\\n        ns.getFactionRep(b) -\\r\\n        ((ns.getPlayer().currentWorkFactionName === a ? ns.getPlayer().workRepGained : 0) + ns.getFactionRep(a)));\\r\\n    //let sortedFactions = ALL_FACTIONS.sort((a, b) => ns.getFactionRep(b) - ns.getFactionRep(a));\\r\\n    let allPurchaseableAugs = [];\\r\\n    let topFaction = true;\\r\\n    for (const faction of sortedFactions) {\\r\\n        const augs = ns\\r\\n            .getAugmentationsFromFaction(faction)\\r\\n            .map((name) => {\\r\\n            return new Augmentation(ns, name, faction);\\r\\n        })\\r\\n            .sort((a, b) => a.rep - b.rep);\\r\\n        const augsToBuy = [];\\r\\n        for (const aug of augs) {\\r\\n            if (aug.isHackUseful() && !aug.owned) {\\r\\n                augsToBuy.push(aug);\\r\\n            }\\r\\n            if (aug.isHackUseful() && aug.purchaseable && !aug.owned && !aug.installed) {\\r\\n                allPurchaseableAugs.push(aug);\\r\\n            }\\r\\n        }\\r\\n        if (augsToBuy.length === 0 && !topFaction)\\r\\n            continue;\\r\\n        ns.tprintf(\\\"%s (rep: %d):\\\", faction, (ns.getPlayer().currentWorkFactionName === faction ? ns.getPlayer().workRepGained : 0) +\\r\\n            ns.getFactionRep(faction));\\r\\n        for (const aug of augsToBuy) {\\r\\n            ns.tprintf(\\\"  %s\\\", aug);\\r\\n            // printAugStats(aug.stats);\\r\\n        }\\r\\n        topFaction = false;\\r\\n    }\\r\\n    for (let i = 0; i < allPurchaseableAugs.length; i++) {\\r\\n        const checkName = allPurchaseableAugs[i].name;\\r\\n        let j = i + 1;\\r\\n        while (j < allPurchaseableAugs.length) {\\r\\n            if (allPurchaseableAugs[j].name === checkName) {\\r\\n                allPurchaseableAugs.splice(j, 1);\\r\\n            }\\r\\n            else {\\r\\n                j++;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n    allPurchaseableAugs = allPurchaseableAugs.sort((a, b) => b.price - a.price);\\r\\n    // reorder array to buy dependent augs first and purge augs that cant be bought\\r\\n    // because of a missing dependency, need to loop multiple times until no more dependencies are found\\r\\n    while (true) {\\r\\n        let didDepMove = false;\\r\\n        for (let i = 0; i < allPurchaseableAugs.length; i++) {\\r\\n            const augName = allPurchaseableAugs[i].name;\\r\\n            const depName = allPurchaseableAugs[i].dep;\\r\\n            if (depName === \\\"\\\")\\r\\n                continue;\\r\\n            let foundDep = false;\\r\\n            // check to see if we've already re-organized this dep and it is placed higher in the queue\\r\\n            for (let k = 0; k < i; k++) {\\r\\n                if (allPurchaseableAugs[k].name === depName) {\\r\\n                    foundDep = true;\\r\\n                }\\r\\n            }\\r\\n            if (foundDep)\\r\\n                continue;\\r\\n            const depLoc = allPurchaseableAugs.findIndex((a) => a.name === depName);\\r\\n            if (depLoc >= 0) {\\r\\n                const tmp = allPurchaseableAugs[depLoc];\\r\\n                // remove aug from current place\\r\\n                allPurchaseableAugs.splice(depLoc, 1);\\r\\n                // place it before the main aug\\r\\n                const curLoc = allPurchaseableAugs.findIndex((a) => a.name === augName);\\r\\n                allPurchaseableAugs.splice(curLoc, 0, tmp);\\r\\n                foundDep = true;\\r\\n                didDepMove = true;\\r\\n            }\\r\\n            // if we dont have the dependency queued, remove this aug from the buy list\\r\\n            if (!foundDep) {\\r\\n                ns.tprintf(\\\"WARNING: Unable to find dependency %s:%s in the queue\\\", allPurchaseableAugs[i].name, allPurchaseableAugs[i].dep);\\r\\n                allPurchaseableAugs.splice(i, 1);\\r\\n            }\\r\\n        }\\r\\n        if (!didDepMove)\\r\\n            break;\\r\\n    }\\r\\n    // if (allPurchaseableAugs.length > 0) {\\r\\n    //     ns.tprintf(\\\"============================\\\");\\r\\n    //     let mult = 1;\\r\\n    //     let total = 0;\\r\\n    //     for (let aug of allPurchaseableAugs) {\\r\\n    //         //if (ns.args[0]) ns.purchaseAugmentation(aug.faction, aug.name);\\r\\n    //         ns.tprintf(\\r\\n    //             \\\"%40s - %9s %s\\\",\\r\\n    //             aug.name,\\r\\n    //             ns.nFormat(aug.price * mult, \\\"$0.000a\\\"),\\r\\n    //             aug.dep !== undefined ? aug.dep : \\\"\\\"\\r\\n    //         );\\r\\n    //         total += aug.price * mult;\\r\\n    //         mult *= 1.9;\\r\\n    //     }\\r\\n    //     ns.tprintf(\\\"\\\\n%40s - %9s\\\", \\\"Total\\\", ns.nFormat(total, \\\"$0.000a\\\"));\\r\\n    // }\\r\\n    const buysafe = ns.getPlayer().currentWorkFactionName !== sortedFactions[0];\\r\\n    if (!buysafe && ns.args[0]) {\\r\\n        ns.tprintf(\\\"WARNING: Unable to buy augmentations when actively working for the top faction\\\");\\r\\n    }\\r\\n    let mult = 1;\\r\\n    const srcFile11 = ns.getOwnedSourceFiles().find((x) => x.n === 11);\\r\\n    const srcFile11Lvl = srcFile11 ? srcFile11.lvl : 0;\\r\\n    const multmult = 1.9 * [1, 0.96, 0.94, 0.93][srcFile11Lvl];\\r\\n    let total = Number.MAX_SAFE_INTEGER;\\r\\n    let startAug = 0;\\r\\n    const purchaseableAugs = allPurchaseableAugs.filter((a) => a.name !== \\\"The Red Pill\\\");\\r\\n    while (startAug < purchaseableAugs.length) {\\r\\n        total = 0;\\r\\n        mult = 1;\\r\\n        for (let augIdx = startAug; augIdx < purchaseableAugs.length; augIdx++) {\\r\\n            total += purchaseableAugs[augIdx].price * mult;\\r\\n            mult *= multmult;\\r\\n        }\\r\\n        if (total < ns.getPlayer().money)\\r\\n            break;\\r\\n        startAug++;\\r\\n    }\\r\\n    let affordableAugs = purchaseableAugs.slice(startAug);\\r\\n    // check if affordableAugs includes deps if they're not already installed\\r\\n    let redoUpdate = false;\\r\\n    for (const aug of affordableAugs) {\\r\\n        const depName = aug.dep;\\r\\n        if (depName === \\\"\\\")\\r\\n            continue;\\r\\n        if (ns.getOwnedAugmentations(true).includes(depName))\\r\\n            continue;\\r\\n        let depAug = affordableAugs.find((a) => a.name === depName);\\r\\n        if (depAug === undefined) {\\r\\n            // dependency is not installed, and not in the list to be installed, pull it from purchaseableAugs\\r\\n            depAug = purchaseableAugs.find((a) => a.name === depName);\\r\\n            if (depAug === undefined) {\\r\\n                ns.tprintf(\\\"ERROR: Unable to find dependency aug in the purchaseableAugs \\\" +\\r\\n                    \\\"array even though it should be there %s | %s\\\");\\r\\n                return;\\r\\n            }\\r\\n            const thisAugIdx = affordableAugs.findIndex((a) => a.name === aug.name);\\r\\n            affordableAugs.splice(thisAugIdx, 0, depAug);\\r\\n            redoUpdate = true;\\r\\n        }\\r\\n    }\\r\\n    if (redoUpdate) {\\r\\n        startAug = 0;\\r\\n        while (startAug < affordableAugs.length) {\\r\\n            total = 0;\\r\\n            mult = 1;\\r\\n            for (let augIdx = startAug; augIdx < affordableAugs.length; augIdx++) {\\r\\n                total += affordableAugs[augIdx].price * mult;\\r\\n                mult *= multmult;\\r\\n            }\\r\\n            if (total < ns.getPlayer().money)\\r\\n                break;\\r\\n            startAug++;\\r\\n        }\\r\\n        affordableAugs = affordableAugs.slice(startAug);\\r\\n    }\\r\\n    //if (affordableAugs.length === 0) return;\\r\\n    ns.tprintf(\\\"============================\\\");\\r\\n    total = 0;\\r\\n    mult = 1;\\r\\n    const startmoney = ns.getPlayer().money;\\r\\n    for (const aug of affordableAugs) {\\r\\n        if (ns.args[0] && buysafe)\\r\\n            ns.purchaseAugmentation(aug.faction, aug.name);\\r\\n        ns.tprintf(\\\"%50s - %9s %s\\\", aug.name, ns.nFormat(aug.price * mult, \\\"$0.000a\\\"), aug.dep);\\r\\n        total += aug.price * mult;\\r\\n        mult *= multmult;\\r\\n    }\\r\\n    // see how many Neuroflux Governors we can buy\\r\\n    const topFactionRep = sortedFactions.length > 0\\r\\n        ? (ns.getPlayer().currentWorkFactionName === sortedFactions[0] ? ns.getPlayer().workRepGained : 0) +\\r\\n            ns.getFactionRep(sortedFactions[0])\\r\\n        : 0;\\r\\n    let ngPrice = ns.getAugmentationPrice(\\\"NeuroFlux Governor\\\") * (ns.args[0] && buysafe ? 1 : mult);\\r\\n    let ngRepReq = ns.getAugmentationRepReq(\\\"NeuroFlux Governor\\\");\\r\\n    let nfCount = 1;\\r\\n    while (true) {\\r\\n        if (total + ngPrice < startmoney && ngRepReq <= topFactionRep) {\\r\\n            if (ns.args[0] && buysafe) {\\r\\n                const result = ns.purchaseAugmentation(sortedFactions[0], \\\"NeuroFlux Governor\\\");\\r\\n                if (!result)\\r\\n                    ns.tprintf(\\\"ERROR, could not buy Neuroflux governor\\\");\\r\\n            }\\r\\n            ns.tprintf(\\\"%50s - %9s %s\\\", \\\"NeuroFlux Governor +\\\" + nfCount.toString(), ns.nFormat(ngPrice, \\\"$0.000a\\\"), ns.nFormat(ngRepReq, \\\"0.000a\\\"));\\r\\n            nfCount++;\\r\\n            total += ngPrice;\\r\\n            ngPrice = ngPrice * 1.14 * multmult;\\r\\n            ngRepReq *= 1.14;\\r\\n        }\\r\\n        else {\\r\\n            break;\\r\\n        }\\r\\n    }\\r\\n    ns.tprintf(\\\"\\\\n%50s - %9s\\\", \\\"Total\\\", ns.nFormat(total, \\\"$0.000a\\\"));\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWNwLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibWNwLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLDZEQUE2RDtBQUM3RCxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsV0FBVyxFQUFnQixRQUFRLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFFaEYsNkRBQTZEO0FBQzdELFNBQVMsYUFBYSxDQUFDLEVBQU0sRUFBRSxLQUF3QjtJQUNuRCxLQUFLLE1BQU0sQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLElBQUksTUFBTSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsRUFBRTtRQUM1QyxFQUFFLENBQUMsT0FBTyxDQUFDLFNBQVMsRUFBRSxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUM7S0FDbkM7QUFDTCxDQUFDO0FBRUQsTUFBTSxZQUFZO0lBQ2QsSUFBSSxDQUFTO0lBQ2IsT0FBTyxDQUFTO0lBQ2hCLEtBQUssQ0FBUztJQUNkLEdBQUcsQ0FBUztJQUNaLEtBQUssQ0FBb0I7SUFDekIsS0FBSyxDQUFVO0lBQ2YsU0FBUyxDQUFVO0lBQ25CLFlBQVksQ0FBVTtJQUN0QixHQUFHLENBQVM7SUFDWixHQUFHLENBQVM7SUFFWixZQUFZLEVBQU0sRUFBRSxJQUFZLEVBQUUsT0FBZTtRQUM3QyxNQUFNLFNBQVMsR0FBRyxFQUFFLENBQUMscUJBQXFCLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDakQsTUFBTSxhQUFhLEdBQUcsRUFBRSxDQUFDLHFCQUFxQixFQUFFLENBQUM7UUFDakQsTUFBTSxVQUFVLEdBQ1osQ0FBQyxFQUFFLENBQUMsU0FBUyxFQUFFLENBQUMsc0JBQXNCLEtBQUssT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsU0FBUyxFQUFFLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDdEYsRUFBRSxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUM5QixJ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\",\"filename\":\"mcp.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"bbutil.js\",\"url\":\"blob:file:///6b6630f3-40c5-4511-9b56-8f43ff6e7dae\",\"moduleSequenceNumber\":137774},{\"filename\":\"mcp.js\",\"url\":\"blob:file:///8fc2ff96-93f6-49a3-a87a-716593870879\",\"moduleSequenceNumber\":137827}],\"dependents\":[],\"ramUsage\":51.9,\"server\":\"home\",\"moduleSequenceNumber\":137827,\"_hash\":\"24a0c053112b9a248482866c6633bf845edd1ac3d9f8a884d354e5c1d86e2369\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getOwnedAugmentations\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getFactionRep\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getAugmentationPrice\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"getAugmentationRepReq\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"getAugmentationStats\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getAugmentationPrereq\",\"cost\":5},{\"type\":\"fn\",\"name\":\"checkFactionInvitations\",\"cost\":3},{\"type\":\"fn\",\"name\":\"getAugmentationsFromFaction\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getOwnedSourceFiles\",\"cost\":5},{\"type\":\"fn\",\"name\":\"purchaseAugmentation\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"connect\",\"cost\":2},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"purchaseTor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"purchaseProgram\",\"cost\":2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { allHosts, doBackdoors, softenServer } from \\\"bbutil\\\";\\r\\nexport async function main(ns) {\\r\\n    for (const hostName of allHosts(ns)) {\\r\\n        softenServer(ns, hostName);\\r\\n    }\\r\\n    await doBackdoors(ns);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic29mdGVuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsic29mdGVuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxRQUFRLEVBQUUsV0FBVyxFQUFFLFlBQVksRUFBRSxNQUFNLFFBQVEsQ0FBQztBQUU3RCxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFPO0lBQzlCLEtBQUssTUFBTSxRQUFRLElBQUksUUFBUSxDQUFDLEVBQUUsQ0FBQyxFQUFFO1FBQ2pDLFlBQVksQ0FBQyxFQUFFLEVBQUUsUUFBUSxDQUFDLENBQUM7S0FDOUI7SUFFRCxNQUFNLFdBQVcsQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUMxQixDQUFDIn0=\",\"filename\":\"soften.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"util.js\",\"url\":\"blob:file:///036161a2-b6d9-44df-bb3b-edd44df116ef\"},{\"filename\":\"soften.js\",\"url\":\"blob:file:///ddd41388-fefd-42c8-9ca8-8171c394b599\"}],\"dependents\":[],\"ramUsage\":8.4,\"server\":\"home\",\"moduleSequenceNumber\":137821,\"_hash\":\"0970d4484663f0afa74b5cbdf735a0acd1a80d1fe0f7c8d5d58a92513dd4d0a2\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"connect\",\"cost\":2},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    // eslint-disable-next-line\\r\\n    ns.tprintf(\\\"%s\\\", ns.heart.break());\\r\\n    // ns.tprintf(\\\"%s\\\", ns.getAugmentationsFromFaction(\\\"Netburners\\\"));\\r\\n    // ns.tprintf(\\\"%s\\\", ns.getOwnedAugmentations());\\r\\n    // ns.tprintf(\\\"%s\\\", ns.getAugmentationPrice(\\\"NeuroFlux Governor\\\"));\\r\\n    // const stats = ns.getAugmentationStats(\\\"NeuroFlux Governor\\\");\\r\\n    // for (const [key, val] of Object.entries(stats)) {\\r\\n    //     ns.tprintf(\\\"%s %s\\\", key, val);\\r\\n    // }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdC5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbInRlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QiwyQkFBMkI7SUFDM0IsRUFBRSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLEtBQUssQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDO0lBRW5DLGtFQUFrRTtJQUNsRSxnREFBZ0Q7SUFDaEQsbUVBQW1FO0lBRW5FLCtEQUErRDtJQUMvRCxvREFBb0Q7SUFDcEQscUNBQXFDO0lBQ3JDLElBQUk7QUFDUixDQUFDIn0=\",\"filename\":\"test.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"test.js\",\"url\":\"blob:file:///fe331924-4ae1-4301-8a97-5f044413f441\",\"moduleSequenceNumber\":28685}],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":137823,\"_hash\":\"fcd9ca7533b2b3d20ef0f0c7d9b24ad45e45a7ddd188fbfcb6bdd03d81a93862\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const hostname = ns.args[0].toString();\\r\\n    await ns.weaken(hostname);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsid2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxRQUFRLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUN2QyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDOUIsQ0FBQyJ9\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///a7b8860f-058a-4162-8a82-90aa81e80a89\",\"moduleSequenceNumber\":58954}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":137825,\"_hash\":\"ba7ee2de86ec8f375c0598ac7ab180324d1f5070fce231685dc29a48d4385481\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { doProgramBuys } from \\\"bbutil\\\";\\r\\nexport async function main(ns) {\\r\\n    doProgramBuys(ns);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnV5X3Byb2dyYW1zLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsiYnV5X3Byb2dyYW1zLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFFdkMsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUNqQyxhQUFhLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDbkIsQ0FBQyJ9\",\"filename\":\"buy_programs.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"util.js\",\"url\":\"blob:file:///25842cc3-630a-4c14-846e-3ec49f6e3591\",\"moduleSequenceNumber\":2935},{\"filename\":\"buy_programs.js\",\"url\":\"blob:file:///0e1c5499-7665-4623-abb7-3a668e129266\",\"moduleSequenceNumber\":3322}],\"dependents\":[],\"ramUsage\":6.2,\"server\":\"home\",\"moduleSequenceNumber\":137778,\"_hash\":\"8ca4d700f9f604effc2fb404c5fc5843f247cce9c85ee01eb33651278c9340db\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"purchaseTor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"purchaseProgram\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"let lastEl;\\r\\nconst roots = [];\\r\\nfunction stFormat(ns, ms, showms = true, showfull = false) {\\r\\n    let timeLeft = ms;\\r\\n    const hours = Math.floor(ms / (1000 * 60 * 60));\\r\\n    timeLeft -= hours * (1000 * 60 * 60);\\r\\n    const minutes = Math.floor(timeLeft / (1000 * 60));\\r\\n    timeLeft -= minutes * (1000 * 60);\\r\\n    const seconds = Math.floor(timeLeft / 1000);\\r\\n    timeLeft -= seconds * 1000;\\r\\n    const milliseconds = timeLeft;\\r\\n    if (showms) {\\r\\n        if (hours > 0 || showfull)\\r\\n            return ns.sprintf(\\\"%dh%02dm%02d.%03ds\\\", hours, minutes, seconds, milliseconds);\\r\\n        if (minutes > 0)\\r\\n            return ns.sprintf(\\\"%dm%02d.%03ds\\\", minutes, seconds, milliseconds);\\r\\n        return ns.sprintf(\\\"%d.%03ds\\\", seconds, milliseconds);\\r\\n    }\\r\\n    else {\\r\\n        if (hours > 0 || showfull)\\r\\n            return ns.sprintf(\\\"%dh%02dm%02ds\\\", hours, minutes, seconds);\\r\\n        if (minutes > 0)\\r\\n            return ns.sprintf(\\\"%dm%02ds\\\", minutes, seconds);\\r\\n        return ns.sprintf(\\\"%ds\\\", seconds);\\r\\n    }\\r\\n}\\r\\nfunction insertAfter(newNode, existingNode) {\\r\\n    if (!existingNode.parentNode)\\r\\n        throw 'insertAfter init failed';\\r\\n    if (existingNode.nextSibling)\\r\\n        return existingNode.parentNode.insertBefore(newNode, existingNode.nextSibling);\\r\\n    else\\r\\n        return existingNode.parentNode.appendChild(newNode);\\r\\n}\\r\\nfunction addBottomLine() {\\r\\n    const self = globalThis;\\r\\n    const doc = self[\\\"document\\\"];\\r\\n    const hook0 = doc?.getElementById(\\\"overview-extra-hook-0\\\");\\r\\n    const hookRootEl = hook0?.parentElement?.parentElement;\\r\\n    const newRootEl = hookRootEl?.cloneNode(true);\\r\\n    if (!hookRootEl || !newRootEl)\\r\\n        throw \\\"addBottomLine init failed\\\";\\r\\n    const child1 = newRootEl?.children[0]?.children[0];\\r\\n    if (child1) {\\r\\n        child1.innerText = \\\"\\\";\\r\\n    }\\r\\n    const child2 = newRootEl?.children[0]?.children[0];\\r\\n    if (child2) {\\r\\n        child2.innerText = \\\"\\\";\\r\\n        child2.removeAttribute(\\\"id\\\");\\r\\n    }\\r\\n    if (lastEl === undefined)\\r\\n        lastEl = hookRootEl;\\r\\n    try {\\r\\n        lastEl = insertAfter(newRootEl, lastEl);\\r\\n    }\\r\\n    catch (e) {\\r\\n        throw `${e}; addBottomLine init failed`;\\r\\n    }\\r\\n    roots.push(newRootEl);\\r\\n    return newRootEl;\\r\\n}\\r\\nfunction addSingle() {\\r\\n    const self = globalThis;\\r\\n    const doc = self[\\\"document\\\"];\\r\\n    const hook0 = doc?.getElementById(\\\"overview-extra-hook-0\\\");\\r\\n    const hookRootEl = hook0?.parentElement?.parentElement;\\r\\n    const overviewEl = hookRootEl?.parentElement;\\r\\n    const hackRootEl = overviewEl?.children[2];\\r\\n    const newRootEl = hackRootEl?.cloneNode(true);\\r\\n    const newEl = newRootEl?.children[0]?.firstChild;\\r\\n    if (!hookRootEl || !newRootEl || !newEl)\\r\\n        throw \\\"addSingle init failed\\\";\\r\\n    if (newRootEl?.childNodes[1])\\r\\n        newRootEl.removeChild(newRootEl.childNodes[1]);\\r\\n    newEl.removeAttribute(\\\"id\\\");\\r\\n    newEl.innerText = \\\"\\\";\\r\\n    if (lastEl === undefined)\\r\\n        lastEl = hookRootEl;\\r\\n    try {\\r\\n        lastEl = insertAfter(newRootEl, lastEl);\\r\\n    }\\r\\n    catch (e) {\\r\\n        throw `${e}; addSingle init failed`;\\r\\n    }\\r\\n    roots.push(newRootEl);\\r\\n    return newEl;\\r\\n}\\r\\nfunction addDouble() {\\r\\n    const self = globalThis;\\r\\n    const doc = self[\\\"document\\\"];\\r\\n    const hook0 = doc.getElementById(\\\"overview-extra-hook-0\\\");\\r\\n    const hookRootEl = hook0?.parentElement?.parentElement;\\r\\n    const overviewEl = hookRootEl?.parentElement;\\r\\n    const hackRootEl = overviewEl?.children[2];\\r\\n    const newRootEl = hackRootEl?.cloneNode(true);\\r\\n    const newEl1 = newRootEl?.children[0]?.children[0];\\r\\n    const newEl2 = newRootEl?.children[1]?.children[0];\\r\\n    // check if anything failed\\r\\n    if (!hookRootEl || !newRootEl || !newEl1 || !newEl2)\\r\\n        throw \\\"addDouble init failed\\\";\\r\\n    newEl1.removeAttribute(\\\"id\\\");\\r\\n    newEl1.innerText = \\\"\\\";\\r\\n    newEl2.removeAttribute(\\\"id\\\");\\r\\n    newEl2.innerText = \\\"\\\";\\r\\n    if (lastEl === undefined)\\r\\n        lastEl = hookRootEl;\\r\\n    try {\\r\\n        lastEl = insertAfter(newRootEl, lastEl);\\r\\n    }\\r\\n    catch (e) {\\r\\n        throw `${e}; addDouble init failed`;\\r\\n    }\\r\\n    roots.push(newRootEl);\\r\\n    return [newEl1, newEl2];\\r\\n}\\r\\nfunction addProgress() {\\r\\n    const self = globalThis;\\r\\n    const doc = self[\\\"document\\\"];\\r\\n    const hook0 = doc.getElementById(\\\"overview-extra-hook-0\\\");\\r\\n    const hookRootEl = hook0?.parentElement?.parentElement;\\r\\n    const overviewEl = hookRootEl?.parentElement;\\r\\n    const hackProgressEl = overviewEl?.children[3];\\r\\n    const newRootEl = hackProgressEl?.cloneNode(true);\\r\\n    const newSub1 = newRootEl?.children[0]?.children[0];\\r\\n    const newSub2 = newRootEl?.children[0];\\r\\n    // check if anything failed\\r\\n    if (!newRootEl || !newSub1 || !newSub2)\\r\\n        throw \\\"addProgress init failed\\\";\\r\\n    if (lastEl === undefined)\\r\\n        lastEl = newRootEl;\\r\\n    try {\\r\\n        lastEl = insertAfter(newRootEl, lastEl);\\r\\n    }\\r\\n    catch (e) {\\r\\n        throw `${e}; addProgress init failed`;\\r\\n    }\\r\\n    roots.push(newRootEl);\\r\\n    return [newSub1, newSub2];\\r\\n}\\r\\nexport async function main(ns) {\\r\\n    const args = ns.flags([[\\\"help\\\", false]]);\\r\\n    if (args.help) {\\r\\n        ns.tprint(\\\"This script will enhance your HUD (Heads up Display) with custom statistics.\\\");\\r\\n        ns.tprint(`Usage: run ${ns.getScriptName()}`);\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprint(`> run ${ns.getScriptName()}`);\\r\\n        return;\\r\\n    }\\r\\n    ns.atExit(function () {\\r\\n        for (const root of roots) {\\r\\n            root.parentNode?.removeChild(root);\\r\\n        }\\r\\n    });\\r\\n    try {\\r\\n        const clockEl = addSingle();\\r\\n        const targetEl = addSingle();\\r\\n        const incomeEl = addSingle();\\r\\n        const [stateEl, countdownEl] = addDouble();\\r\\n        const [hackProgressEl1, hackProgressEl2] = addProgress();\\r\\n        addBottomLine();\\r\\n        const port = ns.getPortHandle(1);\\r\\n        let startTime = 0;\\r\\n        let endTime = 1000;\\r\\n        let fullTime = 1000;\\r\\n        while (true) {\\r\\n            if (!port.empty()) {\\r\\n                const data = JSON.parse(port.peek().toString());\\r\\n                startTime = new Date(data[0]).getTime();\\r\\n                endTime = new Date(startTime + data[1]).getTime();\\r\\n                fullTime = endTime - startTime;\\r\\n                const date = new Date();\\r\\n                const curTime = date.getTime();\\r\\n                // Update Clock\\r\\n                // let ms = ns.sprintf(\\\"%03d\\\", date.getUTCMilliseconds());\\r\\n                // clockEl.innerText = date.toLocaleTimeString(\\\"it-IT\\\") + \\\".\\\" + ms;\\r\\n                clockEl.innerText = date.toLocaleTimeString(\\\"it-IT\\\");\\r\\n                // Update Target & Income\\r\\n                targetEl.innerText = data[2];\\r\\n                incomeEl.innerText = `${ns.nFormat(data[3], \\\"($0.0a)\\\")}/s`;\\r\\n                // Update State & Countdown\\r\\n                stateEl.innerText = data[4];\\r\\n                countdownEl.innerText = stFormat(ns, endTime - curTime, false);\\r\\n                // Update Progress\\r\\n                const tvalue = curTime - startTime;\\r\\n                const nvalue = (tvalue / fullTime) * 100;\\r\\n                let transform = 100 - nvalue;\\r\\n                let wholeValue = Math.floor(nvalue);\\r\\n                if (startTime === 0 || wholeValue > 100) {\\r\\n                    port.clear();\\r\\n                    transform = 100;\\r\\n                    wholeValue = 0;\\r\\n                }\\r\\n                hackProgressEl1.setAttribute(\\\"aria-valuenow\\\", `${wholeValue}`);\\r\\n                hackProgressEl2.setAttribute(\\\"style\\\", `transform: translateX(${-transform.toFixed(3)}%);`);\\r\\n            }\\r\\n            else {\\r\\n                const date = new Date();\\r\\n                clockEl.innerText = date.toLocaleTimeString(\\\"it-IT\\\");\\r\\n                targetEl.innerText = \\\"NO TARGET\\\";\\r\\n                incomeEl.innerText = \\\"\\\";\\r\\n                stateEl.innerText = \\\"\\\";\\r\\n                countdownEl.innerText = \\\"\\\";\\r\\n                hackProgressEl1.setAttribute(\\\"aria-valuenow\\\", \\\"0\\\");\\r\\n                hackProgressEl2.setAttribute(\\\"style\\\", \\\"transform: translateX(-100%);\\\");\\r\\n            }\\r\\n            await ns.sleep(1000);\\r\\n        }\\r\\n    }\\r\\n    catch (e) {\\r\\n        ns.tprintf(\\\"ERROR: %s\\\", e);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xvY2suanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJjbG9jay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxJQUFJLE1BQW1CLENBQUM7QUFDeEIsTUFBTSxLQUFLLEdBQWtCLEVBQUUsQ0FBQztBQUVoQyxTQUFTLFFBQVEsQ0FBQyxFQUFNLEVBQUUsRUFBVSxFQUFFLE1BQU0sR0FBRyxJQUFJLEVBQUUsUUFBUSxHQUFHLEtBQUs7SUFDakUsSUFBSSxRQUFRLEdBQUcsRUFBRSxDQUFDO0lBQ2xCLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxHQUFHLENBQUMsSUFBSSxHQUFHLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ2hELFFBQVEsSUFBSSxLQUFLLEdBQUcsQ0FBQyxJQUFJLEdBQUcsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDO0lBQ3JDLE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxHQUFHLENBQUMsSUFBSSxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDbkQsUUFBUSxJQUFJLE9BQU8sR0FBRyxDQUFDLElBQUksR0FBRyxFQUFFLENBQUMsQ0FBQztJQUNsQyxNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsQ0FBQztJQUM1QyxRQUFRLElBQUksT0FBTyxHQUFHLElBQUksQ0FBQztJQUMzQixNQUFNLFlBQVksR0FBRyxRQUFRLENBQUM7SUFFOUIsSUFBSSxNQUFNLEVBQUU7UUFDUixJQUFJLEtBQUssR0FBRyxDQUFDLElBQUksUUFBUTtZQUFFLE9BQU8sRUFBRSxDQUFDLE9BQU8sQ0FBQyxvQkFBb0IsRUFBRSxLQUFLLEVBQUUsT0FBTyxFQUFFLE9BQU8sRUFBRSxZQUFZLENBQUMsQ0FBQztRQUMxRyxJQUFJLE9BQU8sR0FBRyxDQUFDO1lBQUUsT0FBTyxFQUFFLENBQUMsT0FBTyxDQUFDLGVBQWUsRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLFlBQVksQ0FBQyxDQUFDO1FBQ3BGLE9BQU8sRUFBRSxDQUFDLE9BQU8sQ0FBQyxVQUFVLEVBQUUsT0FBTyxFQUFFLFlBQVksQ0FBQyxDQUFDO0tBQ3hEO1NBQU07UUFDSCxJQUFJLEtBQUssR0FBRyxDQUFDLElBQUksUUFBUTtZQUFFLE9BQU8sRUFBRSxDQUFDLE9BQU8sQ0FBQyxlQUFlLEVBQUUsS0FBSyxFQUFFLE9BQU8sRUFBRSxPQUFPLENBQUMsQ0FBQztRQUN2RixJQUFJLE9BQU8sR0FBRyxDQUFDO1lBQUUsT0FBTyxFQUFFLENBQUMsT0FBTyxDQUFDLFVBQVUsRUFBRSxPQUFPLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFDakUsT0FBTyxFQUFFLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxPQUFPLENBQUMsQ0FBQztLQUNyQztBQUNMLENBQUM7QUFFRCxTQUFTLFdBQVcsQ0FBQyxPQUFvQixFQUFFLFlBQXlCO0lBQ2hFLElBQUksQ0FBQyxZQUFZLENBQUMsVUFBVTtRQUFFLE1BQU0seUJBQXlCLENBQUE7SUFDN0QsSUFBSSxZQUFZLENBQUMsV0FBVztRQUFFLE9BQU8sWUFBWSxDQUFDLFVBQVUsQ0FBQyxZQUFZLENBQUMsT0FBTyxFQUFFLFlBQVksQ0FBQyxXQUFXLENBQUMsQ0FBQzs7UUFDeEcsT0FBTyxZQUFZLENBQUMsVUFBVSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUM3RCxDQUFDO0FBRUQsU0FBUyxhQUFhO0lBQ2xCLE1BQU0sSUFBSSxHQUFHLFVBQVUsQ0FBQztJQUN4QixNQUFNLEdBQUcsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDN0IsTUFBTSxLQUFLLEdBQUcsR0FBRyxFQUFFLGNBQWMsQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDO0lBQzNELE1BQU0sVUFBVSxHQUFHLEtBQUssRUFBRSxhQUFhLEVBQUUsYUFBYSxDQUFDO0lBRXZELE1BQU0sU0FBUyxHQUFnQixVQUFVLEVBQUUsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBRTNELElBQUksQ0FBQyxVQUFVLElBQUksQ0FBQyxTQUFTO1FBQUUsTUFBTSwyQkFBMkIsQ0FBQztJQUVqRSxNQUFNLE1BQU0sR0FBZ0IsU0FBUyxFQUFFLFFBQVEsQ0FBQyxDQUFDLENBQUMsRUFBRSxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUE7SUFDL0QsSUFBSSxNQUFNLEVBQUU7UUFDUixNQUFNLENBQUMsU0FBUyxHQUFHLEVBQUUsQ0FBQztLQUN6QjtJQUVELE1BQU0sTUFBTSxHQUFnQixTQUFTLEVBQUUsUUFBUSxDQUFDLENBQUMsQ0FBQyxFQUFFLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQTtJQUMvRCxJQUFJLE1BQU0sRUFBRTtRQUNSLE1BQU0sQ0FBQyxTQUFTLEdBQUcsRUFBRSxDQUFDO1FBQ3RCLE1BQU0sQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLENBQUM7S0FDaEM7SUFFRCxJQUFJLE1BQU0sS0FBSyxTQUFTO1FBQUUsTUFBTSxHQUFHLFVBQVUsQ0FBQztJQUU5QyxJQUFJO1FBQ0EsTUFBTSxHQUFHLFdBQVcsQ0FBQyxTQUFTLEVBQUUsTUFBTSxDQUFDLENBQUM7S0FDM0M7SUFBQyxPQUFPLENBQUMsRUFBRTtRQUNSLE1BQU0sR0FBRyxDQUFDLDZCQUE2QixDQUFBO0tBQzFDO0lBRUQsS0FBSyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUV0QixPQUFPLFNBQVMsQ0FBQztBQUNyQixDQUFDO0FBRUQsU0FBUyxTQUFTO0lBQ2QsTUFBTSxJQUFJLEdBQUcsVUFBVSxDQUFDO0lBQ3hCLE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUM3QixNQUFNLEtBQUssR0FBRyxHQUFHLEVBQUUsY0FBYyxDQUFDLHVCQUF1QixDQUFDLENBQUM7SUFDM0QsTUFBTSxVQUFVLEdBQUcsS0FBSyxFQUFFLGFBQWEsRUFBRSxhQUFhLENBQUM7SUFDdkQsTUFBTSxVQUFVLEdBQUcsVUFBVSxFQUFFLGFBQWEsQ0FBQztJQUM3QyxNQUFNLFVBQVUsR0FBRyxVQUFVLEVBQUUsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzNDLE1BQU0sU0FBUyxHQUFnQixVQUFVLEVBQUUsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzNELE1BQU0sS0FBSyxHQUFnQixTQUFTLEVBQUUsUUFBUSxDQUFDLENBQUMsQ0FBQyxFQUFFLFVBQVUsQ0FBQztJQUU5RCxJQUFJLENBQUMsVUFBVSxJQUFJLENBQUMsU0FBUyxJQUFJLENBQUMsS0FBSztRQUFFLE1BQU0sdUJBQXVCLENBQUM7SUFFdkUsSUFBSSxTQUFTLEVBQUUsVUFBVSxDQUFDLENBQUMsQ0FBQztRQUFFLFNBQVMsQ0FBQyxXQUFXLENBQUMsU0FBUyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRTdFLEtBQUssQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDNUIsS0FBSyxDQUFDLFNBQVMsR0FBRyxFQUFFLENBQUM7SUFFckIsSUFBSSxNQUFNLEtBQUssU0FBUztRQUFFLE1BQU0sR0FBRyxVQUFVLENBQUM7SUFFOUMsSUFBSTtRQUNBLE1BQU0sR0FBRyxXQUFXLENBQUMsU0FBUyxFQUFFLE1BQU0sQ0FBQyxDQUFDO0tBQzNDO0lBQUMsT0FBTyxDQUFDLEVBQUU7UUFDUixNQUFNLEdBQUcsQ0FBQyx5QkFBeUIsQ0FBQTtLQUN0QztJQUVELEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7SUFFdEIsT0FBTyxLQUFLLENBQUM7QUFDakIsQ0FBQztBQUVELFNBQVMsU0FBUztJQUNkLE1BQU0sSUFBSSxHQUFHLFVBQVUsQ0FBQztJQUN4QixNQUFNLEdBQUcsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDN0IsTUFBTSxLQUFLLEdBQUcsR0FBRyxDQUFDLGNBQWMsQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDO0lBQzFELE1BQU0sVUFBVSxHQUFHLEtBQUssRUFBRSxhQUFhLEVBQUUsYUFBYSxDQUFDO0lBQ3ZELE1BQU0sVUFBVSxHQUFHLFVBQVUsRUFBRSxhQUFhLENBQUM7SUFDN0MsTUFBTSxVQUFVLEdBQUcsVUFBVSxFQUFFLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUUzQyxNQUFNLFNBQVMsR0FBZ0IsVUFBVSxFQUFFLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUMzRCxNQUFNLE1BQU0sR0FBZ0IsU0FBUyxFQUFFLFFBQVEsQ0FBQyxDQUFDLENBQUMsRUFBRSxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDaEUsTUFBTSxNQUFNLEdBQWdCLFNBQVMsRUFBRSxRQUFRLENBQUMsQ0FBQyxDQUFDLEVBQUUsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRWhFLDJCQUEyQjtJQUMzQixJQUFJLENBQUMsVUFBVSxJQUFJLENBQUMsU0FBUyxJQUFJLENBQUMsTUFBTSxJQUFJLENBQUMsTUFBTTtRQUFFLE1BQU0sdUJBQXVCLENBQUM7SUFFbkYsTUFBTSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUM3QixNQUFNLENBQUMsU0FBUyxHQUFHLEVBQUUsQ0FBQztJQUV0QixNQUFNLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzdCLE1BQU0sQ0FBQyxTQUFTLEdBQUcsRUFBRSxDQUFDO0lBRXRCLElBQUksTUFBTSxLQUFLLFNBQVM7UUFBRSxNQUFNLEdBQUcsVUFBVSxDQUFDO0lBRTlDLElBQUk7UUFDQSxNQUFNLEdBQUcsV0FBVyxDQUFDLFNBQVMsRUFBRSxNQUFNLENBQUMsQ0FBQztLQUMzQztJQUFDLE9BQU8sQ0FBQyxFQUFFO1FBQ1IsTUFBTSxHQUFHLENBQUMseUJBQXlCLENBQUE7S0FDdEM7SUFFRCxLQUFLLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBRXRCLE9BQU8sQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDLENBQUM7QUFDNUIsQ0FBQztBQUVELFNBQVMsV0FBVztJQUNoQixNQUFNLElBQUksR0FBRyxVQUFVLENBQUM7SUFDeEIsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQzdCLE1BQU0sS0FBSyxHQUFHLEdBQUcsQ0FBQyxjQUFjLENBQUMsdUJBQXVCLENBQUMsQ0FBQztJQUUxRCxNQUFNLFVBQVUsR0FBRyxLQUFLLEVBQUUsYUFBYSxFQUFFLGFBQWEsQ0FBQztJQUN2RCxNQUFNLFVBQVUsR0FBRyxVQUFVLEVBQUUsYUFBYSxDQUFDO0lBRTdDLE1BQU0sY0FBYyxHQUFnQixVQUFVLEVBQUUsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRTVELE1BQU0sU0FBUyxHQUFnQixjQUFjLEVBQUUsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBRS9ELE1BQU0sT0FBTyxHQUFnQixTQUFTLEVBQUUsUUFBUSxDQUFDLENBQUMsQ0FBQyxFQUFFLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNqRSxNQUFNLE9BQU8sR0FBZ0IsU0FBUyxFQUFFLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUVwRCwyQkFBMkI7SUFDM0IsSUFBSSxDQUFDLFNBQVMsSUFBSSxDQUFDLE9BQU8sSUFBSSxDQUFDLE9BQU87UUFBRSxNQUFNLHlCQUF5QixDQUFDO0lBRXhFLElBQUksTUFBTSxLQUFLLFNBQVM7UUFBRSxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBRTdDLElBQUk7UUFDQSxNQUFNLEdBQUcsV0FBVyxDQUFDLFNBQVMsRUFBRSxNQUFNLENBQUMsQ0FBQztLQUMzQztJQUFDLE9BQU8sQ0FBQyxFQUFFO1FBQ1IsTUFBTSxHQUFHLENBQUMsMkJBQTJCLENBQUE7S0FDeEM7SUFFRCxLQUFLLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBRXRCLE9BQU8sQ0FBQyxPQUFPLEVBQUUsT0FBTyxDQUFDLENBQUM7QUFDOUIsQ0FBQztBQUVELE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxJQUFJLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsTUFBTSxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUN6QyxJQUFJLElBQUksQ0FBQyxJQUFJLEVBQUU7UUFDWCxFQUFFLENBQUMsTUFBTSxDQUFDLDhFQUE4RSxDQUFDLENBQUM7UUFDMUYsRUFBRSxDQUFDLE1BQU0sQ0FBQyxjQUFjLEVBQUUsQ0FBQyxhQUFhLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDOUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUN0QixFQUFFLENBQUMsTUFBTSxDQUFDLFNBQVMsRUFBRSxDQUFDLGFBQWEsRUFBRSxFQUFFLENBQUMsQ0FBQztRQUN6QyxPQUFPO0tBQ1Y7SUFFRCxFQUFFLENBQUMsTUFBTSxDQUFDO1FBQ04sS0FBSyxNQUFNLElBQUksSUFBSSxLQUFLLEVBQUU7WUFDdEIsSUFBSSxDQUFDLFVBQVUsRUFBRSxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDdEM7SUFDTCxDQUFDLENBQUMsQ0FBQztJQUVILElBQUk7UUFDQSxNQUFNLE9BQU8sR0FBRyxTQUFTLEVBQUUsQ0FBQztRQUM1QixNQUFNLFFBQVEsR0FBRyxTQUFTLEVBQUUsQ0FBQztRQUM3QixNQUFNLFFBQVEsR0FBRyxTQUFTLEVBQUUsQ0FBQztRQUM3QixNQUFNLENBQUMsT0FBTyxFQUFFLFdBQVcsQ0FBQyxHQUFHLFNBQVMsRUFBRSxDQUFDO1FBQzNDLE1BQU0sQ0FBQyxlQUFlLEVBQUUsZUFBZSxDQUFDLEdBQUcsV0FBVyxFQUFFLENBQUM7UUFFekQsYUFBYSxFQUFFLENBQUM7UUFFaEIsTUFBTSxJQUFJLEdBQUcsRUFBRSxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNqQyxJQUFJLFNBQVMsR0FBRyxDQUFDLENBQUM7UUFDbEIsSUFBSSxPQUFPLEdBQUcsSUFBSSxDQUFDO1FBQ25CLElBQUksUUFBUSxHQUFHLElBQUksQ0FBQztRQUNwQixPQUFPLElBQUksRUFBRTtZQUNULElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLEVBQUU7Z0JBQ2YsTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztnQkFDaEQsU0FBUyxHQUFHLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDO2dCQUN4QyxPQUFPLEdBQUcsSUFBSSxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDO2dCQUNsRCxRQUFRLEdBQUcsT0FBTyxHQUFHLFNBQVMsQ0FBQztnQkFFL0IsTUFBTSxJQUFJLEdBQUcsSUFBSSxJQUFJLEVBQUUsQ0FBQztnQkFDeEIsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDO2dCQUUvQixlQUFlO2dCQUNmLDBEQUEwRDtnQkFDMUQsbUVBQW1FO2dCQUNuRSxPQUFPLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxPQUFPLENBQUMsQ0FBQztnQkFFckQseUJBQXlCO2dCQUN6QixRQUFRLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDN0IsUUFBUSxDQUFDLFNBQVMsR0FBRyxHQUFHLEVBQUUsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLFNBQVMsQ0FBQyxJQUFJLENBQUM7Z0JBRTNELDJCQUEyQjtnQkFDM0IsT0FBTyxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQzVCLFdBQVcsQ0FBQyxTQUFTLEdBQUcsUUFBUSxDQUFDLEVBQUUsRUFBRSxPQUFPLEdBQUcsT0FBTyxFQUFFLEtBQUssQ0FBQyxDQUFDO2dCQUUvRCxrQkFBa0I7Z0JBQ2xCLE1BQU0sTUFBTSxHQUFHLE9BQU8sR0FBRyxTQUFTLENBQUM7Z0JBQ25DLE1BQU0sTUFBTSxHQUFHLENBQUMsTUFBTSxHQUFHLFFBQVEsQ0FBQyxHQUFHLEdBQUcsQ0FBQztnQkFDekMsSUFBSSxTQUFTLEdBQUcsR0FBRyxHQUFHLE1BQU0sQ0FBQztnQkFDN0IsSUFBSSxVQUFVLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQztnQkFFcEMsSUFBSSxTQUFTLEtBQUssQ0FBQyxJQUFJLFVBQVUsR0FBRyxHQUFHLEVBQUU7b0JBQ3JDLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztvQkFDYixTQUFTLEdBQUcsR0FBRyxDQUFDO29CQUNoQixVQUFVLEdBQUcsQ0FBQyxDQUFDO2lCQUNsQjtnQkFFRCxlQUFlLENBQUMsWUFBWSxDQUFDLGVBQWUsRUFBRSxHQUFHLFVBQVUsRUFBRSxDQUFDLENBQUM7Z0JBQy9ELGVBQWUsQ0FBQyxZQUFZLENBQUMsT0FBTyxFQUFFLHlCQUF5QixDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDO2FBQzlGO2lCQUFNO2dCQUNILE1BQU0sSUFBSSxHQUFHLElBQUksSUFBSSxFQUFFLENBQUM7Z0JBQ3hCLE9BQU8sQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLGtCQUFrQixDQUFDLE9BQU8sQ0FBQyxDQUFDO2dCQUVyRCxRQUFRLENBQUMsU0FBUyxHQUFHLFdBQVcsQ0FBQztnQkFDakMsUUFBUSxDQUFDLFNBQVMsR0FBRyxFQUFFLENBQUM7Z0JBQ3hCLE9BQU8sQ0FBQyxTQUFTLEdBQUcsRUFBRSxDQUFDO2dCQUN2QixXQUFXLENBQUMsU0FBUyxHQUFHLEVBQUUsQ0FBQztnQkFDM0IsZUFBZSxDQUFDLFlBQVksQ0FBQyxlQUFlLEVBQUUsR0FBRyxDQUFDLENBQUM7Z0JBQ25ELGVBQWUsQ0FBQyxZQUFZLENBQUMsT0FBTyxFQUFFLCtCQUErQixDQUFDLENBQUM7YUFDMUU7WUFFRCxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDeEI7S0FDSjtJQUFDLE9BQU8sQ0FBQyxFQUFFO1FBQ1IsRUFBRSxDQUFDLE9BQU8sQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDLENBQUE7S0FDN0I7QUFDTCxDQUFDIn0=\",\"filename\":\"clock.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"clock.js\",\"url\":\"blob:file:///c42ed634-89fc-4610-8c83-315f04268b9f\",\"moduleSequenceNumber\":58960}],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":137784,\"_hash\":\"98e9a9188b966bec872320b361943e6d79c4d0ad050814831ae6c98688d582d7\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function help(ns) {\\r\\n    ns.tprintf(\\\"Sleeve Modes:\\\");\\r\\n    ns.tprintf(\\\"  h     : show help text\\\");\\r\\n    ns.tprintf(\\\"  all   : all stats\\\");\\r\\n    ns.tprintf(\\\"  hack  : all hack\\\");\\r\\n    ns.tprintf(\\\"  str   : all str\\\");\\r\\n    ns.tprintf(\\\"  def   : all def\\\");\\r\\n    ns.tprintf(\\\"  dex   : all dex\\\");\\r\\n    ns.tprintf(\\\"  agi   : all agi\\\");\\r\\n    ns.tprintf(\\\"  cha   : all cha\\\");\\r\\n    ns.tprintf(\\\"  mug   : all mug\\\");\\r\\n    ns.tprintf(\\\"  hom   : all homicide\\\");\\r\\n    ns.tprintf(\\\"  shock : all shock recovery\\\");\\r\\n}\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[0] === \\\"h\\\" || ns.args[0] === undefined) {\\r\\n        help(ns);\\r\\n        return;\\r\\n    }\\r\\n    switch (ns.args[0]) {\\r\\n        case \\\"all\\\":\\r\\n            ns.sleeve.travel(0, \\\"Sector-12\\\");\\r\\n            ns.sleeve.setToGymWorkout(0, \\\"Powerhouse Gym\\\", \\\"str\\\");\\r\\n            ns.sleeve.travel(1, \\\"Sector-12\\\");\\r\\n            ns.sleeve.setToGymWorkout(1, \\\"Powerhouse Gym\\\", \\\"def\\\");\\r\\n            ns.sleeve.travel(2, \\\"Sector-12\\\");\\r\\n            ns.sleeve.setToGymWorkout(2, \\\"Powerhouse Gym\\\", \\\"dex\\\");\\r\\n            ns.sleeve.travel(3, \\\"Sector-12\\\");\\r\\n            ns.sleeve.setToGymWorkout(3, \\\"Powerhouse Gym\\\", \\\"agi\\\");\\r\\n            ns.sleeve.travel(4, \\\"Volhaven\\\");\\r\\n            ns.sleeve.setToUniversityCourse(4, \\\"ZB Institute of Technology\\\", \\\"Algorithms\\\");\\r\\n            ns.sleeve.travel(5, \\\"Volhaven\\\");\\r\\n            ns.sleeve.setToUniversityCourse(5, \\\"ZB Institute of Technology\\\", \\\"Leadership\\\");\\r\\n            break;\\r\\n        case \\\"hack\\\":\\r\\n            for (let i = 0; i < ns.sleeve.getNumSleeves(); i++) {\\r\\n                ns.sleeve.travel(i, \\\"Volhaven\\\");\\r\\n                ns.sleeve.setToUniversityCourse(i, \\\"ZB Institute of Technology\\\", \\\"Algorithms\\\");\\r\\n            }\\r\\n            break;\\r\\n        case \\\"cha\\\":\\r\\n            for (let i = 0; i < ns.sleeve.getNumSleeves(); i++) {\\r\\n                ns.sleeve.travel(i, \\\"Volhaven\\\");\\r\\n                ns.sleeve.setToUniversityCourse(i, \\\"ZB Institute of Technology\\\", \\\"Leadership\\\");\\r\\n            }\\r\\n            break;\\r\\n        case \\\"str\\\":\\r\\n        case \\\"def\\\":\\r\\n        case \\\"dex\\\":\\r\\n        case \\\"agi\\\":\\r\\n            for (let i = 0; i < ns.sleeve.getNumSleeves(); i++) {\\r\\n                ns.sleeve.travel(i, \\\"Sector-12\\\");\\r\\n                ns.sleeve.setToGymWorkout(i, \\\"Powerhouse Gym\\\", ns.args[0]);\\r\\n            }\\r\\n            break;\\r\\n        case \\\"mug\\\":\\r\\n            for (let i = 0; i < ns.sleeve.getNumSleeves(); i++) {\\r\\n                ns.sleeve.setToCommitCrime(i, \\\"Mug\\\");\\r\\n            }\\r\\n            break;\\r\\n        case \\\"hom\\\":\\r\\n            for (let i = 0; i < ns.sleeve.getNumSleeves(); i++) {\\r\\n                ns.sleeve.setToCommitCrime(i, \\\"Homicide\\\");\\r\\n            }\\r\\n            break;\\r\\n        case \\\"shock\\\":\\r\\n            for (let i = 0; i < ns.sleeve.getNumSleeves(); i++) {\\r\\n                ns.sleeve.setToShockRecovery(i);\\r\\n            }\\r\\n            break;\\r\\n        default:\\r\\n            ns.tprintf(`ERROR: Unknown sleeve mode: ${ns.args[0]}`);\\r\\n            help(ns);\\r\\n            break;\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2xlZXZlLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsic2xlZXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLFNBQVMsSUFBSSxDQUFDLEVBQU07SUFDaEIsRUFBRSxDQUFDLE9BQU8sQ0FBQyxlQUFlLENBQUMsQ0FBQztJQUM1QixFQUFFLENBQUMsT0FBTyxDQUFDLDBCQUEwQixDQUFDLENBQUM7SUFDdkMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDO0lBQ2xDLEVBQUUsQ0FBQyxPQUFPLENBQUMsb0JBQW9CLENBQUMsQ0FBQztJQUNqQyxFQUFFLENBQUMsT0FBTyxDQUFDLG1CQUFtQixDQUFDLENBQUM7SUFDaEMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO0lBQ2hDLEVBQUUsQ0FBQyxPQUFPLENBQUMsbUJBQW1CLENBQUMsQ0FBQztJQUNoQyxFQUFFLENBQUMsT0FBTyxDQUFDLG1CQUFtQixDQUFDLENBQUM7SUFDaEMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO0lBQ2hDLEVBQUUsQ0FBQyxPQUFPLENBQUMsbUJBQW1CLENBQUMsQ0FBQztJQUNoQyxFQUFFLENBQUMsT0FBTyxDQUFDLHdCQUF3QixDQUFDLENBQUM7SUFDckMsRUFBRSxDQUFDLE9BQU8sQ0FBQyw4QkFBOEIsQ0FBQyxDQUFDO0FBQy9DLENBQUM7QUFFRCxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFPO0lBQzlCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxHQUFHLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxTQUFTLEVBQUU7UUFDaEQsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ1QsT0FBTztLQUNWO0lBRUQsUUFBUSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FB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\",\"filename\":\"sleeve.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"sleeve.js\",\"url\":\"blob:file:///8d725fd5-eaf1-4417-80ae-24a9417e2985\",\"moduleSequenceNumber\":59027}],\"dependents\":[],\"ramUsage\":25.6,\"server\":\"home\",\"moduleSequenceNumber\":137814,\"_hash\":\"bc329d9f69aefe7a4d3b914632ff36613092b6f46e039751604af08b0067292a\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"sleeve.travel\",\"cost\":4},{\"type\":\"fn\",\"name\":\"sleeve.setToGymWorkout\",\"cost\":4},{\"type\":\"fn\",\"name\":\"sleeve.setToUniversityCourse\",\"cost\":4},{\"type\":\"fn\",\"name\":\"sleeve.getNumSleeves\",\"cost\":4},{\"type\":\"fn\",\"name\":\"sleeve.setToCommitCrime\",\"cost\":4},{\"type\":\"fn\",\"name\":\"sleeve.setToShockRecovery\",\"cost\":4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { cleanLogs, stFormat } from \\\"bbutil\\\";\\r\\nvar HSUpgradeType;\\r\\n(function (HSUpgradeType) {\\r\\n    HSUpgradeType[\\\"LEVEL\\\"] = \\\"LEVEL\\\";\\r\\n    HSUpgradeType[\\\"RAM\\\"] = \\\"RAM\\\";\\r\\n    HSUpgradeType[\\\"CORES\\\"] = \\\"CORES\\\";\\r\\n    HSUpgradeType[\\\"CACHE\\\"] = \\\"CACHE\\\";\\r\\n    HSUpgradeType[\\\"SERVER\\\"] = \\\"SERVER\\\";\\r\\n})(HSUpgradeType || (HSUpgradeType = {}));\\r\\nclass ExtendedNodeStats {\\r\\n    name;\\r\\n    level;\\r\\n    ram;\\r\\n    ramUsed;\\r\\n    cores;\\r\\n    cache;\\r\\n    hashCapacity;\\r\\n    production;\\r\\n    timeOnline;\\r\\n    totalCost;\\r\\n    totalValue;\\r\\n    constructor(stats) {\\r\\n        this.name = stats.name;\\r\\n        this.level = stats.level;\\r\\n        this.ram = stats.ram;\\r\\n        this.ramUsed = stats.ramUsed;\\r\\n        this.cores = stats.cores;\\r\\n        this.cache = stats.cache;\\r\\n        this.hashCapacity = stats.hashCapacity;\\r\\n        this.production = stats.production;\\r\\n        this.timeOnline = stats.timeOnline;\\r\\n        this.totalCost = 0;\\r\\n        this.totalValue = 0;\\r\\n    }\\r\\n    updateProduction(ns, zeroRamUsed = true) {\\r\\n        this.production = ns.formulas.hacknetServers.hashGainRate(this.level, zeroRamUsed ? 0 : this.ramUsed, this.ram, this.cores, ns.getPlayer().hacknet_node_money_mult);\\r\\n    }\\r\\n}\\r\\nclass HSUpgrade {\\r\\n    id;\\r\\n    type;\\r\\n    upgradeCost = 0;\\r\\n    upgradeProductionTotal = 0;\\r\\n    cacheIncrease = 0;\\r\\n    cacheCostPerHash = 0;\\r\\n    upgradeProductionIncrease = 0;\\r\\n    upgradeCashProduction = 0;\\r\\n    upgradePayoffTime = 0;\\r\\n    upgradeValue = 0;\\r\\n    constructor(ns, id, type, _stats) {\\r\\n        const hashBuyCost = ns.hacknet.hashCost(\\\"Sell for Money\\\");\\r\\n        const prodMult = ns.getPlayer().hacknet_node_money_mult;\\r\\n        const coreCostMult = ns.getPlayer().hacknet_node_core_cost_mult;\\r\\n        const levelCostMult = ns.getPlayer().hacknet_node_level_cost_mult;\\r\\n        const ramCostMult = ns.getPlayer().hacknet_node_ram_cost_mult;\\r\\n        let stats;\\r\\n        if (_stats)\\r\\n            stats = _stats;\\r\\n        else {\\r\\n            stats = new ExtendedNodeStats(ns.hacknet.getNodeStats(id));\\r\\n            stats.ramUsed = 0;\\r\\n            stats.updateProduction(ns);\\r\\n        }\\r\\n        this.id = id;\\r\\n        this.type = type;\\r\\n        switch (this.type) {\\r\\n            case HSUpgradeType.LEVEL: {\\r\\n                this.upgradeCost = ns.formulas.hacknetServers.levelUpgradeCost(stats.level, 1, levelCostMult);\\r\\n                this.upgradeProductionTotal = ns.formulas.hacknetServers.hashGainRate(stats.level + 1, 0, stats.ram, stats.cores, prodMult);\\r\\n                break;\\r\\n            }\\r\\n            case HSUpgradeType.RAM: {\\r\\n                this.upgradeCost = ns.formulas.hacknetServers.ramUpgradeCost(stats.ram, 1, ramCostMult);\\r\\n                this.upgradeProductionTotal = ns.formulas.hacknetServers.hashGainRate(stats.level, 0, stats.ram * 2, stats.cores, prodMult);\\r\\n                break;\\r\\n            }\\r\\n            case HSUpgradeType.CORES: {\\r\\n                this.upgradeCost = ns.formulas.hacknetServers.coreUpgradeCost(stats.cores, 1, coreCostMult);\\r\\n                this.upgradeProductionTotal = ns.formulas.hacknetServers.hashGainRate(stats.level, 0, stats.ram, stats.cores + 1, prodMult);\\r\\n                break;\\r\\n            }\\r\\n            case HSUpgradeType.CACHE: {\\r\\n                this.upgradeCost = ns.formulas.hacknetServers.cacheUpgradeCost(stats.cache);\\r\\n                this.upgradeProductionTotal = stats.production;\\r\\n                this.cacheIncrease = stats.cache;\\r\\n                this.cacheCostPerHash = this.upgradeCost / this.cacheIncrease;\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n        this.upgradeProductionIncrease = this.upgradeProductionTotal - stats.production;\\r\\n        this.upgradeCashProduction = (this.upgradeProductionTotal / hashBuyCost) * 1000000;\\r\\n        this.upgradePayoffTime = (this.upgradeCost / this.upgradeCashProduction) * 1000;\\r\\n        this.upgradeValue = this.upgradeProductionIncrease / this.upgradeCost;\\r\\n    }\\r\\n    toString(ns, totalProduction) {\\r\\n        const hashBuyCost = ns.hacknet.hashCost(\\\"Sell for Money\\\");\\r\\n        const totalUpgradeCashProduction = ((totalProduction + this.upgradeProductionIncrease) / hashBuyCost) * 1000000;\\r\\n        const totalUpgradePayoffTime = (this.upgradeCost / totalUpgradeCashProduction) * 1000;\\r\\n        return ns.sprintf(\\\"%02d => %6s %9s +%s h/s %6s %5.2f h/s/$bn\\\", this.id, this.type, ns.nFormat(this.upgradeCost, \\\"($0.000a)\\\"), // cost\\r\\n        ns.nFormat(this.upgradeProductionIncrease, \\\"(0.000a)\\\"), // hash increase\\r\\n        stFormat(ns, totalUpgradePayoffTime), // upgrade payoff time\\r\\n        this.upgradeValue * 1000000000);\\r\\n    }\\r\\n    buy(ns) {\\r\\n        const hashBuyCost = ns.hacknet.hashCost(\\\"Sell for Money\\\");\\r\\n        const numHashBuys = Math.floor(ns.hacknet.numHashes() / hashBuyCost);\\r\\n        const effectiveMoneyAvailable = ns.getPlayer().money + numHashBuys * 1000000;\\r\\n        if (effectiveMoneyAvailable < this.upgradeCost) {\\r\\n            ns.print(\\\"WARNING: Attempted to buy an upgrade you can't afford\\\");\\r\\n            return false;\\r\\n        }\\r\\n        while (ns.getPlayer().money < this.upgradeCost) {\\r\\n            ns.hacknet.spendHashes(\\\"Sell for Money\\\");\\r\\n        }\\r\\n        switch (this.type) {\\r\\n            case HSUpgradeType.LEVEL: {\\r\\n                return ns.hacknet.upgradeLevel(this.id, 1);\\r\\n            }\\r\\n            case HSUpgradeType.RAM: {\\r\\n                return ns.hacknet.upgradeRam(this.id, 1);\\r\\n            }\\r\\n            case HSUpgradeType.CORES: {\\r\\n                return ns.hacknet.upgradeCore(this.id, 1);\\r\\n            }\\r\\n            case HSUpgradeType.CACHE: {\\r\\n                return ns.hacknet.upgradeCache(this.id, 1);\\r\\n            }\\r\\n            case HSUpgradeType.SERVER: {\\r\\n                return ns.hacknet.purchaseNode();\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\nfunction generateNewServerValue(ns) {\\r\\n    const stats = new ExtendedNodeStats(ns.hacknet.getNodeStats(0));\\r\\n    stats.cache = 1;\\r\\n    stats.cores = 1;\\r\\n    stats.hashCapacity = 64;\\r\\n    stats.level = 1;\\r\\n    stats.ram = 1;\\r\\n    stats.timeOnline = 1;\\r\\n    stats.totalCost = ns.hacknet.getPurchaseNodeCost();\\r\\n    stats.updateProduction(ns);\\r\\n    // ns.tprintf(\\\"New Server Production: %s\\\", stats.production);\\r\\n    // ns.tprintf(\\\"New Server Cost: %s\\\", ns.nFormat(stats.totalCost, \\\"($0.000a)\\\"));\\r\\n    // ns.tprintf(\\\"New Server Total Value: %.2f h/s/$bn\\\", (stats.production / stats.totalCost) * 1000000000);\\r\\n    let bestUpgrade;\\r\\n    while (true) {\\r\\n        const hashServerUpgrades = Object.keys(HSUpgradeType)\\r\\n            .map((key) => new HSUpgrade(ns, ns.hacknet.numNodes(), HSUpgradeType[key], stats))\\r\\n            .sort((a, b) => b.upgradeValue - a.upgradeValue);\\r\\n        const newBestUpgrade = hashServerUpgrades[0];\\r\\n        switch (newBestUpgrade.type) {\\r\\n            case HSUpgradeType.CORES:\\r\\n                stats.cores += 1;\\r\\n                break;\\r\\n            case HSUpgradeType.LEVEL:\\r\\n                stats.level += 1;\\r\\n                break;\\r\\n            case HSUpgradeType.RAM:\\r\\n                stats.ram *= 2;\\r\\n                break;\\r\\n        }\\r\\n        const newProduction = ns.formulas.hacknetServers.hashGainRate(stats.level, 0, stats.ram, stats.cores, ns.getPlayer().hacknet_node_money_mult);\\r\\n        const newCost = stats.totalCost + newBestUpgrade.upgradeCost;\\r\\n        const newValue = newProduction / newCost;\\r\\n        if (newValue < stats.totalValue)\\r\\n            break;\\r\\n        stats.production = newProduction;\\r\\n        stats.totalCost = newCost;\\r\\n        stats.totalValue = newValue;\\r\\n        bestUpgrade = newBestUpgrade;\\r\\n        // ns.tprintf(\\r\\n        //     \\\"%s => Total Value: %s\\\",\\r\\n        //     hashServerUpgrades[0].toString(ns, stats.production),\\r\\n        //     stats.totalValue * 1000000000\\r\\n        // );\\r\\n        const checkStats = ns.hacknet.getNodeStats(0);\\r\\n        if (stats.cores >= checkStats.cores && stats.level >= checkStats.level && stats.ram >= checkStats.ram)\\r\\n            break;\\r\\n    }\\r\\n    if (bestUpgrade === undefined)\\r\\n        return bestUpgrade;\\r\\n    bestUpgrade.upgradeCost = ns.hacknet.getPurchaseNodeCost();\\r\\n    bestUpgrade.upgradeValue = stats.totalValue;\\r\\n    bestUpgrade.type = HSUpgradeType.SERVER;\\r\\n    bestUpgrade.upgradeProductionIncrease = stats.production;\\r\\n    return bestUpgrade;\\r\\n}\\r\\nexport async function main(ns) {\\r\\n    cleanLogs(ns);\\r\\n    let prodCalc = 0;\\r\\n    for (let idx = 0; idx < ns.hacknet.numNodes(); idx++) {\\r\\n        const stats = ns.hacknet.getNodeStats(idx);\\r\\n        stats.ramUsed = 0;\\r\\n        stats.production = ns.formulas.hacknetServers.hashGainRate(stats.level, 0, stats.ram, stats.cores, ns.getPlayer().hacknet_node_money_mult);\\r\\n        prodCalc += stats.production;\\r\\n    }\\r\\n    const prodIncome = (prodCalc / ns.hacknet.hashCost(\\\"Sell for Money\\\")) * 1000000;\\r\\n    ns.tprintf(\\\"Income: %.2f h/s | %s/s\\\", prodCalc, ns.nFormat(prodIncome, \\\"($0.000a)\\\"));\\r\\n    if (ns.hacknet.numNodes() === 0) {\\r\\n        ns.print(ns.sprintf(\\\"%s | 0 hacknet nodes available, waiting for funds to buy one for %s\\\", new Date().toLocaleTimeString(\\\"it-IT\\\"), ns.nFormat(ns.hacknet.getPurchaseNodeCost(), \\\"($0.000a)\\\")));\\r\\n    }\\r\\n    while (ns.hacknet.numNodes() === 0) {\\r\\n        if (ns.getPlayer().money >= ns.hacknet.getPurchaseNodeCost()) {\\r\\n            ns.hacknet.purchaseNode();\\r\\n        }\\r\\n        else {\\r\\n            await ns.sleep(1000);\\r\\n        }\\r\\n    }\\r\\n    let buyServerUpgrade = generateNewServerValue(ns);\\r\\n    if (ns.args[0]) {\\r\\n        let hashServerUpgrades = [];\\r\\n        if (buyServerUpgrade !== undefined)\\r\\n            hashServerUpgrades.push(buyServerUpgrade);\\r\\n        let totalProduction = 0;\\r\\n        for (let idx = 0; idx < ns.hacknet.numNodes(); idx++) {\\r\\n            const stats = new ExtendedNodeStats(ns.hacknet.getNodeStats(idx));\\r\\n            stats.ramUsed = 0;\\r\\n            stats.updateProduction(ns);\\r\\n            Object.keys(HSUpgradeType).forEach((key) => {\\r\\n                if (key !== \\\"CACHE\\\" && key != \\\"SERVER\\\")\\r\\n                    hashServerUpgrades.push(new HSUpgrade(ns, idx, HSUpgradeType[key], stats));\\r\\n            });\\r\\n            totalProduction += stats.production;\\r\\n        }\\r\\n        hashServerUpgrades = hashServerUpgrades.sort((a, b) => b.upgradeValue - a.upgradeValue).filter(a => (a.upgradeValue * 1000000000) > 0.15);\\r\\n        for (const upg of hashServerUpgrades)\\r\\n            ns.tprintf(upg.toString(ns, totalProduction));\\r\\n        return;\\r\\n    }\\r\\n    while (true) {\\r\\n        let hashServerUpgrades = [];\\r\\n        if (buyServerUpgrade !== undefined)\\r\\n            hashServerUpgrades.push(buyServerUpgrade);\\r\\n        let totalProduction = 0;\\r\\n        for (let idx = 0; idx < ns.hacknet.numNodes(); idx++) {\\r\\n            const stats = new ExtendedNodeStats(ns.hacknet.getNodeStats(idx));\\r\\n            stats.ramUsed = 0;\\r\\n            stats.updateProduction(ns);\\r\\n            Object.keys(HSUpgradeType).forEach((key) => {\\r\\n                if (key !== \\\"CACHE\\\" && key != \\\"SERVER\\\")\\r\\n                    hashServerUpgrades.push(new HSUpgrade(ns, idx, HSUpgradeType[key], stats));\\r\\n            });\\r\\n            totalProduction += stats.production;\\r\\n        }\\r\\n        hashServerUpgrades = hashServerUpgrades.sort((a, b) => b.upgradeValue - a.upgradeValue).filter(a => (a.upgradeValue * 1000000000) > 0.15);\\r\\n        const targetUpgrade = hashServerUpgrades[0];\\r\\n        if (targetUpgrade) {\\r\\n            const hashBuyCost = ns.hacknet.hashCost(\\\"Sell for Money\\\");\\r\\n            let numHashBuys = Math.floor(ns.hacknet.numHashes() / hashBuyCost);\\r\\n            let effectiveMoneyAvailable = ns.getPlayer().money + numHashBuys * 1000000;\\r\\n            ns.print(ns.sprintf(\\\"%s | %s\\\", new Date().toLocaleTimeString(\\\"it-IT\\\"), targetUpgrade.toString(ns, totalProduction)));\\r\\n            while (effectiveMoneyAvailable < targetUpgrade.upgradeCost) {\\r\\n                numHashBuys = Math.floor(ns.hacknet.numHashes() / hashBuyCost);\\r\\n                effectiveMoneyAvailable = ns.getPlayer().money + numHashBuys * 1000000;\\r\\n                while (ns.hacknet.numHashes() > ns.hacknet.hashCost(\\\"Sell for Money\\\"))\\r\\n                    ns.hacknet.spendHashes(\\\"Sell for Money\\\");\\r\\n                await ns.sleep(1000);\\r\\n            }\\r\\n            targetUpgrade.buy(ns);\\r\\n        }\\r\\n        else {\\r\\n            while (ns.hacknet.numHashes() > ns.hacknet.hashCost(\\\"Sell for Money\\\"))\\r\\n                ns.hacknet.spendHashes(\\\"Sell for Money\\\");\\r\\n            await ns.sleep(1000);\\r\\n        }\\r\\n        buyServerUpgrade = generateNewServerValue(ns);\\r\\n        await ns.sleep(20);\\r\\n    }\\r\\n    ns.print(ns.sprintf(\\\"%s | Leeching...\\\", new Date().toLocaleTimeString(\\\"it-IT\\\")));\\r\\n    while (true) {\\r\\n        while (ns.hacknet.numHashes() > ns.hacknet.hashCost(\\\"Sell for Money\\\"))\\r\\n            ns.hacknet.spendHashes(\\\"Sell for Money\\\");\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n    while (true) {\\r\\n        //let studyCost = ns.hacknet.hashCost(\\\"Increase Maximum Money\\\");\\r\\n        const studyCost = ns.hacknet.hashCost(\\\"Improve Studying\\\");\\r\\n        while (ns.hacknet.hashCapacity() < studyCost) {\\r\\n            while (ns.hacknet.numHashes() > ns.hacknet.hashCost(\\\"Sell for Money\\\"))\\r\\n                ns.hacknet.spendHashes(\\\"Sell for Money\\\");\\r\\n            // find the cheapest cache upgrade and attempt to buy it\\r\\n            let targetIdx = -1;\\r\\n            let targetIdxCost = Number.MAX_SAFE_INTEGER;\\r\\n            for (let idx = 0; idx < ns.hacknet.numNodes(); idx++) {\\r\\n                const idxCost = ns.hacknet.getCacheUpgradeCost(idx, 1);\\r\\n                if (idxCost < targetIdxCost) {\\r\\n                    targetIdx = idx;\\r\\n                    targetIdxCost = idxCost;\\r\\n                }\\r\\n            }\\r\\n            if (ns.getPlayer().money > targetIdxCost) {\\r\\n                ns.hacknet.upgradeCache(targetIdx, 1);\\r\\n                continue;\\r\\n            }\\r\\n            await ns.sleep(1000);\\r\\n        }\\r\\n        while (ns.hacknet.numHashes() < studyCost)\\r\\n            await ns.sleep(1000);\\r\\n        //ns.hacknet.spendHashes(\\\"Increase Maximum Money\\\", \\\"phantasy\\\");\\r\\n        ns.hacknet.spendHashes(\\\"Improve Studying\\\");\\r\\n        await ns.sleep(20);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFja25ldC5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImhhY2tuZXQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLFNBQVMsRUFBRSxRQUFRLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFFN0MsSUFBSyxhQU1KO0FBTkQsV0FBSyxhQUFhO0lBQ2QsZ0NBQWUsQ0FBQTtJQUNmLDRCQUFXLENBQUE7SUFDWCxnQ0FBZSxDQUFBO0lBQ2YsZ0NBQWUsQ0FBQTtJQUNmLGtDQUFpQixDQUFBO0FBQ3JCLENBQUMsRUFOSSxhQUFhLEtBQWIsYUFBYSxRQU1qQjtBQUVELE1BQU0saUJBQWlCO0lBQ25CLElBQUksQ0FBUztJQUNiLEtBQUssQ0FBUztJQUNkLEdBQUcsQ0FBUztJQUNaLE9BQU8sQ0FBUztJQUNoQixLQUFLLENBQVM7SUFDZCxLQUFLLENBQVM7SUFDZCxZQUFZLENBQVM7SUFDckIsVUFBVSxDQUFTO0lBQ25CLFVBQVUsQ0FBUztJQUNuQixTQUFTLENBQVM7SUFDbEIsVUFBVSxDQUFTO0lBRW5CLFlBQVksS0FBZ0I7UUFDeEIsSUFBSSxDQUFDLElBQUksR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDO1FBQ3ZCLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQztRQUN6QixJQUFJLENBQUMsR0FBRyxHQUFHLEtBQUssQ0FBQyxHQUFHLENBQUM7UUFDckIsSUFBSSxDQUFDLE9BQU8sR0FBRyxLQUFLLENBQUMsT0FBTyxDQUFDO1FBQzdCLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQztRQUN6QixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUM7UUFDekIsSUFBSSxDQUFDLFlBQVksR0FBRyxLQUFLLENBQUMsWUFBWSxDQUFDO1FBQ3ZDLElBQUksQ0FBQyxVQUFVLEdBQUcsS0FBSyxDQUFDLFVBQVUsQ0FBQztR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\",\"filename\":\"hacknet.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"bbutil.js\",\"url\":\"blob:file:///d471e2f1-0b57-4e0a-a1ef-d73a89b5f611\",\"moduleSequenceNumber\":137774},{\"filename\":\"hacknet.js\",\"url\":\"blob:file:///9c1baef7-53a1-4c22-9ded-ac3c55fd2d05\",\"moduleSequenceNumber\":137828}],\"dependents\":[],\"ramUsage\":8.6,\"server\":\"home\",\"moduleSequenceNumber\":137828,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"stock.buy\",\"cost\":2.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// Reduce Minimum Security\\r\\n// Increase Maximum Money\\r\\n// Generate Coding Contract\\r\\n// Sell for Money\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        while (ns.hacknet.numHashes() > ns.hacknet.hashCost(\\\"Sell for Money\\\"))\\r\\n            ns.hacknet.spendHashes(\\\"Sell for Money\\\");\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n    while (true) {\\r\\n        const studyCost = ns.hacknet.hashCost(\\\"Increase Maximum Money\\\");\\r\\n        while (ns.hacknet.hashCapacity() < studyCost) {\\r\\n            while (ns.hacknet.numHashes() > ns.hacknet.hashCost(\\\"Sell for Money\\\"))\\r\\n                ns.hacknet.spendHashes(\\\"Sell for Money\\\");\\r\\n            // find the cheapest cache upgrade and attempt to buy it\\r\\n            let targetIdx = -1;\\r\\n            let targetIdxCost = Number.MAX_SAFE_INTEGER;\\r\\n            for (let idx = 0; idx < ns.hacknet.numNodes(); idx++) {\\r\\n                const idxCost = ns.hacknet.getCacheUpgradeCost(idx, 1);\\r\\n                if (idxCost < targetIdxCost) {\\r\\n                    targetIdx = idx;\\r\\n                    targetIdxCost = idxCost;\\r\\n                }\\r\\n            }\\r\\n            if (ns.getPlayer().money > targetIdxCost) {\\r\\n                ns.hacknet.upgradeCache(targetIdx, 1);\\r\\n                continue;\\r\\n            }\\r\\n            await ns.sleep(1000);\\r\\n        }\\r\\n        while (ns.hacknet.numHashes() < studyCost)\\r\\n            await ns.sleep(1000);\\r\\n        ns.hacknet.spendHashes(\\\"Increase Maximum Money\\\", \\\"ecorp\\\");\\r\\n        await ns.sleep(20);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGVlY2guanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsZWVjaC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSwwQkFBMEI7QUFDMUIseUJBQXlCO0FBQ3pCLDJCQUEyQjtBQUMzQixpQkFBaUI7QUFFakIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixPQUFPLElBQUksRUFBRTtRQUNULE9BQU8sRUFBRSxDQUFDLE9BQU8sQ0FBQyxTQUFTLEVBQUUsR0FBRyxFQUFFLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxnQkFBZ0IsQ0FBQztZQUFFLEVBQUUsQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLGdCQUFnQixDQUFDLENBQUM7UUFDaEgsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO0tBQ3hCO0lBRUQsT0FBTyxJQUFJLEVBQUU7UUFDVCxNQUFNLFNBQVMsR0FBRyxFQUFFLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDO1FBRWhFLE9BQU8sRUFBRSxDQUFDLE9BQU8sQ0FBQyxZQUFZLEVBQUUsR0FBRyxTQUFTLEVBQUU7WUFDMUMsT0FBTyxFQUFFLENBQUMsT0FBTyxDQUFDLFNBQVMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLGdCQUFnQixDQUFDO2dCQUNqRSxFQUFFLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1lBRTdDLHdEQUF3RDtZQUN4RCxJQUFJLFNBQVMsR0FBRyxDQUFDLENBQUMsQ0FBQztZQUNuQixJQUFJLGFBQWEsR0FBRyxNQUFNLENBQUMsZ0JBQWdCLENBQUM7WUFDNUMsS0FBSyxJQUFJLEdBQUcsR0FBRyxDQUFDLEVBQUUsR0FBRyxHQUFHLEVBQUUsQ0FBQyxPQUFPLENBQUMsUUFBUSxFQUFFLEVBQUUsR0FBRyxFQUFFLEVBQUU7Z0JBQ2xELE1BQU0sT0FBTyxHQUFHLEVBQUUsQ0FBQyxPQUFPLENBQUMsbUJBQW1CLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDO2dCQUN2RCxJQUFJLE9BQU8sR0FBRyxhQUFhLEVBQUU7b0JBQ3pCLFNBQVMsR0FBRyxHQUFHLENBQUM7b0JBQ2hCLGFBQWEsR0FBRyxPQUFPLENBQUM7aUJBQzNCO2FBQ0o7WUFFRCxJQUFJLEVBQUUsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxLQUFLLEdBQUcsYUFBYSxFQUFFO2dCQUN0QyxFQUFFLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxTQUFTLEVBQUUsQ0FBQyxDQUFDLENBQUM7Z0JBQ3RDLFNBQVM7YUFDWjtZQUVELE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUN4QjtRQUVELE9BQU8sRUFBRSxDQUFDLE9BQU8sQ0FBQyxTQUFTLEVBQUUsR0FBRyxTQUFTO1lBQUUsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBRWhFLEVBQUUsQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLHdCQUF3QixFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBRTFELE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQztLQUN0QjtBQUNMLENBQUMifQ==\",\"filename\":\"leech.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"leech.js\",\"url\":\"blob:file:///04d68cf9-8497-45d3-92e5-e1ff8371d950\",\"moduleSequenceNumber\":137829}],\"dependents\":[],\"ramUsage\":6.1,\"server\":\"home\",\"moduleSequenceNumber\":137829,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\twhile (true) {\\n\\t\\tawait ns.share()\\n\\t}\\n}\",\"filename\":\"share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///65463fec-292a-420d-91a4-b3b7bff43319\",\"moduleSequenceNumber\":50797}],\"dependents\":[],\"ramUsage\":4,\"server\":\"home\",\"moduleSequenceNumber\":58869,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.disableLog(\\\"sleep\\\");\\r\\n    // const crimes = [\\r\\n    //     \\\"shoplift\\\",\\r\\n    //     \\\"rob store\\\",\\r\\n    //     \\\"mug\\\",\\r\\n    //     \\\"larceny\\\",\\r\\n    //     \\\"drugs\\\",\\r\\n    //     \\\"bond forge\\\",\\r\\n    //     \\\"traffick arms\\\",\\r\\n    //     \\\"homicide\\\",\\r\\n    //     \\\"grand auto\\\",\\r\\n    //     \\\"kidnap\\\",\\r\\n    //     \\\"assassinate\\\",\\r\\n    //     \\\"heist\\\",\\r\\n    // ];\\r\\n    // for (const crimename of crimes) {\\r\\n    //     const crimeStats = ns.getCrimeStats(crimename);\\r\\n    //     ns.tprintf(\\\"%16s  %9s %5s %9s/s\\\", crimeStats.name, ns.nFormat(crimeStats.money, \\\"($0.000a)\\\"), stFormat(ns, crimeStats.time, false), ns.nFormat(crimeStats.money / (crimeStats.time / 1000), \\\"($0.000a)\\\"));\\r\\n    // }\\r\\n    let dynamic = true;\\r\\n    let crime = \\\"shoplift\\\";\\r\\n    if (ns.args[0]) {\\r\\n        crime = ns.args[0].toString();\\r\\n        dynamic = false;\\r\\n    }\\r\\n    while (true) {\\r\\n        if (dynamic) {\\r\\n            if (ns.getCrimeChance(\\\"mug\\\") > 0.7)\\r\\n                crime = \\\"mug\\\";\\r\\n            if (ns.getCrimeChance(\\\"homicide\\\") > 0.7)\\r\\n                crime = \\\"homicide\\\";\\r\\n        }\\r\\n        // (!ns.getPlayer().factions.includes(\\\"NiteSec\\\")) {\\r\\n        await ns.sleep(ns.commitCrime(crime) + 200);\\r\\n        // let allFactions = ns.getPlayer().factions.concat(ns.checkFactionInvitations());\\r\\n        // if (allFactions.includes(\\\"NiteSec\\\")) {\\r\\n        //     ns.joinFaction(\\\"NiteSec\\\")\\r\\n        // }\\r\\n    }\\r\\n    ns.workForFaction(\\\"NiteSec\\\", \\\"Field Work\\\");\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JpbWUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJjcmltZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLEVBQUUsQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLENBQUM7SUFFdkIsbUJBQW1CO0lBQ25CLGtCQUFrQjtJQUNsQixtQkFBbUI7SUFDbkIsYUFBYTtJQUNiLGlCQUFpQjtJQUNqQixlQUFlO0lBQ2Ysb0JBQW9CO0lBQ3BCLHVCQUF1QjtJQUN2QixrQkFBa0I7SUFDbEIsb0JBQW9CO0lBQ3BCLGdCQUFnQjtJQUNoQixxQkFBcUI7SUFDckIsZUFBZTtJQUNmLEtBQUs7SUFFTCxvQ0FBb0M7SUFDcEMsc0RBQXNEO0lBQ3RELGlOQUFpTjtJQUNqTixJQUFJO0lBRUosSUFBSSxPQUFPLEdBQUcsSUFBSSxDQUFDO0lBQ25CLElBQUksS0FBSyxHQUFHLFVBQVUsQ0FBQztJQUN2QixJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUU7UUFDWixLQUFLLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUM5QixPQUFPLEdBQUcsS0FBSyxDQUFDO0tBQ25CO0lBRUQsT0FBTyxJQUFJLEVBQUU7UUFDVCxJQUFJLE9BQU8sRUFBRTtZQUNULElBQUksRUFBRSxDQUFDLGNBQWMsQ0FBQyxLQUFLLENBQUMsR0FBRyxHQUFHO2dCQUFFLEtBQUssR0FBRyxLQUFLLENBQUM7WUFDbEQsSUFBSSxFQUFFLENBQUMsY0FBYyxDQUFDLFVBQVUsQ0FBQyxHQUFHLEdBQUc7Z0JBQUUsS0FBSyxHQUFHLFVBQVUsQ0FBQztTQUMvRDtRQUVELG1EQUFtRDtRQUNuRCxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQztRQUU1QyxrRkFBa0Y7UUFDbEYseUNBQXlDO1FBQ3pDLGdDQUFnQztRQUNoQyxJQUFJO0tBQ1A7SUFFRCxFQUFFLENBQUMsY0FBYyxDQUFDLFNBQVMsRUFBRSxZQUFZLENBQUMsQ0FBQztBQUMvQyxDQUFDIn0=\",\"filename\":\"crime.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"crime.js\",\"url\":\"blob:file:///bcab4b28-82c0-4451-92b6-3e7e628b08c4\",\"moduleSequenceNumber\":59105}],\"dependents\":[],\"ramUsage\":14.6,\"server\":\"home\",\"moduleSequenceNumber\":137790,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getCrimeChance\",\"cost\":5},{\"type\":\"fn\",\"name\":\"commitCrime\",\"cost\":5},{\"type\":\"fn\",\"name\":\"workForFaction\",\"cost\":3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.disableLog(\\\"sleep\\\");\\r\\n    let members;\\r\\n    while (true) {\\r\\n        ns.print(ns.sprintf(\\\"==================================\\\"));\\r\\n        let memberIndex = ns.gang.getMemberNames().length;\\r\\n        while (ns.gang.canRecruitMember()) {\\r\\n            const name = \\\"g\\\" + memberIndex.toString();\\r\\n            ns.gang.recruitMember(name);\\r\\n            ns.gang.setMemberTask(name, \\\"Train Combat\\\");\\r\\n            memberIndex++;\\r\\n        }\\r\\n        ns.print(ns.sprintf(\\\"==================================\\\"));\\r\\n        members = ns.gang.getMemberNames().map((name) => ns.gang.getMemberInformation(name));\\r\\n        for (const member of members) {\\r\\n            const ascmem = ns.gang.getAscensionResult(member.name);\\r\\n            ns.print(ns.sprintf(\\\"%3s:  %10s  %s  %s  %s %10s %s\\\", member.name, member.str_exp.toFixed(2), member.str_mult.toFixed(2), member.str_asc_mult.toFixed(2), ascmem !== undefined ? ascmem.str : 0, member.str_asc_points.toFixed(2), member.upgrades));\\r\\n            if (ascmem !== undefined && ascmem.str > 2) {\\r\\n                ns.print(ns.sprintf(\\\"Ascending %s %.2f => %.2f hack multiplier\\\", member.name, member.str_asc_mult, member.str_asc_mult * ascmem.str));\\r\\n                ns.gang.ascendMember(member.name);\\r\\n            }\\r\\n        }\\r\\n        ns.print(ns.sprintf(\\\"==================================\\\"));\\r\\n        const combatEquipment = ns.gang\\r\\n            .getEquipmentNames()\\r\\n            .map((_name) => Object.assign({ name: _name, price: ns.gang.getEquipmentCost(_name), type: ns.gang.getEquipmentType(_name) }, ns.gang.getEquipmentStats(_name)))\\r\\n            .filter((eq) => eq.str !== undefined ||\\r\\n            eq.dex !== undefined ||\\r\\n            eq.agi !== undefined ||\\r\\n            eq.def !== undefined ||\\r\\n            eq.cha !== undefined)\\r\\n            .sort((a, b) => a.price - b.price);\\r\\n        // for (const eq of combatEquipment) {\\r\\n        //     ns.print(ns.sprintf(\\r\\n        //         \\\"%-13s %20s  %.2f  %9s\\\",\\r\\n        //         eq.type,\\r\\n        //         eq.name,\\r\\n        //         eq.str !== undefined ? eq.str : 0,\\r\\n        //         ns.nFormat(eq.price, \\\"($0.000a)\\\")\\r\\n        //     ));\\r\\n        // }\\r\\n        const newBuys = [];\\r\\n        for (const member of members) {\\r\\n            for (const eq of combatEquipment) {\\r\\n                if (!member.upgrades.includes(eq.name)) {\\r\\n                    newBuys.push({\\r\\n                        member: member,\\r\\n                        equipment: eq,\\r\\n                    });\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        newBuys.sort((a, b) => a.equipment.price - b.equipment.price);\\r\\n        for (const buy of newBuys) {\\r\\n            if (ns.getPlayer().money > buy.equipment.price) {\\r\\n                const result = ns.gang.purchaseEquipment(buy.member.name, buy.equipment.name);\\r\\n                if (result)\\r\\n                    ns.print(ns.sprintf(\\\"Buying %s:%s for %s\\\", buy.member.name, buy.equipment.name, ns.nFormat(buy.equipment.price, \\\"($0.000a)\\\")));\\r\\n            }\\r\\n        }\\r\\n        await ns.sleep(10000);\\r\\n        ns.print(ns.sprintf(\\\"==================================\\\"));\\r\\n        break;\\r\\n    }\\r\\n    const tasks = ns.gang\\r\\n        .getTaskNames()\\r\\n        .map((_name) => ns.gang.getTaskStats(_name))\\r\\n        .filter((task) => task.isCombat)\\r\\n        .sort((a, b) => b.baseMoney - a.baseMoney);\\r\\n    for (const task of tasks) {\\r\\n        ns.tprintf(\\\"%22s %3s %3s %9s %s\\\", task.name, task.baseMoney, task.difficulty, task.baseRespect, task.baseWanted);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2FuZy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImdhbmcudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixFQUFFLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBRXZCLElBQUksT0FBTyxDQUFDO0lBQ1osT0FBTyxJQUFJLEVBQUU7UUFDVCxFQUFFLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsb0NBQW9DLENBQUMsQ0FBQyxDQUFDO1FBQzNELElBQUksV0FBVyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsY0FBYyxFQUFFLENBQUMsTUFBTSxDQUFDO1FBRWxELE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxFQUFFO1lBQy9CLE1BQU0sSUFBSSxHQUFHLEdBQUcsR0FBRyxXQUFXLENBQUMsUUFBUSxFQUFFLENBQUM7WUFDMUMsRUFBRSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDNUIsRUFBRSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxFQUFFLGNBQWMsQ0FBQyxDQUFDO1lBQzVDLFdBQVcsRUFBRSxDQUFDO1NBQ2pCO1FBRUQsRUFBRSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLG9DQUFvQyxDQUFDLENBQUMsQ0FBQztRQUUzRCxPQUFPLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsb0JBQW9CLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztRQUVyRixLQUFLLE1BQU0sTUFBTSxJQUFJLE9BQU8sRUFBRTtZQUMxQixNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFD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\",\"filename\":\"gang.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"gang.js\",\"url\":\"blob:file:///98a00153-c685-442d-991d-b81045bc7cd1\",\"moduleSequenceNumber\":22273}],\"dependents\":[],\"ramUsage\":31.6,\"server\":\"home\",\"moduleSequenceNumber\":137796,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gang.getMemberNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.canRecruitMember\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.recruitMember\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.setMemberTask\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.getMemberInformation\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.getAscensionResult\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.ascendMember\",\"cost\":4},{\"type\":\"fn\",\"name\":\"gang.getEquipmentNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.getEquipmentCost\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.getEquipmentType\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.getEquipmentStats\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"stock.buy\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"gang.purchaseEquipment\",\"cost\":4},{\"type\":\"fn\",\"name\":\"gang.getTaskNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.getTaskStats\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { stFormat, stdFormat } from \\\"bbutil\\\";\\r\\nexport const TSPACER = 400;\\r\\nexport const WEAKENNS = \\\"weaken.js\\\";\\r\\nexport const GROWNS = \\\"grow.js\\\";\\r\\nexport const HACKNS = \\\"hack.js\\\";\\r\\n// {targetname: {hack stat, production lookup table}}\\r\\nconst CYCLE_PRODUCTION_LOOKUP = {};\\r\\nfunction getCycleProductionLookup(ns, env) {\\r\\n    if (CYCLE_PRODUCTION_LOOKUP[env.targetname] &&\\r\\n        CYCLE_PRODUCTION_LOOKUP[env.targetname].hack === ns.getPlayer().hacking) {\\r\\n        return CYCLE_PRODUCTION_LOOKUP[env.targetname].prod;\\r\\n    }\\r\\n    // memoize cycle production statistics indexed by cycleThreadAllowance\\r\\n    const cycleProductionLookup = new Array(env.maxThreads + 1).fill(null);\\r\\n    let hackThreads = Math.min(env.maxThreads, Math.floor(1 / env.hackPercentPerThread));\\r\\n    while (hackThreads > 0) {\\r\\n        hackThreads--;\\r\\n        const hackTotal = env.hackPercentPerThread * hackThreads * env.highMoney;\\r\\n        const hackSecIncrease = ns.hackAnalyzeSecurity(hackThreads);\\r\\n        const growMult = Math.max(env.highMoney / (env.highMoney - hackTotal), 1);\\r\\n        const growThreads = env.calcGrowThreads(ns, growMult, true);\\r\\n        if (hackThreads + growThreads > env.maxThreads) {\\r\\n            //ns.tprintf(\\\"h %d | g %d\\\", hackThreads, growThreads)\\r\\n            continue;\\r\\n        }\\r\\n        const growSecIncrease = ns.growthAnalyzeSecurity(growThreads);\\r\\n        const weakenHackThreads = Math.ceil(hackSecIncrease / env.weakenAmountPerThread);\\r\\n        const weakenGrowThreads = Math.ceil(growSecIncrease / env.weakenAmountPerThread);\\r\\n        const totalThreads = hackThreads + weakenHackThreads + growThreads + weakenGrowThreads;\\r\\n        if (totalThreads > env.maxThreads)\\r\\n            continue;\\r\\n        if (cycleProductionLookup[totalThreads] !== null) {\\r\\n            // do nothing\\r\\n        }\\r\\n        else {\\r\\n            cycleProductionLookup[totalThreads] = {\\r\\n                totalThreads: totalThreads,\\r\\n                hackTotal: hackTotal,\\r\\n                hackThreads: hackThreads,\\r\\n                growThreads: growThreads,\\r\\n                weakenHackThreads: weakenHackThreads,\\r\\n                weakenGrowThreads: weakenGrowThreads,\\r\\n            };\\r\\n        }\\r\\n    }\\r\\n    // Fill in the blanks\\r\\n    const zeroThread = {\\r\\n        totalThreads: 0,\\r\\n        hackTotal: 0,\\r\\n        hackThreads: 0,\\r\\n        growThreads: 0,\\r\\n        weakenHackThreads: 0,\\r\\n        weakenGrowThreads: 0,\\r\\n    };\\r\\n    let fillDict = zeroThread;\\r\\n    for (let idx = 0; idx < cycleProductionLookup.length; idx++) {\\r\\n        if (cycleProductionLookup[idx] === null)\\r\\n            cycleProductionLookup[idx] = fillDict;\\r\\n        else\\r\\n            fillDict = cycleProductionLookup[idx];\\r\\n    }\\r\\n    // const endTime = new Date().getTime();\\r\\n    // ns.tprintf(\\r\\n    //     \\\"Calculated %20s:%d in %4dms | %d values | %4d\\\",\\r\\n    //     env.targetname,\\r\\n    //     ns.getPlayer().hacking,\\r\\n    //     endTime - startTime,\\r\\n    //     env.maxThreads,\\r\\n    //     Math.floor(1 / env.hackPercentPerThread)\\r\\n    // );\\r\\n    CYCLE_PRODUCTION_LOOKUP[env.targetname] = { hack: ns.getPlayer().hacking, prod: cycleProductionLookup };\\r\\n    return CYCLE_PRODUCTION_LOOKUP[env.targetname].prod;\\r\\n}\\r\\nclass Host {\\r\\n    hostname;\\r\\n    threadSize;\\r\\n    maxThreads;\\r\\n    reservedScriptCalls;\\r\\n    constructor(ns, hostname, threadSize) {\\r\\n        this.hostname = hostname;\\r\\n        this.threadSize = threadSize;\\r\\n        this.reservedScriptCalls = [];\\r\\n        this.maxThreads = 0;\\r\\n        this.getMaxThreads(ns);\\r\\n    }\\r\\n    reset() {\\r\\n        this.reservedScriptCalls = [];\\r\\n    }\\r\\n    getReservedThreads() {\\r\\n        return this.reservedScriptCalls.reduce((a, b) => a + b.threads, 0);\\r\\n    }\\r\\n    getAvailableThreads() {\\r\\n        return this.reservedScriptCalls.reduce((a, b) => a - b.threads, this.maxThreads);\\r\\n    }\\r\\n    // return # of threads successfully allocated\\r\\n    tryReserveThreads(ns, script, threads, offset, length, batchId) {\\r\\n        const allocateThreads = Math.min(this.getAvailableThreads(), threads);\\r\\n        if (allocateThreads === 0)\\r\\n            return allocateThreads;\\r\\n        this.reservedScriptCalls.push({\\r\\n            script: script,\\r\\n            threads: allocateThreads,\\r\\n            offset: offset,\\r\\n            length: length,\\r\\n            batchId: batchId,\\r\\n        });\\r\\n        return allocateThreads;\\r\\n    }\\r\\n    // update max threads in case server size has changed\\r\\n    getMaxThreads(ns) {\\r\\n        this.maxThreads = Math.floor(ns.getServerMaxRam(this.hostname) / this.threadSize);\\r\\n        // if this host is home, reserve 64GB of ram for other stuff\\r\\n        if (this.hostname === \\\"home\\\") {\\r\\n            const homeram = ns.getServerMaxRam(this.hostname) - 64;\\r\\n            this.maxThreads = Math.max(0, Math.floor(homeram / this.threadSize));\\r\\n        }\\r\\n        this.maxThreads = Math.min(1000000, this.maxThreads);\\r\\n        return this.maxThreads;\\r\\n    }\\r\\n    async prep(ns, force = false) {\\r\\n        if (force || !ns.fileExists(GROWNS, this.hostname))\\r\\n            await ns.scp(GROWNS, \\\"home\\\", this.hostname);\\r\\n        if (force || !ns.fileExists(WEAKENNS, this.hostname))\\r\\n            await ns.scp(WEAKENNS, \\\"home\\\", this.hostname);\\r\\n        if (force || !ns.fileExists(HACKNS, this.hostname))\\r\\n            await ns.scp(HACKNS, \\\"home\\\", this.hostname);\\r\\n    }\\r\\n}\\r\\nfunction generateHosts(ns, hostnames, threadSize) {\\r\\n    let hosts = [];\\r\\n    let maxThreads = 0;\\r\\n    if (hostnames)\\r\\n        hosts = hostnames\\r\\n            .map((x) => new Host(ns, x, threadSize))\\r\\n            .filter((x) => x.maxThreads > 0)\\r\\n            .sort((a, b) => b.maxThreads - a.maxThreads);\\r\\n    hosts.map((x) => (maxThreads += x.maxThreads));\\r\\n    // Too many threads causes problems\\r\\n    maxThreads = Math.min(1000000, maxThreads);\\r\\n    return [hosts, maxThreads];\\r\\n}\\r\\nfunction getMaxThreads(ns, hosts) {\\r\\n    let maxThreads = 0;\\r\\n    hosts.map((x) => (maxThreads += x.getMaxThreads(ns)));\\r\\n    // Too many threads causes problems\\r\\n    maxThreads = Math.min(1000000, maxThreads);\\r\\n    return maxThreads;\\r\\n}\\r\\nfunction reserveThreadsForExecution(ns, hosts, script, threads, offset, length, batchId) {\\r\\n    let unallocatedThreads = threads;\\r\\n    for (const host of hosts) {\\r\\n        unallocatedThreads -= host.tryReserveThreads(ns, script, unallocatedThreads, offset, length, batchId);\\r\\n        if (unallocatedThreads === 0) {\\r\\n            return true;\\r\\n        }\\r\\n    }\\r\\n    ns.tprintf(\\\"WARNING: Only able to allocate %d/%d %s threads\\\", threads - unallocatedThreads, threads, script);\\r\\n    return false;\\r\\n}\\r\\nexport class SmartHackEnv {\\r\\n    targetname;\\r\\n    highMoney;\\r\\n    lowMoney;\\r\\n    tspacer;\\r\\n    weakenRam;\\r\\n    growRam;\\r\\n    hackRam;\\r\\n    threadSize;\\r\\n    cores;\\r\\n    hosts;\\r\\n    maxThreads;\\r\\n    waitPID;\\r\\n    security;\\r\\n    lowSecurity;\\r\\n    money;\\r\\n    // Weaken Info\\r\\n    weakenStartSec;\\r\\n    weakenAmountPerThread;\\r\\n    weakenThreads;\\r\\n    weakenGrowThreads;\\r\\n    weakenHackThreads;\\r\\n    weakenTime;\\r\\n    weakenTimeFullCycle;\\r\\n    // Grow Info\\r\\n    growStartMoney;\\r\\n    growMult;\\r\\n    growThreads;\\r\\n    growSecIncrease;\\r\\n    growTime;\\r\\n    // Hack Info\\r\\n    hackStartMoney;\\r\\n    hackTotal;\\r\\n    hackThreads;\\r\\n    hackSecIncrease;\\r\\n    hackTime;\\r\\n    hackPercentPerThread;\\r\\n    // Batch Cycle Info\\r\\n    threadsPerCycle;\\r\\n    cycleSpacer;\\r\\n    cycleFullTime;\\r\\n    cycleMax;\\r\\n    cycleTotal;\\r\\n    cycleBatchTime;\\r\\n    primaryStats;\\r\\n    // Simulator Info\\r\\n    simEnabled;\\r\\n    simTarget;\\r\\n    simPlayer;\\r\\n    constructor(ns, targetname, hostnames) {\\r\\n        this.targetname = targetname;\\r\\n        this.highMoney = ns.getServerMaxMoney(this.targetname);\\r\\n        this.lowMoney = ns.getServerMaxMoney(this.targetname) * 0.5;\\r\\n        this.tspacer = TSPACER; // CONST\\r\\n        this.weakenRam = ns.getScriptRam(WEAKENNS);\\r\\n        this.growRam = ns.getScriptRam(GROWNS);\\r\\n        this.hackRam = ns.getScriptRam(HACKNS);\\r\\n        this.threadSize = Math.max(this.weakenRam, this.growRam, this.hackRam);\\r\\n        this.cores = 1; // Simplify\\r\\n        [this.hosts, this.maxThreads] = generateHosts(ns, hostnames, this.threadSize);\\r\\n        this.waitPID = 0;\\r\\n        // Target Info\\r\\n        this.security = 0;\\r\\n        this.lowSecurity = 0;\\r\\n        this.money = 0;\\r\\n        // Weaken Info\\r\\n        this.weakenStartSec = 0;\\r\\n        this.weakenAmountPerThread = 0;\\r\\n        this.weakenThreads = 0;\\r\\n        this.weakenGrowThreads = 0;\\r\\n        this.weakenHackThreads = 0;\\r\\n        this.weakenTime = 0;\\r\\n        this.weakenTimeFullCycle = 0;\\r\\n        // Grow Info\\r\\n        this.growStartMoney = 0;\\r\\n        this.growMult = 0;\\r\\n        this.growThreads = 0;\\r\\n        this.growSecIncrease = 0;\\r\\n        this.growTime = 0;\\r\\n        // Hack Info\\r\\n        this.hackStartMoney = 0;\\r\\n        this.hackTotal = 0;\\r\\n        this.hackThreads = 0;\\r\\n        this.hackSecIncrease = 0;\\r\\n        this.hackTime = 0;\\r\\n        this.hackPercentPerThread = 0;\\r\\n        // Batch Cycle Info\\r\\n        this.threadsPerCycle = 0;\\r\\n        this.cycleSpacer = this.tspacer * 4;\\r\\n        this.cycleFullTime = 0; // this.weakenTime + this.tspacer * 2;\\r\\n        this.cycleMax = 0; // Math.floor(this.cycleFitTime / this.cycleSpacer)\\r\\n        this.cycleTotal = 0;\\r\\n        this.cycleBatchTime = 0; // this.cycleFullTime + this.cycleSpacer * this.cycleTotal\\r\\n        this.primaryStats = {\\r\\n            primaryThreadsTotal: 0,\\r\\n            primaryGrowThreads: 0,\\r\\n            primaryWeakenThreads: 0,\\r\\n        };\\r\\n        // Simulator Info\\r\\n        this.simEnabled = false;\\r\\n        this.simTarget = ns.getServer(this.targetname);\\r\\n        this.simPlayer = ns.getPlayer();\\r\\n    }\\r\\n    async init(ns, force = false) {\\r\\n        for (const host of this.hosts) {\\r\\n            await host.prep(ns, force);\\r\\n        }\\r\\n    }\\r\\n    getServerSecurityLevel(ns) {\\r\\n        if (this.simEnabled)\\r\\n            return this.simTarget.hackDifficulty;\\r\\n        return ns.getServerSecurityLevel(this.targetname);\\r\\n    }\\r\\n    getServerMoneyAvailable(ns) {\\r\\n        if (this.simEnabled)\\r\\n            return Math.max(this.simTarget.moneyAvailable, 1);\\r\\n        return Math.max(ns.getServerMoneyAvailable(this.targetname), 1);\\r\\n    }\\r\\n    getWeakenTime(ns) {\\r\\n        if (this.simEnabled)\\r\\n            return Math.ceil(ns.formulas.hacking.weakenTime(this.simTarget, this.simPlayer));\\r\\n        return Math.ceil(ns.getWeakenTime(this.targetname));\\r\\n    }\\r\\n    getGrowTime(ns) {\\r\\n        if (this.simEnabled)\\r\\n            return Math.ceil(ns.formulas.hacking.growTime(this.simTarget, this.simPlayer));\\r\\n        return Math.ceil(ns.getGrowTime(this.targetname));\\r\\n    }\\r\\n    getHackTime(ns) {\\r\\n        if (this.simEnabled)\\r\\n            return Math.ceil(ns.formulas.hacking.hackTime(this.simTarget, this.simPlayer));\\r\\n        return Math.ceil(ns.getHackTime(this.targetname));\\r\\n    }\\r\\n    hackAnalyze(ns, assumeMinSec = false) {\\r\\n        if (this.simEnabled) {\\r\\n            if (assumeMinSec) {\\r\\n                const simTarget = Object.assign({}, this.simTarget);\\r\\n                simTarget.hackDifficulty = simTarget.minDifficulty;\\r\\n                return ns.formulas.hacking.hackPercent(simTarget, this.simPlayer);\\r\\n            }\\r\\n            return ns.formulas.hacking.hackPercent(this.simTarget, this.simPlayer);\\r\\n        }\\r\\n        if (assumeMinSec) {\\r\\n            const simTarget = ns.getServer(this.targetname);\\r\\n            simTarget.hackDifficulty = simTarget.minDifficulty;\\r\\n            return ns.formulas.hacking.hackPercent(simTarget, ns.getPlayer());\\r\\n        }\\r\\n        return ns.hackAnalyze(this.targetname);\\r\\n    }\\r\\n    numCycleForGrowth(ns, server, growth, player, cores = 1) {\\r\\n        let ajdGrowthRate = 1 + (1.03 - 1) / server.hackDifficulty;\\r\\n        if (ajdGrowthRate > 1.0035) {\\r\\n            ajdGrowthRate = 1.0035;\\r\\n        }\\r\\n        const serverGrowthPercentage = server.serverGrowth / 100;\\r\\n        const coreBonus = 1 + (cores - 1) / 16;\\r\\n        const cycles = Math.log(growth) /\\r\\n            (Math.log(ajdGrowthRate) *\\r\\n                player.hacking_grow_mult *\\r\\n                serverGrowthPercentage *\\r\\n                ns.getBitNodeMultipliers().ServerGrowthRate *\\r\\n                coreBonus);\\r\\n        return cycles;\\r\\n    }\\r\\n    /** @param {import(\\\".\\\").NS } ns */\\r\\n    calcGrowThreads(ns, _growMult, assumeMinSec = false) {\\r\\n        const growMult = _growMult === undefined ? this.growMult : _growMult;\\r\\n        if (growMult < 1)\\r\\n            return 0;\\r\\n        if (this.simEnabled) {\\r\\n            if (assumeMinSec) {\\r\\n                const simTarget = Object.assign({}, this.simTarget);\\r\\n                simTarget.hackDifficulty = simTarget.minDifficulty;\\r\\n                return Math.ceil(this.numCycleForGrowth(ns, simTarget, growMult, this.simPlayer));\\r\\n            }\\r\\n            return Math.ceil(this.numCycleForGrowth(ns, this.simTarget, growMult, this.simPlayer));\\r\\n        }\\r\\n        if (assumeMinSec) {\\r\\n            const simTarget = ns.getServer(this.targetname);\\r\\n            simTarget.hackDifficulty = simTarget.minDifficulty;\\r\\n            return Math.ceil(this.numCycleForGrowth(ns, simTarget, growMult, ns.getPlayer()));\\r\\n        }\\r\\n        return Math.ceil(ns.growthAnalyze(this.targetname, growMult, this.cores));\\r\\n    }\\r\\n    /** @param {import(\\\".\\\").NS } ns */\\r\\n    async refresh(ns) {\\r\\n        if (this.isWRunning(ns)) {\\r\\n            // process in progress, wait for next refresh to update\\r\\n            await ns.sleep(1000);\\r\\n            return true;\\r\\n        }\\r\\n        // Host state\\r\\n        this.maxThreads = getMaxThreads(ns, this.hosts);\\r\\n        // Target Info\\r\\n        this.highMoney = ns.getServerMaxMoney(this.targetname);\\r\\n        this.lowMoney = ns.getServerMaxMoney(this.targetname) * 0.5;\\r\\n        this.money = this.getServerMoneyAvailable(ns);\\r\\n        this.lowSecurity = ns.getServerMinSecurityLevel(this.targetname);\\r\\n        this.security = this.getServerSecurityLevel(ns);\\r\\n        // Hack Info\\r\\n        this.hackTime = this.getHackTime(ns);\\r\\n        this.hackPercentPerThread = this.hackAnalyze(ns, true);\\r\\n        this.hackThreads = 1 / this.hackPercentPerThread - 1;\\r\\n        this.hackTotal = this.hackPercentPerThread * this.hackThreads * this.money;\\r\\n        this.hackSecIncrease = ns.hackAnalyzeSecurity(this.hackThreads);\\r\\n        // Grow Info\\r\\n        this.growTime = this.getGrowTime(ns);\\r\\n        // Weaken Info\\r\\n        this.weakenTime = this.getWeakenTime(ns);\\r\\n        this.weakenAmountPerThread = ns.weakenAnalyze(1, this.cores);\\r\\n        // Cycle Info\\r\\n        this.cycleFullTime = this.weakenTime + this.tspacer * 2;\\r\\n        this.cycleMax = Math.max(Math.floor((this.hackTime - this.tspacer) / this.cycleSpacer), 1);\\r\\n        this.threadsPerCycle = this.hackThreads + this.weakenHackThreads + this.growThreads + this.weakenGrowThreads;\\r\\n        // Primary Cycle Info\\r\\n        const primaryGrowMult = Math.max(this.highMoney / this.money, 1);\\r\\n        let primaryGrowThreads = this.calcGrowThreads(ns, primaryGrowMult);\\r\\n        let primaryGrowSecIncrease = ns.growthAnalyzeSecurity(primaryGrowThreads);\\r\\n        let primarySecDiff = this.security - this.lowSecurity;\\r\\n        let primaryWeakenThreads = Math.ceil((primaryGrowSecIncrease + primarySecDiff) / this.weakenAmountPerThread);\\r\\n        let primaryThreadsTotal = primaryGrowThreads + primaryWeakenThreads;\\r\\n        if (primarySecDiff < 1 && primaryGrowMult < 1.05)\\r\\n            primaryThreadsTotal = 0; // dont bother with the grow/weaken cycle if we're already very close to optimal\\r\\n        while (primaryThreadsTotal > this.maxThreads) {\\r\\n            primaryGrowThreads--;\\r\\n            primaryGrowSecIncrease = ns.growthAnalyzeSecurity(primaryGrowThreads);\\r\\n            primarySecDiff = this.security - this.lowSecurity;\\r\\n            primaryWeakenThreads = Math.ceil((primaryGrowSecIncrease + primarySecDiff) / this.weakenAmountPerThread);\\r\\n            primaryThreadsTotal = primaryGrowThreads + primaryWeakenThreads;\\r\\n        }\\r\\n        // memoize cycle production statistics indexed by cycleThreadAllowance\\r\\n        const cycleProductionLookup = getCycleProductionLookup(ns, this);\\r\\n        // Get all cycle combination production statistics\\r\\n        let allCycles = [];\\r\\n        for (let cycleTotal = 1; cycleTotal <= this.cycleMax; cycleTotal++) {\\r\\n            const usableThreads = this.maxThreads - primaryThreadsTotal;\\r\\n            const usableCycles = primaryThreadsTotal > 0 ? cycleTotal - 1 : cycleTotal;\\r\\n            const fullCycleTime = this.cycleFullTime + this.cycleSpacer * (cycleTotal - 1);\\r\\n            const cycleThreadAllowance = Math.floor(usableThreads / usableCycles);\\r\\n            const cycleStats = cycleProductionLookup[cycleThreadAllowance];\\r\\n            if (cycleTotal === 1 && primaryThreadsTotal > 0) {\\r\\n                allCycles.push({\\r\\n                    cycleTotal: cycleTotal,\\r\\n                    hackTotal: 1,\\r\\n                    production: 1,\\r\\n                    fullCycleTime: fullCycleTime,\\r\\n                    hackThreads: 0,\\r\\n                    growThreads: 0,\\r\\n                    weakenHackThreads: 0,\\r\\n                    weakenGrowThreads: 0,\\r\\n                    percentPerCycle: 0,\\r\\n                });\\r\\n                continue;\\r\\n            }\\r\\n            if (cycleStats === undefined) {\\r\\n                ns.print(ns.sprintf(\\\"WARNING: Thread Total %s is undefined\\\", cycleThreadAllowance));\\r\\n                continue;\\r\\n            }\\r\\n            allCycles.push({\\r\\n                cycleTotal: cycleTotal,\\r\\n                hackTotal: cycleStats.hackTotal,\\r\\n                production: (usableCycles * cycleStats.hackTotal) / (fullCycleTime / 1000),\\r\\n                fullCycleTime: fullCycleTime,\\r\\n                hackThreads: cycleStats.hackThreads,\\r\\n                growThreads: cycleStats.growThreads,\\r\\n                weakenHackThreads: cycleStats.weakenHackThreads,\\r\\n                weakenGrowThreads: cycleStats.weakenGrowThreads,\\r\\n                percentPerCycle: (cycleStats.hackTotal / ns.getServerMaxMoney(this.targetname)) * 100,\\r\\n            });\\r\\n        }\\r\\n        allCycles = allCycles.sort((a, b) => b.production - a.production);\\r\\n        //this.debugPrintCycleStats(ns, primaryThreadsTotal, allCycles);\\r\\n        const cycleTarget = allCycles[0];\\r\\n        if (!cycleTarget) {\\r\\n            ns.tprintf(\\\"ERROR: Encountered a bad cycle target, targeting %s, [0]%s [1]%s\\\", this.targetname, allCycles[0], allCycles[1]);\\r\\n            this.hackTotal = 0;\\r\\n            this.hackThreads = 0;\\r\\n            this.growThreads = 0;\\r\\n            this.weakenHackThreads = 0;\\r\\n            this.weakenGrowThreads = 0;\\r\\n            this.cycleTotal = 1;\\r\\n            this.cycleBatchTime = Number.MAX_SAFE_INTEGER;\\r\\n            this.primaryStats = {\\r\\n                primaryThreadsTotal: primaryThreadsTotal,\\r\\n                primaryGrowThreads: primaryGrowThreads,\\r\\n                primaryWeakenThreads: primaryWeakenThreads,\\r\\n            };\\r\\n            return false;\\r\\n        }\\r\\n        this.hackTotal = cycleTarget.hackTotal;\\r\\n        this.hackThreads = cycleTarget.hackThreads;\\r\\n        this.growThreads = cycleTarget.growThreads;\\r\\n        this.weakenHackThreads = cycleTarget.weakenHackThreads;\\r\\n        this.weakenGrowThreads = cycleTarget.weakenGrowThreads;\\r\\n        this.cycleTotal = cycleTarget.cycleTotal;\\r\\n        this.cycleBatchTime = cycleTarget.fullCycleTime;\\r\\n        this.primaryStats = {\\r\\n            primaryThreadsTotal: primaryThreadsTotal,\\r\\n            primaryGrowThreads: primaryGrowThreads,\\r\\n            primaryWeakenThreads: primaryWeakenThreads,\\r\\n        };\\r\\n        // dont do thread reservation and execution if this is a simulation\\r\\n        if (this.simEnabled)\\r\\n            return true;\\r\\n        const weakenGrowOffsetTime = this.tspacer * 2;\\r\\n        const growOffsetTime = this.weakenTime + this.tspacer - this.growTime;\\r\\n        const hackOffsetTime = this.weakenTime - this.hackTime - this.tspacer;\\r\\n        if (primaryThreadsTotal > 0) {\\r\\n            if (primaryGrowThreads > 0)\\r\\n                reserveThreadsForExecution(ns, this.hosts, GROWNS, primaryGrowThreads, growOffsetTime, this.growTime, 0);\\r\\n            if (primaryWeakenThreads > 0)\\r\\n                reserveThreadsForExecution(ns, this.hosts, WEAKENNS, primaryWeakenThreads, weakenGrowOffsetTime, this.weakenTime, 0);\\r\\n        }\\r\\n        for (let i = 0; i < this.cycleTotal; i++) {\\r\\n            if (primaryThreadsTotal > 0 && i === 0)\\r\\n                continue;\\r\\n            const cycleOffsetTime = i * this.cycleSpacer;\\r\\n            reserveThreadsForExecution(ns, this.hosts, HACKNS, this.hackThreads, cycleOffsetTime + hackOffsetTime, this.hackTime, i);\\r\\n            reserveThreadsForExecution(ns, this.hosts, GROWNS, this.growThreads, cycleOffsetTime + growOffsetTime, this.growTime, i);\\r\\n            reserveThreadsForExecution(ns, this.hosts, WEAKENNS, this.weakenHackThreads, cycleOffsetTime, this.weakenTime, i);\\r\\n            reserveThreadsForExecution(ns, this.hosts, WEAKENNS, this.weakenGrowThreads, cycleOffsetTime + weakenGrowOffsetTime, this.weakenTime, i);\\r\\n        }\\r\\n        const port = ns.getPortHandle(1);\\r\\n        port.clear();\\r\\n        port.write(JSON.stringify([\\r\\n            new Date(),\\r\\n            this.cycleBatchTime,\\r\\n            this.targetname,\\r\\n            ns.getScriptIncome(ns.getScriptName(), ns.getHostname(), ...ns.args).toString(),\\r\\n            \\\"SMART\\\",\\r\\n        ]));\\r\\n        this.logStats(ns);\\r\\n        await this.execute(ns);\\r\\n        this.resetThreads();\\r\\n        return true;\\r\\n    }\\r\\n    debugPrintCycleStats(ns, primaryThreadsTotal, allCycles) {\\r\\n        for (const cycle of allCycles) {\\r\\n            let batchThreads = cycle.hackThreads + cycle.growThreads + cycle.weakenHackThreads + cycle.weakenGrowThreads;\\r\\n            if (cycle.hackThreads === undefined)\\r\\n                batchThreads = 0;\\r\\n            let cycleThreads = primaryThreadsTotal + batchThreads * (cycle.cycleTotal - 1);\\r\\n            if (primaryThreadsTotal === 0) {\\r\\n                cycleThreads = batchThreads * cycle.cycleTotal;\\r\\n            }\\r\\n            const cycleMem = cycleThreads * this.threadSize;\\r\\n            ns.tprintf(\\\"%3d;%s  %9s/s %5.2f %d/%4d/%5d %6dGB, %s|%s|%s|%s\\\", cycle.cycleTotal, this.targetname, ns.nFormat(cycle.production, \\\"($0.000a)\\\"), cycle.percentPerCycle ? cycle.percentPerCycle : 0, primaryThreadsTotal, batchThreads, cycleThreads, cycleMem, cycle.hackThreads, cycle.growThreads, cycle.weakenHackThreads, cycle.weakenGrowThreads);\\r\\n        }\\r\\n    }\\r\\n    logStats(ns) {\\r\\n        if (this.primaryStats.primaryThreadsTotal > 0) {\\r\\n            ns.print(ns.sprintf(\\\"%8s SMART-PRIMARY: %s => Grow %d; Weaken %d; Total Threads %d\\\", new Date().toLocaleTimeString(\\\"it-IT\\\"), this.targetname, this.primaryStats.primaryGrowThreads, this.primaryStats.primaryWeakenThreads, this.primaryStats.primaryThreadsTotal));\\r\\n        }\\r\\n        ns.print(ns.sprintf(\\\"%8s SMART: %s => H %d|%d; G %d|%d; T %d|%d; Cycles %s/%s; Complete [%s -%s]\\\", new Date().toLocaleTimeString(\\\"it-IT\\\"), this.targetname, this.hackThreads, this.weakenHackThreads, this.growThreads, this.weakenGrowThreads, this.threadsPerCycle, this.threadsPerCycle * this.cycleTotal, this.cycleTotal, this.cycleMax, stdFormat(ns, this.cycleBatchTime, true), stFormat(ns, this.cycleBatchTime - this.weakenTime, true)));\\r\\n    }\\r\\n    async execute(ns) {\\r\\n        let execs = [];\\r\\n        for (const host of this.hosts) {\\r\\n            for (const scriptCall of host.reservedScriptCalls) {\\r\\n                execs.push({\\r\\n                    script: scriptCall.script,\\r\\n                    host: host.hostname,\\r\\n                    threads: scriptCall.threads,\\r\\n                    target: this.targetname,\\r\\n                    delay: scriptCall.offset,\\r\\n                    pos: execs.length,\\r\\n                    finish: scriptCall.offset + scriptCall.length,\\r\\n                    batchId: scriptCall.batchId,\\r\\n                });\\r\\n            }\\r\\n        }\\r\\n        execs = execs.sort((a, b) => b.delay - a.delay);\\r\\n        // for (const exec of execs) {\\r\\n        //     ns.tprintf(\\r\\n        //         \\\"%20s:%02d-%9s %4d %s %s\\\",\\r\\n        //         exec.host,\\r\\n        //         exec.batchId,\\r\\n        //         exec.script,\\r\\n        //         exec.threads,\\r\\n        //         stFormat(ns, exec.delay),\\r\\n        //         stFormat(ns, exec.finish)\\r\\n        //     );\\r\\n        // }\\r\\n        this.waitPID = 0;\\r\\n        let waitPIDFinishTime = 0;\\r\\n        const startTime = new Date().getTime();\\r\\n        while (execs.length > 0) {\\r\\n            const exec = execs.pop();\\r\\n            if (exec === undefined)\\r\\n                break;\\r\\n            while (new Date().getTime() - startTime < exec.delay)\\r\\n                await ns.sleep(5);\\r\\n            // script call has come up, make sure it is starting and finishing within +- tspacer / 2\\r\\n            const curTOffset = new Date().getTime() - startTime;\\r\\n            const delayDiff = Math.abs(curTOffset - exec.delay);\\r\\n            if (delayDiff > this.tspacer / 2) {\\r\\n                execs = execs.filter((a) => a.batchId !== exec.batchId);\\r\\n                ns.print(ns.sprintf(\\\"WARNING: %s:%s #%d start time was off by %dms (limit is +- %d) and the batch was canceled s: %s c: %s\\\", exec.target, exec.script, exec.batchId, curTOffset - exec.delay, this.tspacer / 2, stFormat(ns, exec.delay, true), stFormat(ns, curTOffset, true)));\\r\\n                continue;\\r\\n            }\\r\\n            let finishTOffset = curTOffset;\\r\\n            if (exec.script === WEAKENNS)\\r\\n                finishTOffset += ns.getWeakenTime(exec.target);\\r\\n            if (exec.script === GROWNS)\\r\\n                finishTOffset += ns.getGrowTime(exec.target);\\r\\n            if (exec.script === HACKNS)\\r\\n                finishTOffset += ns.getHackTime(exec.target);\\r\\n            const finishDiff = Math.abs(finishTOffset - exec.finish);\\r\\n            if (finishDiff > this.tspacer / 2) {\\r\\n                execs = execs.filter((a) => a.batchId !== exec.batchId);\\r\\n                ns.print(ns.sprintf(\\\"WARNING: %s:%s #%d finish time was off by %dms (limit is +- %d) and the batch was canceled  e: %s c: %s\\\", exec.target, exec.script, exec.batchId, finishTOffset - exec.finish, this.tspacer / 2, stFormat(ns, exec.finish, true), stFormat(ns, finishTOffset, true)));\\r\\n                continue;\\r\\n            }\\r\\n            const pid = ns.exec(exec.script, exec.host, exec.threads, exec.target, exec.pos, startTime);\\r\\n            if (waitPIDFinishTime <= exec.finish) {\\r\\n                this.waitPID = pid;\\r\\n                waitPIDFinishTime = exec.finish;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n    resetThreads() {\\r\\n        for (const host of this.hosts) {\\r\\n            host.reset();\\r\\n        }\\r\\n    }\\r\\n    isWRunning(ns) {\\r\\n        if (this.simEnabled)\\r\\n            return false;\\r\\n        if (this.waitPID === 0)\\r\\n            return false;\\r\\n        if (ns.getRunningScript(this.waitPID)) {\\r\\n            return true;\\r\\n        }\\r\\n        this.waitPID = 0;\\r\\n        return false;\\r\\n    }\\r\\n    resetSim(ns) {\\r\\n        this.simTarget = ns.getServer(this.targetname);\\r\\n        this.simPlayer = ns.getPlayer();\\r\\n    }\\r\\n    async fastSim(ns, time) {\\r\\n        this.resetSim(ns);\\r\\n        this.simEnabled = true;\\r\\n        let simIncome = 0;\\r\\n        let simTime = 0;\\r\\n        let simState = 0; // 0: primary, 1: no-primary\\r\\n        while (true) {\\r\\n            if (simState === 0) {\\r\\n                const result = await this.refresh(ns);\\r\\n                if (simTime + this.cycleBatchTime > time || !result)\\r\\n                    break;\\r\\n                if (this.primaryStats.primaryThreadsTotal === 0)\\r\\n                    simState = 1;\\r\\n                simIncome += this.hackTotal * (this.cycleTotal - 1);\\r\\n                simTime += this.cycleBatchTime;\\r\\n            }\\r\\n            else {\\r\\n                const timeRemaining = time - simTime;\\r\\n                const cyclesRemaining = Math.floor(timeRemaining / this.cycleBatchTime);\\r\\n                simIncome += this.hackTotal * this.cycleTotal * cyclesRemaining;\\r\\n                simTime += this.cycleBatchTime * cyclesRemaining;\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n        this.simEnabled = false;\\r\\n        if (simTime === 0) {\\r\\n            ns.tprintf(\\\"%s - %s\\\", this.targetname, stFormat(ns, this.cycleBatchTime));\\r\\n            return 0;\\r\\n        }\\r\\n        return simIncome / (simTime / 1000);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic21hcnRfaGFja19lbnYuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJzbWFydF9oYWNrX2Vudi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsUUFBUSxFQUFFLFNBQVMsRUFBRSxNQUFNLFFBQVEsQ0FBQztBQUU3QyxNQUFNLENBQUMsTUFBTSxPQUFPLEdBQUcsR0FBRyxDQUFDO0FBQzNCLE1BQU0sQ0FBQyxNQUFNLFFBQVEsR0FBRyxXQUFXLENBQUM7QUFDcEMsTUFBTSxDQUFDLE1BQU0sTUFBTSxHQUFHLFNBQVMsQ0FBQztBQUNoQyxNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUcsU0FBUyxDQUFDO0FBdUJoQyxxREFBcUQ7QUFDckQsTUFBTSx1QkFBdUIsR0FNekIsRUFBRSxDQUFDO0FBRVAsU0FBUyx3QkFBd0IsQ0FBQyxFQUFNLEVBQUUsR0FBaUI7SUFDdkQsSUFDSSx1QkFBdUIsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDO1FBQ3ZDLHVCQUF1QixDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQyxJQUFJLEtBQUssRUFBRSxDQUFDLFNBQVMsRUFBRSxDQUFDLE9BQU8sRUFDekU7UUFDRSxPQUFPLHVCQUF1QixDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQyxJQUFJLENBQUM7S0FDdkQ7SUFFRCxzRUFBc0U7SUFDdEUsTUFBTSxxQkFBcUIsR0FBRyxJQUFJLEtBQUssQ0FBQyxHQUFHLENBQUMsVUFBVSxHQUFHLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUV2RSxJQUFJLFdBQVcsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLG9CQUFvQixDQUFDLENBQUMsQ0FBQztJQUVyRixPQUFPLFdBQVcsR0FBRyxDQUFDLEVBQUU7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\",\"filename\":\"smart_hack_env.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":16.35,\"server\":\"home\",\"moduleSequenceNumber\":137819,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getBitNodeMultipliers\",\"cost\":4},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getScriptIncome\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { allHosts, serverIsHackable, canExecuteOnServer, cleanLogs, doBuyAndSoftenAll } from \\\"bbutil\\\";\\r\\nimport { SmartHackEnv } from \\\"smart_hack_env\\\";\\r\\nasync function calcIncome(ns, target, hosts, simMinutes = 2) {\\r\\n    return await new SmartHackEnv(ns, target, hosts).fastSim(ns, 1000 * 60 * simMinutes);\\r\\n}\\r\\nexport async function main(ns) {\\r\\n    cleanLogs(ns);\\r\\n    doBuyAndSoftenAll(ns);\\r\\n    const allHostnames = allHosts(ns);\\r\\n    const executableHosts = allHostnames\\r\\n        .filter(canExecuteOnServer.bind(null, ns))\\r\\n        .filter((x) => x.indexOf(\\\"hacknet-node\\\") === -1);\\r\\n    const targetArr = allHostnames.filter(serverIsHackable.bind(null, ns)).filter((x) => ns.getServerMaxMoney(x) > 1);\\r\\n    let orderedTargetArr = [];\\r\\n    for (const target of targetArr) {\\r\\n        let minutes = 2;\\r\\n        if (ns.args[0] && !isNaN(Number(ns.args[0])))\\r\\n            minutes = Number(ns.args[0]);\\r\\n        const income = await calcIncome(ns, target, executableHosts, minutes);\\r\\n        orderedTargetArr.push({ target: target, income: income });\\r\\n    }\\r\\n    orderedTargetArr = orderedTargetArr.sort((a, b) => b.income - a.income);\\r\\n    for (const ti of orderedTargetArr) {\\r\\n        ns.tprintf(\\\"%15s: %s/s\\\", ti.target, ns.nFormat(ti.income, \\\"($0.000a)\\\"));\\r\\n    }\\r\\n    if (ns.args[1] === \\\"check\\\") {\\r\\n        return;\\r\\n    }\\r\\n    const env = new SmartHackEnv(ns, orderedTargetArr[0].target, executableHosts);\\r\\n    //const env = new SmartHackEnv(ns, \\\"ecorp\\\", executableHosts);\\r\\n    await env.init(ns);\\r\\n    while (await env.refresh(ns))\\r\\n        ;\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic21hcnRfaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbInNtYXJ0X2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLFFBQVEsRUFBRSxnQkFBZ0IsRUFBRSxrQkFBa0IsRUFBRSxTQUFTLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFDdEcsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRTlDLEtBQUssVUFBVSxVQUFVLENBQUMsRUFBTSxFQUFFLE1BQWMsRUFBRSxLQUFlLEVBQUUsVUFBVSxHQUFHLENBQUM7SUFDN0UsT0FBTyxNQUFNLElBQUksWUFBWSxDQUFDLEVBQUUsRUFBRSxNQUFNLEVBQUUsS0FBSyxDQUFDLENBQUMsT0FBTyxDQUFDLEVBQUUsRUFBRSxJQUFJLEdBQUcsRUFBRSxHQUFHLFVBQVUsQ0FBQyxDQUFDO0FBQ3pGLENBQUM7QUFPRCxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLFNBQVMsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUNqQixpQkFBaUIsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUVuQixNQUFNLFlBQVksR0FBRyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDbEMsTUFBTSxlQUFlLEdBQUcsWUFBWTtTQUMvQixNQUFNLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsQ0FBQztTQUN6QyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsY0FBYyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNyRCxNQUFNLFNBQVMsR0FBRyxZQUFZLENBQUMsTUFBTSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztJQUVsSCxJQUFJLGdCQUFnQixHQUFtQixFQUFFLENBQUM7SUFDMUMsS0FBSyxNQUFNLE1BQU0sSUFBSSxTQUFTLEVBQUU7UUFDbEMsSUFBSSxPQUFPLEdBQUcsQ0FBQyxDQUFDO1FBQ2hCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQzNDLE9BQU8sR0FBRyxNQUFNLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBO1FBRXZCLE1BQU0sTUFBTSxHQUFHLE1BQU0sVUFBVSxDQUFDLEVBQUUsRUFBRSxNQUFNLEVBQUUsZUFBZSxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQ3RFLGdCQUFnQixDQUFDLElBQUksQ0FBQyxFQUFDLE1BQU0sRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBQyxDQUFDLENBQUM7S0FDM0Q7SUFFRCxnQkFBZ0IsR0FBRyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUV4RSxLQUFLLE1BQU0sRUFBRSxJQUFJLGdCQUFnQixFQUFFO1FBQy9CLEVBQUUsQ0FBQyxPQUFPLENBQUMsWUFBWSxFQUFFLEVBQUUsQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLFdBQVcsQ0FBQyxDQUFDLENBQUM7S0FDM0U7SUFFRCxJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssT0FBTyxFQUFFO1FBQ3hCLE9BQU87S0FDVjtJQUVELE1BQU0sR0FBRyxHQUFHLElBQUksWUFBWSxDQUFDLEVBQUUsRUFBRSxnQkFBZ0IsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLEVBQUUsZUFBZSxDQUFDLENBQUM7SUFDOUUsNkRBQTZEO0lBQzdELE1BQU0sR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUNuQixPQUFPLE1BQU0sR0FBRyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUM7UUFBQyxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"smart_hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"bbutil.js\",\"url\":\"blob:file:///fc9cc002-84cc-4c85-91b4-414d6baac915\",\"moduleSequenceNumber\":137774},{\"filename\":\"smart_hack_env.js\",\"url\":\"blob:file:///54138053-5a33-4c44-97ac-e87d405e90f0\",\"moduleSequenceNumber\":137819},{\"filename\":\"bbutil.js\",\"url\":\"blob:file:///4ebc305b-ca2f-4616-8288-f457b765be0d\",\"moduleSequenceNumber\":137774},{\"filename\":\"smart_hack.js\",\"url\":\"blob:file:///65b6016f-f8f2-4bcd-b5b6-9cfc326a22e1\",\"moduleSequenceNumber\":137986}],\"dependents\":[],\"ramUsage\":21.15,\"server\":\"home\",\"moduleSequenceNumber\":137986,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getBitNodeMultipliers\",\"cost\":4},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getScriptIncome\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"purchaseTor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"purchaseProgram\",\"cost\":2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.disableLog(\\\"sleep\\\");\\r\\n    let members;\\r\\n    while (true) {\\r\\n        ns.print(ns.sprintf(\\\"==================================\\\"));\\r\\n        let memberIndex = ns.gang.getMemberNames().length;\\r\\n        while (ns.gang.canRecruitMember()) {\\r\\n            const name = \\\"g\\\" + memberIndex.toString();\\r\\n            ns.gang.recruitMember(name);\\r\\n            ns.gang.setMemberTask(name, \\\"Train Hacking\\\");\\r\\n            memberIndex++;\\r\\n        }\\r\\n        ns.print(ns.sprintf(\\\"==================================\\\"));\\r\\n        members = ns.gang.getMemberNames().map((name) => ns.gang.getMemberInformation(name));\\r\\n        for (const member of members) {\\r\\n            const ascmem = ns.gang.getAscensionResult(member.name);\\r\\n            ns.print(ns.sprintf(\\\"%3s:  %10s  %s  %s  %s %10s %s\\\", member.name, member.hack_exp.toFixed(2), member.hack_mult.toFixed(2), member.hack_asc_mult.toFixed(2), ascmem !== undefined ? ascmem.hack : 0, member.hack_asc_points.toFixed(2), member.upgrades));\\r\\n            if (ascmem !== undefined && ascmem.hack > 2) {\\r\\n                ns.print(ns.sprintf(\\\"Ascending %s %.2f => %.2f hack multiplier\\\", member.name, member.hack_asc_mult, member.hack_asc_mult * ascmem.hack));\\r\\n                ns.gang.ascendMember(member.name);\\r\\n            }\\r\\n        }\\r\\n        ns.print(ns.sprintf(\\\"==================================\\\"));\\r\\n        const combatEquipment = ns.gang\\r\\n            .getEquipmentNames()\\r\\n            .map((_name) => Object.assign({ name: _name, price: ns.gang.getEquipmentCost(_name), type: ns.gang.getEquipmentType(_name) }, ns.gang.getEquipmentStats(_name)))\\r\\n            .filter((eq) => eq.hack !== undefined)\\r\\n            .sort((a, b) => a.price - b.price);\\r\\n        // for (const eq of combatEquipment) {\\r\\n        //     ns.print(ns.sprintf(\\r\\n        //         \\\"%-13s %20s  %.2f  %9s\\\",\\r\\n        //         eq.type,\\r\\n        //         eq.name,\\r\\n        //         eq.hack !== undefined ? eq.hack : 0,\\r\\n        //         ns.nFormat(eq.price, \\\"($0.000a)\\\")\\r\\n        //     ));\\r\\n        // }\\r\\n        const newBuys = [];\\r\\n        for (const member of members) {\\r\\n            for (const eq of combatEquipment) {\\r\\n                if (!member.upgrades.includes(eq.name)) {\\r\\n                    newBuys.push({\\r\\n                        member: member,\\r\\n                        equipment: eq,\\r\\n                    });\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        newBuys.sort((a, b) => a.equipment.price - b.equipment.price);\\r\\n        if (ns.getPlayer().money >= ns.getUpgradeHomeRamCost()) {\\r\\n            ns.upgradeHomeRam();\\r\\n        }\\r\\n        for (const buy of newBuys) {\\r\\n            if (ns.getPlayer().money * 0.25 > buy.equipment.price) {\\r\\n                const result = ns.gang.purchaseEquipment(buy.member.name, buy.equipment.name);\\r\\n                if (result)\\r\\n                    ns.print(ns.sprintf(\\\"Buying %s:%s for %s\\\", buy.member.name, buy.equipment.name, ns.nFormat(buy.equipment.price, \\\"($0.000a)\\\")));\\r\\n            }\\r\\n        }\\r\\n        await ns.sleep(10000);\\r\\n        ns.print(ns.sprintf(\\\"==================================\\\"));\\r\\n    }\\r\\n    const tasks = ns.gang\\r\\n        .getTaskNames()\\r\\n        .map((_name) => ns.gang.getTaskStats(_name))\\r\\n        .filter((task) => task.isCombat)\\r\\n        .sort((a, b) => b.baseMoney - a.baseMoney);\\r\\n    for (const task of tasks) {\\r\\n        ns.tprintf(\\\"%22s %3s %3s %9s %s\\\", task.name, task.baseMoney, task.difficulty, task.baseRespect, task.baseWanted);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFja2luZ19nYW5nLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsiaGFja2luZ19nYW5nLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsRUFBRSxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUV2QixJQUFJLE9BQU8sQ0FBQztJQUNaLE9BQU8sSUFBSSxFQUFFO1FBQ1QsRUFBRSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLG9DQUFvQyxDQUFDLENBQUMsQ0FBQztRQUMzRCxJQUFJLFdBQVcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFDLE1BQU0sQ0FBQztRQUVsRCxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLEVBQUUsRUFBRTtZQUMvQixNQUFNLElBQUksR0FBRyxHQUFHLEdBQUcsV0FBVyxDQUFDLFFBQVEsRUFBRSxDQUFDO1lBQzFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQzVCLEVBQUUsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksRUFBRSxlQUFlLENBQUMsQ0FBQztZQUM3QyxXQUFXLEVBQUUsQ0FBQztTQUNqQjtRQUVELEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxvQ0FBb0MsQ0FBQyxDQUFDLENBQUM7UUFFM0QsT0FBTyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsY0FBYyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLG9CQUFvQixDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7UUFFckYsS0FBSyxNQUFNLE1BQU0sSUFBSSxPQUFPLEVBQUU7WUFDMUIsTUFBTSxNQUFNLEdBQUcsRUFB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\",\"filename\":\"hacking_gang.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hacking_gang.js\",\"url\":\"blob:file:///0623270c-392e-4194-b080-98f487f2dac0\",\"moduleSequenceNumber\":703}],\"dependents\":[],\"ramUsage\":36.2,\"server\":\"home\",\"moduleSequenceNumber\":137802,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gang.getMemberNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.canRecruitMember\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.recruitMember\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.setMemberTask\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.getMemberInformation\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.getAscensionResult\",\"cost\":2},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"gang.ascendMember\",\"cost\":4},{\"type\":\"fn\",\"name\":\"gang.getEquipmentNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.getEquipmentCost\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.getEquipmentType\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.getEquipmentStats\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getUpgradeHomeRamCost\",\"cost\":1.5},{\"type\":\"fn\",\"name\":\"upgradeHomeRam\",\"cost\":3},{\"type\":\"fn\",\"name\":\"stock.buy\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"gang.purchaseEquipment\",\"cost\":4},{\"type\":\"fn\",\"name\":\"gang.getTaskNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.getTaskStats\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { cleanLogs, llog } from \\\"bbutil\\\";\\r\\nconst CITIES = [\\\"Aevum\\\", \\\"Chongqing\\\", \\\"Sector-12\\\", \\\"New Tokyo\\\", \\\"Ishima\\\", \\\"Volhaven\\\"];\\r\\nexport async function main(ns) {\\r\\n    cleanLogs(ns);\\r\\n    const agDivName = \\\"Agriculture\\\";\\r\\n    const tbDivName = \\\"Tobacco\\\";\\r\\n    const tbRDCity = \\\"Aevum\\\";\\r\\n    try {\\r\\n        ns.corporation.getCorporation();\\r\\n    }\\r\\n    catch (e) {\\r\\n        llog(ns, \\\"Created Corporation for $150b\\\");\\r\\n        ns.corporation.createCorporation(\\\"Corporation\\\", true);\\r\\n    }\\r\\n    // open the Agriculture division\\r\\n    if (ns.corporation.getCorporation().divisions.find((div) => div.type === agDivName) === undefined) {\\r\\n        const divCost = ns.corporation.getExpandIndustryCost(agDivName);\\r\\n        llog(ns, \\\"Starting %s division for %s\\\", agDivName, ns.nFormat(divCost, \\\"($0.000a)\\\"));\\r\\n        ns.corporation.expandIndustry(agDivName, agDivName);\\r\\n    }\\r\\n    // buy one time upgrades Smart Supply and Warehouse API\\r\\n    for (const upgrade of [\\\"Smart Supply\\\", \\\"Warehouse API\\\"]) {\\r\\n        if (!ns.corporation.hasUnlockUpgrade(upgrade)) {\\r\\n            const upgradeCost = ns.corporation.getUnlockUpgradeCost(upgrade);\\r\\n            const corpFunds = ns.corporation.getCorporation().funds;\\r\\n            if (corpFunds < upgradeCost) {\\r\\n                llog(ns, \\\"WARNING: Insufficient funds to purchase %s %s < %s\\\", upgrade, ns.nFormat(corpFunds, \\\"($0.000a)\\\"), ns.nFormat(upgradeCost, \\\"($0.000a)\\\"));\\r\\n            }\\r\\n            else {\\r\\n                llog(ns, \\\"Purchasing %s upgrade for %s\\\", upgrade, ns.nFormat(upgradeCost, \\\"($0.000a)\\\"));\\r\\n                ns.corporation.unlockUpgrade(upgrade);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n    // buy levelable upgrades FocusWires, Neural Accelerators, Speech Processor Implants,\\r\\n    // Nuoptimal Nootropic Injector Implants, and Smart Factories\\r\\n    let leveledUpgrades = [\\r\\n        \\\"FocusWires\\\",\\r\\n        \\\"Neural Accelerators\\\",\\r\\n        \\\"Speech Processor Implants\\\",\\r\\n        \\\"Nuoptimal Nootropic Injector Implants\\\",\\r\\n        \\\"Smart Factories\\\",\\r\\n    ];\\r\\n    for (const upgrade of leveledUpgrades) {\\r\\n        while (ns.corporation.getUpgradeLevel(upgrade) < 2) {\\r\\n            const upgradeCost = ns.corporation.getUpgradeLevelCost(upgrade);\\r\\n            const corpFunds = ns.corporation.getCorporation().funds;\\r\\n            if (corpFunds < upgradeCost) {\\r\\n                llog(ns, \\\"WARNING: Insufficient funds to purchase %s %s < %s\\\", upgrade, ns.nFormat(corpFunds, \\\"($0.000a)\\\"), ns.nFormat(upgradeCost, \\\"($0.000a)\\\"));\\r\\n                break;\\r\\n            }\\r\\n            else {\\r\\n                llog(ns, \\\"Purchasing %s upgrade for %s\\\", upgrade, ns.nFormat(upgradeCost, \\\"($0.000a)\\\"));\\r\\n                ns.corporation.levelUpgrade(upgrade);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n    // Check primary city's warehouse and upgrade to 500\\r\\n    const primaryCity = ns.corporation.getDivision(agDivName).cities[0];\\r\\n    if (!ns.corporation.hasWarehouse(agDivName, primaryCity)) {\\r\\n        llog(ns, \\\"ERROR: %s primary city %s does not have a warehouse\\\", agDivName, primaryCity);\\r\\n        return;\\r\\n    }\\r\\n    while (ns.corporation.getWarehouse(agDivName, primaryCity).size < 500) {\\r\\n        const upgradeCost = ns.corporation.getUpgradeWarehouseCost(agDivName, primaryCity);\\r\\n        const corpFunds = ns.corporation.getCorporation().funds;\\r\\n        const startSize = ns.corporation.getWarehouse(agDivName, primaryCity).size;\\r\\n        if (corpFunds < upgradeCost) {\\r\\n            llog(ns, \\\"WARNING: Insufficient funds to purchase a warehouse upgrade %s < %s\\\", ns.nFormat(corpFunds, \\\"($0.000a)\\\"), ns.nFormat(upgradeCost, \\\"($0.000a)\\\"));\\r\\n        }\\r\\n        else {\\r\\n            ns.corporation.upgradeWarehouse(agDivName, primaryCity);\\r\\n            const endSize = ns.corporation.getWarehouse(agDivName, primaryCity).size;\\r\\n            llog(ns, \\\"Upgraded %s %s's warehouse size from %s to %s for %s\\\", agDivName, primaryCity, ns.nFormat(startSize, \\\"(0.000a)\\\"), ns.nFormat(endSize, \\\"(0.000a)\\\"), ns.nFormat(upgradeCost, \\\"($0.000a)\\\"));\\r\\n        }\\r\\n    }\\r\\n    if (ns.corporation.getWarehouse(agDivName, primaryCity).size < 500) {\\r\\n        llog(ns, \\\"ERROR: %s primary city %s's warehouse is too small %d < 500\\\", agDivName, primaryCity, ns.corporation.getWarehouse(agDivName, primaryCity).size);\\r\\n        return;\\r\\n    }\\r\\n    // buy production materials for primary city\\r\\n    if (ns.corporation.getMaterial(agDivName, primaryCity, \\\"Real Estate\\\").qty === 0) {\\r\\n        ns.corporation.buyMaterial(agDivName, primaryCity, \\\"Hardware\\\", 12.5);\\r\\n        ns.corporation.buyMaterial(agDivName, primaryCity, \\\"AI Cores\\\", 7.5);\\r\\n        ns.corporation.buyMaterial(agDivName, primaryCity, \\\"Real Estate\\\", 2700);\\r\\n        while (ns.corporation.getMaterial(agDivName, primaryCity, \\\"Real Estate\\\").qty === 0)\\r\\n            await ns.sleep(5);\\r\\n        llog(ns, \\\"Purchased Round 1 of %s production materials in %s\\\", agDivName, primaryCity);\\r\\n        ns.corporation.buyMaterial(agDivName, primaryCity, \\\"Hardware\\\", 0);\\r\\n        ns.corporation.buyMaterial(agDivName, primaryCity, \\\"AI Cores\\\", 0);\\r\\n        ns.corporation.buyMaterial(agDivName, primaryCity, \\\"Real Estate\\\", 0);\\r\\n    }\\r\\n    ns.corporation.setSmartSupply(agDivName, primaryCity, true);\\r\\n    // Attempt to get first round of funding\\r\\n    while (ns.corporation.getInvestmentOffer().round < 2) {\\r\\n        llog(ns, \\\"Investment round 1: waiting for %s %s warehouse to fill\\\", agDivName, primaryCity);\\r\\n        // Sell plants but not food (food is more expensive per unit)\\r\\n        ns.corporation.sellMaterial(agDivName, primaryCity, \\\"Food\\\", \\\"0\\\", \\\"0\\\");\\r\\n        ns.corporation.sellMaterial(agDivName, primaryCity, \\\"Plants\\\", \\\"MAX\\\", \\\"MP\\\");\\r\\n        while (ns.corporation.getWarehouse(agDivName, primaryCity).sizeUsed <\\r\\n            ns.corporation.getWarehouse(agDivName, primaryCity).size * 0.95) {\\r\\n            await ns.sleep(1000);\\r\\n        }\\r\\n        llog(ns, \\\"Investment round 1: %s %s warehouse is full, initiating bulk sell-off to woo investors\\\", agDivName, primaryCity);\\r\\n        ns.corporation.sellMaterial(agDivName, primaryCity, \\\"Food\\\", \\\"MAX\\\", \\\"MP*1\\\");\\r\\n        ns.corporation.sellMaterial(agDivName, primaryCity, \\\"Plants\\\", \\\"MAX\\\", \\\"MP*1\\\");\\r\\n        let tookOffer = false;\\r\\n        let bestOffer = ns.corporation.getInvestmentOffer();\\r\\n        while (ns.corporation.getWarehouse(agDivName, primaryCity).sizeUsed > 151) {\\r\\n            const offer = ns.corporation.getInvestmentOffer();\\r\\n            // only take offers over $335b\\r\\n            if (offer.funds > 335000000000) {\\r\\n                ns.corporation.acceptInvestmentOffer();\\r\\n                llog(ns, \\\"Investment round 1: Taking offer of %s for %d%%\\\", ns.nFormat(offer.funds, \\\"(0.000a)\\\"), (offer.shares / 1000000000) * 100);\\r\\n                tookOffer = true;\\r\\n                break;\\r\\n            }\\r\\n            if (offer.funds > bestOffer.funds) {\\r\\n                bestOffer = offer;\\r\\n            }\\r\\n            await ns.sleep(100);\\r\\n        }\\r\\n        if (!tookOffer) {\\r\\n            llog(ns, \\\"Investment round 1: Failed to generate an offer over $335b (best: %s for %d%%)\\\", ns.nFormat(bestOffer.funds, \\\"(0.000a)\\\"), (bestOffer.shares / 1000000000) * 100);\\r\\n        }\\r\\n    }\\r\\n    // revert sale prices for now\\r\\n    ns.corporation.sellMaterial(agDivName, primaryCity, \\\"Food\\\", \\\"MAX\\\", \\\"MP\\\");\\r\\n    ns.corporation.sellMaterial(agDivName, primaryCity, \\\"Plants\\\", \\\"MAX\\\", \\\"MP\\\");\\r\\n    // buy one time upgrade Office API\\r\\n    for (const upgrade of [\\\"Office API\\\"]) {\\r\\n        if (!ns.corporation.hasUnlockUpgrade(upgrade)) {\\r\\n            const upgradeCost = ns.corporation.getUnlockUpgradeCost(upgrade);\\r\\n            const corpFunds = ns.corporation.getCorporation().funds;\\r\\n            if (corpFunds < upgradeCost) {\\r\\n                llog(ns, \\\"ERROR: Insufficient funds to purchase %s %s < %s\\\", upgrade, ns.nFormat(corpFunds, \\\"($0.000a)\\\"), ns.nFormat(upgradeCost, \\\"($0.000a)\\\"));\\r\\n                return;\\r\\n            }\\r\\n            else {\\r\\n                llog(ns, \\\"Purchasing %s upgrade for %s\\\", upgrade, ns.nFormat(upgradeCost, \\\"($0.000a)\\\"));\\r\\n                ns.corporation.unlockUpgrade(upgrade);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n    // Expand to additional cities\\r\\n    for (const city of CITIES.filter((a) => !ns.corporation.getDivision(agDivName).cities.includes(a))) {\\r\\n        const expandCost = ns.corporation.getExpandCityCost();\\r\\n        const corpFunds = ns.corporation.getCorporation().funds;\\r\\n        if (corpFunds < expandCost) {\\r\\n            llog(ns, \\\"ERROR: Insufficient funds to expand %s to %s %s < %s\\\", agDivName, city, ns.nFormat(corpFunds, \\\"($0.000a)\\\"), ns.nFormat(expandCost, \\\"($0.000a)\\\"));\\r\\n            return;\\r\\n        }\\r\\n        else {\\r\\n            llog(ns, \\\"Expanding %s to %s for %s\\\", agDivName, city, ns.nFormat(expandCost, \\\"($0.000a)\\\"));\\r\\n            ns.corporation.expandCity(agDivName, city);\\r\\n        }\\r\\n    }\\r\\n    // Buy warehouses in all cities\\r\\n    for (const city of ns.corporation.getDivision(agDivName).cities) {\\r\\n        if (!ns.corporation.hasWarehouse(agDivName, city)) {\\r\\n            const warehouseCost = ns.corporation.getPurchaseWarehouseCost();\\r\\n            const corpFunds = ns.corporation.getCorporation().funds;\\r\\n            if (warehouseCost <= corpFunds) {\\r\\n                llog(ns, \\\"Purchasing a %s warehouse in %s for %s\\\", agDivName, city, ns.nFormat(warehouseCost, \\\"($0.000a)\\\"));\\r\\n                ns.corporation.purchaseWarehouse(agDivName, city);\\r\\n            }\\r\\n            else {\\r\\n                llog(ns, \\\"Insufficient funds to purchase a %s warehouse in %s %s < %s\\\", agDivName, city, ns.nFormat(corpFunds, \\\"($0.000a)\\\"), ns.nFormat(warehouseCost, \\\"($0.000a)\\\"));\\r\\n                return;\\r\\n            }\\r\\n        }\\r\\n        // upgrade the size of the warehouses in all of the cities to 500\\r\\n        while (ns.corporation.getWarehouse(agDivName, city).size < 500) {\\r\\n            const upgradeCost = ns.corporation.getUpgradeWarehouseCost(agDivName, city);\\r\\n            const corpFunds = ns.corporation.getCorporation().funds;\\r\\n            const startSize = ns.corporation.getWarehouse(agDivName, city).size;\\r\\n            if (corpFunds < upgradeCost) {\\r\\n                llog(ns, \\\"WARNING: Insufficient funds to purchase a warehouse upgrade %s < %s\\\", ns.nFormat(corpFunds, \\\"($0.000a)\\\"), ns.nFormat(upgradeCost, \\\"($0.000a)\\\"));\\r\\n            }\\r\\n            else {\\r\\n                ns.corporation.upgradeWarehouse(agDivName, city);\\r\\n                const endSize = ns.corporation.getWarehouse(agDivName, city).size;\\r\\n                llog(ns, \\\"Upgraded %s %s's warehouse size from %s to %s for %s\\\", agDivName, city, ns.nFormat(startSize, \\\"(0.000a)\\\"), ns.nFormat(endSize, \\\"(0.000a)\\\"), ns.nFormat(upgradeCost, \\\"($0.000a)\\\"));\\r\\n            }\\r\\n        }\\r\\n        ns.corporation.setSmartSupply(agDivName, city, true);\\r\\n        ns.corporation.sellMaterial(agDivName, city, \\\"Food\\\", \\\"MAX\\\", \\\"MP\\\");\\r\\n        ns.corporation.sellMaterial(agDivName, city, \\\"Plants\\\", \\\"MAX\\\", \\\"MP\\\");\\r\\n    }\\r\\n    // upgrade the office size in every city to 9 and assign jobs\\r\\n    for (const city of ns.corporation.getDivision(agDivName).cities) {\\r\\n        if (ns.corporation.getOffice(agDivName, city).size >= 9) {\\r\\n            continue;\\r\\n        }\\r\\n        const upgradeCost = ns.corporation.getOfficeSizeUpgradeCost(agDivName, city, 9 - ns.corporation.getOffice(agDivName, city).size);\\r\\n        const corpFunds = ns.corporation.getCorporation().funds;\\r\\n        if (corpFunds < upgradeCost) {\\r\\n            llog(ns, \\\"ERROR: Insufficient funds to increase %s %s office size to 9 %s < %s\\\", agDivName, city, ns.nFormat(corpFunds, \\\"($0.000a)\\\"), ns.nFormat(upgradeCost, \\\"($0.000a)\\\"));\\r\\n            return;\\r\\n        }\\r\\n        else {\\r\\n            llog(ns, \\\"Purchasing %d additional office positions in %s %s for %s\\\", 9 - ns.corporation.getOffice(agDivName, city).size, agDivName, city, ns.nFormat(upgradeCost, \\\"($0.000a)\\\"));\\r\\n            ns.corporation.upgradeOfficeSize(agDivName, city, 9 - ns.corporation.getOffice(agDivName, city).size);\\r\\n        }\\r\\n        while (ns.corporation.getOffice(agDivName, city).employees.length < 9) {\\r\\n            ns.corporation.hireEmployee(agDivName, city);\\r\\n        }\\r\\n        await ns.corporation.setAutoJobAssignment(agDivName, city, \\\"Unassigned\\\", 9);\\r\\n        await ns.corporation.setAutoJobAssignment(agDivName, city, \\\"Operations\\\", 2);\\r\\n        await ns.corporation.setAutoJobAssignment(agDivName, city, \\\"Engineer\\\", 2);\\r\\n        await ns.corporation.setAutoJobAssignment(agDivName, city, \\\"Business\\\", 1);\\r\\n        await ns.corporation.setAutoJobAssignment(agDivName, city, \\\"Management\\\", 2);\\r\\n        await ns.corporation.setAutoJobAssignment(agDivName, city, \\\"Research & Development\\\", 2);\\r\\n    }\\r\\n    // buy production materials for all cities\\r\\n    for (const city of ns.corporation.getDivision(agDivName).cities) {\\r\\n        if (ns.corporation.getMaterial(agDivName, city, \\\"Real Estate\\\").qty === 0) {\\r\\n            ns.corporation.buyMaterial(agDivName, city, \\\"Hardware\\\", 12.5);\\r\\n            ns.corporation.buyMaterial(agDivName, city, \\\"AI Cores\\\", 7.5);\\r\\n            ns.corporation.buyMaterial(agDivName, city, \\\"Real Estate\\\", 2700);\\r\\n            while (ns.corporation.getMaterial(agDivName, city, \\\"Real Estate\\\").qty === 0)\\r\\n                await ns.sleep(5);\\r\\n            llog(ns, \\\"Purchased Round 1 of %s production materials in %s\\\", agDivName, city);\\r\\n            ns.corporation.buyMaterial(agDivName, city, \\\"Hardware\\\", 0);\\r\\n            ns.corporation.buyMaterial(agDivName, city, \\\"AI Cores\\\", 0);\\r\\n            ns.corporation.buyMaterial(agDivName, city, \\\"Real Estate\\\", 0);\\r\\n        }\\r\\n    }\\r\\n    // Upgrade Smart Factories and Smart Storage\\r\\n    leveledUpgrades = [\\\"Smart Factories\\\", \\\"Smart Storage\\\"];\\r\\n    for (const upgrade of leveledUpgrades) {\\r\\n        while (ns.corporation.getUpgradeLevel(upgrade) < 10) {\\r\\n            const upgradeCost = ns.corporation.getUpgradeLevelCost(upgrade);\\r\\n            const corpFunds = ns.corporation.getCorporation().funds;\\r\\n            if (corpFunds < upgradeCost) {\\r\\n                llog(ns, \\\"WARNING: Insufficient funds to purchase %s %s < %s\\\", upgrade, ns.nFormat(corpFunds, \\\"($0.000a)\\\"), ns.nFormat(upgradeCost, \\\"($0.000a)\\\"));\\r\\n                break;\\r\\n            }\\r\\n            else {\\r\\n                llog(ns, \\\"Purchasing %s upgrade for %s\\\", upgrade, ns.nFormat(upgradeCost, \\\"($0.000a)\\\"));\\r\\n                ns.corporation.levelUpgrade(upgrade);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n    // Increase Warehouse Sizes to 2k\\r\\n    for (const city of ns.corporation.getDivision(agDivName).cities) {\\r\\n        while (ns.corporation.getWarehouse(agDivName, city).size < 2000) {\\r\\n            const upgradeCost = ns.corporation.getUpgradeWarehouseCost(agDivName, city);\\r\\n            const corpFunds = ns.corporation.getCorporation().funds;\\r\\n            const startSize = ns.corporation.getWarehouse(agDivName, city).size;\\r\\n            if (corpFunds < upgradeCost) {\\r\\n                llog(ns, \\\"WARNING: Insufficient funds to purchase a warehouse upgrade %s < %s\\\", ns.nFormat(corpFunds, \\\"($0.000a)\\\"), ns.nFormat(upgradeCost, \\\"($0.000a)\\\"));\\r\\n            }\\r\\n            else {\\r\\n                ns.corporation.upgradeWarehouse(agDivName, city);\\r\\n                const endSize = ns.corporation.getWarehouse(agDivName, city).size;\\r\\n                llog(ns, \\\"Upgraded %s %s's warehouse size from %s to %s for %s\\\", agDivName, city, ns.nFormat(startSize, \\\"(0.000a)\\\"), ns.nFormat(endSize, \\\"(0.000a)\\\"), ns.nFormat(upgradeCost, \\\"($0.000a)\\\"));\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n    // buy second round production materials for all cities\\r\\n    for (const city of ns.corporation.getDivision(agDivName).cities) {\\r\\n        if (ns.corporation.getMaterial(agDivName, city, \\\"Real Estate\\\").qty < 140000) {\\r\\n            ns.corporation.buyMaterial(agDivName, city, \\\"Hardware\\\", 267.5);\\r\\n            ns.corporation.buyMaterial(agDivName, city, \\\"Robots\\\", 9.6);\\r\\n            ns.corporation.buyMaterial(agDivName, city, \\\"AI Cores\\\", 244.5);\\r\\n            ns.corporation.buyMaterial(agDivName, city, \\\"Real Estate\\\", 11940);\\r\\n            while (ns.corporation.getMaterial(agDivName, city, \\\"Real Estate\\\").qty < 140000)\\r\\n                await ns.sleep(5);\\r\\n            llog(ns, \\\"Purchased Round 2 of %s production materials in %s\\\", agDivName, city);\\r\\n            ns.corporation.buyMaterial(agDivName, city, \\\"Hardware\\\", 0);\\r\\n            ns.corporation.buyMaterial(agDivName, city, \\\"Robots\\\", 0);\\r\\n            ns.corporation.buyMaterial(agDivName, city, \\\"AI Cores\\\", 0);\\r\\n            ns.corporation.buyMaterial(agDivName, city, \\\"Real Estate\\\", 0);\\r\\n        }\\r\\n    }\\r\\n    // Attempt to get second round of funding\\r\\n    while (ns.corporation.getInvestmentOffer().round < 3) {\\r\\n        llog(ns, \\\"Investment round 2: waiting for %s warehouses to fill\\\", agDivName);\\r\\n        // Sell plants but not food (food is more expensive per unit)\\r\\n        for (const city of ns.corporation.getDivision(agDivName).cities) {\\r\\n            ns.corporation.sellMaterial(agDivName, city, \\\"Food\\\", \\\"0\\\", \\\"0\\\");\\r\\n            ns.corporation.sellMaterial(agDivName, city, \\\"Plants\\\", \\\"MAX\\\", \\\"MP\\\");\\r\\n        }\\r\\n        while (true) {\\r\\n            let doBreak = true;\\r\\n            for (const city of ns.corporation.getDivision(agDivName).cities) {\\r\\n                if (ns.corporation.getWarehouse(agDivName, city).sizeUsed <\\r\\n                    ns.corporation.getWarehouse(agDivName, city).size * 0.95) {\\r\\n                    doBreak = false;\\r\\n                    break;\\r\\n                }\\r\\n            }\\r\\n            if (doBreak)\\r\\n                break;\\r\\n            await ns.sleep(1000);\\r\\n        }\\r\\n        llog(ns, \\\"Investment round 2: %s warehouses are full, initiating bulk sell-off to woo investors\\\", agDivName);\\r\\n        for (const city of ns.corporation.getDivision(agDivName).cities) {\\r\\n            ns.corporation.sellMaterial(agDivName, city, \\\"Food\\\", \\\"MAX\\\", \\\"MP*0.9\\\");\\r\\n            ns.corporation.sellMaterial(agDivName, city, \\\"Plants\\\", \\\"MAX\\\", \\\"MP*0.9\\\");\\r\\n        }\\r\\n        let tookOffer = false;\\r\\n        let bestOffer = ns.corporation.getInvestmentOffer();\\r\\n        while (ns.corporation.getWarehouse(agDivName, primaryCity).sizeUsed > 1250) {\\r\\n            const offer = ns.corporation.getInvestmentOffer();\\r\\n            //only take offers over $10t\\r\\n            if (offer.funds > 10000000000000) {\\r\\n                ns.corporation.acceptInvestmentOffer();\\r\\n                llog(ns, \\\"Investment round 2: Taking offer of %s for %d%%\\\", ns.nFormat(offer.funds, \\\"(0.000a)\\\"), (offer.shares / 1000000000) * 100);\\r\\n                tookOffer = true;\\r\\n                break;\\r\\n            }\\r\\n            if (offer.funds > bestOffer.funds) {\\r\\n                bestOffer = offer;\\r\\n            }\\r\\n            await ns.sleep(100);\\r\\n        }\\r\\n        if (!tookOffer) {\\r\\n            llog(ns, \\\"Investment round 2: Failed to generate an offer over $10t (best: %s for %d%%)\\\", ns.nFormat(bestOffer.funds, \\\"(0.000a)\\\"), (bestOffer.shares / 1000000000) * 100);\\r\\n        }\\r\\n    }\\r\\n    // Increase Warehouse Sizes to 3.8k\\r\\n    for (const city of ns.corporation.getDivision(agDivName).cities) {\\r\\n        while (ns.corporation.getWarehouse(agDivName, city).size < 3800) {\\r\\n            const upgradeCost = ns.corporation.getUpgradeWarehouseCost(agDivName, city);\\r\\n            const corpFunds = ns.corporation.getCorporation().funds;\\r\\n            const startSize = ns.corporation.getWarehouse(agDivName, city).size;\\r\\n            if (corpFunds < upgradeCost) {\\r\\n                llog(ns, \\\"WARNING: Insufficient funds to purchase a warehouse upgrade %s < %s\\\", ns.nFormat(corpFunds, \\\"($0.000a)\\\"), ns.nFormat(upgradeCost, \\\"($0.000a)\\\"));\\r\\n            }\\r\\n            else {\\r\\n                ns.corporation.upgradeWarehouse(agDivName, city);\\r\\n                const endSize = ns.corporation.getWarehouse(agDivName, city).size;\\r\\n                llog(ns, \\\"Upgraded %s %s's warehouse size from %s to %s for %s\\\", agDivName, city, ns.nFormat(startSize, \\\"(0.000a)\\\"), ns.nFormat(endSize, \\\"(0.000a)\\\"), ns.nFormat(upgradeCost, \\\"($0.000a)\\\"));\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n    // buy third round production materials for all cities\\r\\n    for (const city of ns.corporation.getDivision(agDivName).cities) {\\r\\n        if (ns.corporation.getMaterial(agDivName, city, \\\"Real Estate\\\").qty < 230000) {\\r\\n            ns.corporation.buyMaterial(agDivName, city, \\\"Hardware\\\", 650);\\r\\n            ns.corporation.buyMaterial(agDivName, city, \\\"Robots\\\", 63);\\r\\n            ns.corporation.buyMaterial(agDivName, city, \\\"AI Cores\\\", 375);\\r\\n            ns.corporation.buyMaterial(agDivName, city, \\\"Real Estate\\\", 8400);\\r\\n            while (ns.corporation.getMaterial(agDivName, city, \\\"Real Estate\\\").qty < 230000)\\r\\n                await ns.sleep(5);\\r\\n            llog(ns, \\\"Purchased Round 3 of %s production materials in %s\\\", agDivName, city);\\r\\n            ns.corporation.buyMaterial(agDivName, city, \\\"Hardware\\\", 0);\\r\\n            ns.corporation.buyMaterial(agDivName, city, \\\"Robots\\\", 0);\\r\\n            ns.corporation.buyMaterial(agDivName, city, \\\"AI Cores\\\", 0);\\r\\n            ns.corporation.buyMaterial(agDivName, city, \\\"Real Estate\\\", 0);\\r\\n        }\\r\\n    }\\r\\n    // open the Tobacco division\\r\\n    if (ns.corporation.getCorporation().divisions.find((div) => div.type === tbDivName) === undefined) {\\r\\n        const divCost = ns.corporation.getExpandIndustryCost(tbDivName);\\r\\n        llog(ns, \\\"Starting %s division for %s\\\", tbDivName, ns.nFormat(divCost, \\\"($0.000a)\\\"));\\r\\n        ns.corporation.expandIndustry(tbDivName, tbDivName);\\r\\n    }\\r\\n    // Expand to additional cities\\r\\n    for (const city of CITIES.filter((a) => !ns.corporation.getDivision(tbDivName).cities.includes(a))) {\\r\\n        const expandCost = ns.corporation.getExpandCityCost();\\r\\n        const corpFunds = ns.corporation.getCorporation().funds;\\r\\n        if (corpFunds < expandCost) {\\r\\n            llog(ns, \\\"ERROR: Insufficient funds to expand %s to %s %s < %s\\\", tbDivName, city, ns.nFormat(corpFunds, \\\"($0.000a)\\\"), ns.nFormat(expandCost, \\\"($0.000a)\\\"));\\r\\n            return;\\r\\n        }\\r\\n        else {\\r\\n            llog(ns, \\\"Expanding %s to %s for %s\\\", tbDivName, city, ns.nFormat(expandCost, \\\"($0.000a)\\\"));\\r\\n            ns.corporation.expandCity(tbDivName, city);\\r\\n        }\\r\\n    }\\r\\n    // Buy warehouses in all cities\\r\\n    for (const city of ns.corporation.getDivision(tbDivName).cities) {\\r\\n        if (!ns.corporation.hasWarehouse(tbDivName, city)) {\\r\\n            const warehouseCost = ns.corporation.getPurchaseWarehouseCost();\\r\\n            const corpFunds = ns.corporation.getCorporation().funds;\\r\\n            if (warehouseCost <= corpFunds) {\\r\\n                llog(ns, \\\"Purchasing a %s warehouse in %s for %s\\\", tbDivName, city, ns.nFormat(warehouseCost, \\\"($0.000a)\\\"));\\r\\n                ns.corporation.purchaseWarehouse(tbDivName, city);\\r\\n            }\\r\\n            else {\\r\\n                llog(ns, \\\"Insufficient funds to purchase a %s warehouse in %s %s < %s\\\", tbDivName, city, ns.nFormat(corpFunds, \\\"($0.000a)\\\"), ns.nFormat(warehouseCost, \\\"($0.000a)\\\"));\\r\\n                return;\\r\\n            }\\r\\n        }\\r\\n        // upgrade the size of the warehouses in all of the cities to 1000\\r\\n        while (ns.corporation.getWarehouse(tbDivName, city).size < 1000) {\\r\\n            const upgradeCost = ns.corporation.getUpgradeWarehouseCost(tbDivName, city);\\r\\n            const corpFunds = ns.corporation.getCorporation().funds;\\r\\n            const startSize = ns.corporation.getWarehouse(tbDivName, city).size;\\r\\n            if (corpFunds < upgradeCost) {\\r\\n                llog(ns, \\\"WARNING: Insufficient funds to purchase a warehouse upgrade %s < %s\\\", ns.nFormat(corpFunds, \\\"($0.000a)\\\"), ns.nFormat(upgradeCost, \\\"($0.000a)\\\"));\\r\\n            }\\r\\n            else {\\r\\n                ns.corporation.upgradeWarehouse(tbDivName, city);\\r\\n                const endSize = ns.corporation.getWarehouse(tbDivName, city).size;\\r\\n                llog(ns, \\\"Upgraded %s %s's warehouse size from %s to %s for %s\\\", tbDivName, city, ns.nFormat(startSize, \\\"(0.000a)\\\"), ns.nFormat(endSize, \\\"(0.000a)\\\"), ns.nFormat(upgradeCost, \\\"($0.000a)\\\"));\\r\\n            }\\r\\n        }\\r\\n        ns.corporation.setSmartSupply(tbDivName, city, true);\\r\\n    }\\r\\n    // upgrade the office size in every city to 10 and assign jobs\\r\\n    for (const city of ns.corporation.getDivision(tbDivName).cities) {\\r\\n        if (ns.corporation.getOffice(tbDivName, city).size >= 10) {\\r\\n            continue;\\r\\n        }\\r\\n        const upgradeCost = ns.corporation.getOfficeSizeUpgradeCost(tbDivName, city, 10 - ns.corporation.getOffice(tbDivName, city).size);\\r\\n        const corpFunds = ns.corporation.getCorporation().funds;\\r\\n        if (corpFunds < upgradeCost) {\\r\\n            llog(ns, \\\"ERROR: Insufficient funds to increase %s %s office size to 10 %s < %s\\\", tbDivName, city, ns.nFormat(corpFunds, \\\"($0.000a)\\\"), ns.nFormat(upgradeCost, \\\"($0.000a)\\\"));\\r\\n            return;\\r\\n        }\\r\\n        else {\\r\\n            llog(ns, \\\"Purchasing %d additional office positions in %s %s for %s\\\", 10 - ns.corporation.getOffice(tbDivName, city).size, tbDivName, city, ns.nFormat(upgradeCost, \\\"($0.000a)\\\"));\\r\\n            ns.corporation.upgradeOfficeSize(tbDivName, city, 10 - ns.corporation.getOffice(tbDivName, city).size);\\r\\n        }\\r\\n        while (ns.corporation.getOffice(tbDivName, city).employees.length < 10) {\\r\\n            ns.corporation.hireEmployee(tbDivName, city);\\r\\n        }\\r\\n        await ns.corporation.setAutoJobAssignment(tbDivName, city, \\\"Unassigned\\\", 2);\\r\\n        await ns.corporation.setAutoJobAssignment(tbDivName, city, \\\"Operations\\\", 2);\\r\\n        await ns.corporation.setAutoJobAssignment(tbDivName, city, \\\"Engineer\\\", 2);\\r\\n        await ns.corporation.setAutoJobAssignment(tbDivName, city, \\\"Business\\\", 2);\\r\\n        await ns.corporation.setAutoJobAssignment(tbDivName, city, \\\"Management\\\", 2);\\r\\n        await ns.corporation.setAutoJobAssignment(tbDivName, city, \\\"Research & Development\\\", 2);\\r\\n    }\\r\\n    // Upgrade Aevum office to 30 employees\\r\\n    if (ns.corporation.getOffice(tbDivName, tbRDCity).size < 30) {\\r\\n        const upgradeCost = ns.corporation.getOfficeSizeUpgradeCost(tbDivName, tbRDCity, 30 - ns.corporation.getOffice(tbDivName, tbRDCity).size);\\r\\n        const corpFunds = ns.corporation.getCorporation().funds;\\r\\n        if (corpFunds < upgradeCost) {\\r\\n            llog(ns, \\\"ERROR: Insufficient funds to increase %s %s office size to 30 %s < %s\\\", tbDivName, tbRDCity, ns.nFormat(corpFunds, \\\"($0.000a)\\\"), ns.nFormat(upgradeCost, \\\"($0.000a)\\\"));\\r\\n            return;\\r\\n        }\\r\\n        else {\\r\\n            llog(ns, \\\"Purchasing %d additional office positions in %s %s for %s\\\", 30 - ns.corporation.getOffice(tbDivName, tbRDCity).size, tbDivName, tbRDCity, ns.nFormat(upgradeCost, \\\"($0.000a)\\\"));\\r\\n            ns.corporation.upgradeOfficeSize(tbDivName, tbRDCity, 30 - ns.corporation.getOffice(tbDivName, tbRDCity).size);\\r\\n        }\\r\\n        while (ns.corporation.getOffice(tbDivName, tbRDCity).employees.length < 30) {\\r\\n            ns.corporation.hireEmployee(tbDivName, tbRDCity);\\r\\n        }\\r\\n        await ns.corporation.setAutoJobAssignment(tbDivName, tbRDCity, \\\"Unassigned\\\", 30);\\r\\n        await ns.corporation.setAutoJobAssignment(tbDivName, tbRDCity, \\\"Operations\\\", 6);\\r\\n        await ns.corporation.setAutoJobAssignment(tbDivName, tbRDCity, \\\"Engineer\\\", 6);\\r\\n        await ns.corporation.setAutoJobAssignment(tbDivName, tbRDCity, \\\"Business\\\", 6);\\r\\n        await ns.corporation.setAutoJobAssignment(tbDivName, tbRDCity, \\\"Management\\\", 6);\\r\\n        await ns.corporation.setAutoJobAssignment(tbDivName, tbRDCity, \\\"Research & Development\\\", 6);\\r\\n    }\\r\\n    leveledUpgrades = [\\r\\n        \\\"FocusWires\\\",\\r\\n        \\\"Neural Accelerators\\\",\\r\\n        \\\"Speech Processor Implants\\\",\\r\\n        \\\"Nuoptimal Nootropic Injector Implants\\\",\\r\\n    ];\\r\\n    for (const upgrade of leveledUpgrades) {\\r\\n        while (ns.corporation.getUpgradeLevel(upgrade) < 20) {\\r\\n            const upgradeCost = ns.corporation.getUpgradeLevelCost(upgrade);\\r\\n            const corpFunds = ns.corporation.getCorporation().funds;\\r\\n            if (corpFunds < upgradeCost) {\\r\\n                llog(ns, \\\"WARNING: Insufficient funds to purchase %s %s < %s\\\", upgrade, ns.nFormat(corpFunds, \\\"($0.000a)\\\"), ns.nFormat(upgradeCost, \\\"($0.000a)\\\"));\\r\\n                break;\\r\\n            }\\r\\n            else {\\r\\n                llog(ns, \\\"Purchasing %s upgrade for %s\\\", upgrade, ns.nFormat(upgradeCost, \\\"($0.000a)\\\"));\\r\\n                ns.corporation.levelUpgrade(upgrade);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n    let doUpdate = false;\\r\\n    let didUpdate = false;\\r\\n    const productTracker = {};\\r\\n    // initialize product tracker\\r\\n    ns.corporation\\r\\n        .getDivision(tbDivName)\\r\\n        .products.map((prodname) => ns.corporation.getProduct(tbDivName, prodname))\\r\\n        .forEach((product) => {\\r\\n        productTracker[product.name] = {\\r\\n            state: \\\"HOLD\\\",\\r\\n            mult: Number(product.sCost.toString().slice(3)),\\r\\n            min: 0,\\r\\n            max: 0,\\r\\n        };\\r\\n    });\\r\\n    while (true) {\\r\\n        const state = ns.corporation.getCorporation().state;\\r\\n        if (state === \\\"START\\\") {\\r\\n            doUpdate = true;\\r\\n        }\\r\\n        if (state !== \\\"START\\\") {\\r\\n            doUpdate = false;\\r\\n            didUpdate = false;\\r\\n        }\\r\\n        if (doUpdate && !didUpdate) {\\r\\n            //llog(ns, \\\"Doing Update\\\");\\r\\n            didUpdate = true;\\r\\n            // Attempt to max out Wilson Analytics\\r\\n            while (ns.corporation.getUpgradeLevelCost(\\\"Wilson Analytics\\\") <\\r\\n                ns.corporation.getCorporation().funds * 0.5) {\\r\\n                const upgradeCost = ns.corporation.getUpgradeLevelCost(\\\"Wilson Analytics\\\");\\r\\n                llog(ns, \\\"Purchasing %s upgrade for %s\\\", \\\"Wilson Analytics\\\", ns.nFormat(upgradeCost, \\\"($0.000a)\\\"));\\r\\n                ns.corporation.levelUpgrade(\\\"Wilson Analytics\\\");\\r\\n            }\\r\\n            let maxProducts = 3;\\r\\n            if (ns.corporation.hasResearched(tbDivName, \\\"uPgrade: Capacity.I\\\"))\\r\\n                maxProducts++;\\r\\n            if (ns.corporation.hasResearched(tbDivName, \\\"uPgrade: Capacity.II\\\"))\\r\\n                maxProducts++;\\r\\n            // Develop a product if there are none in development\\r\\n            let products = ns.corporation\\r\\n                .getDivision(tbDivName)\\r\\n                .products.map((prodname) => ns.corporation.getProduct(tbDivName, prodname))\\r\\n                .sort((a, b) => Number(a.name.slice(5)) - Number(b.name.slice(5)));\\r\\n            let productIsDeveloping = false;\\r\\n            for (const product of products) {\\r\\n                if (product.developmentProgress < 100) {\\r\\n                    productIsDeveloping = true;\\r\\n                    break;\\r\\n                }\\r\\n            }\\r\\n            // if there are no products in development, discontinue the oldest one if needed\\r\\n            if (!productIsDeveloping) {\\r\\n                if (products.length === maxProducts) {\\r\\n                    llog(ns, \\\"Discontinuing %s product %s\\\", tbDivName, products[0].name);\\r\\n                    ns.corporation.discontinueProduct(tbDivName, products[0].name);\\r\\n                }\\r\\n                const investmentCash = ns.corporation.getCorporation().funds * 0.01;\\r\\n                let productName = \\\"prod-0\\\";\\r\\n                let newMult = 1;\\r\\n                if (products.length > 0) {\\r\\n                    productName = \\\"prod-\\\" + (Number(products[products.length - 1].name.slice(5)) + 1).toString();\\r\\n                }\\r\\n                if (products.length > 1) {\\r\\n                    newMult = Number(products[products.length - 2].sCost.toString().slice(3));\\r\\n                }\\r\\n                llog(ns, \\\"Developing new %s product %s for %s\\\", tbDivName, productName, ns.nFormat(investmentCash * 2, \\\"($0.000a)\\\"));\\r\\n                ns.corporation.makeProduct(tbDivName, tbRDCity, productName, investmentCash, investmentCash);\\r\\n                ns.corporation.sellProduct(tbDivName, tbRDCity, productName, \\\"MAX\\\", \\\"MP*\\\" + newMult.toString(), true);\\r\\n            }\\r\\n            products = ns.corporation\\r\\n                .getDivision(tbDivName)\\r\\n                .products.map((prodname) => ns.corporation.getProduct(tbDivName, prodname))\\r\\n                .sort((a, b) => Number(a.name) - Number(b.name));\\r\\n            // mess with the price of products\\r\\n            for (const product of products) {\\r\\n                if (product.developmentProgress < 100)\\r\\n                    continue;\\r\\n                let mpMult = Number(product.sCost.toString().slice(3));\\r\\n                let reduceMult = false;\\r\\n                let increaseMult = 0;\\r\\n                for (const [qty, prod, sell] of Object.values(product.cityData)) {\\r\\n                    const prodDeficit = prod - sell;\\r\\n                    if (qty > prod * 20 && prodDeficit > 0) {\\r\\n                        reduceMult = true;\\r\\n                        break;\\r\\n                    }\\r\\n                    else if (qty < prod * 10 || prodDeficit < -1) {\\r\\n                        increaseMult++;\\r\\n                    }\\r\\n                }\\r\\n                if (reduceMult) {\\r\\n                    const oldmpMult = mpMult;\\r\\n                    mpMult = Math.max(Math.floor(mpMult * 0.975), 1);\\r\\n                    llog(ns, \\\"Reducing %s mpMult %d => %d\\\", product.name, oldmpMult, mpMult);\\r\\n                    ns.corporation.sellProduct(tbDivName, tbRDCity, product.name, \\\"MAX\\\", \\\"MP*\\\" + mpMult.toString(), true);\\r\\n                }\\r\\n                else if (increaseMult === Object.keys(product.cityData).length) {\\r\\n                    const oldmpMult = mpMult;\\r\\n                    mpMult = Math.ceil(mpMult * 1.1);\\r\\n                    llog(ns, \\\"Increasing %s mpMult %d => %d\\\", product.name, oldmpMult, mpMult);\\r\\n                    ns.corporation.sellProduct(tbDivName, tbRDCity, product.name, \\\"MAX\\\", \\\"MP*\\\" + mpMult.toString(), true);\\r\\n                }\\r\\n            }\\r\\n            ////////////////////////////////////////\\r\\n            // look for optimal MP multiplier\\r\\n            // search state uses binary search to find equilibrium\\r\\n            // hold state uses small increments up or down to hold diff between -1 and 0\\r\\n            //\\r\\n            // Hold Mode:\\r\\n            // prod = production of the highest producing city\\r\\n            // if all diffs are <= 0 and all qty are < prod*10, start increasing\\r\\n            // if any diffs are > 0 start decreasing\\r\\n            // if all diffs are <= 0 and all qty are < prod*20, hold\\r\\n            //\\r\\n            // * start multiplier for new product at the same multiplier for the latest product\\r\\n            //\\r\\n            // after research is > 10k, wait for the latest product to finish, find optimal MPMult for that product and get 3rd round of funding\\r\\n            //\\r\\n            // after 3rd round of funding, go public with 0 shares, set dividenend to 5%\\r\\n            // compare price of increasing advertising vs increasing office space, do the cheaper if it's affordable\\r\\n            let officeSizeIncrease = 0;\\r\\n            let officeSizePrice = 0;\\r\\n            let advertIncrease = 0;\\r\\n            let advertPrice = 0;\\r\\n            while (true) {\\r\\n                const advertCost = ns.corporation.getHireAdVertCost(tbDivName);\\r\\n                const tbRDCityOfficeExpandCost = ns.corporation.getOfficeSizeUpgradeCost(tbDivName, tbRDCity, 15);\\r\\n                if (advertCost > ns.corporation.getCorporation().funds * 0.5 &&\\r\\n                    tbRDCityOfficeExpandCost > ns.corporation.getCorporation().funds * 0.5)\\r\\n                    break;\\r\\n                if (advertCost < tbRDCityOfficeExpandCost) {\\r\\n                    advertIncrease++;\\r\\n                    advertPrice += advertCost;\\r\\n                    ns.corporation.hireAdVert(tbDivName);\\r\\n                    continue;\\r\\n                }\\r\\n                officeSizeIncrease += 15;\\r\\n                officeSizePrice += tbRDCityOfficeExpandCost;\\r\\n                ns.corporation.upgradeOfficeSize(tbDivName, tbRDCity, 15);\\r\\n            }\\r\\n            if (advertIncrease > 0) {\\r\\n                llog(ns, \\\"Hiring %s AdVert %dx for %s\\\", tbDivName, advertIncrease, ns.nFormat(advertPrice, \\\"($0.000a)\\\"));\\r\\n            }\\r\\n            if (officeSizeIncrease > 0) {\\r\\n                llog(ns, \\\"Hiring %d employees in %s:%s for %s\\\", officeSizeIncrease, tbDivName, tbRDCity, ns.nFormat(officeSizePrice, \\\"($0.000a)\\\"));\\r\\n                const officeSize = ns.corporation.getOffice(tbDivName, tbRDCity).size;\\r\\n                while (ns.corporation.getOffice(tbDivName, tbRDCity).employees.length < officeSize) {\\r\\n                    ns.corporation.hireEmployee(tbDivName, tbRDCity);\\r\\n                }\\r\\n                await ns.corporation.setAutoJobAssignment(tbDivName, tbRDCity, \\\"Unassigned\\\", officeSize);\\r\\n                await ns.corporation.setAutoJobAssignment(tbDivName, tbRDCity, \\\"Operations\\\", officeSize / 5);\\r\\n                await ns.corporation.setAutoJobAssignment(tbDivName, tbRDCity, \\\"Engineer\\\", officeSize / 5);\\r\\n                await ns.corporation.setAutoJobAssignment(tbDivName, tbRDCity, \\\"Business\\\", officeSize / 5);\\r\\n                await ns.corporation.setAutoJobAssignment(tbDivName, tbRDCity, \\\"Management\\\", officeSize / 5);\\r\\n                await ns.corporation.setAutoJobAssignment(tbDivName, tbRDCity, \\\"Research & Development\\\", officeSize / 5);\\r\\n            }\\r\\n            // if any of the other office sizes are < 20% the size of the Aevum office, attempt to increase their size\\r\\n            const cityIncrease = {};\\r\\n            for (const city of ns.corporation.getDivision(tbDivName).cities) {\\r\\n                // iterate as long as this city's office size is less than 20% of Aevum's and the price\\r\\n                // of upgrading is less than 5% of the corporation's funds\\r\\n                while (ns.corporation.getOffice(tbDivName, city).size <\\r\\n                    ns.corporation.getOffice(tbDivName, tbRDCity).size * 0.2 &&\\r\\n                    ns.corporation.getOfficeSizeUpgradeCost(tbDivName, city, 5) <\\r\\n                        ns.corporation.getCorporation().funds * 0.05) {\\r\\n                    const cost = ns.corporation.getOfficeSizeUpgradeCost(tbDivName, city, 5);\\r\\n                    ns.corporation.upgradeOfficeSize(tbDivName, city, 5);\\r\\n                    if (!(city in cityIncrease)) {\\r\\n                        cityIncrease[city] = {\\r\\n                            inc: 5,\\r\\n                            cost: cost,\\r\\n                        };\\r\\n                    }\\r\\n                    else {\\r\\n                        cityIncrease[city].inc += 5;\\r\\n                        cityIncrease[city].cost += cost;\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n            for (const [city, val] of Object.entries(cityIncrease)) {\\r\\n                llog(ns, \\\"Hiring %d employees in %s:%s for %s\\\", val.inc, tbDivName, city, ns.nFormat(val.cost, \\\"($0.000a)\\\"));\\r\\n                const officeSize = ns.corporation.getOffice(tbDivName, city).size;\\r\\n                while (ns.corporation.getOffice(tbDivName, city).employees.length < officeSize) {\\r\\n                    ns.corporation.hireEmployee(tbDivName, city);\\r\\n                }\\r\\n                await ns.corporation.setAutoJobAssignment(tbDivName, city, \\\"Unassigned\\\", officeSize);\\r\\n                await ns.corporation.setAutoJobAssignment(tbDivName, city, \\\"Operations\\\", officeSize / 5);\\r\\n                await ns.corporation.setAutoJobAssignment(tbDivName, city, \\\"Engineer\\\", officeSize / 5);\\r\\n                await ns.corporation.setAutoJobAssignment(tbDivName, city, \\\"Business\\\", officeSize / 5);\\r\\n                await ns.corporation.setAutoJobAssignment(tbDivName, city, \\\"Management\\\", officeSize / 5);\\r\\n                await ns.corporation.setAutoJobAssignment(tbDivName, city, \\\"Research & Development\\\", officeSize / 5);\\r\\n            }\\r\\n            const leveledUpgrades = [\\r\\n                \\\"Project Insight\\\",\\r\\n                \\\"Nuoptimal Nootropic Injector Implants\\\",\\r\\n                \\\"Smart Factories\\\",\\r\\n                \\\"DreamSense\\\",\\r\\n                \\\"Speech Processor Implants\\\",\\r\\n                \\\"Neural Accelerators\\\",\\r\\n                \\\"FocusWires\\\",\\r\\n                \\\"ABC SalesBots\\\",\\r\\n                \\\"Smart Storage\\\",\\r\\n            ];\\r\\n            for (const upgrade of leveledUpgrades) {\\r\\n                let upgradeCount = 0;\\r\\n                let upgradeCost = 0;\\r\\n                while (ns.corporation.getUpgradeLevelCost(upgrade) < ns.corporation.getCorporation().funds * 0.01) {\\r\\n                    upgradeCost += ns.corporation.getUpgradeLevelCost(upgrade);\\r\\n                    upgradeCount++;\\r\\n                    ns.corporation.levelUpgrade(upgrade);\\r\\n                }\\r\\n                if (upgradeCount > 0) {\\r\\n                    llog(ns, \\\"Purchased %dx %s upgrade for %s\\\", upgradeCount, upgrade, ns.nFormat(upgradeCost, \\\"($0.000a)\\\"));\\r\\n                }\\r\\n            }\\r\\n            // attempt to expand to additional divisions to improve valuation\\r\\n            const divisions = [\\r\\n                \\\"Food\\\",\\r\\n                \\\"Software\\\",\\r\\n                \\\"Chemical\\\",\\r\\n                \\\"Fishing\\\",\\r\\n                \\\"Utilities\\\",\\r\\n                \\\"Pharmaceutical\\\",\\r\\n                \\\"Energy\\\",\\r\\n                \\\"Mining\\\",\\r\\n                \\\"Computer\\\",\\r\\n                \\\"RealEstate\\\",\\r\\n                \\\"Healthcare\\\",\\r\\n                \\\"Robotics\\\",\\r\\n            ];\\r\\n            for (const division of divisions) {\\r\\n                if (ns.corporation.getCorporation().divisions.find((div) => div.type === division) === undefined &&\\r\\n                    ns.corporation.getExpandIndustryCost(division) < ns.corporation.getCorporation().funds) {\\r\\n                    const divCost = ns.corporation.getExpandIndustryCost(division);\\r\\n                    llog(ns, \\\"Starting %s division for %s\\\", division, ns.nFormat(divCost, \\\"($0.000a)\\\"));\\r\\n                    ns.corporation.expandIndustry(division, division);\\r\\n                }\\r\\n            }\\r\\n            // If all divisions have been built and a 3rd round investment offer is made for > $1q, accept\\r\\n            const offer = ns.corporation.getInvestmentOffer();\\r\\n            if (ns.corporation.getCorporation().divisions.length === 14 &&\\r\\n                offer.round === 3 &&\\r\\n                offer.funds > 1000000000000000) {\\r\\n                ns.corporation.acceptInvestmentOffer();\\r\\n                llog(ns, \\\"Investment round 3: Taking offer of %s for %d%%\\\", ns.nFormat(offer.funds, \\\"(0.000a)\\\"), (offer.shares / 1000000000) * 100);\\r\\n            }\\r\\n            // Buy Research Upgrades -- buy after high priority researches, and only if purchase cost is < 5% of total research\\r\\n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n            const lowPriorityResearches = [\\r\\n                \\\"Automatic Drug Administration\\\",\\r\\n                \\\"CPH4 Injections\\\",\\r\\n                \\\"Drones\\\",\\r\\n                \\\"Drones - Assembly\\\",\\r\\n                \\\"Drones - Transport\\\",\\r\\n                \\\"Go-Juice\\\",\\r\\n                \\\"JoyWire\\\",\\r\\n                \\\"Overclock\\\",\\r\\n                \\\"Self-Correcting Assemblers\\\",\\r\\n                \\\"Sti.mu\\\",\\r\\n            ];\\r\\n            // High Priority - buy when purchase cost is 50% of total research\\r\\n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n            const highPriorityResearches = [\\r\\n                \\\"Hi-Tech R&D Laboratory\\\",\\r\\n                \\\"Market-TA.I\\\",\\r\\n                \\\"Market-TA.II\\\",\\r\\n                \\\"uPgrade: Fulcrum\\\",\\r\\n                \\\"uPgrade: Capacity.I\\\",\\r\\n                \\\"uPgrade: Capacity.II\\\",\\r\\n            ];\\r\\n            // buy one time unlocks government partnership and shady accounting after going public\\r\\n        }\\r\\n        await ns.sleep(20);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29ycC5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImNvcnAudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLFNBQVMsRUFBRSxJQUFJLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFFekMsTUFBTSxNQUFNLEdBQUcsQ0FBQyxPQUFPLEVBQUUsV0FBVyxFQUFFLFdBQVcsRUFBRSxXQUFXLEVBQUUsUUFBUSxFQUFFLFVBQVUsQ0FBQyxDQUFDO0FBRXRGLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsU0FBUyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBRWQsTUFBTSxTQUFTLEdBQUcsYUFBYSxDQUFDO0lBQ2hDLE1BQU0sU0FBUyxHQUFHLFNBQVMsQ0FBQztJQUM1QixNQUFNLFFBQVEsR0FBRyxPQUFPLENBQUM7SUFFekIsSUFBSTtRQUNBLEVBQUUsQ0FBQyxXQUFXLENBQUMsY0FBYyxFQUFFLENBQUM7S0FDbkM7SUFBQyxPQUFPLENBQUMsRUFBRTtRQUNSLElBQUksQ0FBQyxFQUFFLEVBQUUsK0JBQStCLENBQUMsQ0FBQztRQUMxQyxFQUFFLENBQUMsV0FBVyxDQUFDLGlCQUFpQixDQUFDLGFBQWEsRUFBRSxJQUFJLENBQUMsQ0FBQztLQUN6RDtJQUVELGdDQUFnQztJQUNoQyxJQUFJLEVBQUUsQ0FBQyxXQUFXLENBQUMsY0FBYyxFQUFFLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsR0FBRyxDQUFDLElBQUksS0FBSyxTQUFTLENBQUMsS0FBSyxTQUFTLEVBQUU7UUFDL0YsTUFBTSxPQUFPLEdBQUcsRUFBRSxDQUFDLFdBQVcsQ0FBQyxxQkFBcUIsQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUVoRSxJQUFJLENBQUMsRUFBRSxFQUFFLDZCQUE2QixFQUFFLFNBQVMsRUFBRSxFQUFFLENBQUMsT0FBTyxDQUFDLE9B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\",\"filename\":\"corp.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"util.js\",\"url\":\"blob:file:///8dad3988-2cb1-4364-a32a-48d97b3223e0\",\"moduleSequenceNumber\":10497},{\"filename\":\"corp.js\",\"url\":\"blob:file:///6468dec6-e665-4028-b27a-7990b5581f8d\",\"moduleSequenceNumber\":10570}],\"dependents\":[],\"ramUsage\":1026.5,\"server\":\"home\",\"moduleSequenceNumber\":137788,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"ns\",\"name\":\"corporation\",\"cost\":1022.4},{\"type\":\"fn\",\"name\":\"stock.sell\",\"cost\":2.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function llog(ns, str, ...args) {\\r\\n    ns.print(ns.sprintf(\\\"%8s \\\" + str, new Date().toLocaleTimeString(\\\"it-IT\\\"), ...args));\\r\\n}\\r\\nexport function softenServer(ns, hostname) {\\r\\n    if (ns.hasRootAccess(hostname)) {\\r\\n        return;\\r\\n    }\\r\\n    let ports = 0;\\r\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n        ns.brutessh(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n        ns.ftpcrack(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n        ns.httpworm(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n        ns.relaysmtp(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n        ns.sqlinject(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ports >= ns.getServerNumPortsRequired(hostname)) {\\r\\n        ns.nuke(hostname);\\r\\n    }\\r\\n}\\r\\nexport function serverIsHackable(ns, hostname) {\\r\\n    return ns.hasRootAccess(hostname) && ns.getHackingLevel() >= ns.getServerRequiredHackingLevel(hostname);\\r\\n}\\r\\nexport function canExecuteOnServer(ns, hostname) {\\r\\n    return ns.hasRootAccess(hostname) && ns.getServerMaxRam(hostname) > 0;\\r\\n}\\r\\nexport function mapHosts(ns, hosts = {}, parents = [], current = \\\"home\\\") {\\r\\n    const newParents = parents.concat(current);\\r\\n    hosts[current] = newParents;\\r\\n    const children = ns.scan(current).filter((element) => !parents.includes(element));\\r\\n    for (const child of children) {\\r\\n        mapHosts(ns, hosts, newParents, child);\\r\\n    }\\r\\n    return hosts;\\r\\n}\\r\\nexport function allHosts(ns) {\\r\\n    return Object.keys(mapHosts(ns));\\r\\n}\\r\\nexport function doProgramBuys(ns) {\\r\\n    const player = ns.getPlayer();\\r\\n    if (!player.tor && player.money > 200e3)\\r\\n        ns.purchaseTor();\\r\\n    if (!ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\") && player.money > 500e3)\\r\\n        ns.purchaseProgram(\\\"BruteSSH.exe\\\");\\r\\n    if (!ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\") && player.money > 1500e3)\\r\\n        ns.purchaseProgram(\\\"FTPCrack.exe\\\");\\r\\n    if (!ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\") && player.money > 5e6)\\r\\n        ns.purchaseProgram(\\\"relaySMTP.exe\\\");\\r\\n    if (!ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\") && player.money > 30e6)\\r\\n        ns.purchaseProgram(\\\"HTTPWorm.exe\\\");\\r\\n    if (!ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\") && player.money > 250e6)\\r\\n        ns.purchaseProgram(\\\"SQLInject.exe\\\");\\r\\n}\\r\\nexport function doBuyAndSoftenAll(ns) {\\r\\n    doProgramBuys(ns);\\r\\n    for (const hostname of allHosts(ns)) {\\r\\n        softenServer(ns, hostname);\\r\\n    }\\r\\n}\\r\\nexport function stFormat(ns, ms, showms = false, showfull = false) {\\r\\n    let timeLeft = ms;\\r\\n    const hours = Math.floor(ms / (1000 * 60 * 60));\\r\\n    timeLeft -= hours * (1000 * 60 * 60);\\r\\n    const minutes = Math.floor(timeLeft / (1000 * 60));\\r\\n    timeLeft -= minutes * (1000 * 60);\\r\\n    const seconds = Math.floor(timeLeft / 1000);\\r\\n    timeLeft -= seconds * 1000;\\r\\n    const milliseconds = timeLeft;\\r\\n    if (showms) {\\r\\n        if (hours > 0 || showfull)\\r\\n            return ns.sprintf(\\\"%02d:%02d:%02d.%03d\\\", hours, minutes, seconds, milliseconds);\\r\\n        if (minutes > 0)\\r\\n            return ns.sprintf(\\\"%02d:%02d.%03d\\\", minutes, seconds, milliseconds);\\r\\n        return ns.sprintf(\\\"%02d.%03d\\\", seconds, milliseconds);\\r\\n    }\\r\\n    else {\\r\\n        if (hours > 0 || showfull)\\r\\n            return ns.sprintf(\\\"%02d:%02d:%02d\\\", hours, minutes, seconds);\\r\\n        if (minutes > 0)\\r\\n            return ns.sprintf(\\\"%02d:%02d\\\", minutes, seconds);\\r\\n        return ns.sprintf(\\\"%02d\\\", seconds);\\r\\n    }\\r\\n}\\r\\nexport function stdFormat(ns, offset = 0, showms = false) {\\r\\n    const date = new Date(new Date().getTime() + offset);\\r\\n    if (showms) {\\r\\n        const ms = ns.sprintf(\\\"%03d\\\", date.getUTCMilliseconds());\\r\\n        return date.toLocaleTimeString(\\\"it-IT\\\") + \\\".\\\" + ms;\\r\\n    }\\r\\n    else {\\r\\n        return date.toLocaleTimeString(\\\"it-IT\\\");\\r\\n    }\\r\\n}\\r\\nexport async function doBackdoors(ns) {\\r\\n    //const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"w0r1d_d43m0n\\\", \\\"b-and-a\\\", \\\"ecorp\\\", \\\"fulcrumassets\\\", \\\"fulcrumtech\\\"];\\r\\n    //const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"omnitek\\\", \\\"kuai-gong\\\", \\\"megacorp\\\"];\\r\\n    const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"w0r1d_d43m0n\\\"];\\r\\n    const hosts = mapHosts(ns);\\r\\n    for (const [hostName, trail] of Object.entries(hosts)) {\\r\\n        const server = ns.getServer(hostName);\\r\\n        if (!targetHosts.includes(hostName) ||\\r\\n            server.backdoorInstalled ||\\r\\n            server.requiredHackingSkill > ns.getHackingLevel() ||\\r\\n            !server.hasAdminRights)\\r\\n            continue;\\r\\n        ns.print(hostName);\\r\\n        for (const hostHopName of trail) {\\r\\n            ns.connect(hostHopName);\\r\\n        }\\r\\n        await ns.installBackdoor();\\r\\n        ns.connect(\\\"home\\\");\\r\\n    }\\r\\n}\\r\\nexport function cleanLogs(ns) {\\r\\n    ns.disableLog(\\\"disableLog\\\");\\r\\n    ns.disableLog(\\\"ALL\\\");\\r\\n    // ns.disableLog(\\\"sleep\\\")\\r\\n    // ns.disableLog(\\\"exec\\\")\\r\\n    // ns.disableLog(\\\"getServerMaxRam\\\")\\r\\n    // ns.disableLog(\\\"getServerSecurityLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerMinSecurityLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerMaxMoney\\\")\\r\\n    // ns.disableLog(\\\"getHackingLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerRequiredHackingLevel\\\")\\r\\n    // ns.disableLog(\\\"scan\\\")\\r\\n    // ns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n    // ns.disableLog(\\\"getServerUsedRam\\\")\\r\\n}\\r\\nexport const ALL_FACTIONS = [\\r\\n    \\\"Illuminati\\\",\\r\\n    \\\"Daedalus\\\",\\r\\n    \\\"The Covenant\\\",\\r\\n    \\\"ECorp\\\",\\r\\n    \\\"MegaCorp\\\",\\r\\n    \\\"Bachman & Associates\\\",\\r\\n    \\\"Blade Industries\\\",\\r\\n    \\\"NWO\\\",\\r\\n    \\\"Clarke Incorporated\\\",\\r\\n    \\\"OmniTek Incorporated\\\",\\r\\n    \\\"Four Sigma\\\",\\r\\n    \\\"KuaiGong International\\\",\\r\\n    \\\"Fulcrum Secret Technologies\\\",\\r\\n    \\\"BitRunners\\\",\\r\\n    \\\"The Black Hand\\\",\\r\\n    \\\"NiteSec\\\",\\r\\n    \\\"Aevum\\\",\\r\\n    \\\"Chongqing\\\",\\r\\n    \\\"Ishima\\\",\\r\\n    \\\"New Tokyo\\\",\\r\\n    \\\"Sector-12\\\",\\r\\n    \\\"Volhaven\\\",\\r\\n    \\\"Speakers for the Dead\\\",\\r\\n    \\\"The Dark Army\\\",\\r\\n    \\\"The Syndicate\\\",\\r\\n    \\\"Silhouette\\\",\\r\\n    \\\"Tetrads\\\",\\r\\n    \\\"Slum Snakes\\\",\\r\\n    \\\"Netburners\\\",\\r\\n    \\\"Tian Di Hui\\\",\\r\\n    \\\"CyberSec\\\",\\r\\n    \\\"Bladeburners\\\",\\r\\n    \\\"Church of the Machine God\\\",\\r\\n];\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmJ1dGlsLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsiYmJ1dGlsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sVUFBVSxJQUFJLENBQUMsRUFBTSxFQUFFLEdBQVcsRUFBRSxHQUFHLElBQXlCO0lBQ2xFLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEdBQUcsR0FBRyxFQUFFLElBQUksSUFBSSxFQUFFLENBQUMsa0JBQWtCLENBQUMsT0FBTyxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDO0FBQ3hGLENBQUM7QUFFRCxNQUFNLFVBQVUsWUFBWSxDQUFDLEVBQU0sRUFBRSxRQUFnQjtJQUNqRCxJQUFJLEVBQUUsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDNUIsT0FBTztLQUNWO0lBRUQsSUFBSSxLQUFLLEdBQUcsQ0FBQyxDQUFDO0lBQ2QsSUFBSSxFQUFFLENBQUMsVUFBVSxDQUFDLGNBQWMsRUFBRSxNQUFNLENBQUMsRUFBRTtRQUN2QyxFQUFFLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ3RCLEtBQUssRUFBRSxDQUFDO0tBQ1g7SUFFRCxJQUFJLEVBQUUsQ0FBQyxVQUFVLENBQUMsY0FBYyxFQUFFLE1BQU0sQ0FBQyxFQUFFO1FBQ3ZDLEVBQUUsQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDdEIsS0FBSyxFQUFFLENBQUM7S0FDWDtJQUVELElBQUksRUFBRSxDQUFDLFVBQVUsQ0FBQyxjQUFjLEVBQUUsTUFBTSxDQUFDLEVBQUU7UUFDdkMsRUFBRSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUN0QixLQUFLLEVBQUUsQ0FBQztLQUNYO0lBRUQsSUFBSSxFQUFFLENBQUMsVUFBVSxDQUFDLGVBQWUsRUFBRSxNQUFNLENBQUMsRUFBRTtRQUN4QyxFQUFFLENBQUMs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\",\"filename\":\"bbutil.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":13.05,\"server\":\"home\",\"moduleSequenceNumber\":137774,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"purchaseTor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"purchaseProgram\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"connect\",\"cost\":2},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":2}]}}],\"serversOnNetwork\":[\"n00dles\",\"foodnstuff\",\"sigma-cosmetics\",\"joesguns\",\"hong-fang-tea\",\"harakiri-sushi\",\"iron-gym\",\"darkweb\",\"hacknet-node-0\",\"hacknet-node-1\",\"hacknet-node-2\",\"hacknet-node-3\",\"hacknet-node-4\",\"hacknet-node-5\",\"hacknet-node-6\",\"hacknet-node-7\",\"hacknet-node-8\",\"hacknet-node-9\",\"hacknet-node-10\",\"hacknet-node-11\",\"hacknet-node-12\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":1,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"ecorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"ecorp\",\"httpPortOpen\":true,\"ip\":\"11.7.5.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"clarkinc\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":247.5,\"hackDifficulty\":247.5,\"minDifficulty\":83,\"moneyAvailable\":5263401680.1,\"moneyMax\":13158504200.250002,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1155,\"serverGrowth\":99}},\"megacorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"megacorp\",\"httpPortOpen\":true,\"ip\":\"44.6.3.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"powerhouse-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":247.5,\"hackDifficulty\":247.5,\"minDifficulty\":83,\"moneyAvailable\":4125591430,\"moneyMax\":10313978575,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1113,\"serverGrowth\":99}},\"b-and-a\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"b-and-a\",\"httpPortOpen\":true,\"ip\":\"23.4.1.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"4sigma\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":200,\"hackDifficulty\":200,\"minDifficulty\":67,\"moneyAvailable\":2719335806.5,\"moneyMax\":6798339516.25,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1137,\"serverGrowth\":78}},\"blade\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"blade\",\"httpPortOpen\":true,\"ip\":\"5.0.5.4\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"ramUsed\":155.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",5,1644424421976],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":3.8100000000000014,\"pid\":11617,\"ramUsage\":1.75,\"server\":\"blade\",\"threads\":52,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///d441febc-31d0-4ef7-83ef-9ecf4bac8da4\",\"moduleSequenceNumber\":138053}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",6,1644424421976],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":3.0100000000000007,\"pid\":11618,\"ramUsage\":1.75,\"server\":\"blade\",\"threads\":3,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///d441febc-31d0-4ef7-83ef-9ecf4bac8da4\",\"moduleSequenceNumber\":138053}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",4,1644424421976],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.01,\"pid\":11619,\"ramUsage\":1.75,\"server\":\"blade\",\"threads\":34,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///4aa65776-a92e-4f40-a708-5c3927851f7c\",\"moduleSequenceNumber\":138054}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const hostname = ns.args[0].toString();\\r\\n    await ns.grow(hostname);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImdyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLFFBQVEsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ3ZDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUM1QixDQUFDIn0=\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///4aa65776-a92e-4f40-a708-5c3927851f7c\",\"moduleSequenceNumber\":138054}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"blade\",\"moduleSequenceNumber\":138054,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const hostname = ns.args[0].toString();\\r\\n    await ns.weaken(hostname);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsid2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxRQUFRLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUN2QyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDOUIsQ0FBQyJ9\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///d441febc-31d0-4ef7-83ef-9ecf4bac8da4\",\"moduleSequenceNumber\":138053}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"blade\",\"moduleSequenceNumber\":138053,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const hostname = ns.args[0].toString();\\r\\n    await ns.hack(hostname);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImhhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLFFBQVEsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ3ZDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUM1QixDQUFDIn0=\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///21951e57-0d0d-4c86-815c-370369635460\",\"moduleSequenceNumber\":138055}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"blade\",\"moduleSequenceNumber\":138055,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"omnitek\",\"fulcrumassets\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":232.5,\"hackDifficulty\":232.5,\"minDifficulty\":78,\"moneyAvailable\":1829730642.2,\"moneyMax\":4574326605.5,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1097,\"serverGrowth\":76}},\"nwo\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nwo\",\"httpPortOpen\":true,\"ip\":\"18.8.1.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"NWO\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\".\",\"The-Cave\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":247.5,\"hackDifficulty\":247.5,\"minDifficulty\":83,\"moneyAvailable\":3401143144.2000003,\"moneyMax\":8502857860.5,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1197,\"serverGrowth\":87}},\"clarkinc\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"clarkinc\",\"httpPortOpen\":true,\"ip\":\"1.9.4.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\".\",\"ecorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":147.5,\"hackDifficulty\":147.5,\"minDifficulty\":49,\"moneyAvailable\":2136436841.1000001,\"moneyMax\":5341092102.75,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1156,\"serverGrowth\":68}},\"omnitek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omnitek\",\"httpPortOpen\":true,\"ip\":\"90.3.1.5\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const hostname = ns.args[0].toString();\\r\\n    await ns.grow(hostname);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImdyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLFFBQVEsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ3ZDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUM1QixDQUFDIn0=\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omnitek\",\"moduleSequenceNumber\":137994,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const hostname = ns.args[0].toString();\\r\\n    await ns.weaken(hostname);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsid2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxRQUFRLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUN2QyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDOUIsQ0FBQyJ9\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omnitek\",\"moduleSequenceNumber\":137996,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const hostname = ns.args[0].toString();\\r\\n    await ns.hack(hostname);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImhhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLFFBQVEsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ3ZDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUM1QixDQUFDIn0=\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///d8b52985-d5bd-4036-9996-4e968a7b13bd\",\"moduleSequenceNumber\":138056}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"omnitek\",\"moduleSequenceNumber\":138056,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"stormtech\",\"blade\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":225,\"hackDifficulty\":225,\"minDifficulty\":75,\"moneyAvailable\":1794872182,\"moneyMax\":4487180455,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1098,\"serverGrowth\":95}},\"4sigma\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"4sigma\",\"httpPortOpen\":true,\"ip\":\"67.7.3.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"helios\",\"b-and-a\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":160,\"hackDifficulty\":160,\"minDifficulty\":53,\"moneyAvailable\":2287519588.5,\"moneyMax\":5718798971.25,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":989,\"serverGrowth\":75}},\"kuai-gong\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"kuai-gong\",\"httpPortOpen\":true,\"ip\":\"51.6.0.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"fulcrumtech\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":245,\"hackDifficulty\":245,\"minDifficulty\":82,\"moneyAvailable\":2170157948.5,\"moneyMax\":5425394871.25,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1161,\"serverGrowth\":92}},\"fulcrumtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":true,\"ip\":\"67.9.7.9\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const hostname = ns.args[0].toString();\\r\\n    await ns.grow(hostname);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImdyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLFFBQVEsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ3ZDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUM1QixDQUFDIn0=\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":137988,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const hostname = ns.args[0].toString();\\r\\n    await ns.weaken(hostname);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsid2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxRQUFRLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUN2QyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDOUIsQ0FBQyJ9\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":137990,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const hostname = ns.args[0].toString();\\r\\n    await ns.hack(hostname);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImhhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLFFBQVEsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ3ZDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUM1QixDQUFDIn0=\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///0a18ca77-8d82-432a-b39f-ba68038db033\",\"moduleSequenceNumber\":138058}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":138058,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"run4theh111z\",\"kuai-gong\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":242.5,\"hackDifficulty\":242.5,\"minDifficulty\":81,\"moneyAvailable\":157487721.5,\"moneyMax\":393719303.75,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1230,\"serverGrowth\":82}},\"fulcrumassets\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":true,\"ip\":\"25.5.4.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"blade\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":247.5,\"hackDifficulty\":247.5,\"minDifficulty\":83,\"moneyAvailable\":100000,\"moneyMax\":250000,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1556,\"serverGrowth\":1}},\"stormtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"stormtech\",\"httpPortOpen\":true,\"ip\":\"56.0.1.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"applied-energetics\",\"omnitek\",\".\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":197.5,\"hackDifficulty\":197.5,\"minDifficulty\":66,\"moneyAvailable\":107022007.60000001,\"moneyMax\":267555019,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":958,\"serverGrowth\":77}},\"defcomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"defcomm\",\"httpPortOpen\":true,\"ip\":\"63.2.4.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"deltaone\",\"infocomm\",\"taiyang-digital\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":222.5,\"hackDifficulty\":222.5,\"minDifficulty\":74,\"moneyAvailable\":82058351.60000001,\"moneyMax\":205145879.00000003,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1030,\"serverGrowth\":52}},\"infocomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"infocomm\",\"httpPortOpen\":true,\"ip\":\"80.2.3.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"defcomm\",\"microdyne\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":200,\"hackDifficulty\":200,\"minDifficulty\":67,\"moneyAvailable\":86355385.60000001,\"moneyMax\":215888464,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":910,\"serverGrowth\":40}},\"helios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"helios\",\"httpPortOpen\":true,\"ip\":\"51.5.3.2\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const hostname = ns.args[0].toString();\\r\\n    await ns.grow(hostname);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImdyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLFFBQVEsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ3ZDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUM1QixDQUFDIn0=\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"helios\",\"moduleSequenceNumber\":138018,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const hostname = ns.args[0].toString();\\r\\n    await ns.weaken(hostname);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsid2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxRQUFRLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUN2QyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDOUIsQ0FBQyJ9\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"helios\",\"moduleSequenceNumber\":138020,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const hostname = ns.args[0].toString();\\r\\n    await ns.hack(hostname);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImhhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLFFBQVEsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ3ZDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUM1QixDQUFDIn0=\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"helios\",\"moduleSequenceNumber\":138022,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"microdyne\",\"4sigma\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":230,\"hackDifficulty\":230,\"minDifficulty\":77,\"moneyAvailable\":70353095.9,\"moneyMax\":175882739.75000003,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":836,\"serverGrowth\":71}},\"vitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"vitalife\",\"httpPortOpen\":true,\"ip\":\"53.0.7.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const hostname = ns.args[0].toString();\\r\\n    await ns.grow(hostname);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImdyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLFFBQVEsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ3ZDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUM1QixDQUFDIn0=\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"vitalife\",\"moduleSequenceNumber\":138048,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const hostname = ns.args[0].toString();\\r\\n    await ns.weaken(hostname);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsid2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxRQUFRLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUN2QyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDOUIsQ0FBQyJ9\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"vitalife\",\"moduleSequenceNumber\":138050,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const hostname = ns.args[0].toString();\\r\\n    await ns.hack(hostname);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImhhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLFFBQVEsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ3ZDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUM1QixDQUFDIn0=\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"vitalife\",\"moduleSequenceNumber\":138052,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"microdyne\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":217.5,\"hackDifficulty\":217.5,\"minDifficulty\":73,\"moneyAvailable\":79428267.9,\"moneyMax\":198570669.75000003,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":892,\"serverGrowth\":70}},\"icarus\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"icarus\",\"httpPortOpen\":true,\"ip\":\"50.0.4.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnia\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":220,\"hackDifficulty\":220,\"minDifficulty\":73,\"moneyAvailable\":92005980.30000001,\"moneyMax\":230014950.75000006,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":860,\"serverGrowth\":88}},\"univ-energy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"univ-energy\",\"httpPortOpen\":true,\"ip\":\"95.3.9.1\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const hostname = ns.args[0].toString();\\r\\n    await ns.grow(hostname);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImdyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLFFBQVEsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ3ZDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUM1QixDQUFDIn0=\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///4175c596-74f6-4efb-9a2b-953ec5316836\",\"moduleSequenceNumber\":73645}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"univ-energy\",\"moduleSequenceNumber\":73645,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const hostname = ns.args[0].toString();\\r\\n    await ns.weaken(hostname);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsid2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxRQUFRLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUN2QyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDOUIsQ0FBQyJ9\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///b30f326f-32b5-491a-b9bd-f44aa5e63f3c\",\"moduleSequenceNumber\":73644}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"univ-energy\",\"moduleSequenceNumber\":73644,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const hostname = ns.args[0].toString();\\r\\n    await ns.hack(hostname);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImhhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLFFBQVEsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ3ZDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUM1QixDQUFDIn0=\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///6a4f68b7-6de2-41ad-b72e-9f85c0d29864\",\"moduleSequenceNumber\":65030}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"univ-energy\",\"moduleSequenceNumber\":65030,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"deltaone\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":222.5,\"hackDifficulty\":222.5,\"minDifficulty\":74,\"moneyAvailable\":119588634.7,\"moneyMax\":298971586.75,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":890,\"serverGrowth\":84}},\"titan-labs\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"titan-labs\",\"httpPortOpen\":true,\"ip\":\"90.6.1.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const hostname = ns.args[0].toString();\\r\\n    await ns.grow(hostname);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImdyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLFFBQVEsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ3ZDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUM1QixDQUFDIn0=\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"titan-labs\",\"moduleSequenceNumber\":138042,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const hostname = ns.args[0].toString();\\r\\n    await ns.weaken(hostname);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsid2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxRQUFRLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUN2QyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDOUIsQ0FBQyJ9\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"titan-labs\",\"moduleSequenceNumber\":138044,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const hostname = ns.args[0].toString();\\r\\n    await ns.hack(hostname);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImhhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLFFBQVEsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ3ZDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUM1QixDQUFDIn0=\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"titan-labs\",\"moduleSequenceNumber\":138046,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"nova-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":185,\"hackDifficulty\":185,\"minDifficulty\":62,\"moneyAvailable\":80053521.8,\"moneyMax\":200133804.5,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":825,\"serverGrowth\":79}},\"microdyne\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"microdyne\",\"httpPortOpen\":true,\"ip\":\"12.8.4.8\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const hostname = ns.args[0].toString();\\r\\n    await ns.grow(hostname);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImdyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLFFBQVEsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ3ZDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUM1QixDQUFDIn0=\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"microdyne\",\"moduleSequenceNumber\":138012,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const hostname = ns.args[0].toString();\\r\\n    await ns.weaken(hostname);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsid2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxRQUFRLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUN2QyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDOUIsQ0FBQyJ9\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"microdyne\",\"moduleSequenceNumber\":138014,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const hostname = ns.args[0].toString();\\r\\n    await ns.hack(hostname);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImhhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLFFBQVEsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ3ZDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUM1QixDQUFDIn0=\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"microdyne\",\"moduleSequenceNumber\":138016,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"infocomm\",\"helios\",\"vitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":165,\"hackDifficulty\":165,\"minDifficulty\":55,\"moneyAvailable\":56141917,\"moneyMax\":140354792.5,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":813,\"serverGrowth\":74}},\"taiyang-digital\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":true,\"ip\":\"48.4.8.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"defcomm\",\"applied-energetics\",\"run4theh111z\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":175,\"hackDifficulty\":175,\"minDifficulty\":58,\"moneyAvailable\":87562430.60000001,\"moneyMax\":218906076.5,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":858,\"serverGrowth\":80}},\"galactic-cyber\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":true,\"ip\":\"12.8.6.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"rho-construction\",\"omnia\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":142.5,\"hackDifficulty\":142.5,\"minDifficulty\":48,\"moneyAvailable\":83071974.7,\"moneyMax\":207679936.75,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":833,\"serverGrowth\":83}},\"aerocorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aerocorp\",\"httpPortOpen\":true,\"ip\":\"7.9.9.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"millenium-fitness\",\"unitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":220,\"hackDifficulty\":220,\"minDifficulty\":73,\"moneyAvailable\":118100518.9,\"moneyMax\":295251297.25,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":882,\"serverGrowth\":60}},\"omnia\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omnia\",\"httpPortOpen\":true,\"ip\":\"6.3.8.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const hostname = ns.args[0].toString();\\r\\n    await ns.grow(hostname);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImdyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLFFBQVEsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ3ZDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUM1QixDQUFDIn0=\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omnia\",\"moduleSequenceNumber\":138030,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const hostname = ns.args[0].toString();\\r\\n    await ns.weaken(hostname);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsid2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxRQUFRLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUN2QyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDOUIsQ0FBQyJ9\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omnia\",\"moduleSequenceNumber\":138032,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const hostname = ns.args[0].toString();\\r\\n    await ns.hack(hostname);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImhhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLFFBQVEsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ3ZDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUM1QixDQUFDIn0=\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"omnia\",\"moduleSequenceNumber\":138034,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"galactic-cyber\",\"icarus\",\"solaris\",\"zeus-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":225,\"hackDifficulty\":225,\"minDifficulty\":75,\"moneyAvailable\":95375419.2,\"moneyMax\":238438548,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":921,\"serverGrowth\":60}},\"zb-def\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zb-def\",\"httpPortOpen\":true,\"ip\":\"90.5.1.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"solaris\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":157.5,\"hackDifficulty\":157.5,\"minDifficulty\":53,\"moneyAvailable\":96877863.5,\"moneyMax\":242194658.75,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":804,\"serverGrowth\":74}},\"applied-energetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"applied-energetics\",\"httpPortOpen\":true,\"ip\":\"13.5.3.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"taiyang-digital\",\"stormtech\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":157.5,\"hackDifficulty\":157.5,\"minDifficulty\":53,\"moneyAvailable\":83937221.9,\"moneyMax\":209843054.75000003,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":794,\"serverGrowth\":70}},\"solaris\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"solaris\",\"httpPortOpen\":true,\"ip\":\"31.1.9.3\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const hostname = ns.args[0].toString();\\r\\n    await ns.grow(hostname);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImdyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLFFBQVEsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ3ZDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUM1QixDQUFDIn0=\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"solaris\",\"moduleSequenceNumber\":138006,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const hostname = ns.args[0].toString();\\r\\n    await ns.weaken(hostname);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsid2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxRQUFRLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUN2QyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDOUIsQ0FBQyJ9\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"solaris\",\"moduleSequenceNumber\":138008,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const hostname = ns.args[0].toString();\\r\\n    await ns.hack(hostname);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImhhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLFFBQVEsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ3ZDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUM1QixDQUFDIn0=\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"solaris\",\"moduleSequenceNumber\":138010,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"omnia\",\"zb-def\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":200,\"hackDifficulty\":200,\"minDifficulty\":67,\"moneyAvailable\":78568714.4,\"moneyMax\":196421786.00000003,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":829,\"serverGrowth\":73}},\"deltaone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"deltaone\",\"httpPortOpen\":true,\"ip\":\"7.8.4.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"snap-fitness\",\"defcomm\",\"univ-energy\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":195,\"hackDifficulty\":195,\"minDifficulty\":65,\"moneyAvailable\":161858321.5,\"moneyMax\":404645803.75,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":867,\"serverGrowth\":59}},\"global-pharm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"global-pharm\",\"httpPortOpen\":true,\"ip\":\"96.7.9.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const hostname = ns.args[0].toString();\\r\\n    await ns.grow(hostname);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImdyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLFFBQVEsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ3ZDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUM1QixDQUFDIn0=\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"global-pharm\",\"moduleSequenceNumber\":63842,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const hostname = ns.args[0].toString();\\r\\n    await ns.weaken(hostname);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsid2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxRQUFRLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUN2QyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDOUIsQ0FBQyJ9\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///1468ed39-29e9-4e7b-8534-d4f323e331cd\",\"moduleSequenceNumber\":73161}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"global-pharm\",\"moduleSequenceNumber\":73161,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const hostname = ns.args[0].toString();\\r\\n    await ns.hack(hostname);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImhhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLFFBQVEsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ3ZDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUM1QixDQUFDIn0=\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///afb1b4d5-bcb4-4168-b52e-a91f07b33619\",\"moduleSequenceNumber\":65022}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"global-pharm\",\"moduleSequenceNumber\":65022,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"lexo-corp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":187.5,\"hackDifficulty\":187.5,\"minDifficulty\":63,\"moneyAvailable\":162671187.5,\"moneyMax\":406677968.75,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":769,\"serverGrowth\":87}},\"nova-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nova-med\",\"httpPortOpen\":true,\"ip\":\"26.6.4.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zeus-med\",\"titan-labs\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":195,\"hackDifficulty\":195,\"minDifficulty\":65,\"moneyAvailable\":122496666.7,\"moneyMax\":306241666.75,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":839,\"serverGrowth\":78}},\"zeus-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zeus-med\",\"httpPortOpen\":true,\"ip\":\"19.0.7.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnia\",\"nova-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":207.5,\"hackDifficulty\":207.5,\"minDifficulty\":69,\"moneyAvailable\":146534406.1,\"moneyMax\":366336015.25,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":830,\"serverGrowth\":79}},\"unitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"unitalife\",\"httpPortOpen\":true,\"ip\":\"1.8.2.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const hostname = ns.args[0].toString();\\r\\n    await ns.grow(hostname);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImdyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLFFBQVEsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ3ZDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUM1QixDQUFDIn0=\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"unitalife\",\"moduleSequenceNumber\":63890,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const hostname = ns.args[0].toString();\\r\\n    await ns.weaken(hostname);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsid2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxRQUFRLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUN2QyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDOUIsQ0FBQyJ9\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///56f8ccf5-c233-4493-a233-f97290bc024d\",\"moduleSequenceNumber\":64849}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"unitalife\",\"moduleSequenceNumber\":64849,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const hostname = ns.args[0].toString();\\r\\n    await ns.hack(hostname);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImhhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLFFBQVEsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ3ZDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUM1QixDQUFDIn0=\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"unitalife\",\"moduleSequenceNumber\":63894,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"aerocorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":190,\"hackDifficulty\":190,\"minDifficulty\":63,\"moneyAvailable\":107277394.60000001,\"moneyMax\":268193486.5,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":781,\"serverGrowth\":77}},\"lexo-corp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lexo-corp\",\"httpPortOpen\":true,\"ip\":\"16.9.1.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const hostname = ns.args[0].toString();\\r\\n    await ns.grow(hostname);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImdyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLFFBQVEsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ3ZDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUM1QixDQUFDIn0=\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":63878,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const hostname = ns.args[0].toString();\\r\\n    await ns.weaken(hostname);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsid2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxRQUFRLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUN2QyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDOUIsQ0FBQyJ9\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///44a56048-c8e7-48c0-855e-29f5389261e4\",\"moduleSequenceNumber\":72838}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":72838,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const hostname = ns.args[0].toString();\\r\\n    await ns.hack(hostname);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImhhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLFFBQVEsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ3ZDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUM1QixDQUFDIn0=\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///90a78385-d52f-4664-8120-d22bb0cb1ff7\",\"moduleSequenceNumber\":65016}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":65016,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"catalyst\",\"global-pharm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":187.5,\"hackDifficulty\":187.5,\"minDifficulty\":63,\"moneyAvailable\":73296289.2,\"moneyMax\":183240723,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":698,\"serverGrowth\":56}},\"rho-construction\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rho-construction\",\"httpPortOpen\":true,\"ip\":\"96.5.8.1\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const hostname = ns.args[0].toString();\\r\\n    await ns.grow(hostname);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImdyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLFFBQVEsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ3ZDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUM1QixDQUFDIn0=\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///08cb2913-cd51-485e-9c35-77bc278f7580\",\"moduleSequenceNumber\":73329}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"rho-construction\",\"moduleSequenceNumber\":73329,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const hostname = ns.args[0].toString();\\r\\n    await ns.weaken(hostname);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsid2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxRQUFRLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUN2QyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDOUIsQ0FBQyJ9\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///f4b0f0b6-229b-4a15-93a3-915dfa274e9a\",\"moduleSequenceNumber\":73327}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"rho-construction\",\"moduleSequenceNumber\":73327,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const hostname = ns.args[0].toString();\\r\\n    await ns.hack(hostname);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImhhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLFFBQVEsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ3ZDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUM1QixDQUFDIn0=\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///f7a2ceee-a827-4b86-939c-afba477737f9\",\"moduleSequenceNumber\":65027}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"rho-construction\",\"moduleSequenceNumber\":65027,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"syscore\",\"galactic-cyber\",\"snap-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":147.5,\"hackDifficulty\":147.5,\"minDifficulty\":49,\"moneyAvailable\":50318346.2,\"moneyMax\":125795865.5,\"numOpenPortsRequired\":3,\"openPortCount\":4,\"requiredHackingSkill\":508,\"serverGrowth\":57}},\"alpha-ent\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"alpha-ent\",\"httpPortOpen\":true,\"ip\":\"49.3.2.5\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const hostname = ns.args[0].toString();\\r\\n    await ns.grow(hostname);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImdyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLFFBQVEsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ3ZDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUM1QixDQUFDIn0=\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///247677bd-a0c4-466e-a5d1-fde8b48f651a\",\"moduleSequenceNumber\":73646}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":73646,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const hostname = ns.args[0].toString();\\r\\n    await ns.weaken(hostname);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsid2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxRQUFRLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUN2QyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDOUIsQ0FBQyJ9\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///72bb4ac8-8390-4f4e-9e81-3a7718c9c149\",\"moduleSequenceNumber\":73959}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":73959,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const hostname = ns.args[0].toString();\\r\\n    await ns.hack(hostname);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImhhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLFFBQVEsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ3ZDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUM1QixDQUFDIn0=\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///56bf526e-166c-4a24-bac9-98cbeaaed638\",\"moduleSequenceNumber\":65031}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":65031,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"catalyst\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":127.5,\"hackDifficulty\":127.5,\"minDifficulty\":43,\"moneyAvailable\":70739900.10000001,\"moneyMax\":176849750.25000003,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":588,\"serverGrowth\":50}},\"aevum-police\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aevum-police\",\"httpPortOpen\":true,\"ip\":\"63.4.7.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const hostname = ns.args[0].toString();\\r\\n    await ns.grow(hostname);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImdyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLFFBQVEsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ3ZDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUM1QixDQUFDIn0=\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"aevum-police\",\"moduleSequenceNumber\":63848,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const hostname = ns.args[0].toString();\\r\\n    await ns.weaken(hostname);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsid2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxRQUFRLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUN2QyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDOUIsQ0FBQyJ9\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///bc961ed8-6b3a-47f4-837c-9a42895a3027\",\"moduleSequenceNumber\":73160}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"aevum-police\",\"moduleSequenceNumber\":73160,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const hostname = ns.args[0].toString();\\r\\n    await ns.hack(hostname);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImhhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLFFBQVEsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ3ZDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUM1QixDQUFDIn0=\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///55f282c8-86f7-4c5f-86b6-fffe32914971\",\"moduleSequenceNumber\":65021}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"aevum-police\",\"moduleSequenceNumber\":65021,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"I.I.I.I\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":177.5,\"hackDifficulty\":177.5,\"minDifficulty\":59,\"moneyAvailable\":31567297.1,\"moneyMax\":78918242.75,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":425,\"serverGrowth\":45}},\"rothman-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rothman-uni\",\"httpPortOpen\":true,\"ip\":\"18.5.6.2\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const hostname = ns.args[0].toString();\\r\\n    await ns.grow(hostname);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImdyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLFFBQVEsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ3ZDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUM1QixDQUFDIn0=\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///06193199-f758-44bd-b1f2-40a8f0b5e061\",\"moduleSequenceNumber\":73330}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":73330,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const hostname = ns.args[0].toString();\\r\\n    await ns.weaken(hostname);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsid2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxRQUFRLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUN2QyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDOUIsQ0FBQyJ9\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":63808,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const hostname = ns.args[0].toString();\\r\\n    await ns.hack(hostname);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImhhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLFFBQVEsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ3ZDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUM1QixDQUFDIn0=\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///615cc0bc-22ea-49b5-9630-f571ff1352b9\",\"moduleSequenceNumber\":65028}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":65028,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"comptek\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":117.5,\"hackDifficulty\":117.5,\"minDifficulty\":39,\"moneyAvailable\":17785797,\"moneyMax\":44464492.5,\"numOpenPortsRequired\":3,\"openPortCount\":4,\"requiredHackingSkill\":430,\"serverGrowth\":36}},\"zb-institute\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zb-institute\",\"httpPortOpen\":true,\"ip\":\"59.6.8.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const hostname = ns.args[0].toString();\\r\\n    await ns.grow(hostname);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImdyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLFFBQVEsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ3ZDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUM1QixDQUFDIn0=\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zb-institute\",\"moduleSequenceNumber\":138036,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const hostname = ns.args[0].toString();\\r\\n    await ns.weaken(hostname);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsid2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxRQUFRLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUN2QyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDOUIsQ0FBQyJ9\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zb-institute\",\"moduleSequenceNumber\":138038,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const hostname = ns.args[0].toString();\\r\\n    await ns.hack(hostname);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImhhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLFFBQVEsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ3ZDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUM1QixDQUFDIn0=\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"zb-institute\",\"moduleSequenceNumber\":138040,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"avmnite-02h\",\"millenium-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":212.5,\"hackDifficulty\":212.5,\"minDifficulty\":71,\"moneyAvailable\":101335955.30000001,\"moneyMax\":253339888.25000006,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":749,\"serverGrowth\":85}},\"summit-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"summit-uni\",\"httpPortOpen\":true,\"ip\":\"66.0.0.7\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const hostname = ns.args[0].toString();\\r\\n    await ns.grow(hostname);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImdyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLFFBQVEsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ3ZDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUM1QixDQUFDIn0=\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///f3417c65-f066-45d1-8a74-8e7ce9a22dba\",\"moduleSequenceNumber\":73167}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"summit-uni\",\"moduleSequenceNumber\":73167,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const hostname = ns.args[0].toString();\\r\\n    await ns.weaken(hostname);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsid2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxRQUFRLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUN2QyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDOUIsQ0FBQyJ9\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"summit-uni\",\"moduleSequenceNumber\":63832,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const hostname = ns.args[0].toString();\\r\\n    await ns.hack(hostname);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImhhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLFFBQVEsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ3ZDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUM1QixDQUFDIn0=\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///b5ff9bb4-e592-4cd9-944f-4d91da42b0de\",\"moduleSequenceNumber\":65024}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"summit-uni\",\"moduleSequenceNumber\":65024,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"netlink\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":150,\"hackDifficulty\":150,\"minDifficulty\":50,\"moneyAvailable\":26805702,\"moneyMax\":67014255,\"numOpenPortsRequired\":3,\"openPortCount\":4,\"requiredHackingSkill\":441,\"serverGrowth\":40}},\"syscore\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"syscore\",\"httpPortOpen\":true,\"ip\":\"7.7.4.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"avmnite-02h\",\"rho-construction\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":175,\"hackDifficulty\":175,\"minDifficulty\":58,\"moneyAvailable\":50769288.300000004,\"moneyMax\":126923220.75,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":622,\"serverGrowth\":66}},\"catalyst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"catalyst\",\"httpPortOpen\":true,\"ip\":\"38.3.1.9\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const hostname = ns.args[0].toString();\\r\\n    await ns.grow(hostname);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImdyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLFFBQVEsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ3ZDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUM1QixDQUFDIn0=\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"catalyst\",\"moduleSequenceNumber\":63800,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const hostname = ns.args[0].toString();\\r\\n    await ns.weaken(hostname);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsid2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxRQUFRLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUN2QyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDOUIsQ0FBQyJ9\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///c78c577d-4514-4c22-994d-e1827bf82db1\",\"moduleSequenceNumber\":73643}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"catalyst\",\"moduleSequenceNumber\":73643,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const hostname = ns.args[0].toString();\\r\\n    await ns.hack(hostname);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImhhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLFFBQVEsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ3ZDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUM1QixDQUFDIn0=\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///6abe0590-69e8-4cad-97f9-8fde18ab59bd\",\"moduleSequenceNumber\":65029}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"catalyst\",\"moduleSequenceNumber\":65029,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"the-hub\",\"lexo-corp\",\"alpha-ent\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":160,\"hackDifficulty\":160,\"minDifficulty\":53,\"moneyAvailable\":40738284.900000006,\"moneyMax\":101845712.25000001,\"numOpenPortsRequired\":3,\"openPortCount\":4,\"requiredHackingSkill\":429,\"serverGrowth\":38}},\"the-hub\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"the-hub\",\"httpPortOpen\":true,\"ip\":\"12.4.3.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const hostname = ns.args[0].toString();\\r\\n    await ns.grow(hostname);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImdyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLFFBQVEsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ3ZDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUM1QixDQUFDIn0=\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"the-hub\",\"moduleSequenceNumber\":63872,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const hostname = ns.args[0].toString();\\r\\n    await ns.weaken(hostname);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsid2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxRQUFRLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUN2QyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDOUIsQ0FBQyJ9\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///81184f38-ef4a-4ef1-8b83-93a1466e651e\",\"moduleSequenceNumber\":72839}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"the-hub\",\"moduleSequenceNumber\":72839,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const hostname = ns.args[0].toString();\\r\\n    await ns.hack(hostname);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImhhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLFFBQVEsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ3ZDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUM1QixDQUFDIn0=\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///21d18f3f-f23e-433a-b87d-c720c6ee64f6\",\"moduleSequenceNumber\":65017}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"the-hub\",\"moduleSequenceNumber\":65017,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"phantasy\",\"catalyst\",\"I.I.I.I\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":33,\"moneyAvailable\":15731821.5,\"moneyMax\":39329553.75,\"numOpenPortsRequired\":2,\"openPortCount\":4,\"requiredHackingSkill\":290,\"serverGrowth\":46}},\"comptek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"comptek\",\"httpPortOpen\":true,\"ip\":\"16.6.1.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omega-net\",\"rothman-uni\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":147.5,\"hackDifficulty\":147.5,\"minDifficulty\":49,\"moneyAvailable\":24166685,\"moneyMax\":60416712.5,\"numOpenPortsRequired\":3,\"openPortCount\":4,\"requiredHackingSkill\":320,\"serverGrowth\":57}},\"netlink\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"netlink\",\"httpPortOpen\":true,\"ip\":\"96.8.7.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const hostname = ns.args[0].toString();\\r\\n    await ns.grow(hostname);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImdyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLFFBQVEsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ3ZDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUM1QixDQUFDIn0=\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"netlink\",\"moduleSequenceNumber\":63902,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const hostname = ns.args[0].toString();\\r\\n    await ns.weaken(hostname);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsid2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxRQUFRLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUN2QyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDOUIsQ0FBQyJ9\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///749df051-aea6-4180-8dd8-fb602630a813\",\"moduleSequenceNumber\":64847}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"netlink\",\"moduleSequenceNumber\":64847,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const hostname = ns.args[0].toString();\\r\\n    await ns.hack(hostname);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImhhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLFFBQVEsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ3ZDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUM1QixDQUFDIn0=\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"netlink\",\"moduleSequenceNumber\":63906,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"silver-helix\",\"summit-uni\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":192.5,\"hackDifficulty\":192.5,\"minDifficulty\":64,\"moneyAvailable\":27500000,\"moneyMax\":68750000,\"numOpenPortsRequired\":3,\"openPortCount\":4,\"requiredHackingSkill\":406,\"serverGrowth\":62}},\"johnson-ortho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":true,\"ip\":\"30.0.9.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omega-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":160,\"hackDifficulty\":160,\"minDifficulty\":53,\"moneyAvailable\":7798985.800000001,\"moneyMax\":19497464.500000004,\"numOpenPortsRequired\":2,\"openPortCount\":4,\"requiredHackingSkill\":268,\"serverGrowth\":54}},\"n00dles\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"n00dles\",\"httpPortOpen\":false,\"ip\":\"10.4.9.3\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const hostname = ns.args[0].toString();\\r\\n    await ns.grow(hostname);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImdyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLFFBQVEsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ3ZDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUM1QixDQUFDIn0=\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"n00dles\",\"moduleSequenceNumber\":58949,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const hostname = ns.args[0].toString();\\r\\n    await ns.weaken(hostname);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsid2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxRQUFRLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUN2QyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDOUIsQ0FBQyJ9\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///16dff62d-8315-41c2-a443-24e9d64a17c1\",\"moduleSequenceNumber\":58955}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"n00dles\",\"moduleSequenceNumber\":58955,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const hostname = ns.args[0].toString();\\r\\n    await ns.hack(hostname);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImhhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLFFBQVEsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ3ZDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUM1QixDQUFDIn0=\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"n00dles\",\"moduleSequenceNumber\":58953,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":2.5,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":17500,\"moneyMax\":17500,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":1,\"serverGrowth\":3000}},\"foodnstuff\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"foodnstuff\",\"httpPortOpen\":false,\"ip\":\"54.2.7.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const hostname = ns.args[0].toString();\\r\\n    await ns.grow(hostname);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImdyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLFFBQVEsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ3ZDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUM1QixDQUFDIn0=\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":58907,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const hostname = ns.args[0].toString();\\r\\n    await ns.weaken(hostname);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsid2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxRQUFRLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUN2QyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDOUIsQ0FBQyJ9\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///0d36a114-8f45-4705-b72a-bcc5e6d317ae\",\"moduleSequenceNumber\":72841}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":72841,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const hostname = ns.args[0].toString();\\r\\n    await ns.hack(hostname);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImhhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLFFBQVEsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ3ZDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUM1QixDQUFDIn0=\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///a9b62946-d5a6-4e9b-9c38-0ba28c1ae629\",\"moduleSequenceNumber\":59099}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":59099,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\",\"max-hardware\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":25,\"minDifficulty\":8,\"moneyAvailable\":200000,\"moneyMax\":500000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":1,\"serverGrowth\":5}},\"sigma-cosmetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":false,\"ip\":\"75.4.6.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const hostname = ns.args[0].toString();\\r\\n    await ns.grow(hostname);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImdyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLFFBQVEsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ3ZDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUM1QixDQUFDIn0=\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":58913,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const hostname = ns.args[0].toString();\\r\\n    await ns.weaken(hostname);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsid2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxRQUFRLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUN2QyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDOUIsQ0FBQyJ9\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///0a240206-0c1f-4c04-9aac-423c726a43d5\",\"moduleSequenceNumber\":72840}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":72840,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const hostname = ns.args[0].toString();\\r\\n    await ns.hack(hostname);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImhhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLFFBQVEsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ3ZDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUM1QixDQUFDIn0=\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///aabff61e-e7db-4c57-8c81-62fe07475422\",\"moduleSequenceNumber\":59098}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":59098,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\",\"CSEC\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":25,\"minDifficulty\":8,\"moneyAvailable\":230000,\"moneyMax\":575000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":5,\"serverGrowth\":10}},\"joesguns\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"joesguns\",\"httpPortOpen\":false,\"ip\":\"52.4.7.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const hostname = ns.args[0].toString();\\r\\n    await ns.grow(hostname);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImdyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLFFBQVEsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ3ZDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUM1QixDQUFDIn0=\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///f5b0ef26-0d97-4909-93d1-9f9bf529ccec\",\"moduleSequenceNumber\":65008}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"joesguns\",\"moduleSequenceNumber\":65008,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const hostname = ns.args[0].toString();\\r\\n    await ns.weaken(hostname);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsid2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxRQUFRLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUN2QyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDOUIsQ0FBQyJ9\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///072052af-0978-4495-bd68-fafc48ef8d8a\",\"moduleSequenceNumber\":72843}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"joesguns\",\"moduleSequenceNumber\":72843,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const hostname = ns.args[0].toString();\\r\\n    await ns.hack(hostname);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImhhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLFFBQVEsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ3ZDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUM1QixDQUFDIn0=\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///9e69cf32-f122-4400-8aa7-23798bd929d4\",\"moduleSequenceNumber\":59097}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"joesguns\",\"moduleSequenceNumber\":59097,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\",\"nectar-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":37.5,\"hackDifficulty\":37.5,\"minDifficulty\":13,\"moneyAvailable\":250000,\"moneyMax\":625000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":10,\"serverGrowth\":20}},\"zer0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"zer0\",\"httpPortOpen\":false,\"ip\":\"41.5.4.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const hostname = ns.args[0].toString();\\r\\n    await ns.grow(hostname);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImdyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLFFBQVEsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ3ZDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUM1QixDQUFDIn0=\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///191768f9-dc44-4732-8ca5-6659f0405b95\",\"moduleSequenceNumber\":72845}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zer0\",\"moduleSequenceNumber\":72845,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const hostname = ns.args[0].toString();\\r\\n    await ns.weaken(hostname);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsid2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxRQUFRLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUN2QyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDOUIsQ0FBQyJ9\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zer0\",\"moduleSequenceNumber\":58897,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const hostname = ns.args[0].toString();\\r\\n    await ns.hack(hostname);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImhhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLFFBQVEsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ3ZDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUM1QixDQUFDIn0=\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///c9b9ab9d-a2f5-4608-845f-275337a7443b\",\"moduleSequenceNumber\":59101}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"zer0\",\"moduleSequenceNumber\":59101,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"hong-fang-tea\",\"silver-helix\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":62.5,\"hackDifficulty\":62.5,\"minDifficulty\":21,\"moneyAvailable\":750000,\"moneyMax\":1875000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":75,\"serverGrowth\":40}},\"nectar-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"nectar-net\",\"httpPortOpen\":false,\"ip\":\"27.7.2.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const hostname = ns.args[0].toString();\\r\\n    await ns.grow(hostname);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImdyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLFFBQVEsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ3ZDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUM1QixDQUFDIn0=\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///e3d78d9c-f248-4c91-b20c-442311b56233\",\"moduleSequenceNumber\":59029}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nectar-net\",\"moduleSequenceNumber\":59029,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const hostname = ns.args[0].toString();\\r\\n    await ns.weaken(hostname);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsid2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxRQUFRLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUN2QyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDOUIsQ0FBQyJ9\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///a5d01c66-0448-404c-bbe5-d3070acf4677\",\"moduleSequenceNumber\":58959}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nectar-net\",\"moduleSequenceNumber\":58959,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const hostname = ns.args[0].toString();\\r\\n    await ns.hack(hostname);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImhhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLFFBQVEsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ3ZDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUM1QixDQUFDIn0=\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///b964926a-8b87-4fc3-9ebb-765da83f1325\",\"moduleSequenceNumber\":59096}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"nectar-net\",\"moduleSequenceNumber\":59096,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"joesguns\",\"omega-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":50,\"hackDifficulty\":50,\"minDifficulty\":17,\"moneyAvailable\":275000,\"moneyMax\":687500,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":20,\"serverGrowth\":25}},\"neo-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"neo-net\",\"httpPortOpen\":false,\"ip\":\"80.0.5.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const hostname = ns.args[0].toString();\\r\\n    await ns.grow(hostname);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImdyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLFFBQVEsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ3ZDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUM1QixDQUFDIn0=\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///921863ed-7167-4b39-9f43-4fe8334a55bf\",\"moduleSequenceNumber\":73165}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"neo-net\",\"moduleSequenceNumber\":73165,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const hostname = ns.args[0].toString();\\r\\n    await ns.weaken(hostname);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsid2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxRQUFRLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUN2QyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDOUIsQ0FBQyJ9\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///40a41ab8-f4da-4827-99cd-d1fe994b2535\",\"moduleSequenceNumber\":73163}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"neo-net\",\"moduleSequenceNumber\":73163,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const hostname = ns.args[0].toString();\\r\\n    await ns.hack(hostname);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImhhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLFFBQVEsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ3ZDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUM1QixDQUFDIn0=\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///11943372-8f88-4ffc-aadf-8a581572176a\",\"moduleSequenceNumber\":59102}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"neo-net\",\"moduleSequenceNumber\":59102,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"CSEC\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":62.5,\"hackDifficulty\":62.5,\"minDifficulty\":21,\"moneyAvailable\":500000,\"moneyMax\":1250000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":50,\"serverGrowth\":25}},\"silver-helix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"silver-helix\",\"httpPortOpen\":true,\"ip\":\"97.8.7.7\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const hostname = ns.args[0].toString();\\r\\n    await ns.grow(hostname);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImdyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLFFBQVEsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ3ZDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUM1QixDQUFDIn0=\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"silver-helix\",\"moduleSequenceNumber\":63824,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const hostname = ns.args[0].toString();\\r\\n    await ns.weaken(hostname);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsid2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxRQUFRLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUN2QyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDOUIsQ0FBQyJ9\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///b5554610-6121-46cb-b7be-5d8894a93505\",\"moduleSequenceNumber\":73325}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"silver-helix\",\"moduleSequenceNumber\":73325,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const hostname = ns.args[0].toString();\\r\\n    await ns.hack(hostname);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImhhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLFFBQVEsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ3ZDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUM1QixDQUFDIn0=\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///b929e6c4-915d-4db3-996f-959c2c9fee1a\",\"moduleSequenceNumber\":65025}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"silver-helix\",\"moduleSequenceNumber\":65025,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"zer0\",\"netlink\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":75,\"minDifficulty\":25,\"moneyAvailable\":4500000,\"moneyMax\":11250000,\"numOpenPortsRequired\":2,\"openPortCount\":4,\"requiredHackingSkill\":150,\"serverGrowth\":30}},\"hong-fang-tea\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":false,\"ip\":\"72.4.9.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const hostname = ns.args[0].toString();\\r\\n    await ns.grow(hostname);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImdyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLFFBQVEsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ3ZDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUM1QixDQUFDIn0=\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":58931,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const hostname = ns.args[0].toString();\\r\\n    await ns.weaken(hostname);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsid2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxRQUFRLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUN2QyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDOUIsQ0FBQyJ9\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///c56c0edd-9e55-4d0a-a379-0130e81d0387\",\"moduleSequenceNumber\":58958}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":58958,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const hostname = ns.args[0].toString();\\r\\n    await ns.hack(hostname);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImhhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLFFBQVEsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ3ZDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUM1QixDQUFDIn0=\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":58935,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\",\"zer0\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":37.5,\"hackDifficulty\":37.5,\"minDifficulty\":13,\"moneyAvailable\":300000,\"moneyMax\":750000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":30,\"serverGrowth\":20}},\"harakiri-sushi\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":false,\"ip\":\"1.8.2.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const hostname = ns.args[0].toString();\\r\\n    await ns.grow(hostname);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImdyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLFFBQVEsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ3ZDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUM1QixDQUFDIn0=\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":58937,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const hostname = ns.args[0].toString();\\r\\n    await ns.weaken(hostname);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsid2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxRQUFRLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUN2QyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDOUIsQ0FBQyJ9\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///3876ae93-c464-4ba4-975b-f319ce6f420e\",\"moduleSequenceNumber\":58957}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":58957,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const hostname = ns.args[0].toString();\\r\\n    await ns.hack(hostname);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImhhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLFFBQVEsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ3ZDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUM1QixDQUFDIn0=\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":58941,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":37.5,\"hackDifficulty\":37.5,\"minDifficulty\":13,\"moneyAvailable\":400000,\"moneyMax\":1000000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":40,\"serverGrowth\":40}},\"phantasy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"phantasy\",\"httpPortOpen\":true,\"ip\":\"37.1.2.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const hostname = ns.args[0].toString();\\r\\n    await ns.grow(hostname);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImdyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLFFBQVEsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ3ZDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUM1QixDQUFDIn0=\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"phantasy\",\"moduleSequenceNumber\":63836,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const hostname = ns.args[0].toString();\\r\\n    await ns.weaken(hostname);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsid2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxRQUFRLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUN2QyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDOUIsQ0FBQyJ9\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///aafcec1f-9ecf-4202-b605-6c8f6a08085a\",\"moduleSequenceNumber\":73162}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"phantasy\",\"moduleSequenceNumber\":73162,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const hostname = ns.args[0].toString();\\r\\n    await ns.hack(hostname);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImhhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLFFBQVEsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ3ZDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUM1QixDQUFDIn0=\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///fb5ff0c8-e828-4a00-a612-3b0b45d4777e\",\"moduleSequenceNumber\":65023}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"phantasy\",\"moduleSequenceNumber\":65023,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"CSEC\",\"the-hub\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":50,\"hackDifficulty\":50,\"minDifficulty\":17,\"moneyAvailable\":2400000,\"moneyMax\":6000000,\"numOpenPortsRequired\":2,\"openPortCount\":4,\"requiredHackingSkill\":100,\"serverGrowth\":35}},\"max-hardware\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"max-hardware\",\"httpPortOpen\":false,\"ip\":\"66.6.2.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const hostname = ns.args[0].toString();\\r\\n    await ns.grow(hostname);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImdyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLFFBQVEsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ3ZDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUM1QixDQUFDIn0=\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///4e0978cc-914f-4601-b59e-4f70360c50c0\",\"moduleSequenceNumber\":73166}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"max-hardware\",\"moduleSequenceNumber\":73166,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const hostname = ns.args[0].toString();\\r\\n    await ns.weaken(hostname);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsid2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxRQUFRLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUN2QyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDOUIsQ0FBQyJ9\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"max-hardware\",\"moduleSequenceNumber\":58885,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const hostname = ns.args[0].toString();\\r\\n    await ns.hack(hostname);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImhhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLFFBQVEsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ3ZDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUM1QixDQUFDIn0=\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///10cf07e5-5241-45fb-b515-19c9cb07e4a5\",\"moduleSequenceNumber\":59103}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"max-hardware\",\"moduleSequenceNumber\":59103,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"foodnstuff\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":37.5,\"hackDifficulty\":37.5,\"minDifficulty\":13,\"moneyAvailable\":1000000,\"moneyMax\":2500000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":80,\"serverGrowth\":30}},\"omega-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omega-net\",\"httpPortOpen\":true,\"ip\":\"48.4.3.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const hostname = ns.args[0].toString();\\r\\n    await ns.grow(hostname);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImdyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLFFBQVEsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ3ZDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUM1QixDQUFDIn0=\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omega-net\",\"moduleSequenceNumber\":63854,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const hostname = ns.args[0].toString();\\r\\n    await ns.weaken(hostname);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsid2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxRQUFRLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUN2QyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDOUIsQ0FBQyJ9\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omega-net\",\"moduleSequenceNumber\":63856,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const hostname = ns.args[0].toString();\\r\\n    await ns.hack(hostname);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImhhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLFFBQVEsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ3ZDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUM1QixDQUFDIn0=\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///2f566f9e-f637-4e7a-881f-3f47ac0fec77\",\"moduleSequenceNumber\":65020}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"omega-net\",\"moduleSequenceNumber\":65020,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"nectar-net\",\"comptek\",\"johnson-ortho\",\"crush-fitness\",\"avmnite-02h\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":72.5,\"hackDifficulty\":72.5,\"minDifficulty\":24,\"moneyAvailable\":6859440.300000001,\"moneyMax\":17148600.750000004,\"numOpenPortsRequired\":2,\"openPortCount\":4,\"requiredHackingSkill\":208,\"serverGrowth\":39}},\"crush-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"crush-fitness\",\"httpPortOpen\":true,\"ip\":\"15.5.8.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omega-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":95,\"hackDifficulty\":95,\"minDifficulty\":32,\"moneyAvailable\":4608597.8,\"moneyMax\":11521494.5,\"numOpenPortsRequired\":2,\"openPortCount\":4,\"requiredHackingSkill\":242,\"serverGrowth\":29}},\"iron-gym\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"iron-gym\",\"httpPortOpen\":false,\"ip\":\"53.5.1.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const hostname = ns.args[0].toString();\\r\\n    await ns.grow(hostname);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImdyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLFFBQVEsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ3ZDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUM1QixDQUFDIn0=\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///a9f4e452-322b-4e6e-95b4-29d09b6e7730\",\"moduleSequenceNumber\":72844}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"iron-gym\",\"moduleSequenceNumber\":72844,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const hostname = ns.args[0].toString();\\r\\n    await ns.weaken(hostname);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsid2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxRQUFRLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUN2QyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDOUIsQ0FBQyJ9\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///b4904f2b-3404-47b1-b323-0d48253df5ab\",\"moduleSequenceNumber\":72842}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"iron-gym\",\"moduleSequenceNumber\":72842,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const hostname = ns.args[0].toString();\\r\\n    await ns.hack(hostname);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImhhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLFFBQVEsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ3ZDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUM1QixDQUFDIn0=\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///470fa86a-3d6e-45e1-8238-16230bff2092\",\"moduleSequenceNumber\":59100}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"iron-gym\",\"moduleSequenceNumber\":59100,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":75,\"minDifficulty\":25,\"moneyAvailable\":2000000,\"moneyMax\":5000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":100,\"serverGrowth\":20}},\"millenium-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":true,\"ip\":\"95.7.1.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const hostname = ns.args[0].toString();\\r\\n    await ns.grow(hostname);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImdyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLFFBQVEsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ3ZDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUM1QixDQUFDIn0=\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///da211113-ee90-4452-8e28-cdfccd518cc9\",\"moduleSequenceNumber\":72846}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":72846,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const hostname = ns.args[0].toString();\\r\\n    await ns.weaken(hostname);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsid2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxRQUFRLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUN2QyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDOUIsQ0FBQyJ9\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":63868,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const hostname = ns.args[0].toString();\\r\\n    await ns.hack(hostname);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImhhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLFFBQVEsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ3ZDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUM1QixDQUFDIn0=\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///15a66ec1-3081-4d46-9b57-01519c7b00af\",\"moduleSequenceNumber\":65018}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":65018,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"zb-institute\",\"aerocorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":122.5,\"hackDifficulty\":122.5,\"minDifficulty\":41,\"moneyAvailable\":25000000,\"moneyMax\":62500000,\"numOpenPortsRequired\":3,\"openPortCount\":4,\"requiredHackingSkill\":521,\"serverGrowth\":39}},\"powerhouse-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":true,\"ip\":\"28.3.9.8\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const hostname = ns.args[0].toString();\\r\\n    await ns.grow(hostname);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImdyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLFFBQVEsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ3ZDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUM1QixDQUFDIn0=\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":138024,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const hostname = ns.args[0].toString();\\r\\n    await ns.weaken(hostname);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsid2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxRQUFRLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUN2QyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDOUIsQ0FBQyJ9\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":138026,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const hostname = ns.args[0].toString();\\r\\n    await ns.hack(hostname);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImhhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLFFBQVEsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ3ZDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUM1QixDQUFDIn0=\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":138028,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\".\",\"megacorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":152.5,\"hackDifficulty\":152.5,\"minDifficulty\":51,\"moneyAvailable\":90000000,\"moneyMax\":225000000,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1050,\"serverGrowth\":56}},\"snap-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"snap-fitness\",\"httpPortOpen\":true,\"ip\":\"99.1.4.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"rho-construction\",\"deltaone\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":107.5,\"hackDifficulty\":107.5,\"minDifficulty\":36,\"moneyAvailable\":45000000,\"moneyMax\":112500000,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":781,\"serverGrowth\":52}},\"run4theh111z\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"run4theh111z\",\"httpPortOpen\":true,\"ip\":\"45.9.7.3\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const hostname = ns.args[0].toString();\\r\\n    await ns.grow(hostname);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImdyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLFFBQVEsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ3ZDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUM1QixDQUFDIn0=\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":63818,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const hostname = ns.args[0].toString();\\r\\n    await ns.weaken(hostname);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsid2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxRQUFRLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUN2QyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDOUIsQ0FBQyJ9\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///d2ad6d33-69b2-4c2a-8013-443a9ce2872a\",\"moduleSequenceNumber\":73326}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":73326,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const hostname = ns.args[0].toString();\\r\\n    await ns.hack(hostname);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImhhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLFFBQVEsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ3ZDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUM1QixDQUFDIn0=\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///daadc717-3d70-49ec-8a56-8a465ca148d2\",\"moduleSequenceNumber\":65026}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":65026,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"taiyang-digital\",\"fulcrumtech\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":538,\"serverGrowth\":0}},\"I.I.I.I\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":true,\"ip\":\"31.6.4.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const hostname = ns.args[0].toString();\\r\\n    await ns.grow(hostname);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImdyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLFFBQVEsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ3ZDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUM1QixDQUFDIn0=\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///fbafa913-013f-4992-9d32-1b6a427c1e53\",\"moduleSequenceNumber\":65009}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":65009,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const hostname = ns.args[0].toString();\\r\\n    await ns.weaken(hostname);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsid2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxRQUFRLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUN2QyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDOUIsQ0FBQyJ9\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///eb0ce602-f753-4981-ba02-eac924cba9d4\",\"moduleSequenceNumber\":72837}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":72837,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const hostname = ns.args[0].toString();\\r\\n    await ns.hack(hostname);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImhhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLFFBQVEsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ3ZDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUM1QixDQUFDIn0=\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///784aa4fa-55c5-47c7-87e2-8235ce47b738\",\"moduleSequenceNumber\":65015}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":65015,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"the-hub\",\"aevum-police\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":4,\"requiredHackingSkill\":361,\"serverGrowth\":0}},\"avmnite-02h\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":true,\"ip\":\"40.1.8.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const hostname = ns.args[0].toString();\\r\\n    await ns.grow(hostname);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImdyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLFFBQVEsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ3ZDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUM1QixDQUFDIn0=\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":63860,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const hostname = ns.args[0].toString();\\r\\n    await ns.weaken(hostname);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsid2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxRQUFRLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUN2QyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDOUIsQ0FBQyJ9\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":63862,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const hostname = ns.args[0].toString();\\r\\n    await ns.hack(hostname);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImhhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLFFBQVEsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ3ZDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUM1QixDQUFDIn0=\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///c35ab509-c352-4285-994a-f038dae73785\",\"moduleSequenceNumber\":65019}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":65019,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"omega-net\",\"zb-institute\",\"syscore\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":4,\"requiredHackingSkill\":215,\"serverGrowth\":0}},\".\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\".\",\"httpPortOpen\":true,\"ip\":\"66.9.1.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const hostname = ns.args[0].toString();\\r\\n    await ns.grow(hostname);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImdyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLFFBQVEsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ3ZDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUM1QixDQUFDIn0=\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\".\",\"moduleSequenceNumber\":63896,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const hostname = ns.args[0].toString();\\r\\n    await ns.weaken(hostname);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsid2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxRQUFRLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUN2QyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDOUIsQ0FBQyJ9\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///c5c8c1de-bb47-47ae-939e-03e62943c5cd\",\"moduleSequenceNumber\":64848}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\".\",\"moduleSequenceNumber\":64848,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const hostname = ns.args[0].toString();\\r\\n    await ns.hack(hostname);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImhhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLFFBQVEsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ3ZDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUM1QixDQUFDIn0=\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\".\",\"moduleSequenceNumber\":63900,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"stormtech\",\"nwo\",\"clarkinc\",\"powerhouse-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":519,\"serverGrowth\":0}},\"CSEC\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"CSEC\",\"httpPortOpen\":false,\"ip\":\"42.1.1.1\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const hostname = ns.args[0].toString();\\r\\n    await ns.grow(hostname);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImdyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLFFBQVEsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ3ZDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUM1QixDQUFDIn0=\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"CSEC\",\"moduleSequenceNumber\":58943,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const hostname = ns.args[0].toString();\\r\\n    await ns.weaken(hostname);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsid2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxRQUFRLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUN2QyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDOUIsQ0FBQyJ9\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///09a50bdc-5268-4d4c-84f2-483ce520b225\",\"moduleSequenceNumber\":58956}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"CSEC\",\"moduleSequenceNumber\":58956,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const hostname = ns.args[0].toString();\\r\\n    await ns.hack(hostname);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImhhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLFFBQVEsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ3ZDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUM1QixDQUFDIn0=\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"CSEC\",\"moduleSequenceNumber\":58947,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"sigma-cosmetics\",\"neo-net\",\"phantasy\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":52,\"serverGrowth\":0}},\"The-Cave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"The-Cave\",\"httpPortOpen\":true,\"ip\":\"47.9.3.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"nwo\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":925,\"serverGrowth\":0}},\"w0r1d_d43m0n\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":false,\"ip\":\"52.5.4.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":6000,\"serverGrowth\":0}},\"darkweb\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"darkweb\",\"httpPortOpen\":true,\"ip\":\"88.5.6.0\",\"isConnectedTo\":false,\"maxRam\":1,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"hacknet-node-0\":{\"ctor\":\"HacknetServer\",\"data\":{\"contracts\":[],\"cpuCores\":21,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hacknet-node-0\",\"httpPortOpen\":false,\"ip\":\"51.7.7.7\",\"isConnectedTo\":false,\"maxRam\":2048,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const hostname = ns.args[0].toString();\\r\\n    await ns.grow(hostname);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImdyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLFFBQVEsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ3ZDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUM1QixDQUFDIn0=\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"hacknet-node-0\",\"moduleSequenceNumber\":63728,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const hostname = ns.args[0].toString();\\r\\n    await ns.weaken(hostname);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsid2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxRQUFRLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUN2QyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDOUIsQ0FBQyJ9\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///52faa212-c53f-4b3c-bbc4-131233e32cdf\",\"moduleSequenceNumber\":63907}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"hacknet-node-0\",\"moduleSequenceNumber\":63907,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const hostname = ns.args[0].toString();\\r\\n    await ns.hack(hostname);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImhhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLFFBQVEsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ3ZDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUM1QixDQUFDIn0=\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///0b466574-9839-447d-8cc8-cb294aaa04da\",\"moduleSequenceNumber\":65014}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"hacknet-node-0\",\"moduleSequenceNumber\":65014,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"cache\":12,\"cores\":21,\"hashCapacity\":131072,\"hashRate\":4.333157662021234,\"level\":88,\"onlineTimeSeconds\":34619.4000000572,\"totalHashesGenerated\":101308.77362071563}},\"hacknet-node-1\":{\"ctor\":\"HacknetServer\",\"data\":{\"contracts\":[],\"cpuCores\":21,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hacknet-node-1\",\"httpPortOpen\":false,\"ip\":\"24.8.3.4\",\"isConnectedTo\":false,\"maxRam\":2048,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const hostname = ns.args[0].toString();\\r\\n    await ns.grow(hostname);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImdyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLFFBQVEsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ3ZDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUM1QixDQUFDIn0=\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"hacknet-node-1\",\"moduleSequenceNumber\":63734,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const hostname = ns.args[0].toString();\\r\\n    await ns.weaken(hostname);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsid2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxRQUFRLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUN2QyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDOUIsQ0FBQyJ9\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"hacknet-node-1\",\"moduleSequenceNumber\":63736,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const hostname = ns.args[0].toString();\\r\\n    await ns.hack(hostname);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImhhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLFFBQVEsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ3ZDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUM1QixDQUFDIn0=\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///56c43d9c-def1-455d-afd1-5d46175f3326\",\"moduleSequenceNumber\":65013}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"hacknet-node-1\",\"moduleSequenceNumber\":65013,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"cache\":1,\"cores\":21,\"hashCapacity\":64,\"hashRate\":4.333157662021234,\"level\":88,\"onlineTimeSeconds\":34619.4000000572,\"totalHashesGenerated\":101025.9992194699}},\"hacknet-node-2\":{\"ctor\":\"HacknetServer\",\"data\":{\"contracts\":[],\"cpuCores\":21,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hacknet-node-2\",\"httpPortOpen\":false,\"ip\":\"59.4.5.6\",\"isConnectedTo\":false,\"maxRam\":2048,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const hostname = ns.args[0].toString();\\r\\n    await ns.grow(hostname);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImdyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLFFBQVEsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ3ZDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUM1QixDQUFDIn0=\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///18547398-b41a-4127-930c-b31775cfcffa\",\"moduleSequenceNumber\":73328}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"hacknet-node-2\",\"moduleSequenceNumber\":73328,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const hostname = ns.args[0].toString();\\r\\n    await ns.weaken(hostname);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsid2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxRQUFRLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUN2QyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDOUIsQ0FBQyJ9\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///1f3d9518-76d7-402d-a424-ae1e02d1a980\",\"moduleSequenceNumber\":73324}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"hacknet-node-2\",\"moduleSequenceNumber\":73324,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const hostname = ns.args[0].toString();\\r\\n    await ns.hack(hostname);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImhhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLFFBQVEsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ3ZDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUM1QixDQUFDIn0=\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///28e5929b-63e7-4b73-b22a-1b21a5214a90\",\"moduleSequenceNumber\":65012}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"hacknet-node-2\",\"moduleSequenceNumber\":65012,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"cache\":1,\"cores\":21,\"hashCapacity\":64,\"hashRate\":4.333157662021234,\"level\":88,\"onlineTimeSeconds\":34619.4000000572,\"totalHashesGenerated\":100626.58287444348}},\"hacknet-node-3\":{\"ctor\":\"HacknetServer\",\"data\":{\"contracts\":[],\"cpuCores\":21,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hacknet-node-3\",\"httpPortOpen\":false,\"ip\":\"35.6.4.3\",\"isConnectedTo\":false,\"maxRam\":2048,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const hostname = ns.args[0].toString();\\r\\n    await ns.grow(hostname);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImdyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLFFBQVEsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ3ZDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUM1QixDQUFDIn0=\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///507d6748-ff04-44e1-9ef0-ce2c3c736848\",\"moduleSequenceNumber\":73164}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"hacknet-node-3\",\"moduleSequenceNumber\":73164,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const hostname = ns.args[0].toString();\\r\\n    await ns.weaken(hostname);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsid2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxRQUFRLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUN2QyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDOUIsQ0FBQyJ9\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///14aee62e-ce19-4773-a56c-7ee9930b6c1b\",\"moduleSequenceNumber\":73003}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"hacknet-node-3\",\"moduleSequenceNumber\":73003,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const hostname = ns.args[0].toString();\\r\\n    await ns.hack(hostname);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImhhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLFFBQVEsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ3ZDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUM1QixDQUFDIn0=\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///cce8af29-ec13-47bc-a84c-1f628d2e82ea\",\"moduleSequenceNumber\":65011}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"hacknet-node-3\",\"moduleSequenceNumber\":65011,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"cache\":1,\"cores\":21,\"hashCapacity\":64,\"hashRate\":4.333157662021234,\"level\":88,\"onlineTimeSeconds\":34384.600000060615,\"totalHashesGenerated\":100402.15929405866}},\"hacknet-node-4\":{\"ctor\":\"HacknetServer\",\"data\":{\"contracts\":[],\"cpuCores\":21,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hacknet-node-4\",\"httpPortOpen\":false,\"ip\":\"26.2.4.1\",\"isConnectedTo\":false,\"maxRam\":2048,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const hostname = ns.args[0].toString();\\r\\n    await ns.grow(hostname);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImdyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLFFBQVEsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ3ZDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUM1QixDQUFDIn0=\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///d985e949-4f65-4528-ab8a-5f5fec63e71b\",\"moduleSequenceNumber\":64851}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"hacknet-node-4\",\"moduleSequenceNumber\":64851,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const hostname = ns.args[0].toString();\\r\\n    await ns.weaken(hostname);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsid2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxRQUFRLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUN2QyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDOUIsQ0FBQyJ9\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///50864f6a-8d15-4ceb-9a72-83d6f41d96f7\",\"moduleSequenceNumber\":63908}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"hacknet-node-4\",\"moduleSequenceNumber\":63908,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const hostname = ns.args[0].toString();\\r\\n    await ns.hack(hostname);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImhhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLFFBQVEsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ3ZDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUM1QixDQUFDIn0=\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///369e8635-fc33-4612-a49e-3093770e5587\",\"moduleSequenceNumber\":65010}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"hacknet-node-4\",\"moduleSequenceNumber\":65010,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"cache\":1,\"cores\":21,\"hashCapacity\":64,\"hashRate\":4.333157662021234,\"level\":88,\"onlineTimeSeconds\":34383.60000006063,\"totalHashesGenerated\":99780.40272701444}},\"hacknet-node-5\":{\"ctor\":\"HacknetServer\",\"data\":{\"contracts\":[],\"cpuCores\":21,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hacknet-node-5\",\"httpPortOpen\":false,\"ip\":\"35.9.3.6\",\"isConnectedTo\":false,\"maxRam\":2048,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const hostname = ns.args[0].toString();\\r\\n    await ns.grow(hostname);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImdyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLFFBQVEsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ3ZDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUM1QixDQUFDIn0=\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///dd7d565a-e4f6-4771-9f51-7ad514dfa786\",\"moduleSequenceNumber\":64850}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"hacknet-node-5\",\"moduleSequenceNumber\":64850,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const hostname = ns.args[0].toString();\\r\\n    await ns.weaken(hostname);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsid2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxRQUFRLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUN2QyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDOUIsQ0FBQyJ9\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///9e5b3304-0b1c-4303-9f3e-a87492d6c59e\",\"moduleSequenceNumber\":64846}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"hacknet-node-5\",\"moduleSequenceNumber\":64846,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const hostname = ns.args[0].toString();\\r\\n    await ns.hack(hostname);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImhhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLFFBQVEsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ3ZDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUM1QixDQUFDIn0=\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///dcd052a0-605f-4acd-a7db-36dee0d32be8\",\"moduleSequenceNumber\":65036}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"hacknet-node-5\",\"moduleSequenceNumber\":65036,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"cache\":1,\"cores\":21,\"hashCapacity\":64,\"hashRate\":4.333157662021234,\"level\":88,\"onlineTimeSeconds\":34325.20000006148,\"totalHashesGenerated\":98584.88065026155}},\"hacknet-node-6\":{\"ctor\":\"HacknetServer\",\"data\":{\"contracts\":[],\"cpuCores\":21,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hacknet-node-6\",\"httpPortOpen\":false,\"ip\":\"40.1.3.8\",\"isConnectedTo\":false,\"maxRam\":2048,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const hostname = ns.args[0].toString();\\r\\n    await ns.grow(hostname);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImdyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLFFBQVEsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ3ZDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUM1QixDQUFDIn0=\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"hacknet-node-6\",\"moduleSequenceNumber\":63764,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const hostname = ns.args[0].toString();\\r\\n    await ns.weaken(hostname);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsid2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxRQUFRLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUN2QyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDOUIsQ0FBQyJ9\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"hacknet-node-6\",\"moduleSequenceNumber\":63766,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const hostname = ns.args[0].toString();\\r\\n    await ns.hack(hostname);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImhhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLFFBQVEsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ3ZDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUM1QixDQUFDIn0=\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///8d4c7b23-50e5-4e80-88a6-aad070bd763b\",\"moduleSequenceNumber\":65035}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"hacknet-node-6\",\"moduleSequenceNumber\":65035,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"cache\":1,\"cores\":21,\"hashCapacity\":64,\"hashRate\":4.333157662021234,\"level\":88,\"onlineTimeSeconds\":33965.00000006672,\"totalHashesGenerated\":99526.79090059093}},\"hacknet-node-7\":{\"ctor\":\"HacknetServer\",\"data\":{\"contracts\":[],\"cpuCores\":21,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hacknet-node-7\",\"httpPortOpen\":false,\"ip\":\"71.3.7.9\",\"isConnectedTo\":false,\"maxRam\":2048,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const hostname = ns.args[0].toString();\\r\\n    await ns.grow(hostname);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImdyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLFFBQVEsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ3ZDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUM1QixDQUFDIn0=\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"hacknet-node-7\",\"moduleSequenceNumber\":63782,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const hostname = ns.args[0].toString();\\r\\n    await ns.weaken(hostname);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsid2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxRQUFRLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUN2QyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDOUIsQ0FBQyJ9\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"hacknet-node-7\",\"moduleSequenceNumber\":63784,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const hostname = ns.args[0].toString();\\r\\n    await ns.hack(hostname);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImhhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLFFBQVEsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ3ZDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUM1QixDQUFDIn0=\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///73884392-886d-4636-940c-4186394abde1\",\"moduleSequenceNumber\":65034}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"hacknet-node-7\",\"moduleSequenceNumber\":65034,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"cache\":1,\"cores\":21,\"hashCapacity\":64,\"hashRate\":4.333157662021234,\"level\":88,\"onlineTimeSeconds\":33426.600000074555,\"totalHashesGenerated\":99014.27521803077}},\"hacknet-node-8\":{\"ctor\":\"HacknetServer\",\"data\":{\"contracts\":[],\"cpuCores\":21,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hacknet-node-8\",\"httpPortOpen\":false,\"ip\":\"32.0.7.3\",\"isConnectedTo\":false,\"maxRam\":2048,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const hostname = ns.args[0].toString();\\r\\n    await ns.grow(hostname);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImdyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLFFBQVEsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ3ZDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUM1QixDQUFDIn0=\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"hacknet-node-8\",\"moduleSequenceNumber\":63788,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const hostname = ns.args[0].toString();\\r\\n    await ns.weaken(hostname);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsid2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxRQUFRLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUN2QyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDOUIsQ0FBQyJ9\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"hacknet-node-8\",\"moduleSequenceNumber\":63790,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const hostname = ns.args[0].toString();\\r\\n    await ns.hack(hostname);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImhhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLFFBQVEsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ3ZDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUM1QixDQUFDIn0=\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///99eaa5e5-f5e3-4805-8b68-9659e3e5239e\",\"moduleSequenceNumber\":65033}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"hacknet-node-8\",\"moduleSequenceNumber\":65033,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"cache\":1,\"cores\":21,\"hashCapacity\":64,\"hashRate\":4.333157662021234,\"level\":88,\"onlineTimeSeconds\":32615.400000083588,\"totalHashesGenerated\":98132.40553148514}},\"hacknet-node-9\":{\"ctor\":\"HacknetServer\",\"data\":{\"contracts\":[],\"cpuCores\":21,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hacknet-node-9\",\"httpPortOpen\":false,\"ip\":\"11.7.0.6\",\"isConnectedTo\":false,\"maxRam\":2048,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const hostname = ns.args[0].toString();\\r\\n    await ns.grow(hostname);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImdyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLFFBQVEsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ3ZDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUM1QixDQUFDIn0=\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///24d2a4d5-0dc8-46be-97ad-aa4af102f364\",\"moduleSequenceNumber\":73961}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"hacknet-node-9\",\"moduleSequenceNumber\":73961,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const hostname = ns.args[0].toString();\\r\\n    await ns.weaken(hostname);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsid2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxRQUFRLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUN2QyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDOUIsQ0FBQyJ9\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///ef74ca2d-5748-4d98-8ecf-65692aa809b0\",\"moduleSequenceNumber\":73960}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"hacknet-node-9\",\"moduleSequenceNumber\":73960,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const hostname = ns.args[0].toString();\\r\\n    await ns.hack(hostname);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImhhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLFFBQVEsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ3ZDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUM1QixDQUFDIn0=\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///4943a7af-f059-4428-a3e3-fb5bf76644fe\",\"moduleSequenceNumber\":65032}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"hacknet-node-9\",\"moduleSequenceNumber\":65032,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"cache\":1,\"cores\":21,\"hashCapacity\":64,\"hashRate\":4.283917234043721,\"level\":87,\"onlineTimeSeconds\":31362.60000007903,\"totalHashesGenerated\":96398.78472361705}},\"hacknet-node-10\":{\"ctor\":\"HacknetServer\",\"data\":{\"contracts\":[],\"cpuCores\":21,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hacknet-node-10\",\"httpPortOpen\":false,\"ip\":\"69.3.0.5\",\"isConnectedTo\":false,\"maxRam\":2048,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"cache\":1,\"cores\":21,\"hashCapacity\":64,\"hashRate\":4.283917234043721,\"level\":87,\"onlineTimeSeconds\":28651.000000069165,\"totalHashesGenerated\":93180.89611670988}},\"hacknet-node-11\":{\"ctor\":\"HacknetServer\",\"data\":{\"contracts\":[],\"cpuCores\":21,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hacknet-node-11\",\"httpPortOpen\":false,\"ip\":\"72.6.7.6\",\"isConnectedTo\":false,\"maxRam\":2048,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"cache\":1,\"cores\":21,\"hashCapacity\":64,\"hashRate\":4.283917234043721,\"level\":87,\"onlineTimeSeconds\":23452.800000050254,\"totalHashesGenerated\":81674.38151215429}},\"hacknet-node-12\":{\"ctor\":\"HacknetServer\",\"data\":{\"contracts\":[],\"cpuCores\":21,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hacknet-node-12\",\"httpPortOpen\":false,\"ip\":\"44.3.7.1\",\"isConnectedTo\":false,\"maxRam\":2048,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"cache\":1,\"cores\":21,\"hashCapacity\":64,\"hashRate\":4.283917234043721,\"level\":87,\"onlineTimeSeconds\":14312.400000017004,\"totalHashesGenerated\":53973.050527883606}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"ECorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"MegaCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Bachman & Associates\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.6,\"salaryMultiplier\":2.6,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Blade Industries\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NWO\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Clarke Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"OmniTek Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Four Sigma\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.5,\"salaryMultiplier\":2.5,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"name\":\"KuaiGong International\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.2,\"salaryMultiplier\":2.2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Fulcrum Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Storm Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DefComm\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Helios Labs\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"name\":\"VitaLife\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Icarus Microsystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Universal Energy\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Galactic Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"AeroCorp\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omnia Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Solaris Space Systems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DeltaOne\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.6,\"salaryMultiplier\":1.6,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Nova Medical\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Central Intelligence Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"National Security Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Watchdog Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"LexoCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.4,\"salaryMultiplier\":1.4,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Rho Construction\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Alpha Enterprises\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Aevum Police Headquarters\",\"info\":\"\",\"companyPositions\":{\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"name\":\"SysCore Securities\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"name\":\"CompuTek\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NetLink Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Carmichael Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"name\":\"FoodNStuff\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Joe's Guns\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omega Software\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true},\"expMultiplier\":1.1,\"salaryMultiplier\":1.1,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Noodle Bar\",\"info\":\"\",\"companyPositions\":{\"Waiter\":true,\"Part-time Waiter\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"QLink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Illuminati\",\"playerReputation\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"The Red Pill\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Daedalus\",\"playerReputation\":0}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib III\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"SPTN-97 Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Covenant\",\"playerReputation\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"ECorp HVMind Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"ECorp\",\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"CordiARC Fusion Reactor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"MegaCorp\",\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"SmartJaw\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bachman & Associates\",\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Neotra\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Blade Industries\",\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\",\"Power Recirculation Core\",\"Xanipher\",\"Hydroflame Left Arm\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NWO\",\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Neuronal Densification\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"nextSENS Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Clarke Incorporated\",\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"NeuroFlux Governor\",\"OmniTek InfoLoad\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"OmniTek Incorporated\",\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"PC Direct-Neural Interface\",\"ADR-V1 Pheromone Gene\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Four Sigma\",\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module Core V2 Upgrade\",\"Speech Enhancement\",\"FocusWire\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Photosynthetic Cells\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"KuaiGong International\",\"playerReputation\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface Optimization Submodule\",\"PC Direct-Neural Interface NeuroNet Injector\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Fulcrum Secret Technologies\",\"playerReputation\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Neural Accelerator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"Cranial Signal Processors - Gen V\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"BitRunners Neurolink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"BitRunners\",\"playerReputation\":0}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Artificial Synaptic Potentiation\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Neuralstimulator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"NeuroFlux Governor\",\"The Black Hand\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Black Hand\",\"playerReputation\":0}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"BitWire\",\"Artificial Synaptic Potentiation\",\"Neural-Retention Enhancement\",\"DataJack\",\"Embedded Netburner Module\",\"Cranial Signal Processors - Gen II\",\"Cranial Signal Processors - Gen III\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"CRTX42-AA Gene Modification\"],\"favor\":16.9245,\"isBanned\":false,\"isMember\":true,\"name\":\"NiteSec\",\"playerReputation\":26249.246335374628}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Wired Reflexes\",\"Speech Processor Implant\",\"Synaptic Enhancement Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"Neurotrainer I\",\"PCMatrix\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Aevum\",\"playerReputation\":0}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"Neuregen Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Chongqing\",\"playerReputation\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"INFRARET Enhancement\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Ishima\",\"playerReputation\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"NutriGen Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"New Tokyo\",\"playerReputation\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"CashRoot Starter Kit\"],\"favor\":24.9405,\"isBanned\":false,\"isMember\":false,\"name\":\"Sector-12\",\"playerReputation\":0}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"DermaForce Particle Barrier\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Volhaven\",\"playerReputation\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Unstable Circadian Modulator\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"Speech Enhancement\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Graphene BrachiBlades Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Speakers for the Dead\",\"playerReputation\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Wired Reflexes\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"Graphene Bionic Arms Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Dark Army\",\"playerReputation\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"ADR-V1 Pheromone Gene\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"BrachiBlades\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Syndicate\",\"playerReputation\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"TITN-41 Gene-Modification Injection\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Silhouette\",\"playerReputation\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"Power Recirculation Core\",\"Bionic Arms\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Tetrads\",\"playerReputation\":0}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"SmartSonar Implant\"],\"favor\":12.1886,\"isBanned\":false,\"isMember\":true,\"name\":\"Slum Snakes\",\"playerReputation\":17678.206186183164}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Hacknet Node CPU Architecture Neural-Upload\",\"Hacknet Node Cache Architecture Neural-Upload\",\"Hacknet Node NIC Architecture Neural-Upload\",\"Hacknet Node Kernel Direct-Neural Interface\",\"Hacknet Node Core Direct-Neural Interface\",\"NeuroFlux Governor\"],\"favor\":93.6044,\"isBanned\":false,\"isMember\":true,\"name\":\"Netburners\",\"playerReputation\":44308.81805269541}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Nanofiber Weave\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Social Negotiation Assistant (S.N.A)\",\"Neuroreceptor Management Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Tian Di Hui\",\"playerReputation\":0}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"BitWire\",\"Synaptic Enhancement Implant\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"NeuroFlux Governor\",\"Neurotrainer I\"],\"favor\":32.8229,\"isBanned\":false,\"isMember\":true,\"name\":\"CyberSec\",\"playerReputation\":22727.29612227897}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"EsperTech Bladeburner Eyewear\",\"EMS-4 Recombination\",\"ORION-MKIV Shoulder\",\"Hyperion Plasma Cannon V1\",\"Hyperion Plasma Cannon V2\",\"GOLEM Serum\",\"Vangelis Virus\",\"Vangelis Virus 3.0\",\"I.N.T.E.R.L.I.N.K.E.D\",\"Blade's Runners\",\"BLADE-51b Tesla Armor\",\"BLADE-51b Tesla Armor: Power Cells Upgrade\",\"BLADE-51b Tesla Armor: Energy Shielding Upgrade\",\"BLADE-51b Tesla Armor: Unibeam Upgrade\",\"BLADE-51b Tesla Armor: Omnibeam Upgrade\",\"BLADE-51b Tesla Armor: IPU Upgrade\",\"The Blade's Simulacrum\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bladeburners\",\"playerReputation\":0}},\"Church of the Machine God\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Stanek's Gift - Genesis\",\"Stanek's Gift - Awakening\",\"Stanek's Gift - Serenity\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Church of the Machine God\",\"playerReputation\":0}}}","AliasesSave":"{\"sa\":\"scan-analyze\",\"ll\":\"run ll.js\",\"as\":\"run assess.js\",\"mcp\":\"run mcp.js\",\"ka\":\"run ka.js\",\"cct\":\"run cct.js\",\"bs\":\"run buy_server.js\",\"bp\":\"run buy_programs.js\",\"crawl\":\"run crawl.js\",\"fav\":\"run favor.js\",\"c\":\"run clock.js\",\"hn\":\"run hacknet.js\",\"hnk\":\"kill hacknet.js\",\"corp\":\"run corp.js\",\"sh\":\"run smart_hack.js\",\"leech\":\"run leech.js\",\"kleech\":\"kill leech.js\",\"test\":\"run test.js\",\"mug\":\"run crime.js mug; tail crime.js\",\"hom\":\"run crime.js homicide; tail crime.js\",\"crime\":\"run crime.js; tail crime.js\"}","GlobalAliasesSave":"{}","MessagesSave":"{\"j0.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j0.msg\",\"msg\":\"I know you can sense it. I know you're searching for it. It's why you spend night after night at your computer. <br><br>It's real, I've seen it. And I can help you find it. But not right now. You're not ready yet.<br><br>Use this program to track your progress<br><br>The fl1ght.exe program was added to your home computer<br><br>-jump3R\",\"recvd\":true}},\"j1.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j1.msg\",\"msg\":\"Soon you will be contacted by a hacking group known as CyberSec. They can help you with your search. <br><br>You should join them, garner their favor, and exploit them for their Augmentations. But do not trust them. They are not what they seem. No one is.<br><br>-jump3R\",\"recvd\":true}},\"j2.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j2.msg\",\"msg\":\"Do not try to save the world. There is no world to save. If you want to find the truth, worry only about yourself. Ethics and morals will get you killed. <br><br>Watch out for a hacking group known as NiteSec.<br><br>-jump3R\",\"recvd\":true}},\"j3.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j3.msg\",\"msg\":\"You must learn to walk before you can run. And you must run before you can fly. Look for the black hand. <br><br>I.I.I.I <br><br>-jump3R\",\"recvd\":false}},\"j4.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j4.msg\",\"msg\":\"To find what you are searching for, you must understand the bits. The bits are all around us. The runners will help you.<br><br>-jump3R\",\"recvd\":false}},\"csec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"csec-test.msg\",\"msg\":\"We've been watching you. Your skills are very impressive. But you're wasting your talents. If you join us, you can put your skills to good use and change the world for the better. If you join us, we can unlock your full potential. <br><br>But first, you must pass our test. Find and install the backdoor on our server. <br><br>-CyberSec\",\"recvd\":true}},\"nitesec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"nitesec-test.msg\",\"msg\":\"People say that the corrupted governments and corporations rule the world. Yes, maybe they do. But do you know who everyone really fears? People like us. Because they can't hide from us. Because they can't fight shadows and ideas with bullets. <br><br>Join us, and people will fear you, too. <br><br>Find and install the backdoor on our server. Then, we will contact you again.<br><br>-NiteSec\",\"recvd\":true}},\"19dfj3l1nd.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"19dfj3l1nd.msg\",\"msg\":\"We know what you are doing. We know what drives you. We know what you are looking for. <br><br> We can help you find the answers.<br><br>run4theh111z\",\"recvd\":false}},\"icarus.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"icarus.msg\",\"msg\":\"@)(#V%*N)@(#*)*C)@#%*)*V)@#(*%V@)(#VN%*)@#(*%<br>)@B(*#%)@)M#B*%V)____FIND___#$@)#%(B*)@#(*%B)<br>@_#(%_@#M(BDSPOMB__THE-CAVE_#)$(*@#$)@#BNBEGB<br>DFLSMFVMV)#@($*)@#*$MV)@#(*$V)M#(*$)M@(#*VM$)\",\"recvd\":false}}}","StockMarketSave":"{\"lastUpdate\":0,\"Orders\":{},\"storedCycles\":0,\"ticksUntilCycle\":0}","SettingsSave":"{\"ActiveScriptsServerPageSize\":100,\"ActiveScriptsScriptPageSize\":10,\"AutosaveInterval\":60,\"CodeInstructionRunTime\":25,\"DisableASCIIArt\":false,\"DisableHotkeys\":false,\"DisableTextEffects\":false,\"DisableOverviewProgressBars\":false,\"EnableBashHotkeys\":false,\"TimestampsFormat\":\"\",\"Locale\":\"en\",\"MaxLogCapacity\":500,\"MaxPortCapacity\":100,\"MaxTerminalCapacity\":500,\"OwnedAugmentationsOrder\":0,\"PurchaseAugmentationsOrder\":0,\"SaveGameOnFileSave\":true,\"SuppressBuyAugmentationConfirmation\":true,\"SuppressFactionInvites\":true,\"SuppressMessages\":true,\"SuppressTravelConfirmation\":true,\"SuppressBladeburnerPopup\":false,\"SuppressTIXPopup\":false,\"SuppressSavedGameToast\":true,\"UseIEC60027_2\":false,\"ExcludeRunningScriptsFromSave\":false,\"IsSidebarOpened\":true,\"MonacoTheme\":\"monokai\",\"MonacoInsertSpaces\":false,\"MonacoFontSize\":20,\"MonacoVim\":false,\"MonacoWordWrap\":\"off\",\"theme\":{\"primarylight\":\"#FFF\",\"primary\":\"#F8F8F2\",\"primarydark\":\"#FAFAEB\",\"successlight\":\"#ADE146\",\"success\":\"#A6E22E\",\"successdark\":\"#98E104\",\"errorlight\":\"#FF69A0\",\"error\":\"#F92672\",\"errordark\":\"#D10F56\",\"secondarylight\":\"#AAA\",\"secondary\":\"#888\",\"secondarydark\":\"#666\",\"warninglight\":\"#E1D992\",\"warning\":\"#E6DB74\",\"warningdark\":\"#EDDD54\",\"infolight\":\"#92E1F1\",\"info\":\"#66D9EF\",\"infodark\":\"#31CDED\",\"welllight\":\"#444\",\"well\":\"#222\",\"white\":\"#fff\",\"black\":\"#000\",\"hp\":\"#F92672\",\"money\":\"#E6DB74\",\"hack\":\"#A6E22E\",\"combat\":\"#75715E\",\"cha\":\"#AE81FF\",\"int\":\"#66D9EF\",\"rep\":\"#E69F66\",\"disabled\":\"#66cfbc\",\"backgroundprimary\":\"#272822\",\"backgroundsecondary\":\"#1B1C18\",\"button\":\"#333\"},\"styles\":{\"lineHeight\":1.5,\"fontFamily\":\"Lucida Console, Lucida Sans Unicode, Fira Mono, Consolas, Courier New, Courier, monospace, Times New Roman\"},\"overview\":{\"x\":-2,\"y\":3,\"opened\":true}}","VersionSave":"10","AllGangsSave":"","LastExportBonus":"1644338486457","StaneksGiftSave":"{\"ctor\":\"StaneksGift\",\"data\":{\"storedCycles\":0,\"fragments\":[]}}","SaveTimestamp":"1644424425826"}}