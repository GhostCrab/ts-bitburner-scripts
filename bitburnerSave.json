{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hacking\":2457,\"hp\":54,\"max_hp\":54,\"strength\":467,\"defense\":446,\"dexterity\":539,\"agility\":447,\"charisma\":3,\"intelligence\":196,\"hacking_chance_mult\":2.0811700356221063,\"hacking_speed_mult\":2.233189865113794,\"hacking_money_mult\":4.590367512689774,\"hacking_grow_mult\":4.730660814520892,\"hacking_exp\":2445388627.131256,\"strength_exp\":280858,\"defense_exp\":280858,\"dexterity_exp\":280858,\"agility_exp\":280858,\"charisma_exp\":0,\"intelligence_exp\":241157.77162843567,\"hacking_mult\":4.996482631185618,\"strength_mult\":2.3183674306514006,\"defense_mult\":2.217568846710036,\"dexterity_mult\":2.6777143824023684,\"agility_mult\":2.222608775907104,\"charisma_mult\":3.4352157407217283,\"hacking_exp_mult\":4.73645834959754,\"strength_exp_mult\":2.782040916781681,\"defense_exp_mult\":2.782040916781681,\"dexterity_exp_mult\":2.782040916781681,\"agility_exp_mult\":2.782040916781681,\"charisma_exp_mult\":2.033655640922281,\"company_rep_mult\":4.187703695787161,\"faction_rep_mult\":2.033655640922281,\"money\":48449.96807861328,\"city\":\"Sector-12\",\"location\":\"Travel Agency\",\"jobs\":{},\"companyName\":\"\",\"currentServer\":\"home\",\"purchasedServers\":[],\"hacknetNodes\":[],\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":0,\"hashes\":0,\"upgrades\":{\"Sell for Money\":0,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0}}},\"factions\":[\"BitRunners\",\"The Black Hand\",\"NiteSec\",\"Chongqing\",\"Ishima\",\"New Tokyo\",\"CyberSec\"],\"factionInvitations\":[],\"queuedAugmentations\":[],\"augmentations\":[{\"name\":\"NeuroFlux Governor\",\"level\":22},{\"level\":1,\"name\":\"Embedded Netburner Module Core Implant\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen I\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen II\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen III\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen IV\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen V\"},{\"level\":1,\"name\":\"Neural Accelerator\"},{\"level\":1,\"name\":\"Enhanced Myelin Sheathing\"},{\"level\":1,\"name\":\"The Black Hand\"},{\"level\":1,\"name\":\"Neural-Retention Enhancement\"},{\"level\":1,\"name\":\"CRTX42-AA Gene Modification\"},{\"level\":1,\"name\":\"Artificial Synaptic Potentiation\"},{\"level\":1,\"name\":\"Neurotrainer II\"},{\"level\":1,\"name\":\"BitWire\"},{\"level\":1,\"name\":\"Synaptic Enhancement Implant\"},{\"level\":1,\"name\":\"Neurotrainer I\"},{\"level\":1,\"name\":\"Embedded Netburner Module\"},{\"level\":1,\"name\":\"Speech Processor Implant\"},{\"level\":1,\"name\":\"INFRARET Enhancement\"},{\"level\":1,\"name\":\"Social Negotiation Assistant (S.N.A)\"},{\"level\":1,\"name\":\"Combat Rib I\"},{\"level\":1,\"name\":\"Nuoptimal Nootropic Injector Implant\"},{\"level\":1,\"name\":\"ADR-V1 Pheromone Gene\"},{\"level\":1,\"name\":\"Augmented Targeting I\"},{\"level\":1,\"name\":\"Speech Enhancement\"},{\"level\":1,\"name\":\"Wired Reflexes\"},{\"level\":1,\"name\":\"LuminCloaking-V1 Skin Implant\"},{\"level\":1,\"name\":\"LuminCloaking-V2 Skin Implant\"},{\"level\":1,\"name\":\"NutriGen Implant\"}],\"sourceFiles\":[{\"lvl\":3,\"n\":1},{\"lvl\":3,\"n\":5},{\"lvl\":3,\"n\":4},{\"lvl\":3,\"n\":10},{\"lvl\":3,\"n\":6},{\"lvl\":3,\"n\":9},{\"lvl\":19,\"n\":12},{\"lvl\":3,\"n\":2},{\"lvl\":3,\"n\":3},{\"lvl\":3,\"n\":7},{\"lvl\":3,\"n\":11},{\"lvl\":3,\"n\":13},{\"lvl\":2,\"n\":8}],\"numPeopleKilled\":0,\"karma\":-281661,\"crime_money_mult\":3.452793599044134,\"crime_success_mult\":2.8535484289620943,\"isWorking\":false,\"focus\":true,\"workType\":\"\",\"workCostMult\":5,\"workExpMult\":4,\"currentWorkFactionName\":\"\",\"currentWorkFactionDescription\":\"\",\"workHackExpGainRate\":0,\"workStrExpGainRate\":0,\"workDefExpGainRate\":0,\"workDexExpGainRate\":0,\"workAgiExpGainRate\":0,\"workChaExpGainRate\":0,\"workRepGainRate\":0,\"workMoneyGainRate\":0,\"workMoneyLossRate\":0,\"workHackExpGained\":0,\"workStrExpGained\":0,\"workDefExpGained\":0,\"workDexExpGained\":0,\"workAgiExpGained\":0,\"workChaExpGained\":0,\"workRepGained\":0,\"workMoneyGained\":0,\"createProgramName\":\"\",\"createProgramReqLvl\":50,\"graftAugmentationName\":\"\",\"timeWorkedGraftAugmentation\":0,\"className\":\"\",\"crimeType\":\"\",\"timeWorked\":0,\"timeWorkedCreateProgram\":0,\"timeNeededToCompleteWork\":72000000,\"work_money_mult\":3.1449158189705964,\"hacknet_node_money_mult\":1.8327015262066408,\"hacknet_node_purchase_cost_mult\":0.49192016176842,\"hacknet_node_ram_cost_mult\":0.49192016176842,\"hacknet_node_core_cost_mult\":0.49192016176842,\"hacknet_node_level_cost_mult\":0.49192016176842,\"hasWseAccount\":true,\"hasTixApiAccess\":true,\"has4SData\":false,\"has4SDataTixApi\":true,\"gang\":null,\"corporation\":null,\"bladeburner\":null,\"bladeburner_max_stamina_mult\":1.1400000000000001,\"bladeburner_stamina_gain_mult\":1.1400000000000001,\"bladeburner_analysis_mult\":1.1400000000000001,\"bladeburner_success_chance_mult\":1.1400000000000001,\"sleeves\":[{\"ctor\":\"Sleeve\",\"data\":{\"hacking\":78,\"strength\":212,\"defense\":212,\"dexterity\":212,\"agility\":212,\"charisma\":30,\"intelligence\":1,\"hp\":31,\"max_hp\":31,\"hacking_exp\":5441,\"strength_exp\":399062,\"defense_exp\":399062,\"dexterity_exp\":399062,\"agility_exp\":399062,\"charisma_exp\":810.5,\"intelligence_exp\":0,\"hacking_mult\":1,\"strength_mult\":1,\"defense_mult\":1,\"dexterity_mult\":1,\"agility_mult\":1,\"charisma_mult\":1,\"hacking_exp_mult\":1,\"strength_exp_mult\":1,\"defense_exp_mult\":1,\"dexterity_exp_mult\":1,\"agility_exp_mult\":1,\"charisma_exp_mult\":1,\"hacking_chance_mult\":124941025.09634897,\"hacking_speed_mult\":8700439.318155216,\"hacking_money_mult\":1.0842643882743267e+23,\"hacking_grow_mult\":139123358817.5241,\"company_rep_mult\":1,\"faction_rep_mult\":1,\"crime_money_mult\":1,\"crime_success_mult\":1,\"work_money_mult\":1,\"hacknet_node_money_mult\":240579.39531167768,\"hacknet_node_purchase_cost_mult\":0.022204270449383612,\"hacknet_node_ram_cost_mult\":0.7224999999999999,\"hacknet_node_core_cost_mult\":0.7224999999999999,\"hacknet_node_level_cost_mult\":0.08735421910125164,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"augmentations\":[],\"queuedAugmentations\":[],\"city\":\"Volhaven\",\"className\":\"\",\"crimeType\":\"Homicide\",\"currentTask\":3,\"currentTaskLocation\":\"0\",\"currentTaskMaxTime\":3000,\"currentTaskTime\":1000,\"earningsForSleeves\":{\"hack\":1521,\"str\":48686,\"def\":48686,\"dex\":48686,\"agi\":48686,\"cha\":810.5,\"money\":0},\"earningsForPlayer\":{\"hack\":1521,\"str\":48686,\"def\":48686,\"dex\":48686,\"agi\":48686,\"cha\":810.5,\"money\":-56000},\"earningsForTask\":{\"hack\":0,\"str\":35100,\"def\":35100,\"dex\":35100,\"agi\":35100,\"cha\":0,\"money\":0},\"factionWorkType\":2,\"gainRatesForTask\":{\"hack\":0,\"str\":2,\"def\":2,\"dex\":2,\"agi\":2,\"cha\":0,\"money\":0},\"gymStatType\":\"\",\"logs\":[],\"memory\":100,\"shock\":100,\"storedCycles\":0,\"sync\":100}},{\"ctor\":\"Sleeve\",\"data\":{\"hacking\":78,\"strength\":212,\"defense\":212,\"dexterity\":212,\"agility\":212,\"charisma\":30,\"intelligence\":1,\"hp\":31,\"max_hp\":31,\"hacking_exp\":5441,\"strength_exp\":399062,\"defense_exp\":399062,\"dexterity_exp\":399062,\"agility_exp\":399062,\"charisma_exp\":810.5,\"intelligence_exp\":0,\"hacking_mult\":1,\"strength_mult\":1,\"defense_mult\":1,\"dexterity_mult\":1,\"agility_mult\":1,\"charisma_mult\":1,\"hacking_exp_mult\":1,\"strength_exp_mult\":1,\"defense_exp_mult\":1,\"dexterity_exp_mult\":1,\"agility_exp_mult\":1,\"charisma_exp_mult\":1,\"hacking_chance_mult\":6599203.6940615885,\"hacking_speed_mult\":723778.8658972983,\"hacking_money_mult\":117949315729077140000,\"hacking_grow_mult\":9691314246.880592,\"company_rep_mult\":1,\"faction_rep_mult\":1,\"crime_money_mult\":1,\"crime_success_mult\":1,\"work_money_mult\":1,\"hacknet_node_money_mult\":12496.647084869204,\"hacknet_node_purchase_cost_mult\":0.05834898117096885,\"hacknet_node_ram_cost_mult\":0.85,\"hacknet_node_core_cost_mult\":0.85,\"hacknet_node_level_cost_mult\":0.16734324368961417,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"augmentations\":[],\"queuedAugmentations\":[],\"city\":\"Volhaven\",\"className\":\"\",\"crimeType\":\"Homicide\",\"currentTask\":3,\"currentTaskLocation\":\"0\",\"currentTaskMaxTime\":3000,\"currentTaskTime\":1000,\"earningsForSleeves\":{\"hack\":560,\"str\":50090,\"def\":50090,\"dex\":50090,\"agi\":50090,\"cha\":0,\"money\":0},\"earningsForPlayer\":{\"hack\":560,\"str\":50090,\"def\":50090,\"dex\":50090,\"agi\":50090,\"cha\":0,\"money\":-56000},\"earningsForTask\":{\"hack\":0,\"str\":35084,\"def\":35084,\"dex\":35084,\"agi\":35084,\"cha\":0,\"money\":0},\"factionWorkType\":2,\"gainRatesForTask\":{\"hack\":0,\"str\":2,\"def\":2,\"dex\":2,\"agi\":2,\"cha\":0,\"money\":0},\"gymStatType\":\"\",\"logs\":[],\"memory\":100,\"shock\":100,\"storedCycles\":0,\"sync\":100}},{\"ctor\":\"Sleeve\",\"data\":{\"hacking\":78,\"strength\":212,\"defense\":212,\"dexterity\":212,\"agility\":212,\"charisma\":30,\"intelligence\":1,\"hp\":31,\"max_hp\":31,\"hacking_exp\":5441,\"strength_exp\":399062,\"defense_exp\":399062,\"dexterity_exp\":399062,\"agility_exp\":399062,\"charisma_exp\":810.5,\"intelligence_exp\":0,\"hacking_mult\":1,\"strength_mult\":1,\"defense_mult\":1,\"dexterity_mult\":1,\"agility_mult\":1,\"charisma_mult\":1,\"hacking_exp_mult\":1,\"strength_exp_mult\":1,\"defense_exp_mult\":1,\"dexterity_exp_mult\":1,\"agility_exp_mult\":1,\"charisma_exp_mult\":1,\"hacking_chance_mult\":6599203.6940615885,\"hacking_speed_mult\":723778.8658972983,\"hacking_money_mult\":117949315729077140000,\"hacking_grow_mult\":9691314246.880592,\"company_rep_mult\":1,\"faction_rep_mult\":1,\"crime_money_mult\":1,\"crime_success_mult\":1,\"work_money_mult\":1,\"hacknet_node_money_mult\":12496.647084869204,\"hacknet_node_purchase_cost_mult\":0.05834898117096885,\"hacknet_node_ram_cost_mult\":0.85,\"hacknet_node_core_cost_mult\":0.85,\"hacknet_node_level_cost_mult\":0.16734324368961417,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"augmentations\":[],\"queuedAugmentations\":[],\"city\":\"Volhaven\",\"className\":\"\",\"crimeType\":\"Homicide\",\"currentTask\":3,\"currentTaskLocation\":\"0\",\"currentTaskMaxTime\":3000,\"currentTaskTime\":1000,\"earningsForSleeves\":{\"hack\":560,\"str\":50054,\"def\":50054,\"dex\":50054,\"agi\":50054,\"cha\":0,\"money\":0},\"earningsForPlayer\":{\"hack\":560,\"str\":50054,\"def\":50054,\"dex\":50054,\"agi\":50054,\"cha\":0,\"money\":-56000},\"earningsForTask\":{\"hack\":0,\"str\":35114,\"def\":35114,\"dex\":35114,\"agi\":35114,\"cha\":0,\"money\":0},\"factionWorkType\":2,\"gainRatesForTask\":{\"hack\":0,\"str\":2,\"def\":2,\"dex\":2,\"agi\":2,\"cha\":0,\"money\":0},\"gymStatType\":\"\",\"logs\":[],\"memory\":100,\"shock\":100,\"storedCycles\":0,\"sync\":100}},{\"ctor\":\"Sleeve\",\"data\":{\"hacking\":78,\"strength\":212,\"defense\":212,\"dexterity\":212,\"agility\":212,\"charisma\":30,\"intelligence\":1,\"hp\":31,\"max_hp\":31,\"hacking_exp\":5441,\"strength_exp\":399062,\"defense_exp\":399062,\"dexterity_exp\":399062,\"agility_exp\":399062,\"charisma_exp\":810.5,\"intelligence_exp\":0,\"hacking_mult\":1,\"strength_mult\":1,\"defense_mult\":1,\"dexterity_mult\":1,\"agility_mult\":1,\"charisma_mult\":1,\"hacking_exp_mult\":1,\"strength_exp_mult\":1,\"defense_exp_mult\":1,\"dexterity_exp_mult\":1,\"agility_exp_mult\":1,\"charisma_exp_mult\":1,\"hacking_chance_mult\":2639681.477624634,\"hacking_speed_mult\":361889.4329486498,\"hacking_money_mult\":29487328932269285000,\"hacking_grow_mult\":9691314246.880592,\"company_rep_mult\":1,\"faction_rep_mult\":1,\"crime_money_mult\":1,\"crime_success_mult\":1,\"work_money_mult\":1,\"hacknet_node_money_mult\":12496.647084869204,\"hacknet_node_purchase_cost_mult\":0.05834898117096885,\"hacknet_node_ram_cost_mult\":0.85,\"hacknet_node_core_cost_mult\":0.85,\"hacknet_node_level_cost_mult\":0.16734324368961417,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"augmentations\":[],\"queuedAugmentations\":[],\"city\":\"Volhaven\",\"className\":\"\",\"crimeType\":\"Homicide\",\"currentTask\":3,\"currentTaskLocation\":\"0\",\"currentTaskMaxTime\":3000,\"currentTaskTime\":1000,\"earningsForSleeves\":{\"hack\":560,\"str\":50004,\"def\":50004,\"dex\":50004,\"agi\":50004,\"cha\":0,\"money\":0},\"earningsForPlayer\":{\"hack\":560,\"str\":50004,\"def\":50004,\"dex\":50004,\"agi\":50004,\"cha\":0,\"money\":-56000},\"earningsForTask\":{\"hack\":0,\"str\":35092,\"def\":35092,\"dex\":35092,\"agi\":35092,\"cha\":0,\"money\":0},\"factionWorkType\":2,\"gainRatesForTask\":{\"hack\":0,\"str\":2,\"def\":2,\"dex\":2,\"agi\":2,\"cha\":0,\"money\":0},\"gymStatType\":\"\",\"logs\":[],\"memory\":100,\"shock\":100,\"storedCycles\":0,\"sync\":100}},{\"ctor\":\"Sleeve\",\"data\":{\"hacking\":78,\"strength\":212,\"defense\":212,\"dexterity\":212,\"agility\":212,\"charisma\":30,\"intelligence\":1,\"hp\":31,\"max_hp\":31,\"hacking_exp\":5441,\"strength_exp\":399062,\"defense_exp\":399062,\"dexterity_exp\":399062,\"agility_exp\":399062,\"charisma_exp\":810.5,\"intelligence_exp\":0,\"hacking_mult\":1,\"strength_mult\":1,\"defense_mult\":1,\"dexterity_mult\":1,\"agility_mult\":1,\"charisma_mult\":1,\"hacking_exp_mult\":1,\"strength_exp_mult\":1,\"defense_exp_mult\":1,\"dexterity_exp_mult\":1,\"agility_exp_mult\":1,\"charisma_exp_mult\":1,\"hacking_chance_mult\":2639681.4776246385,\"hacking_speed_mult\":361889.4329486498,\"hacking_money_mult\":29487328932269285000,\"hacking_grow_mult\":9691314246.880592,\"company_rep_mult\":1,\"faction_rep_mult\":1,\"crime_money_mult\":1,\"crime_success_mult\":1,\"work_money_mult\":1,\"hacknet_node_money_mult\":12496.647084869204,\"hacknet_node_purchase_cost_mult\":0.05834898117096885,\"hacknet_node_ram_cost_mult\":0.85,\"hacknet_node_core_cost_mult\":0.85,\"hacknet_node_level_cost_mult\":0.16734324368961417,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"augmentations\":[],\"queuedAugmentations\":[],\"city\":\"Volhaven\",\"className\":\"\",\"crimeType\":\"Homicide\",\"currentTask\":3,\"currentTaskLocation\":\"0\",\"currentTaskMaxTime\":3000,\"currentTaskTime\":1000,\"earningsForSleeves\":{\"hack\":560,\"str\":50028,\"def\":50028,\"dex\":50028,\"agi\":50028,\"cha\":0,\"money\":0},\"earningsForPlayer\":{\"hack\":560,\"str\":50028,\"def\":50028,\"dex\":50028,\"agi\":50028,\"cha\":0,\"money\":-56000},\"earningsForTask\":{\"hack\":0,\"str\":35174,\"def\":35174,\"dex\":35174,\"agi\":35174,\"cha\":0,\"money\":0},\"factionWorkType\":2,\"gainRatesForTask\":{\"hack\":0,\"str\":2,\"def\":2,\"dex\":2,\"agi\":2,\"cha\":0,\"money\":0},\"gymStatType\":\"\",\"logs\":[],\"memory\":100,\"shock\":100,\"storedCycles\":0,\"sync\":100}},{\"ctor\":\"Sleeve\",\"data\":{\"hacking\":78,\"strength\":212,\"defense\":212,\"dexterity\":212,\"agility\":212,\"charisma\":30,\"intelligence\":1,\"hp\":31,\"max_hp\":31,\"hacking_exp\":5441,\"strength_exp\":399062,\"defense_exp\":399062,\"dexterity_exp\":399062,\"agility_exp\":399062,\"charisma_exp\":810.5,\"intelligence_exp\":0,\"hacking_mult\":1,\"strength_mult\":1,\"defense_mult\":1,\"dexterity_mult\":1,\"agility_mult\":1,\"charisma_mult\":1,\"hacking_exp_mult\":1,\"strength_exp_mult\":1,\"defense_exp_mult\":1,\"dexterity_exp_mult\":1,\"agility_exp_mult\":1,\"charisma_exp_mult\":1,\"hacking_chance_mult\":1055872.5910498537,\"hacking_speed_mult\":180944.7164743249,\"hacking_money_mult\":7371832233067321000,\"hacking_grow_mult\":9691314246.880592,\"company_rep_mult\":1,\"faction_rep_mult\":1,\"crime_money_mult\":1,\"crime_success_mult\":1,\"work_money_mult\":1,\"hacknet_node_money_mult\":12496.647084869204,\"hacknet_node_purchase_cost_mult\":0.05834898117096885,\"hacknet_node_ram_cost_mult\":0.85,\"hacknet_node_core_cost_mult\":0.85,\"hacknet_node_level_cost_mult\":0.16734324368961417,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"augmentations\":[],\"queuedAugmentations\":[],\"city\":\"Volhaven\",\"className\":\"\",\"crimeType\":\"Homicide\",\"currentTask\":3,\"currentTaskLocation\":\"0\",\"currentTaskMaxTime\":3000,\"currentTaskTime\":1000,\"earningsForSleeves\":{\"hack\":560,\"str\":50118,\"def\":50118,\"dex\":50118,\"agi\":50118,\"cha\":0,\"money\":0},\"earningsForPlayer\":{\"hack\":560,\"str\":50118,\"def\":50118,\"dex\":50118,\"agi\":50118,\"cha\":0,\"money\":-56000},\"earningsForTask\":{\"hack\":0,\"str\":35142,\"def\":35142,\"dex\":35142,\"agi\":35142,\"cha\":0,\"money\":0},\"factionWorkType\":2,\"gainRatesForTask\":{\"hack\":0,\"str\":2,\"def\":2,\"dex\":2,\"agi\":2,\"cha\":0,\"money\":0},\"gymStatType\":\"\",\"logs\":[],\"memory\":100,\"shock\":100,\"storedCycles\":0,\"sync\":100}},{\"ctor\":\"Sleeve\",\"data\":{\"hacking\":78,\"strength\":212,\"defense\":212,\"dexterity\":212,\"agility\":212,\"charisma\":30,\"intelligence\":1,\"hp\":31,\"max_hp\":31,\"hacking_exp\":5441,\"strength_exp\":399062,\"defense_exp\":399062,\"dexterity_exp\":399062,\"agility_exp\":399062,\"charisma_exp\":810.5,\"intelligence_exp\":0,\"hacking_mult\":1,\"strength_mult\":1,\"defense_mult\":1,\"dexterity_mult\":1,\"agility_mult\":1,\"charisma_mult\":1,\"hacking_exp_mult\":1,\"strength_exp_mult\":1,\"defense_exp_mult\":1,\"dexterity_exp_mult\":1,\"agility_exp_mult\":1,\"charisma_exp_mult\":1,\"hacking_chance_mult\":17917.995897978984,\"hacking_speed_mult\":6310.482365093917,\"hacking_money_mult\":37730332942752.66,\"hacking_grow_mult\":15634973.878132116,\"company_rep_mult\":1,\"faction_rep_mult\":1,\"crime_money_mult\":1,\"crime_success_mult\":1,\"work_money_mult\":1,\"hacknet_node_money_mult\":4954.870168830641,\"hacknet_node_purchase_cost_mult\":0.07627317800126647,\"hacknet_node_ram_cost_mult\":0.85,\"hacknet_node_core_cost_mult\":0.85,\"hacknet_node_level_cost_mult\":0.19687440434072256,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"augmentations\":[],\"queuedAugmentations\":[],\"city\":\"Volhaven\",\"className\":\"\",\"crimeType\":\"Homicide\",\"currentTask\":3,\"currentTaskLocation\":\"0\",\"currentTaskMaxTime\":3000,\"currentTaskTime\":1000,\"earningsForSleeves\":{\"hack\":560,\"str\":50056,\"def\":50056,\"dex\":50056,\"agi\":50056,\"cha\":0,\"money\":0},\"earningsForPlayer\":{\"hack\":560,\"str\":50056,\"def\":50056,\"dex\":50056,\"agi\":50056,\"cha\":0,\"money\":-56000},\"earningsForTask\":{\"hack\":0,\"str\":35066,\"def\":35066,\"dex\":35066,\"agi\":35066,\"cha\":0,\"money\":0},\"factionWorkType\":2,\"gainRatesForTask\":{\"hack\":0,\"str\":2,\"def\":2,\"dex\":2,\"agi\":2,\"cha\":0,\"money\":0},\"gymStatType\":\"\",\"logs\":[],\"memory\":100,\"shock\":100,\"storedCycles\":0,\"sync\":100}},{\"ctor\":\"Sleeve\",\"data\":{\"hacking\":78,\"strength\":212,\"defense\":212,\"dexterity\":212,\"agility\":212,\"charisma\":30,\"intelligence\":1,\"hp\":31,\"max_hp\":31,\"hacking_exp\":5441,\"strength_exp\":399062,\"defense_exp\":399062,\"dexterity_exp\":399062,\"agility_exp\":399062,\"charisma_exp\":810.5,\"intelligence_exp\":0,\"hacking_mult\":1,\"strength_mult\":1,\"defense_mult\":1,\"dexterity_mult\":1,\"agility_mult\":1,\"charisma_mult\":1,\"hacking_exp_mult\":1,\"strength_exp_mult\":1,\"defense_exp_mult\":1,\"dexterity_exp_mult\":1,\"agility_exp_mult\":1,\"charisma_exp_mult\":1,\"hacking_chance_mult\":9408.60009081852,\"hacking_speed_mult\":3475.0969350884952,\"hacking_money_mult\":3738823464304.517,\"hacking_grow_mult\":2382472.210001084,\"company_rep_mult\":1,\"faction_rep_mult\":1,\"crime_money_mult\":1,\"crime_success_mult\":1,\"work_money_mult\":1,\"hacknet_node_money_mult\":1964.586038417739,\"hacknet_node_purchase_cost_mult\":0.09970350065525034,\"hacknet_node_ram_cost_mult\":0.85,\"hacknet_node_core_cost_mult\":0.85,\"hacknet_node_level_cost_mult\":0.23161694628320303,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"augmentations\":[],\"queuedAugmentations\":[],\"city\":\"Volhaven\",\"className\":\"\",\"crimeType\":\"Homicide\",\"currentTask\":3,\"currentTaskLocation\":\"0\",\"currentTaskMaxTime\":3000,\"currentTaskTime\":1000,\"earningsForSleeves\":{\"hack\":560,\"str\":50026,\"def\":50026,\"dex\":50026,\"agi\":50026,\"cha\":0,\"money\":0},\"earningsForPlayer\":{\"hack\":560,\"str\":50026,\"def\":50026,\"dex\":50026,\"agi\":50026,\"cha\":0,\"money\":-56000},\"earningsForTask\":{\"hack\":0,\"str\":35086,\"def\":35086,\"dex\":35086,\"agi\":35086,\"cha\":0,\"money\":0},\"factionWorkType\":2,\"gainRatesForTask\":{\"hack\":0,\"str\":2,\"def\":2,\"dex\":2,\"agi\":2,\"cha\":0,\"money\":0},\"gymStatType\":\"\",\"logs\":[],\"memory\":100,\"shock\":100,\"storedCycles\":0,\"sync\":100}}],\"sleevesFromCovenant\":5,\"bitNodeN\":8,\"entropy\":0,\"lastUpdate\":1649688449737,\"lastSave\":1649688449425,\"totalPlaytime\":9981260200,\"playtimeSinceLastAug\":26619400,\"playtimeSinceLastBitnode\":132586800,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":0,\"codingcontract\":0,\"corporation\":0,\"crime\":0,\"gang\":0,\"hacking\":0,\"hacknet\":0,\"hacknet_expenses\":0,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":-1728000,\"stock\":-209823550.0319214,\"total\":-249951550.0319214,\"work\":0,\"servers\":0,\"other\":-38400000,\"augmentations\":0}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":0,\"codingcontract\":0,\"corporation\":0,\"crime\":0,\"gang\":0,\"hacking\":0,\"hacknet\":0,\"hacknet_expenses\":0,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":-5248000,\"stock\":632282614174.115,\"total\":13074298617.995483,\"work\":0,\"servers\":-46365175284.16614,\"other\":-895400000,\"augmentations\":-571942492271.9519}},\"scriptProdSinceLastAug\":187115583665.01038,\"exploits\":[\"EditSaveFile\",\"N00dles\",\"YoureNotMeantToAccessThis\",\"Unclickable\",\"RealityAlteration\",\"Bypass\",\"TimeCompression\",\"UndocumentedFunctionCall\",\"PrototypeTampering\"],\"achievements\":[{\"ID\":\"FORMULAS.EXE\",\"unlockedOn\":1641708178429},{\"ID\":\"SF1.1\",\"unlockedOn\":1641708178438},{\"ID\":\"SF4.1\",\"unlockedOn\":1641708178440},{\"ID\":\"SF5.1\",\"unlockedOn\":1641708178443},{\"ID\":\"INSTALL_1\",\"unlockedOn\":1641708178445},{\"ID\":\"NS2\",\"unlockedOn\":1641708178447},{\"ID\":\"SCRIPT_32GB\",\"unlockedOn\":1641708178450},{\"ID\":\"BRUTESSH.EXE\",\"unlockedOn\":1641708238434},{\"ID\":\"FTPCRACK.EXE\",\"unlockedOn\":1641708238441},{\"ID\":\"RELAYSMTP.EXE\",\"unlockedOn\":1641708238443},{\"ID\":\"TOR\",\"unlockedOn\":1641708238444},{\"ID\":\"CYBERSEC\",\"unlockedOn\":1641709738429},{\"ID\":\"NITESEC\",\"unlockedOn\":1641709738432},{\"ID\":\"THE_BLACK_HAND\",\"unlockedOn\":1641709738433},{\"ID\":\"HTTPWORM.EXE\",\"unlockedOn\":1641709798438},{\"ID\":\"SQLINJECT.EXE\",\"unlockedOn\":1641710578432},{\"ID\":\"TRAVEL\",\"unlockedOn\":1641715138431},{\"ID\":\"BITRUNNERS\",\"unlockedOn\":1641715978434},{\"ID\":\"DRAIN_SERVER\",\"unlockedOn\":1641749518438},{\"ID\":\"FROZE\",\"unlockedOn\":1641796192129},{\"ID\":\"DONATION\",\"unlockedOn\":1641837570104},{\"ID\":\"RUNNING_SCRIPTS_1000\",\"unlockedOn\":1641847680353},{\"ID\":\"DAEDALUS\",\"unlockedOn\":1641854828167},{\"ID\":\"REPUTATION_10M\",\"unlockedOn\":1641856807959},{\"ID\":\"FAST_BN\",\"unlockedOn\":1642127766724},{\"ID\":\"SCRIPTS_30\",\"unlockedOn\":1642182124813},{\"ID\":\"N00DLES\",\"unlockedOn\":1642182124817},{\"ID\":\"WORKOUT\",\"unlockedOn\":1642449915574},{\"ID\":\"FIRST_HACKNET_NODE\",\"unlockedOn\":1642464675621},{\"ID\":\"30_HACKNET_NODE\",\"unlockedOn\":1642464675627},{\"ID\":\"MAX_HACKNET_NODE\",\"unlockedOn\":1642464675630},{\"ID\":\"HACKNET_NODE_10M\",\"unlockedOn\":1642464795526},{\"ID\":\"THE_COVENANT\",\"unlockedOn\":1642481669631},{\"ID\":\"ILLUMINATI\",\"unlockedOn\":1642487205385},{\"ID\":\"COMBAT_3000\",\"unlockedOn\":1642500348152},{\"ID\":\"MAX_CORES\",\"unlockedOn\":1642522248149},{\"ID\":\"SF10.1\",\"unlockedOn\":1642522608143},{\"ID\":\"BLADEBURNER_DIVISION\",\"unlockedOn\":1642576495422},{\"ID\":\"HOSPITALIZED\",\"unlockedOn\":1642577095422},{\"ID\":\"BLADEBURNER_OVERCLOCK\",\"unlockedOn\":1642730615920},{\"ID\":\"DEVMENU\",\"unlockedOn\":1642744104484},{\"ID\":\"EDITSAVEFILE\",\"unlockedOn\":1642744273812},{\"ID\":\"UNCLICKABLE\",\"unlockedOn\":1642744333814},{\"ID\":\"REALITYALTERATION\",\"unlockedOn\":1642744725024},{\"ID\":\"BYPASS\",\"unlockedOn\":1642744801529},{\"ID\":\"UNDOCUMENTEDFUNCTIONCALL\",\"unlockedOn\":1642744981454},{\"ID\":\"TIMECOMPRESSION\",\"unlockedOn\":1642744981461},{\"ID\":\"PROTOTYPETAMPERING\",\"unlockedOn\":1642745701455},{\"ID\":\"SF6.1\",\"unlockedOn\":1642785770037},{\"ID\":\"FIRST_HACKNET_SERVER\",\"unlockedOn\":1642788950040},{\"ID\":\"HACKNET_SERVER_1B\",\"unlockedOn\":1642807972554},{\"ID\":\"MAX_CACHE\",\"unlockedOn\":1642816068703},{\"ID\":\"SF9.1\",\"unlockedOn\":1643235429747},{\"ID\":\"SF12.1\",\"unlockedOn\":1643323114293},{\"ID\":\"GANG\",\"unlockedOn\":1643331994294},{\"ID\":\"FULL_GANG\",\"unlockedOn\":1643355274307},{\"ID\":\"GANG_MEMBER_POWER\",\"unlockedOn\":1643359714297},{\"ID\":\"SF2.1\",\"unlockedOn\":1643416557483},{\"ID\":\"CORPORATION\",\"unlockedOn\":1643613074511},{\"ID\":\"CORPORATION_BRIBE\",\"unlockedOn\":1643779578015},{\"ID\":\"MONEY_1Q\",\"unlockedOn\":1643788362347},{\"ID\":\"QUEUE_40\",\"unlockedOn\":1643788362355},{\"ID\":\"SF3.1\",\"unlockedOn\":1643790288945},{\"ID\":\"CORPORATION_REAL_ESTATE\",\"unlockedOn\":1643950278393},{\"ID\":\"ALL_HACKNET_SERVER\",\"unlockedOn\":1644630361850},{\"ID\":\"MAX_RAM\",\"unlockedOn\":1644722460742},{\"ID\":\"NEUROFLUX_255\",\"unlockedOn\":1644810799727},{\"ID\":\"CORPORATION_EMPLOYEE_3000\",\"unlockedOn\":1644924627440},{\"ID\":\"HACKING_100000\",\"unlockedOn\":1645201992959},{\"ID\":\"SLEEVE_8\",\"unlockedOn\":1645377781786},{\"ID\":\"KARMA_1000000\",\"unlockedOn\":1645844243340},{\"ID\":\"SF7.1\",\"unlockedOn\":1645940491912},{\"ID\":\"MAX_HACKNET_SERVER\",\"unlockedOn\":1646415818428},{\"ID\":\"SF11.1\",\"unlockedOn\":1646946292016},{\"ID\":\"CHALLENGE_BN6\",\"unlockedOn\":1647460017562},{\"ID\":\"CHALLENGE_BN7\",\"unlockedOn\":1648496891797},{\"ID\":\"SF8.1\",\"unlockedOn\":1649304312312}],\"terminalCommandHistory\":[\"ps\",\"mcp\",\"run fl1ght.exe\",\"mcp go\",\"reset\",\"mcp\",\"join c\",\"mcp\",\"sleeve hack\",\"sleeve hom\",\"run exp.js\",\"alias exp=\\\"run exp.js\\\"\",\"alias share=\\\"run share.js\\\"\",\"mcp\",\"ma\",\"join\",\"mcp\",\"run fl1ght.exe\",\"mc\",\"mcp\",\"cct\",\"mcp\",\"run fl1ght.exe\",\"mcp\",\"ka\",\"kill market.js\",\"ms\",\"ps\",\"mcp\",\"run fl1ght.exe\",\"mcp go\",\"reset\",\"run fl\",\"mcp\",\"join c\",\"sleeve hack\",\"sleeve hom\",\"exp\",\"ma\",\"mcp\",\"join c\",\"run bladeburner.js\",\"kill bladeburner.js\",\";;\",\"ll\",\"run fl1ght.exe\",\"mcp\",\"join\",\"msp\",\"mcp\"],\"identifier\":\"87752bcda21cd\",\"factionWorkType\":\"Faction Hacking Work\",\"committingCrimeThruSingFn\":false,\"singFnCrimeWorkerScript\":null}}","AllServersSave":"{\"home\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":false,\"ip\":\"78.9.5.3\",\"isConnectedTo\":true,\"maxRam\":8192,\"messages\":[\"hackers-starting-handbook.lit\",\"j0.msg\",\"j1.msg\",\"csec-test.msg\",\"j2.msg\",\"nitesec-test.msg\",\"j3.msg\",\"j4.msg\",\"19dfj3l1nd.msg\"],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"b1t_flum3.exe\",\"Formulas.exe\",\"BruteSSH.exe\",\"FTPCrack.exe\",\"relaySMTP.exe\",\"HTTPWorm.exe\",\"fl1ght.exe\"],\"ramUsed\":8089.85,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"test me\",\"filename\":\"job.txt\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":4049,\"_hash\":\"e437d8916edcbc62e47f2dfa71786a999732804cbd1e99c5341e1659728e9753\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"12/20/2021, 10:46:49 AM:\\n  hack_me.ns {t=1600} phantasy\\n  job.ns {t=1} \\n12/20/2021, 10:47:20 AM:\\n  hack_me.ns {t=1600} phantasy\\n  job.ns {t=1} \\n12/20/2021, 10:47:23 AM:\\n  hack_me.ns {t=1600} phantasy\\n  job.ns {t=1} \\n12/20/2021, 10:47:25 AM:\\n  hack_me.ns {t=1600} phantasy\\n  job.ns {t=1}\",\"filename\":\"out.txt\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":0,\"server\":\"home\",\"moduleSequenceNumber\":4050,\"_hash\":\"cd9e9b4b8033ea304743475d442987cf5760d0bb94e63296c690c3e821b6c5d9\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const filenames = ns.ls(ns.getHostname()).filter(filename => filename.indexOf(\\\".exe\\\") === -1);\\r\\n    for (const filename of filenames) {\\r\\n        ns.rm(filename);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm1fYWxsLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsicm1fYWxsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU87SUFDakMsTUFBTSxTQUFTLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFOUYsS0FBSyxNQUFNLFFBQVEsSUFBSSxTQUFTLEVBQUU7UUFDakMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxRQUFRLENBQUMsQ0FBQztLQUNoQjtBQUNGLENBQUMifQ==\",\"filename\":\"rm_all.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"rm_all.js\",\"url\":\"blob:file:///c0cd0c60-ea98-4f5a-9aa2-1135f4226e72\",\"moduleSequenceNumber\":121}],\"dependents\":[],\"ramUsage\":2.85,\"server\":\"home\",\"moduleSequenceNumber\":4051,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { stFormat } from \\\"lib/util\\\";\\r\\n// AUG NOTES:\\r\\n// CyberSec - Cranial Signal Processors - $70m [10k]\\r\\n// NiteSec - CRTX42-AA Gene Modification - $225m [45k]\\r\\n// The Black Hand - The Black Hand - $550m [100k]\\r\\nexport class Augmentation {\\r\\n    name;\\r\\n    faction;\\r\\n    price;\\r\\n    rep;\\r\\n    stats;\\r\\n    owned;\\r\\n    installed;\\r\\n    purchaseable;\\r\\n    dep;\\r\\n    str;\\r\\n    constructor(ns, name, faction) {\\r\\n        const ownedAugs = ns.getOwnedAugmentations(true);\\r\\n        const installedAugs = ns.getOwnedAugmentations();\\r\\n        const factionRep = (ns.getPlayer().currentWorkFactionName === faction ? ns.getPlayer().workRepGained : 0) +\\r\\n            ns.getFactionRep(faction);\\r\\n        this.name = name;\\r\\n        this.faction = faction;\\r\\n        this.price = ns.getAugmentationPrice(this.name);\\r\\n        this.rep = ns.getAugmentationRepReq(this.name);\\r\\n        this.stats = ns.getAugmentationStats(this.name);\\r\\n        this.owned = ownedAugs.includes(this.name);\\r\\n        this.installed = installedAugs.includes(this.name);\\r\\n        this.purchaseable = factionRep >= this.rep;\\r\\n        let dep = ns.getAugmentationPrereq(this.name)[0];\\r\\n        if (dep === undefined || ownedAugs.includes(dep) || installedAugs.includes(dep))\\r\\n            dep = \\\"\\\";\\r\\n        this.dep = dep;\\r\\n        let installedStr = this.installed\\r\\n            ? \\\"INSTALLED\\\"\\r\\n            : this.owned\\r\\n                ? \\\"OWNED\\\"\\r\\n                : this.purchaseable\\r\\n                    ? \\\"PURCHASEABLE\\\"\\r\\n                    : \\\"\\\";\\r\\n        if (ns.getPlayer().currentWorkFactionName === faction && installedStr === \\\"\\\") {\\r\\n            const repGainPerMs = (ns.getPlayer().workRepGainRate * 5) / 1000;\\r\\n            installedStr = stFormat(ns, (this.rep - factionRep) / repGainPerMs);\\r\\n        }\\r\\n        this.str = ns.sprintf(\\\"%s: %s - %s [%s] %s\\\", this.faction, this.name, ns.nFormat(this.price, \\\"$0.000a\\\"), ns.nFormat(this.rep, \\\"0.000a\\\"), installedStr);\\r\\n    }\\r\\n    printAugStats(ns) {\\r\\n        for (const [key, val] of Object.entries(this.stats)) {\\r\\n            ns.tprintf(\\\"%30s %s\\\", key, val);\\r\\n        }\\r\\n    }\\r\\n    toString() {\\r\\n        return this.str;\\r\\n    }\\r\\n    isHackUseful() {\\r\\n        if (this.name === \\\"Neuroflux Governor\\\")\\r\\n            return false;\\r\\n        return true;\\r\\n        // if (this.stats.crime_money_mult) return true;\\r\\n        // if (this.stats.crime_success_mult) return true;                    \\r\\n        // if (this.stats.company_rep_mult) return true;\\r\\n        // if (this.stats.faction_rep_mult) return true;\\r\\n        if (this.stats.hacking_chance_mult)\\r\\n            return true;\\r\\n        if (this.stats.hacking_exp_mult)\\r\\n            return true;\\r\\n        if (this.stats.hacking_grow_mult)\\r\\n            return true;\\r\\n        // if (this.stats.hacking_money_mult) return true;\\r\\n        if (this.stats.hacking_mult)\\r\\n            return true;\\r\\n        if (this.stats.hacking_speed_mult)\\r\\n            return true;\\r\\n        // if (this.stats.hacknet_node_core_cost_mult) return true;\\r\\n        // if (this.stats.hacknet_node_level_cost_mult) return true;\\r\\n        // if (this.stats.hacknet_node_money_mult) return true;\\r\\n        // if (this.stats.hacknet_node_purchase_cost_mult) return true;\\r\\n        // if (this.stats.hacknet_node_ram_cost_mult) return true;\\r\\n        if (this.name === \\\"BitRunners Neurolink\\\" ||\\r\\n            this.name === \\\"CashRoot Starter Kit\\\" ||\\r\\n            this.name === \\\"PCMatrix\\\" ||\\r\\n            this.name === \\\"Neuroreceptor Management Implant\\\" ||\\r\\n            this.name === \\\"The Red Pill\\\")\\r\\n            return true;\\r\\n        return false;\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXVnbWVudGF0aW9uLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2F1Z21lbnRhdGlvbi9hdWdtZW50YXRpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUVwQyxhQUFhO0FBQ2Isb0RBQW9EO0FBQ3BELHNEQUFzRDtBQUN0RCxpREFBaUQ7QUFFakQsTUFBTSxPQUFPLFlBQVk7SUFDckIsSUFBSSxDQUFTO0lBQ2IsT0FBTyxDQUFTO0lBQ2hCLEtBQUssQ0FBUztJQUNkLEdBQUcsQ0FBUztJQUNaLEtBQUssQ0FBb0I7SUFDekIsS0FBSyxDQUFVO0lBQ2YsU0FBUyxDQUFVO0lBQ25CLFlBQVksQ0FBVTtJQUN0QixHQUFHLENBQVM7SUFDWixHQUFHLENBQVM7SUFFWixZQUFZLEVBQU0sRUFBRSxJQUFZLEVBQUUsT0FBZTtRQUM3QyxNQUFNLFNBQVMsR0FBRyxFQUFFLENBQUMscUJBQXFCLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDakQsTUFBTSxhQUFhLEdBQUcsRUFBRSxDQUFDLHFCQUFxQixFQUFFLENBQUM7UUFDakQsTUFBTSxVQUFVLEdBQ1osQ0FBQyxFQUFFLENBQUMsU0FBUyxFQUFFLENBQUMsc0JBQXNCLEtBQUssT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsU0FBUyxFQUFFLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDdEYsRUFBRSxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUM5QixJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztRQUNqQixJQUFJLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQztRQUN2QixJQUFJLENBQUMsS0FBSyxHQUFHLEVBQUUsQ0FBQyxvQkFBb0IsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDaEQsSUFBSSxDQUFD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\",\"filename\":\"/lib/augmentation/augmentation.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":23.1,\"server\":\"home\",\"moduleSequenceNumber\":4052,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getOwnedAugmentations\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getFactionRep\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getAugmentationPrice\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"getAugmentationRepReq\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"getAugmentationStats\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getAugmentationPrereq\",\"cost\":5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function findProp(propName) {\\r\\n    for (const div of eval(\\\"document\\\").querySelectorAll(\\\"div\\\")) {\\r\\n        const propKey = Object.keys(div)[1];\\r\\n        if (!propKey)\\r\\n            continue;\\r\\n        const props = div[propKey];\\r\\n        if (props.children?.props && props.children.props[propName])\\r\\n            return props.children.props[propName];\\r\\n        if (props.children instanceof Array)\\r\\n            for (const child of props.children)\\r\\n                if (child?.props && child.props[propName])\\r\\n                    return child.props[propName];\\r\\n    }\\r\\n}\\r\\nexport function getMaterialPrice(divisionName, city, matName) {\\r\\n    const playerProp = findProp(\\\"player\\\");\\r\\n    if (playerProp?.corporation?.divisions) {\\r\\n        const corporation = playerProp.corporation;\\r\\n        const agDiv = playerProp.corporation.divisions.find((a) => a.type === divisionName);\\r\\n        if (agDiv) {\\r\\n            const warehouse = agDiv.warehouses[city];\\r\\n            const office = agDiv.offices[city];\\r\\n            if (warehouse && office) {\\r\\n                if (Object.prototype.hasOwnProperty.call(warehouse.materials, matName)) {\\r\\n                    const mat = warehouse.materials[matName];\\r\\n                    const businessFactor = agDiv.getBusinessFactor(office); //Business employee productivity\\r\\n                    const advertisingFactor = agDiv.getAdvertisingFactors()[0]; //Awareness + popularity\\r\\n                    const marketFactor = agDiv.getMarketFactor(mat); //Competition + demand\\r\\n                    return ((mat.qlt + 0.001) *\\r\\n                        marketFactor *\\r\\n                        businessFactor *\\r\\n                        corporation.getSalesMultiplier() *\\r\\n                        advertisingFactor *\\r\\n                        agDiv.getSalesMultiplier() *\\r\\n                        10 *\\r\\n                        (mat.bCost / mat.qty));\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2FsZS5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9jb3JwL3NhbGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBdU9BLFNBQVMsUUFBUSxDQUFDLFFBQWdCO0lBQzlCLEtBQUssTUFBTSxHQUFHLElBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLGdCQUFnQixDQUFDLEtBQUssQ0FBQyxFQUFFO1FBQ3hELE1BQU0sT0FBTyxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDcEMsSUFBSSxDQUFDLE9BQU87WUFBRSxTQUFTO1FBQ3ZCLE1BQU0sS0FBSyxHQUFHLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUMzQixJQUFJLEtBQUssQ0FBQyxRQUFRLEVBQUUsS0FBSyxJQUFJLEtBQUssQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQztZQUFFLE9BQU8sS0FBSyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDbkcsSUFBSSxLQUFLLENBQUMsUUFBUSxZQUFZLEtBQUs7WUFDL0IsS0FBSyxNQUFNLEtBQUssSUFBSSxLQUFLLENBQUMsUUFBUTtnQkFBRSxJQUFJLEtBQUssRUFBRSxLQUFLLElBQUksS0FBSyxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUM7b0JBQUUsT0FBTyxLQUFLLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0tBQ25IO0FBQ0wsQ0FBQztBQUVELE1BQU0sVUFBVSxnQkFBZ0IsQ0FBQyxZQUFvQixFQUFFLElBQVksRUFBRSxPQUFlO0lBQ2hGLE1BQU0sVUFBVSxHQUFHLFFBQVEsQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUV0QyxJQUFJLFVBQVUsRUFBRSxXQUFXLEVBQUUsU0FBUyxFQUFFO1FBQ3BDLE1BQU0sV0FBVyxHQUFpQixVQUFVLENBQUMsV0FBVyxDQUFDO1FBQ3pELE1BQU0sS0FBSyxHQUFhLFVBQVUsQ0FBQyxXQUFXLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQW1CLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLEtBQUssWUFBWSxDQUFDLENBQUM7UUFFaEgsSUFBSSxLQUFLLEVBQUU7WUFDUCxNQUFNLFNBQVMsR0FBRyxLQUFLLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ3pDLE1BQU0sTUFBTSxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDbkMsSUFBSSxTQUFTLElBQUksTUFBTSxFQUFFO2dCQUNyQixJQUFJLE1BQU0sQ0FBQyxTQUFTLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsU0FBUyxFQUFFLE9BQU8sQ0FBQyxFQUFFO29CQUNwRSxNQUFNLEdBQUcsR0FBRyxTQUFTLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDO29CQUN6QyxNQUFNLGNBQWMsR0FBRyxLQUFLLENBQUMsaUJBQWlCLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxnQ0FBZ0M7b0JBQ3hGLE1BQU0saUJBQWlCLEdBQUcsS0FBSyxDQUFDLHFCQUFxQixFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyx3QkFBd0I7b0JBQ3BGLE1BQU0sWUFBWSxHQUFHLEtBQUssQ0FBQyxlQUFlLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxzQkFBc0I7b0JBRXZFLE9BQU8sQ0FDSCxDQUFDLEdBQUcsQ0FBQyxHQUFHLEdBQUcsS0FBSyxDQUFDO3dCQUNqQixZQUFZO3dCQUNaLGNBQWM7d0JBQ2QsV0FBVyxDQUFDLGtCQUFrQixFQUFFO3dCQUNoQyxpQkFBaUI7d0JBQ2pCLEtBQUssQ0FBQyxrQkFBa0IsRUFBRTt3QkFDMUIsRUFBRTt3QkFDRixDQUFDLEdBQUcsQ0FBQyxLQUFLLEdBQUcsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUN4QixDQUFDO2lCQUNMO2FBQ0o7U0FDSjtLQUNKO0lBRUQsT0FBTyxDQUFDLENBQUM7QUFDYixDQUFDIn0=\",\"filename\":\"/lib/corp/sale.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1024,\"server\":\"home\",\"moduleSequenceNumber\":4053,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"ns\",\"name\":\"corporation\",\"cost\":1022.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.grow(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLElBQUksR0FBdUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFFbkUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDdkIsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7UUFDeEMsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7S0FDM0MsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyJ9\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///063636ad-d47d-4704-95a7-e2eaec493838\",\"moduleSequenceNumber\":157202}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":4054,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.hack(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLElBQUksR0FBdUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFFbkUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDdkIsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7UUFDeEMsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7S0FDM0MsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyJ9\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///0827e18e-3bf5-4bb8-ba89-3021dacc115c\",\"moduleSequenceNumber\":157203}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"home\",\"moduleSequenceNumber\":4055,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    await ns.suppress(ns.args[0].toString());\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3VwcHJlc3MuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9zdXBwcmVzcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFPO0lBQzlCLE1BQU0sRUFBRSxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7QUFDN0MsQ0FBQyJ9\",\"filename\":\"/lib/exec/suppress.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.5,\"server\":\"home\",\"moduleSequenceNumber\":4056,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"suppress\",\"cost\":1.9}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    await ns.weaken(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxJQUFJLEdBQXVCLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO0lBRW5FLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFO1FBQ3pCLGtCQUFrQixFQUFFLElBQUksQ0FBQyxlQUFlO1FBQ3hDLGtCQUFrQixFQUFFLElBQUksQ0FBQyxlQUFlO0tBQzNDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///b8f68fad-417c-485b-a41a-5b19e26a7c56\",\"moduleSequenceNumber\":123614}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":4057,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { writeOut } from \\\"lib/util\\\";\\r\\nexport async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    const startTime = new Date().getTime();\\r\\n    const startSec = ns.getServerSecurityLevel(data.target);\\r\\n    const startCash = ns.getServerMoneyAvailable(data.target);\\r\\n    const result = await ns.grow(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n    const endTime = new Date().getTime();\\r\\n    await writeOut(ns, data, startTime, endTime, result.toFixed(2), startSec, startCash);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjX2RlYnVnL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUdwQyxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE1BQU0sSUFBSSxHQUF1QixJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztJQUVuRSxNQUFNLFNBQVMsR0FBRyxJQUFJLElBQUksRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDO0lBQ3ZDLE1BQU0sUUFBUSxHQUFHLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDeEQsTUFBTSxTQUFTLEdBQUcsRUFBRSxDQUFDLHVCQUF1QixDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUMxRCxNQUFNLE1BQU0sR0FBRyxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRTtRQUN0QyxrQkFBa0IsRUFBRSxJQUFJLENBQUMsZUFBZTtRQUN4QyxrQkFBa0IsRUFBRSxJQUFJLENBQUMsZUFBZTtLQUMzQyxDQUFDLENBQUM7SUFDSCxNQUFNLE9BQU8sR0FBRyxJQUFJLElBQUksRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDO0lBRXJDLE1BQU0sUUFBUSxDQUFDLEVBQUUsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLE9BQU8sRUFBRSxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLFFBQVEsRUFBRSxTQUFTLENBQUMsQ0FBQztBQUN6RixDQUFDIn0=\",\"filename\":\"/lib/exec_debug/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.95,\"server\":\"home\",\"moduleSequenceNumber\":4058,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { writeOut } from \\\"lib/util\\\";\\r\\nexport async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    const startTime = new Date().getTime();\\r\\n    const startSec = ns.getServerSecurityLevel(data.target);\\r\\n    const startCash = ns.getServerMoneyAvailable(data.target);\\r\\n    const result = ns.nFormat(await ns.hack(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    }), \\\"($0.000a)\\\");\\r\\n    const endTime = new Date().getTime();\\r\\n    await writeOut(ns, data, startTime, endTime, result, startSec, startCash);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjX2RlYnVnL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUdwQyxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE1BQU0sSUFBSSxHQUF1QixJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztJQUVuRSxNQUFNLFNBQVMsR0FBRyxJQUFJLElBQUksRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDO0lBQ3ZDLE1BQU0sUUFBUSxHQUFHLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDeEQsTUFBTSxTQUFTLEdBQUcsRUFBRSxDQUFDLHVCQUF1QixDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUMxRCxNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsT0FBTyxDQUNyQixNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRTtRQUN2QixrQkFBa0IsRUFBRSxJQUFJLENBQUMsZUFBZTtRQUN4QyxrQkFBa0IsRUFBRSxJQUFJLENBQUMsZUFBZTtLQUMzQyxDQUFDLEVBQ0YsV0FBVyxDQUNkLENBQUM7SUFDRixNQUFNLE9BQU8sR0FBRyxJQUFJLElBQUksRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDO0lBRXJDLE1BQU0sUUFBUSxDQUFDLEVBQUUsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLE9BQU8sRUFBRSxNQUFNLEVBQUUsUUFBUSxFQUFFLFNBQVMsQ0FBQyxDQUFDO0FBQzlFLENBQUMifQ==\",\"filename\":\"/lib/exec_debug/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.9,\"server\":\"home\",\"moduleSequenceNumber\":4059,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    await ns.suppress(ns.args[0].toString());\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3VwcHJlc3MuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlY19kZWJ1Zy9zdXBwcmVzcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFPO0lBQzlCLE1BQU0sRUFBRSxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7QUFDN0MsQ0FBQyJ9\",\"filename\":\"/lib/exec_debug/suppress.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.5,\"server\":\"home\",\"moduleSequenceNumber\":4060,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"suppress\",\"cost\":1.9}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { writeOut } from \\\"lib/util\\\";\\r\\nexport async function main(ns) {\\r\\n    const data = JSON.parse(ns.args[0].toString());\\r\\n    const startTime = new Date().getTime();\\r\\n    const startSec = ns.getServerSecurityLevel(data.target);\\r\\n    const startCash = ns.getServerMoneyAvailable(data.target);\\r\\n    const result = await ns.weaken(data.target, {\\r\\n        hackOverrideEffect: data.hackLevelEffect,\\r\\n        hackOverrideTiming: data.hackLevelTiming,\\r\\n    });\\r\\n    const endTime = new Date().getTime();\\r\\n    await writeOut(ns, data, startTime, endTime, result.toFixed(2), startSec, startCash);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWNfZGVidWcvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFHcEMsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLElBQUksR0FBdUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFFbkUsTUFBTSxTQUFTLEdBQUcsSUFBSSxJQUFJLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQztJQUN2QyxNQUFNLFFBQVEsR0FBRyxFQUFFLENBQUMsc0JBQXNCLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ3hELE1BQU0sU0FBUyxHQUFHLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDMUQsTUFBTSxNQUFNLEdBQUcsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDeEMsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7UUFDeEMsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWU7S0FDM0MsQ0FBQyxDQUFDO0lBQ0gsTUFBTSxPQUFPLEdBQUcsSUFBSSxJQUFJLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQztJQUVyQyxNQUFNLFFBQVEsQ0FBQyxFQUFFLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxPQUFPLEVBQUUsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRSxRQUFRLEVBQUUsU0FBUyxDQUFDLENBQUM7QUFDekYsQ0FBQyJ9\",\"filename\":\"/lib/exec_debug/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.95,\"server\":\"home\",\"moduleSequenceNumber\":4061,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// {targetname: {hack stat, production lookup table}}\\r\\nconst CYCLE_PRODUCTION_LOOKUP = {};\\r\\nexport function getCycleProductionLookup(ns, env, hackLvl) {\\r\\n    if (CYCLE_PRODUCTION_LOOKUP[env.targetname] &&\\r\\n        CYCLE_PRODUCTION_LOOKUP[env.targetname].hack === hackLvl) {\\r\\n        return CYCLE_PRODUCTION_LOOKUP[env.targetname].prod;\\r\\n    }\\r\\n    // memoize cycle production statistics indexed by cycleThreadAllowance\\r\\n    const cycleProductionLookup = new Array(env.maxThreads + 1).fill(null);\\r\\n    let hackThreads = Math.min(env.maxThreads, Math.floor(1 / env.hackPercentPerThread)) - 1;\\r\\n    const threadStep = Math.max(Math.floor(hackThreads / 10000), 1);\\r\\n    while (hackThreads > 0) {\\r\\n        const hackTotal = env.hackPercentPerThread * hackThreads * env.highMoney;\\r\\n        const hackSecIncrease = ns.hackAnalyzeSecurity(hackThreads);\\r\\n        const growMult = Math.max(env.highMoney / (env.highMoney - hackTotal), 1);\\r\\n        const growThreads = env.calcGrowThreads(ns, growMult, true);\\r\\n        if (hackThreads + growThreads > env.maxThreads) {\\r\\n            //ns.tprintf(\\\"h %d | g %d\\\", hackThreads, growThreads)\\r\\n            hackThreads -= threadStep;\\r\\n            continue;\\r\\n        }\\r\\n        const growSecIncrease = ns.growthAnalyzeSecurity(growThreads);\\r\\n        const weakenHackThreads = Math.ceil(hackSecIncrease / env.weakenAmountPerThread);\\r\\n        const weakenGrowThreads = Math.ceil(growSecIncrease / env.weakenAmountPerThread);\\r\\n        const totalThreads = hackThreads + weakenHackThreads + growThreads + weakenGrowThreads;\\r\\n        hackThreads -= threadStep;\\r\\n        if (totalThreads > env.maxThreads)\\r\\n            continue;\\r\\n        if (cycleProductionLookup[totalThreads] !== null) {\\r\\n            // do nothing\\r\\n        }\\r\\n        else {\\r\\n            cycleProductionLookup[totalThreads] = {\\r\\n                totalThreads: totalThreads,\\r\\n                hackTotal: hackTotal,\\r\\n                hackThreads: hackThreads,\\r\\n                growThreads: growThreads,\\r\\n                weakenHackThreads: weakenHackThreads,\\r\\n                weakenGrowThreads: weakenGrowThreads,\\r\\n            };\\r\\n        }\\r\\n    }\\r\\n    // Fill in the blanks\\r\\n    const zeroThread = {\\r\\n        totalThreads: 0,\\r\\n        hackTotal: 0,\\r\\n        hackThreads: 0,\\r\\n        growThreads: 0,\\r\\n        weakenHackThreads: 0,\\r\\n        weakenGrowThreads: 0,\\r\\n    };\\r\\n    let fillDict = zeroThread;\\r\\n    for (let idx = 0; idx < cycleProductionLookup.length; idx++) {\\r\\n        if (cycleProductionLookup[idx] === null)\\r\\n            cycleProductionLookup[idx] = fillDict;\\r\\n        else\\r\\n            fillDict = cycleProductionLookup[idx];\\r\\n    }\\r\\n    // const endTime = new Date().getTime();\\r\\n    // ns.tprintf(\\r\\n    //     \\\"Calculated %20s:%d in %4dms | %d values | %4d\\\",\\r\\n    //     env.targetname,\\r\\n    //     ns.getPlayer().hacking,\\r\\n    //     endTime - startTime,\\r\\n    //     env.maxThreads,\\r\\n    //     Math.floor(1 / env.hackPercentPerThread)\\r\\n    // );\\r\\n    CYCLE_PRODUCTION_LOOKUP[env.targetname] = { hack: hackLvl, prod: cycleProductionLookup };\\r\\n    return CYCLE_PRODUCTION_LOOKUP[env.targetname].prod;\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3ljbGVfcHJvZHVjdGlvbi5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9oYWNrL2N5Y2xlX3Byb2R1Y3Rpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBWUEscURBQXFEO0FBQ3JELE1BQU0sdUJBQXVCLEdBTXpCLEVBQUUsQ0FBQztBQUVQLE1BQU0sVUFBVSx3QkFBd0IsQ0FBQyxFQUFNLEVBQUUsR0FBaUIsRUFBRSxPQUFlO0lBQy9FLElBQ0ksdUJBQXVCLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQztRQUN2Qyx1QkFBdUIsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUMsSUFBSSxLQUFLLE9BQU8sRUFDMUQ7UUFDRSxPQUFPLHVCQUF1QixDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQyxJQUFJLENBQUM7S0FDdkQ7SUFFRCxzRUFBc0U7SUFDdEUsTUFBTSxxQkFBcUIsR0FBRyxJQUFJLEtBQUssQ0FBQyxHQUFHLENBQUMsVUFBVSxHQUFHLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUV2RSxJQUFJLFdBQVcsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLG9CQUFvQixDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDekYsTUFBTSxVQUFVLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFdBQVcsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUVoRSxPQUFPLFdBQVcsR0FBRyxDQUFDLEVBQUU7UUFDcEIsTUFBTSxTQUFTLEdBQUcsR0FBRyxDQUFDLG9CQUFvQixHQUFHLFdBQVcsR0FBRyxHQUFHLENBQUMsU0FBUyxDQUFDO1FBQ3pFLE1BQU0sZUFBZSxHQUFHLEVBQUUsQ0FB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\",\"filename\":\"/lib/hack/cycle_production.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.7,\"server\":\"home\",\"moduleSequenceNumber\":4062,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { WEAKENJS, GROWJS, HACKJS, UTILJS } from \\\"lib/util\\\";\\r\\nexport class Host {\\r\\n    hostname;\\r\\n    threadSize;\\r\\n    maxThreads;\\r\\n    reservedScriptCalls;\\r\\n    constructor(ns, hostname, threadSize) {\\r\\n        this.hostname = hostname;\\r\\n        this.threadSize = threadSize;\\r\\n        this.reservedScriptCalls = [];\\r\\n        this.maxThreads = 0;\\r\\n        this.getMaxThreads(ns);\\r\\n    }\\r\\n    reset() {\\r\\n        this.reservedScriptCalls = [];\\r\\n    }\\r\\n    getReservedThreads() {\\r\\n        return this.reservedScriptCalls.reduce((a, b) => a + b.numThreads, 0);\\r\\n    }\\r\\n    getAvailableThreads() {\\r\\n        return this.reservedScriptCalls.reduce((a, b) => a - b.numThreads, this.maxThreads);\\r\\n    }\\r\\n    // return # of threads successfully allocated\\r\\n    tryReserveThreads(ns, script, host, numThreads, target, hackLevelTiming, hackLevelEffect, batchId, offset, operationTime, uid, writeFile) {\\r\\n        const allocateThreads = Math.min(this.getAvailableThreads(), numThreads);\\r\\n        if (allocateThreads === 0)\\r\\n            return allocateThreads;\\r\\n        this.reservedScriptCalls.push({\\r\\n            script: script,\\r\\n            host: host,\\r\\n            numThreads: allocateThreads,\\r\\n            target: target,\\r\\n            hackLevelTiming: hackLevelTiming,\\r\\n            hackLevelEffect: hackLevelEffect,\\r\\n            batchId: batchId,\\r\\n            offset: offset,\\r\\n            operationTime: operationTime,\\r\\n            finish: offset + operationTime,\\r\\n            realTimeStart: 0,\\r\\n            uid: uid,\\r\\n            writeFile: writeFile,\\r\\n        });\\r\\n        return allocateThreads;\\r\\n    }\\r\\n    // update max threads in case server size has changed\\r\\n    getMaxThreads(ns) {\\r\\n        this.maxThreads = Math.floor(ns.getServerMaxRam(this.hostname) / this.threadSize);\\r\\n        // if this host is home, reserve 64GB of ram for other stuff\\r\\n        if (this.hostname === \\\"home\\\") {\\r\\n            //const homeram = ns.getServerMaxRam(this.hostname) - 1024 - 128;\\r\\n            const homeram = ns.getServerMaxRam(this.hostname) - 128;\\r\\n            this.maxThreads = Math.max(0, Math.floor(homeram / this.threadSize));\\r\\n        }\\r\\n        this.maxThreads = Math.min(1000000, this.maxThreads);\\r\\n        return this.maxThreads;\\r\\n    }\\r\\n    async prep(ns, force = false) {\\r\\n        if (force || !ns.fileExists(GROWJS, this.hostname))\\r\\n            await ns.scp(GROWJS, \\\"home\\\", this.hostname);\\r\\n        if (force || !ns.fileExists(WEAKENJS, this.hostname))\\r\\n            await ns.scp(WEAKENJS, \\\"home\\\", this.hostname);\\r\\n        if (force || !ns.fileExists(HACKJS, this.hostname))\\r\\n            await ns.scp(HACKJS, \\\"home\\\", this.hostname);\\r\\n        if (force || !ns.fileExists(UTILJS, this.hostname))\\r\\n            await ns.scp(UTILJS, \\\"home\\\", this.hostname);\\r\\n    }\\r\\n}\\r\\nexport function generateHosts(ns, hostnames, threadSize) {\\r\\n    let hosts = [];\\r\\n    let maxThreads = 0;\\r\\n    if (hostnames)\\r\\n        hosts = hostnames\\r\\n            .map((x) => new Host(ns, x, threadSize))\\r\\n            .filter((x) => x.maxThreads > 0)\\r\\n            .sort((a, b) => b.maxThreads - a.maxThreads);\\r\\n    hosts.map((x) => (maxThreads += x.maxThreads));\\r\\n    // Too many threads causes problems\\r\\n    maxThreads = Math.min(1000000, maxThreads);\\r\\n    return [hosts, maxThreads];\\r\\n}\\r\\nexport function getMaxThreads(ns, hosts) {\\r\\n    let maxThreads = 0;\\r\\n    hosts.map((x) => (maxThreads += x.getMaxThreads(ns)));\\r\\n    // Too many threads causes problems\\r\\n    maxThreads = Math.min(1000000, maxThreads);\\r\\n    return maxThreads;\\r\\n}\\r\\nexport function mockReserveThreads(ns, hosts, numThreads, batchId, sloppy = false) {\\r\\n    if (sloppy)\\r\\n        return reserveThreadsForExecutionSloppy(ns, \\\"\\\", hosts, numThreads, \\\"\\\", 0, 0, 0, 0, 0, \\\"\\\", \\\"\\\");\\r\\n    else\\r\\n        return reserveThreadsForExecution(ns, \\\"\\\", hosts, numThreads, \\\"\\\", 0, 0, 0, 0, 0, \\\"\\\", \\\"\\\");\\r\\n}\\r\\nexport function reserveThreadsForExecution(ns, script, hosts, numThreads, target, hackLevelTiming, hackLevelEffect, batchId, offset, operationTime, uid, writeFile) {\\r\\n    for (const host of hosts) {\\r\\n        if (host.getAvailableThreads() >= numThreads) {\\r\\n            host.tryReserveThreads(ns, script, host.hostname, numThreads, target, hackLevelTiming, hackLevelEffect, batchId, offset, operationTime, ns.sprintf(\\\"%03d-%s-%s\\\", batchId, uid, host.hostname), writeFile);\\r\\n            return true;\\r\\n        }\\r\\n    }\\r\\n    return false;\\r\\n}\\r\\nexport function reserveThreadsForExecutionSloppy(ns, script, hosts, numThreads, target, hackLevelTiming, hackLevelEffect, batchId, offset, operationTime, uid, writeFile) {\\r\\n    let unallocatedThreads = numThreads;\\r\\n    for (const host of hosts) {\\r\\n        unallocatedThreads -= host.tryReserveThreads(ns, script, host.hostname, unallocatedThreads, target, hackLevelTiming, hackLevelEffect, batchId, offset, operationTime, ns.sprintf(\\\"%03d-%s-%s\\\", batchId, uid, host.hostname), writeFile);\\r\\n        if (unallocatedThreads === 0) {\\r\\n            return true;\\r\\n        }\\r\\n    }\\r\\n    ns.tprintf(\\\"WARNING: Only able to allocate %d/%d %s threads\\\", numThreads - unallocatedThreads, numThreads, script);\\r\\n    return false;\\r\\n}\\r\\nexport function clearOperationsByBatchId(hosts, batchId) {\\r\\n    for (const host of hosts) {\\r\\n        host.reservedScriptCalls = host.reservedScriptCalls.filter((a) => a.batchId !== batchId);\\r\\n    }\\r\\n}\\r\\nexport function clearAllBatches(hosts) {\\r\\n    for (const host of hosts) {\\r\\n        host.reset();\\r\\n    }\\r\\n}\\r\\nexport function mockPrimaryBatch(ns, hosts, primaryGrowThreads, primaryWeakenThreads) {\\r\\n    let threadsReserved = true;\\r\\n    if (primaryGrowThreads > 0)\\r\\n        threadsReserved = threadsReserved && mockReserveThreads(ns, hosts, primaryGrowThreads, 0, true);\\r\\n    if (primaryWeakenThreads > 0)\\r\\n        threadsReserved = threadsReserved && mockReserveThreads(ns, hosts, primaryWeakenThreads, 0, true);\\r\\n    return threadsReserved;\\r\\n}\\r\\nexport function mockBatch(ns, hosts, batchID, hackThreads, growThreads, weakenHackThreads, weakenGrowThreads) {\\r\\n    let threadsReserved = true;\\r\\n    if (hackThreads > 0)\\r\\n        threadsReserved = threadsReserved && mockReserveThreads(ns, hosts, hackThreads, batchID);\\r\\n    if (growThreads > 0)\\r\\n        threadsReserved = threadsReserved && mockReserveThreads(ns, hosts, growThreads, batchID);\\r\\n    if (weakenHackThreads > 0)\\r\\n        threadsReserved = threadsReserved && mockReserveThreads(ns, hosts, weakenHackThreads, batchID, true);\\r\\n    if (weakenGrowThreads > 0)\\r\\n        threadsReserved = threadsReserved && mockReserveThreads(ns, hosts, weakenGrowThreads, batchID, true);\\r\\n    return threadsReserved;\\r\\n}\\r\\nexport function sloppyPrimaryBatch(ns, env, playerHackLvlGrowTiming, playerHackLvlWeakenTiming, playerHackLvlEffect, growOffsetTime, weakenGrowOffsetTime, primaryGrowThreads, primaryWeakenThreads) {\\r\\n    if (primaryGrowThreads > 0)\\r\\n        reserveThreadsForExecutionSloppy(ns, GROWJS, env.hosts, primaryGrowThreads, env.targetname, playerHackLvlGrowTiming, playerHackLvlEffect, 0, growOffsetTime, env.growTime, \\\"0PG\\\", env.writeFile);\\r\\n    if (primaryWeakenThreads > 0)\\r\\n        reserveThreadsForExecutionSloppy(ns, WEAKENJS, env.hosts, primaryWeakenThreads, env.targetname, playerHackLvlWeakenTiming, playerHackLvlEffect, 0, weakenGrowOffsetTime, env.weakenTime, \\\"1PW\\\", env.writeFile);\\r\\n}\\r\\nexport function cleanPrimaryBatch(ns, env, playerHackLvlGrowTiming, playerHackLvlWeakenTiming, playerHackLvlEffect, growOffsetTime, weakenGrowOffsetTime, primaryGrowThreads, primaryWeakenThreads) {\\r\\n    let threadsReserved = true;\\r\\n    if (primaryGrowThreads > 0)\\r\\n        threadsReserved =\\r\\n            threadsReserved &&\\r\\n                reserveThreadsForExecution(ns, GROWJS, env.hosts, primaryGrowThreads, env.targetname, playerHackLvlGrowTiming, playerHackLvlEffect, 0, growOffsetTime, env.growTime, \\\"0PG\\\", env.writeFile);\\r\\n    if (primaryWeakenThreads > 0)\\r\\n        threadsReserved =\\r\\n            threadsReserved &&\\r\\n                reserveThreadsForExecutionSloppy(ns, WEAKENJS, env.hosts, primaryWeakenThreads, env.targetname, playerHackLvlWeakenTiming, playerHackLvlEffect, 0, weakenGrowOffsetTime, env.weakenTime, \\\"1PW\\\", env.writeFile);\\r\\n    return threadsReserved;\\r\\n}\\r\\nexport function sloppyBatch(ns, env, batchId, playerHackLvlHackTiming, playerHackLvlGrowTiming, playerHackLvlWeakenTiming, playerHackLvlEffect, hackOffsetTime, growOffsetTime, weakenHackOffsetTime, weakenGrowOffsetTime) {\\r\\n    const cycleOffsetTime = batchId * env.cycleSpacer;\\r\\n    reserveThreadsForExecutionSloppy(ns, HACKJS, env.hosts, env.hackThreads, env.targetname, playerHackLvlHackTiming, playerHackLvlEffect, batchId, cycleOffsetTime + hackOffsetTime, env.hackTime, \\\"0H\\\", env.writeFile);\\r\\n    reserveThreadsForExecutionSloppy(ns, GROWJS, env.hosts, env.growThreads, env.targetname, playerHackLvlGrowTiming, playerHackLvlEffect, batchId, cycleOffsetTime + growOffsetTime, env.growTime, \\\"2G\\\", env.writeFile);\\r\\n    reserveThreadsForExecutionSloppy(ns, WEAKENJS, env.hosts, env.weakenHackThreads, env.targetname, playerHackLvlWeakenTiming, playerHackLvlEffect, batchId, cycleOffsetTime + weakenHackOffsetTime, env.weakenTime, \\\"1WH\\\", env.writeFile);\\r\\n    reserveThreadsForExecutionSloppy(ns, WEAKENJS, env.hosts, env.weakenGrowThreads, env.targetname, playerHackLvlWeakenTiming, playerHackLvlEffect, batchId, cycleOffsetTime + weakenGrowOffsetTime, env.weakenTime, \\\"3WG\\\", env.writeFile);\\r\\n}\\r\\nexport function cleanBatch(ns, env, batchId, playerHackLvlHackTiming, playerHackLvlGrowTiming, playerHackLvlWeakenTiming, playerHackLvlEffect, hackOffsetTime, growOffsetTime, weakenHackOffsetTime, weakenGrowOffsetTime) {\\r\\n    const cycleOffsetTime = batchId * env.cycleSpacer;\\r\\n    let threadsReserved = true;\\r\\n    threadsReserved =\\r\\n        threadsReserved &&\\r\\n            reserveThreadsForExecution(ns, HACKJS, env.hosts, env.hackThreads, env.targetname, playerHackLvlHackTiming, playerHackLvlEffect, batchId, cycleOffsetTime + hackOffsetTime, env.hackTime, \\\"0H\\\", env.writeFile);\\r\\n    threadsReserved =\\r\\n        threadsReserved &&\\r\\n            reserveThreadsForExecution(ns, GROWJS, env.hosts, env.growThreads, env.targetname, playerHackLvlGrowTiming, playerHackLvlEffect, batchId, cycleOffsetTime + growOffsetTime, env.growTime, \\\"2G\\\", env.writeFile);\\r\\n    threadsReserved =\\r\\n        threadsReserved &&\\r\\n            reserveThreadsForExecutionSloppy(ns, WEAKENJS, env.hosts, env.weakenHackThreads, env.targetname, playerHackLvlWeakenTiming, playerHackLvlEffect, batchId, cycleOffsetTime + weakenHackOffsetTime, env.weakenTime, \\\"1WH\\\", env.writeFile);\\r\\n    threadsReserved =\\r\\n        threadsReserved &&\\r\\n            reserveThreadsForExecutionSloppy(ns, WEAKENJS, env.hosts, env.weakenGrowThreads, env.targetname, playerHackLvlWeakenTiming, playerHackLvlEffect, batchId, cycleOffsetTime + weakenGrowOffsetTime, env.weakenTime, \\\"3WG\\\", env.writeFile);\\r\\n    return threadsReserved;\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaG9zdC5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9oYWNrL2hvc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxNQUFNLFVBQVUsQ0FBQztBQWtCNUQsTUFBTSxPQUFPLElBQUk7SUFDYixRQUFRLENBQVM7SUFDakIsVUFBVSxDQUFTO0lBQ25CLFVBQVUsQ0FBUztJQUNuQixtQkFBbUIsQ0FBdUI7SUFFMUMsWUFBWSxFQUFNLEVBQUUsUUFBZ0IsRUFBRSxVQUFrQjtRQUNwRCxJQUFJLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztRQUN6QixJQUFJLENBQUMsVUFBVSxHQUFHLFVBQVUsQ0FBQztRQUM3QixJQUFJLENBQUMsbUJBQW1CLEdBQUcsRUFBRSxDQUFDO1FBQzlCLElBQUksQ0FBQyxVQUFVLEdBQUcsQ0FBQyxDQUFDO1FBQ3BCLElBQUksQ0FBQyxhQUFhLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDM0IsQ0FBQztJQUVELEtBQUs7UUFDRCxJQUFJLENBQUMsbUJBQW1CLEdBQUcsRUFBRSxDQUFDO0lBQ2xDLENBQUM7SUFFRCxrQkFBa0I7UUFDZCxPQUFPLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLFVBQVUsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUMxRSxDQUFDO0lBRUQsbUJBQW1CO1FBQ2YsT0FBTyxJQUFJLENBQUMsbUJBQW1CLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQ3hGLENBQUM7SUFFRCw2Q0FBNkM7SUFDN0MsaUJBQWlCLENBQ2IsRUFBTSxFQUNOLE1BQWMsRUFDZCxJQUFZLEVBQ1osVUFBa0IsRUFDbEIsTUFBYyxFQUNkLGVBQXVCLEVBQ3ZCLGVBQXVCLEVBQ3ZCLE9BQWUsRUFDZixNQUFjLEVBQ2QsYUFBcUIsRUFDckIsR0FBVyxFQUNYLFNBQWlCO1FBRWpCLE1BQU0sZUFBZSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLG1CQUFtQixFQUFFLEVBQUUsVUFBVSxDQUFDLENBQUM7UUFFekUsSUFBSSxlQUFlLEtBQUssQ0FBQztZQUFFLE9BQU8sZUFBZSxDQUFDO1FBRWxELElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLENBQUM7WUFDMUIsTUFBTSxFQUFFLE1BQU07WUFDZCxJQUFJLEVBQUUsSUFBSTtZQUNWLFVBQVUsRUFBRSxlQUFlO1lBQzNCLE1BQU0sRUFBRSxNQUFNO1lBQ2QsZUFBZSxFQUFFLGVBQWU7WUFDaEMsZUFBZSxFQUFFLGVBQWU7WUFDaEMsT0FBTyxFQUFFLE9BQU87WUFDaEIsTUFBTSxFQUFFLE1BQU07WUFDZCxhQUFhLEVBQUUsYUFBYTtZQUM1QixNQUFNLEVBQUUsTUFBTSxHQUFHLGFBQWE7WUFDOUIsYUFBYSxFQUFFLENBQUM7WUFDaEIsR0FBRyxFQUFFLEdBQUc7WUFDUixTQUFTLEVBQUUsU0FBUztTQUN2QixDQUFDLENBQUM7UUFFSCxPQUFPLGVBQWUsQ0FBQztJQUMzQixDQUFDO0lBRUQscURBQXFEO0lBQ3JELGFBQWEsQ0FBQyxFQUFNO1FBQ2hCLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7UUFFbEYsNERBQTREO1FBQzVELElBQUksSUFBSSxDQUFDLFFBQVEsS0FBSyxNQUFNLEVBQUU7WUFDMUIsaUVBQWlFO1lBQ2pFLE1BQU0sT0FBTyxHQUFHLEVBQUUsQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLEdBQUcsQ0FBQztZQUN4RCxJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDO1NBQ3hFO1FBRUQsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7UUFFckQsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDO0lBQzNCLENBQUM7SUFFRCxLQUFLLENBQUMsSUFBSSxDQUFDLEVBQU0sRUFBRSxLQUFLLEdBQUcsS0FBSztRQUM1QixJQUFJLEtBQUssSUFBSSxDQUFDLEVBQUUsQ0FBQyxVQUFVLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUM7WUFBRSxNQUFNLEVBQUUsQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFFLE1BQU0sRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDaEcsSUFBSSxLQUFLLElBQUksQ0FBQyxFQUFFLENBQUMsVUFBVSxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDO1lBQUUsTUFBTSxFQUFFLENBQUMsR0FBRyxDQUFDLFFBQVEsRUFBRSxNQUFNLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ3BHLElBQUksS0FBSyxJQUFJLENBQUMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQztZQUFFLE1BQU0sRUFBRSxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsTUFBTSxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUNoRyxJQUFJLEtBQUssSUFBSSxDQUFDLEVBQUUsQ0FBQyxVQUFVLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUM7WUFBRSxNQUFNLEVBQUUsQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFFLE1BQU0sRUFBRSxJQUFJLENB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\",\"filename\":\"/lib/hack/host.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.35,\"server\":\"home\",\"moduleSequenceNumber\":4063,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { stFormat, stdFormat, WEAKENJS, GROWJS, HACKJS, llog } from \\\"lib/util\\\";\\r\\nimport { getCycleProductionLookup } from \\\"lib/hack/cycle_production\\\";\\r\\nimport { generateHosts, getMaxThreads, clearOperationsByBatchId, mockPrimaryBatch, mockBatch, clearAllBatches, cleanPrimaryBatch, sloppyPrimaryBatch, cleanBatch, sloppyBatch } from \\\"lib/hack/host\\\";\\r\\nexport const TSPACER = 400;\\r\\nexport class ModHackEnv {\\r\\n    targetname;\\r\\n    highMoney;\\r\\n    lowMoney;\\r\\n    tspacer;\\r\\n    weakenRam;\\r\\n    growRam;\\r\\n    hackRam;\\r\\n    threadSize;\\r\\n    cores;\\r\\n    hosts;\\r\\n    maxThreads;\\r\\n    waitPID;\\r\\n    security;\\r\\n    lowSecurity;\\r\\n    money;\\r\\n    // Weaken Info\\r\\n    weakenStartSec;\\r\\n    weakenAmountPerThread;\\r\\n    weakenThreads;\\r\\n    weakenGrowThreads;\\r\\n    weakenHackThreads;\\r\\n    weakenTime;\\r\\n    weakenTimeFullCycle;\\r\\n    // Grow Info\\r\\n    growStartMoney;\\r\\n    growMult;\\r\\n    growThreads;\\r\\n    growSecIncrease;\\r\\n    growTime;\\r\\n    // Hack Info\\r\\n    hackStartMoney;\\r\\n    hackTotal;\\r\\n    hackThreads;\\r\\n    hackSecIncrease;\\r\\n    hackTime;\\r\\n    hackPercentPerThread;\\r\\n    // Batch Cycle Info\\r\\n    threadsPerCycle;\\r\\n    cycleSpacer;\\r\\n    fullBatchTime;\\r\\n    cycleMax;\\r\\n    cycleTotal;\\r\\n    fullCycleTime;\\r\\n    primaryStats;\\r\\n    // Simulator Info\\r\\n    simEnabled;\\r\\n    simTarget;\\r\\n    simPlayer;\\r\\n    writeFile = \\\"\\\";\\r\\n    constructor(ns, targetname, hostnames) {\\r\\n        this.targetname = targetname;\\r\\n        this.highMoney = ns.getServerMaxMoney(this.targetname);\\r\\n        this.lowMoney = ns.getServerMaxMoney(this.targetname) * 0.5;\\r\\n        this.tspacer = TSPACER; // CONST\\r\\n        this.weakenRam = ns.getScriptRam(WEAKENJS);\\r\\n        this.growRam = ns.getScriptRam(GROWJS);\\r\\n        this.hackRam = ns.getScriptRam(HACKJS);\\r\\n        this.threadSize = Math.max(this.weakenRam, this.growRam, this.hackRam);\\r\\n        this.cores = 1; // Simplify\\r\\n        [this.hosts, this.maxThreads] = generateHosts(ns, hostnames, this.threadSize);\\r\\n        this.waitPID = 0;\\r\\n        // Target Info\\r\\n        this.security = 0;\\r\\n        this.lowSecurity = 0;\\r\\n        this.money = 0;\\r\\n        // Weaken Info\\r\\n        this.weakenStartSec = 0;\\r\\n        this.weakenAmountPerThread = 0;\\r\\n        this.weakenThreads = 0;\\r\\n        this.weakenGrowThreads = 0;\\r\\n        this.weakenHackThreads = 0;\\r\\n        this.weakenTime = 0;\\r\\n        this.weakenTimeFullCycle = 0;\\r\\n        // Grow Info\\r\\n        this.growStartMoney = 0;\\r\\n        this.growMult = 0;\\r\\n        this.growThreads = 0;\\r\\n        this.growSecIncrease = 0;\\r\\n        this.growTime = 0;\\r\\n        // Hack Info\\r\\n        this.hackStartMoney = 0;\\r\\n        this.hackTotal = 0;\\r\\n        this.hackThreads = 0;\\r\\n        this.hackSecIncrease = 0;\\r\\n        this.hackTime = 0;\\r\\n        this.hackPercentPerThread = 0;\\r\\n        // Batch Cycle Info\\r\\n        this.threadsPerCycle = 0;\\r\\n        this.cycleSpacer = this.tspacer * 4;\\r\\n        this.fullBatchTime = 0; // this.weakenTime + this.tspacer * 2;\\r\\n        this.cycleMax = 0; // Math.floor(this.cycleFitTime / this.cycleSpacer)\\r\\n        this.cycleTotal = 0;\\r\\n        this.fullCycleTime = 0; // this.cycleFullTime + this.cycleSpacer * this.cycleTotal\\r\\n        this.primaryStats = {\\r\\n            primaryThreadsTotal: 0,\\r\\n            primaryGrowThreads: 0,\\r\\n            primaryWeakenThreads: 0,\\r\\n        };\\r\\n        // Simulator Info\\r\\n        this.simEnabled = false;\\r\\n        this.simTarget = ns.getServer(this.targetname);\\r\\n        this.simPlayer = ns.getPlayer();\\r\\n        //this.writeFile = ns.sprintf(\\\"%s-%d.txt\\\", this.targetname, new Date().getTime());\\r\\n    }\\r\\n    async init(ns, force = false) {\\r\\n        for (const host of this.hosts) {\\r\\n            await host.prep(ns, force);\\r\\n        }\\r\\n        if (this.writeFile !== \\\"\\\") {\\r\\n            await ns.write(this.writeFile, ns.sprintf(\\\"%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\", \\\"Target Name\\\", \\\"UID\\\", \\\"Batch ID\\\", \\\"Start Time\\\", \\\"End Time\\\", \\\"Operation Time\\\", \\\"Real Start Time\\\", \\\"Real End Time\\\", \\\"Real Operation Time\\\", \\\"Start Time Diff\\\", \\\"End Time Diff\\\", \\\"Operation Time Diff\\\", \\\"Result\\\", \\\"Security Before\\\", \\\"Security After\\\", \\\"Cash Before\\\", \\\"Cash After\\\"), \\\"w\\\");\\r\\n        }\\r\\n    }\\r\\n    getServerSecurityLevel(ns) {\\r\\n        if (this.simEnabled)\\r\\n            return this.simTarget.hackDifficulty;\\r\\n        return ns.getServerSecurityLevel(this.targetname);\\r\\n    }\\r\\n    getServerMoneyAvailable(ns) {\\r\\n        if (this.simEnabled)\\r\\n            return Math.max(this.simTarget.moneyAvailable, 1);\\r\\n        return Math.max(ns.getServerMoneyAvailable(this.targetname), 1);\\r\\n    }\\r\\n    getWeakenTime(ns, hackOverride) {\\r\\n        if (this.simEnabled)\\r\\n            return Math.ceil(ns.formulas.hacking.weakenTime(this.simTarget, this.simPlayer, hackOverride));\\r\\n        return Math.ceil(ns.getWeakenTime(this.targetname, hackOverride));\\r\\n    }\\r\\n    getWeakenLevelForTime(ns, ms) {\\r\\n        if (this.simEnabled)\\r\\n            return ns.formulas.hacking.weakenLevelForTime(this.simTarget, ns.getPlayer(), ms);\\r\\n        return ns.formulas.hacking.weakenLevelForTime(ns.getServer(this.targetname), ns.getPlayer(), ms);\\r\\n    }\\r\\n    getGrowTime(ns, hackOverride) {\\r\\n        if (this.simEnabled)\\r\\n            return Math.ceil(ns.formulas.hacking.growTime(this.simTarget, this.simPlayer, hackOverride));\\r\\n        return Math.ceil(ns.getGrowTime(this.targetname, hackOverride));\\r\\n    }\\r\\n    getHackTime(ns, hackOverride) {\\r\\n        if (this.simEnabled)\\r\\n            return Math.ceil(ns.formulas.hacking.hackTime(this.simTarget, this.simPlayer, hackOverride));\\r\\n        return Math.ceil(ns.getHackTime(this.targetname, hackOverride));\\r\\n    }\\r\\n    hackAnalyze(ns, assumeMinSec = false, hackOverride) {\\r\\n        if (this.simEnabled) {\\r\\n            if (assumeMinSec) {\\r\\n                const simTarget = Object.assign({}, this.simTarget);\\r\\n                simTarget.hackDifficulty = simTarget.minDifficulty;\\r\\n                return ns.formulas.hacking.hackPercent(simTarget, this.simPlayer, hackOverride);\\r\\n            }\\r\\n            return ns.formulas.hacking.hackPercent(this.simTarget, this.simPlayer, hackOverride);\\r\\n        }\\r\\n        if (assumeMinSec) {\\r\\n            const simTarget = ns.getServer(this.targetname);\\r\\n            simTarget.hackDifficulty = simTarget.minDifficulty;\\r\\n            return ns.formulas.hacking.hackPercent(simTarget, ns.getPlayer(), hackOverride);\\r\\n        }\\r\\n        return ns.hackAnalyze(this.targetname, hackOverride);\\r\\n    }\\r\\n    numCycleForGrowth(ns, server, growth, player, cores = 1) {\\r\\n        let ajdGrowthRate = 1 + (1.03 - 1) / server.hackDifficulty;\\r\\n        if (ajdGrowthRate > 1.0035) {\\r\\n            ajdGrowthRate = 1.0035;\\r\\n        }\\r\\n        const serverGrowthPercentage = server.serverGrowth / 100;\\r\\n        const coreBonus = 1 + (cores - 1) / 16;\\r\\n        const cycles = Math.log(growth) /\\r\\n            (Math.log(ajdGrowthRate) *\\r\\n                player.hacking_grow_mult *\\r\\n                serverGrowthPercentage *\\r\\n                ns.getBitNodeMultipliers().ServerGrowthRate *\\r\\n                coreBonus);\\r\\n        return cycles;\\r\\n    }\\r\\n    calcGrowThreads(ns, _growMult, assumeMinSec = false) {\\r\\n        const growMult = _growMult === undefined ? this.growMult : _growMult;\\r\\n        let threads = 0;\\r\\n        if (growMult >= 1) {\\r\\n            if (this.simEnabled) {\\r\\n                if (assumeMinSec) {\\r\\n                    const simTarget = Object.assign({}, this.simTarget);\\r\\n                    simTarget.hackDifficulty = simTarget.minDifficulty;\\r\\n                    threads = this.numCycleForGrowth(ns, simTarget, growMult, this.simPlayer);\\r\\n                }\\r\\n                else {\\r\\n                    threads = this.numCycleForGrowth(ns, this.simTarget, growMult, this.simPlayer);\\r\\n                }\\r\\n            }\\r\\n            else {\\r\\n                if (assumeMinSec) {\\r\\n                    const simTarget = ns.getServer(this.targetname);\\r\\n                    simTarget.hackDifficulty = simTarget.minDifficulty;\\r\\n                    threads = this.numCycleForGrowth(ns, simTarget, growMult, ns.getPlayer());\\r\\n                }\\r\\n                else {\\r\\n                    threads = ns.growthAnalyze(this.targetname, growMult, this.cores);\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        return Math.ceil(threads);\\r\\n    }\\r\\n    hackLevelForHackTime(ns, ms) {\\r\\n        if (this.simEnabled)\\r\\n            return ns.formulas.hacking.hackLevelForTime(this.simTarget, this.simPlayer, ms);\\r\\n        return ns.formulas.hacking.hackLevelForTime(ns.getServer(this.targetname), ns.getPlayer(), ms);\\r\\n    }\\r\\n    hackLevelForGrowTime(ns, ms) {\\r\\n        if (this.simEnabled)\\r\\n            return ns.formulas.hacking.growLevelForTime(this.simTarget, this.simPlayer, ms);\\r\\n        return ns.formulas.hacking.growLevelForTime(ns.getServer(this.targetname), ns.getPlayer(), ms);\\r\\n    }\\r\\n    hackLevelForWeakenTime(ns, ms) {\\r\\n        if (this.simEnabled)\\r\\n            return ns.formulas.hacking.weakenLevelForTime(this.simTarget, this.simPlayer, ms);\\r\\n        return ns.formulas.hacking.weakenLevelForTime(ns.getServer(this.targetname), ns.getPlayer(), ms);\\r\\n    }\\r\\n    async refresh(ns, targetMs = Number.MAX_SAFE_INTEGER, fastCheck = false) {\\r\\n        if (this.isWRunning(ns)) {\\r\\n            // process in progress, wait for next refresh to update\\r\\n            await ns.sleep(1000);\\r\\n            return true;\\r\\n        }\\r\\n        // Player State\\r\\n        const playerHackLvlEffect = ns.getPlayer().hacking;\\r\\n        // Host state\\r\\n        this.maxThreads = getMaxThreads(ns, this.hosts);\\r\\n        // Target Info\\r\\n        this.highMoney = ns.getServerMaxMoney(this.targetname);\\r\\n        this.lowMoney = ns.getServerMaxMoney(this.targetname) * 0.5;\\r\\n        this.money = this.getServerMoneyAvailable(ns);\\r\\n        this.lowSecurity = ns.getServerMinSecurityLevel(this.targetname);\\r\\n        this.security = this.getServerSecurityLevel(ns);\\r\\n        // Hack Info\\r\\n        this.hackPercentPerThread = this.hackAnalyze(ns, true, playerHackLvlEffect);\\r\\n        this.hackThreads = 1 / this.hackPercentPerThread - 1;\\r\\n        this.hackTotal = this.hackPercentPerThread * this.hackThreads * this.money;\\r\\n        this.hackSecIncrease = ns.hackAnalyzeSecurity(this.hackThreads);\\r\\n        // Weaken Info\\r\\n        this.weakenAmountPerThread = ns.weakenAnalyze(1, this.cores);\\r\\n        // Cycle Info\\r\\n        this.cycleMax = Math.max(Math.floor((this.hackTime - this.tspacer) / this.cycleSpacer), 1);\\r\\n        this.threadsPerCycle = this.hackThreads + this.weakenHackThreads + this.growThreads + this.weakenGrowThreads;\\r\\n        /////////////////////////////////////\\r\\n        // space HWGW operations out such that they start 400ms apart and they finish 400ms apart\\r\\n        // stretch Hack time to the longest possbible time\\r\\n        // batch starts take spacer * 4 time, how many batch starts can fit in the length of maxHackTime\\r\\n        //\\r\\n        // create an array of hack levels for each cycle count\\r\\n        /////////////////////////////////////\\r\\n        // what is the hack level required to achieve 1 cycle?\\r\\n        // timing would be such that hack would finish 400ms after grow-weaken started\\r\\n        // each hack level timing implies first hack finishes <spacer> ms after last grow-weaken starts\\r\\n        // batch time = spacer * 4\\r\\n        // cycle 1: hack time = batch time\\r\\n        // cycle 2: hack time = batch time * 2\\r\\n        // if the result of hackLevelForTime is > player.hacking, limit it to player.hacking (these will be low cycle counts)\\r\\n        // if the result of hackLevelForTime is <= 0, discard this result and cycleMax is one less than this iteration.\\r\\n        const cycleLevels = {};\\r\\n        let cycleCount = 0;\\r\\n        const fastWeakenTime = this.getWeakenTime(ns);\\r\\n        while (true) {\\r\\n            cycleCount++;\\r\\n            const targetHackTime = Math.max(this.cycleSpacer * cycleCount, fastWeakenTime);\\r\\n            const hackLevel = Math.min(this.hackLevelForHackTime(ns, targetHackTime), ns.getPlayer().hacking);\\r\\n            if (hackLevel <= 0) {\\r\\n                break;\\r\\n            }\\r\\n            const actualHackTime = this.getHackTime(ns, hackLevel);\\r\\n            const fullBatchTime = actualHackTime + this.cycleSpacer * 3;\\r\\n            const fullCycleTime = fullBatchTime + this.cycleSpacer * (cycleCount - 1);\\r\\n            if (fullCycleTime > targetMs || targetHackTime > fastWeakenTime)\\r\\n                break;\\r\\n            cycleLevels[cycleCount] = {\\r\\n                hackLevel: hackLevel,\\r\\n                fullBatchTime: fullBatchTime,\\r\\n                fullCycleTime: fullCycleTime,\\r\\n            };\\r\\n        }\\r\\n        // for (const [_cycleTotal, data] of Object.entries(cycleLevels)) {\\r\\n        //     const cycleTotal = Number(_cycleTotal);\\r\\n        //     ns.tprintf(\\\"%d: %.2f - %s %s\\\", _cycleTotal, data.hackLevel, stFormat(ns, data.fullBatchTime, true), stFormat(ns, data.fullCycleTime, true));\\r\\n        // }\\r\\n        this.cycleMax = Object.keys(cycleLevels).length;\\r\\n        // Primary Cycle Info\\r\\n        const primaryGrowMult = Math.max(this.highMoney / this.money, 1);\\r\\n        let primaryGrowThreads = this.calcGrowThreads(ns, primaryGrowMult);\\r\\n        let primaryGrowSecIncrease = ns.growthAnalyzeSecurity(primaryGrowThreads);\\r\\n        let primarySecDiff = this.security - this.lowSecurity;\\r\\n        let primaryWeakenThreads = Math.ceil((primaryGrowSecIncrease + primarySecDiff) / this.weakenAmountPerThread);\\r\\n        let primaryThreadsTotal = primaryGrowThreads + primaryWeakenThreads;\\r\\n        if (primarySecDiff < 1 && primaryGrowMult < 1.05)\\r\\n            primaryThreadsTotal = 0; // dont bother with the grow/weaken cycle if we're already very close to optimal\\r\\n        while (primaryThreadsTotal > this.maxThreads) {\\r\\n            primaryGrowThreads--;\\r\\n            primaryGrowSecIncrease = ns.growthAnalyzeSecurity(primaryGrowThreads);\\r\\n            primarySecDiff = this.security - this.lowSecurity;\\r\\n            primaryWeakenThreads = Math.ceil((primaryGrowSecIncrease + primarySecDiff) / this.weakenAmountPerThread);\\r\\n            primaryThreadsTotal = primaryGrowThreads + primaryWeakenThreads;\\r\\n        }\\r\\n        // memoize cycle production statistics indexed by cycleThreadAllowance\\r\\n        const cycleProductionLookup = getCycleProductionLookup(ns, this, playerHackLvlEffect);\\r\\n        // Get all cycle combination production statistics\\r\\n        let allCycles = [];\\r\\n        for (const [_cycleTotal, data] of Object.entries(cycleLevels)) {\\r\\n            const cycleTotal = Number(_cycleTotal);\\r\\n            const usableThreads = this.maxThreads - primaryThreadsTotal;\\r\\n            const usableCycles = primaryThreadsTotal > 0 ? cycleTotal - 1 : cycleTotal;\\r\\n            const fullCycleTime = data.fullCycleTime;\\r\\n            const cycleThreadAllowance = Math.floor(usableThreads / usableCycles);\\r\\n            const cycleStats = cycleProductionLookup[cycleThreadAllowance];\\r\\n            if (cycleTotal === 1 && primaryThreadsTotal > 0) {\\r\\n                allCycles.push({\\r\\n                    cycleTotal: cycleTotal,\\r\\n                    hackTotal: 1,\\r\\n                    production: 1,\\r\\n                    fullCycleTime: fullCycleTime,\\r\\n                    hackThreads: 0,\\r\\n                    growThreads: 0,\\r\\n                    weakenHackThreads: 0,\\r\\n                    weakenGrowThreads: 0,\\r\\n                    percentPerCycle: 0,\\r\\n                });\\r\\n                continue;\\r\\n            }\\r\\n            if (cycleStats === undefined) {\\r\\n                ns.print(ns.sprintf(\\\"WARNING: Thread Total %s is undefined\\\", cycleThreadAllowance));\\r\\n                continue;\\r\\n            }\\r\\n            let actualBatches = 0;\\r\\n            if (fastCheck) {\\r\\n                actualBatches = usableCycles;\\r\\n            }\\r\\n            else {\\r\\n                const doPrimary = primaryThreadsTotal > 0;\\r\\n                if (doPrimary)\\r\\n                    mockPrimaryBatch(ns, this.hosts, primaryGrowThreads, primaryWeakenThreads);\\r\\n                for (let batchID = doPrimary ? 1 : 0; batchID < cycleTotal; batchID++) {\\r\\n                    const result = mockBatch(ns, this.hosts, batchID, cycleStats.hackThreads, cycleStats.growThreads, cycleStats.weakenHackThreads, cycleStats.weakenGrowThreads);\\r\\n                    if (result)\\r\\n                        actualBatches++;\\r\\n                    else\\r\\n                        break;\\r\\n                }\\r\\n                clearAllBatches(this.hosts);\\r\\n            }\\r\\n            allCycles.push({\\r\\n                cycleTotal: cycleTotal,\\r\\n                hackTotal: cycleStats.hackTotal,\\r\\n                production: (actualBatches * cycleStats.hackTotal) / (fullCycleTime / 1000),\\r\\n                fullCycleTime: fullCycleTime,\\r\\n                hackThreads: cycleStats.hackThreads,\\r\\n                growThreads: cycleStats.growThreads,\\r\\n                weakenHackThreads: cycleStats.weakenHackThreads,\\r\\n                weakenGrowThreads: cycleStats.weakenGrowThreads,\\r\\n                percentPerCycle: (cycleStats.hackTotal / ns.getServerMaxMoney(this.targetname)) * 100,\\r\\n            });\\r\\n        }\\r\\n        allCycles = allCycles.sort((a, b) => b.production - a.production);\\r\\n        //this.debugPrintCycleStats(ns, primaryThreadsTotal, allCycles);\\r\\n        const cycleTarget = allCycles[0];\\r\\n        if (!cycleTarget) {\\r\\n            this.hackTotal = 0;\\r\\n            this.hackThreads = 0;\\r\\n            this.growThreads = 0;\\r\\n            this.weakenHackThreads = 0;\\r\\n            this.weakenGrowThreads = 0;\\r\\n            this.cycleTotal = 1;\\r\\n            this.fullCycleTime = Number.MAX_SAFE_INTEGER;\\r\\n            this.primaryStats = {\\r\\n                primaryThreadsTotal: primaryThreadsTotal,\\r\\n                primaryGrowThreads: primaryGrowThreads,\\r\\n                primaryWeakenThreads: primaryWeakenThreads,\\r\\n            };\\r\\n            return false;\\r\\n        }\\r\\n        this.hackTotal = cycleTarget.hackTotal;\\r\\n        this.hackThreads = cycleTarget.hackThreads;\\r\\n        this.growThreads = cycleTarget.growThreads;\\r\\n        this.weakenHackThreads = cycleTarget.weakenHackThreads;\\r\\n        this.weakenGrowThreads = cycleTarget.weakenGrowThreads;\\r\\n        this.cycleTotal = cycleTarget.cycleTotal;\\r\\n        this.fullCycleTime = cycleTarget.fullCycleTime;\\r\\n        this.primaryStats = {\\r\\n            primaryThreadsTotal: primaryThreadsTotal,\\r\\n            primaryGrowThreads: primaryGrowThreads,\\r\\n            primaryWeakenThreads: primaryWeakenThreads,\\r\\n        };\\r\\n        this.fullBatchTime = cycleLevels[this.cycleTotal].fullBatchTime;\\r\\n        const playerHackLvlHackTiming = cycleLevels[this.cycleTotal].hackLevel;\\r\\n        this.hackTime = this.getHackTime(ns, playerHackLvlHackTiming);\\r\\n        const playerHackLvlGrowTiming = this.hackLevelForGrowTime(ns, this.hackTime);\\r\\n        this.growTime = this.getGrowTime(ns, playerHackLvlGrowTiming);\\r\\n        const playerHackLvlWeakenTiming = this.hackLevelForWeakenTime(ns, this.hackTime);\\r\\n        this.weakenTime = this.getGrowTime(ns, playerHackLvlWeakenTiming);\\r\\n        // dont do thread reservation and execution if this is a simulation\\r\\n        if (this.simEnabled)\\r\\n            return true;\\r\\n        const hackOffsetTime = 0;\\r\\n        const weakenHackOffsetTime = this.tspacer * 1;\\r\\n        const growOffsetTime = this.tspacer * 2;\\r\\n        const weakenGrowOffsetTime = this.tspacer * 3;\\r\\n        if (primaryThreadsTotal > 0) {\\r\\n            const threadsReserved = cleanPrimaryBatch(ns, this, playerHackLvlGrowTiming, playerHackLvlWeakenTiming, playerHackLvlEffect, growOffsetTime, weakenGrowOffsetTime, primaryGrowThreads, primaryWeakenThreads);\\r\\n            if (!threadsReserved) {\\r\\n                llog(ns, \\\"WARNING: Unable to reserve primary threads cleanly\\\");\\r\\n                clearOperationsByBatchId(this.hosts, 0);\\r\\n                sloppyPrimaryBatch(ns, this, playerHackLvlGrowTiming, playerHackLvlWeakenTiming, playerHackLvlEffect, growOffsetTime, weakenGrowOffsetTime, primaryGrowThreads, primaryWeakenThreads);\\r\\n            }\\r\\n        }\\r\\n        const allCycleTotal = this.cycleTotal;\\r\\n        for (let i = 0; i < allCycleTotal; i++) {\\r\\n            if (primaryThreadsTotal > 0 && i === 0)\\r\\n                continue;\\r\\n            const threadsReserved = cleanBatch(ns, this, i, playerHackLvlHackTiming, playerHackLvlGrowTiming, playerHackLvlWeakenTiming, playerHackLvlEffect, hackOffsetTime, growOffsetTime, weakenHackOffsetTime, weakenGrowOffsetTime);\\r\\n            if (!threadsReserved) {\\r\\n                if (this.cycleTotal > 1) {\\r\\n                    llog(ns, \\\"WARNING: Unable to Reserve batch %d\\\", i);\\r\\n                    this.cycleTotal--;\\r\\n                    clearOperationsByBatchId(this.hosts, i);\\r\\n                }\\r\\n                else {\\r\\n                    llog(ns, \\\"WARNING: Only reserving one bad batch\\\");\\r\\n                    sloppyBatch(ns, this, 0, playerHackLvlHackTiming, playerHackLvlGrowTiming, playerHackLvlWeakenTiming, playerHackLvlEffect, hackOffsetTime, growOffsetTime, weakenHackOffsetTime, weakenGrowOffsetTime);\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        const port = ns.getPortHandle(1);\\r\\n        port.clear();\\r\\n        port.write(JSON.stringify([\\r\\n            new Date(),\\r\\n            this.fullCycleTime,\\r\\n            this.targetname,\\r\\n            ns.getScriptIncome(ns.getScriptName(), ns.getHostname(), ...ns.args).toString(),\\r\\n            \\\"SMART\\\",\\r\\n        ]));\\r\\n        this.logStats(ns);\\r\\n        await this.execute(ns);\\r\\n        this.resetThreads();\\r\\n        return true;\\r\\n    }\\r\\n    debugPrintCycleStats(ns, primaryThreadsTotal, allCycles) {\\r\\n        let counter = 0;\\r\\n        for (const cycle of allCycles) {\\r\\n            if (++counter > 400)\\r\\n                return;\\r\\n            let batchThreads = cycle.hackThreads + cycle.growThreads + cycle.weakenHackThreads + cycle.weakenGrowThreads;\\r\\n            if (cycle.hackThreads === undefined)\\r\\n                batchThreads = 0;\\r\\n            let cycleThreads = primaryThreadsTotal + batchThreads * (cycle.cycleTotal - 1);\\r\\n            if (primaryThreadsTotal === 0) {\\r\\n                cycleThreads = batchThreads * cycle.cycleTotal;\\r\\n            }\\r\\n            const cycleMem = cycleThreads * this.threadSize;\\r\\n            ns.tprintf(\\\"%3d;%s  %9s/s %5.2f %d/%4d/%5d %6dGB, %s|%s|%s|%s %s\\\", cycle.cycleTotal, this.targetname, ns.nFormat(cycle.production, \\\"($0.000a)\\\"), cycle.percentPerCycle ? cycle.percentPerCycle : 0, primaryThreadsTotal, batchThreads, cycleThreads, cycleMem, cycle.hackThreads, cycle.growThreads, cycle.weakenHackThreads, cycle.weakenGrowThreads, stFormat(ns, cycle.fullCycleTime));\\r\\n        }\\r\\n    }\\r\\n    logStats(ns) {\\r\\n        if (this.primaryStats.primaryThreadsTotal > 0) {\\r\\n            llog(ns, \\\"SMART-PRIMARY: %s => Grow %d; Weaken %d; Total Threads %d\\\", this.targetname, this.primaryStats.primaryGrowThreads, this.primaryStats.primaryWeakenThreads, this.primaryStats.primaryThreadsTotal);\\r\\n        }\\r\\n        const percentPerCycle = (this.hackTotal / ns.getServerMaxMoney(this.targetname)) * 100;\\r\\n        llog(ns, \\\"SMART: %s => H %d|%d; G %d|%d; T %d|%d(%d)/%d; Cycles %s/%s\\\", this.targetname, this.hackThreads, this.weakenHackThreads, this.growThreads, this.weakenGrowThreads, this.threadsPerCycle, this.threadsPerCycle * this.cycleTotal, this.threadsPerCycle * this.cycleTotal + this.primaryStats.primaryThreadsTotal, this.maxThreads, this.cycleTotal, this.cycleMax);\\r\\n        llog(ns, \\\"SMART: %s => Income %s|%s (%.2f%%|%.2f%%) %s/s\\\", this.targetname, ns.nFormat(this.hackTotal, \\\"($0.000a)\\\"), ns.nFormat(this.hackTotal * this.cycleTotal, \\\"($0.000a)\\\"), percentPerCycle, percentPerCycle * this.cycleTotal, ns.nFormat(((this.hackTotal * this.cycleTotal) / this.fullCycleTime) * 1000, \\\"($0.000a)\\\"));\\r\\n        llog(ns, \\\"SMART: %s => Complete %s; Total %s; Active -%s\\\", this.targetname, stdFormat(ns, this.fullCycleTime, true), stFormat(ns, this.fullCycleTime, true), stFormat(ns, this.fullCycleTime - this.weakenTime, true));\\r\\n    }\\r\\n    async execute(ns) {\\r\\n        let execs = [];\\r\\n        this.hosts.map((host) => host.reservedScriptCalls.map((sc) => execs.push(sc)));\\r\\n        execs = execs.sort((a, b) => b.offset - a.offset);\\r\\n        this.waitPID = 0;\\r\\n        let waitPIDFinishTime = 0;\\r\\n        const startTime = new Date().getTime();\\r\\n        execs.map((exec) => (exec.realTimeStart = startTime));\\r\\n        while (execs.length > 0) {\\r\\n            const exec = execs.pop();\\r\\n            if (exec === undefined)\\r\\n                break;\\r\\n            while (new Date().getTime() - startTime < exec.offset)\\r\\n                await ns.sleep(5);\\r\\n            // script call has come up, make sure it is starting and finishing within +- tspacer / 2\\r\\n            const curTOffset = new Date().getTime() - startTime;\\r\\n            const offsetDiff = Math.abs(curTOffset - exec.offset);\\r\\n            if (offsetDiff > this.tspacer / 2) {\\r\\n                execs = execs.filter((a) => a.batchId !== exec.batchId);\\r\\n                ns.print(ns.sprintf(\\\"WARNING: %s:%s #%d start time was off by %dms (limit is +- %d) and the batch was canceled s: %s c: %s\\\", exec.target, exec.script, exec.batchId, curTOffset - exec.offset, this.tspacer / 2, stFormat(ns, exec.offset, true), stFormat(ns, curTOffset, true)));\\r\\n                continue;\\r\\n            }\\r\\n            const pid = ns.exec(exec.script, exec.host, exec.numThreads, JSON.stringify(exec));\\r\\n            if (waitPIDFinishTime <= exec.finish) {\\r\\n                this.waitPID = pid;\\r\\n                waitPIDFinishTime = exec.finish;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n    resetThreads() {\\r\\n        for (const host of this.hosts) {\\r\\n            host.reset();\\r\\n        }\\r\\n    }\\r\\n    isWRunning(ns) {\\r\\n        if (this.simEnabled)\\r\\n            return false;\\r\\n        if (this.waitPID === 0)\\r\\n            return false;\\r\\n        if (ns.getRunningScript(this.waitPID)) {\\r\\n            return true;\\r\\n        }\\r\\n        this.waitPID = 0;\\r\\n        return false;\\r\\n    }\\r\\n    resetSim(ns) {\\r\\n        this.simTarget = ns.getServer(this.targetname);\\r\\n        this.simPlayer = ns.getPlayer();\\r\\n    }\\r\\n    async fastSim(ns, time) {\\r\\n        this.resetSim(ns);\\r\\n        this.simEnabled = true;\\r\\n        let simIncome = 0;\\r\\n        let simTime = 0;\\r\\n        let simState = 0; // 0: primary, 1: no-primary\\r\\n        while (true) {\\r\\n            if (simState === 0) {\\r\\n                const result = await this.refresh(ns, time - simTime, true);\\r\\n                if (!result)\\r\\n                    break;\\r\\n                if (this.primaryStats.primaryThreadsTotal === 0)\\r\\n                    simState = 1;\\r\\n                this.simTarget.moneyAvailable *= ns.formulas.hacking.growPercent(this.simTarget, this.primaryStats.primaryGrowThreads, this.simPlayer);\\r\\n                this.simTarget.moneyAvailable = Math.min(this.simTarget.moneyAvailable, this.simTarget.moneyMax);\\r\\n                this.simTarget.hackDifficulty += ns.growthAnalyzeSecurity(this.primaryStats.primaryGrowThreads);\\r\\n                this.simTarget.hackDifficulty -= ns.weakenAnalyze(this.primaryStats.primaryWeakenThreads);\\r\\n                this.simTarget.hackDifficulty = Math.max(this.simTarget.minDifficulty, this.simTarget.hackDifficulty);\\r\\n                simIncome += this.hackTotal * (this.cycleTotal - 1);\\r\\n                simTime += this.fullCycleTime;\\r\\n            }\\r\\n            else {\\r\\n                const timeRemaining = time - simTime;\\r\\n                const cyclesRemaining = Math.floor(timeRemaining / this.fullCycleTime);\\r\\n                simIncome += this.hackTotal * this.cycleTotal * cyclesRemaining;\\r\\n                simTime += this.fullCycleTime * cyclesRemaining;\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n        this.simEnabled = false;\\r\\n        if (simIncome === 0) {\\r\\n            ns.tprintf(\\\"%s - %s (%s / %s)\\\", this.targetname, stFormat(ns, this.fullCycleTime), this.simTarget.hackDifficulty, this.simTarget.minDifficulty);\\r\\n            return 0;\\r\\n        }\\r\\n        return simIncome / (simTime / 1000);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9kX2hhY2tfZW52LmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2hhY2svbW9kX2hhY2tfZW52LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxRQUFRLEVBQUUsU0FBUyxFQUFFLFFBQVEsRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUMvRSxPQUFPLEVBQUUsd0JBQXdCLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUNyRSxPQUFPLEVBRUgsYUFBYSxFQUNiLGFBQWEsRUFFYix3QkFBd0IsRUFDeEIsZ0JBQWdCLEVBQ2hCLFNBQVMsRUFDVCxlQUFlLEVBQ2YsaUJBQWlCLEVBQ2pCLGtCQUFrQixFQUNsQixVQUFVLEVBQ1YsV0FBVyxFQUNkLE1BQU0sZUFBZSxDQUFDO0FBRXZCLE1BQU0sQ0FBQyxNQUFNLE9BQU8sR0FBRyxHQUFHLENBQUM7QUFjM0IsTUFBTSxPQUFPLFVBQVU7SUFDbkIsVUFBVSxDQUFTO0lBQ25CLFNBQVMsQ0FBUztJQUNsQixRQUFRLENBQVM7SUFDakIsT0FBTyxDQUFTO0lBRWhCLFNBQVMsQ0FBUztJQUNsQixPQUFPLENBQVM7SUFDaEIsT0FBTyxDQUFTO0lBQ2hCLFVBQVUsQ0FBUztJQUVuQixLQUFLLENBQVM7SUFDZCxLQUFLLENBQVM7SUFDZCxVQUFVLENBQVM7SUFFbkIsT0FBTyxDQUFTO0lBRWhCLFFBQVEsQ0FBUztJQUNqQixXQUFXLENBQVM7SUFDcEIsS0FBSyxDQUFTO0lBRWQsY0FBYztJQUNkLGNBQWMsQ0FBUztJQUN2QixxQkFBcUIsQ0FBUztJQUM5QixhQUFhLENBQVM7SUFDdEIsaUJBQWlCLENBQVM7SUFDMUIsaUJBQWlCLENBQVM7SUFDMUIsVUFBVSxDQUFTO0lBQ25CLG1CQUFtQixDQUFTO0lBRTVCLFlBQVk7SUFDWixjQUFjLENBQVM7SUFDdkIsUUFBUSxDQUFTO0lBQ2pC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\",\"filename\":\"/lib/hack/mod_hack_env.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":16.35,\"server\":\"home\",\"moduleSequenceNumber\":4064,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getBitNodeMultipliers\",\"cost\":4},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getScriptIncome\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { stFormat, stdFormat, WEAKENJS, GROWJS, HACKJS, llog } from \\\"lib/util\\\";\\r\\nimport { getCycleProductionLookup } from \\\"lib/hack/cycle_production\\\";\\r\\nimport { generateHosts, getMaxThreads, clearOperationsByBatchId, cleanPrimaryBatch, sloppyPrimaryBatch, cleanBatch, sloppyBatch, mockPrimaryBatch, mockBatch, clearAllBatches } from \\\"lib/hack/host\\\";\\r\\nexport const TSPACER = 400;\\r\\nexport class SmartHackEnv {\\r\\n    targetname;\\r\\n    highMoney;\\r\\n    lowMoney;\\r\\n    tspacer;\\r\\n    weakenRam;\\r\\n    growRam;\\r\\n    hackRam;\\r\\n    threadSize;\\r\\n    cores;\\r\\n    hosts;\\r\\n    maxThreads;\\r\\n    waitPID;\\r\\n    security;\\r\\n    lowSecurity;\\r\\n    money;\\r\\n    // Weaken Info\\r\\n    weakenStartSec;\\r\\n    weakenAmountPerThread;\\r\\n    weakenThreads;\\r\\n    weakenGrowThreads;\\r\\n    weakenHackThreads;\\r\\n    weakenTime;\\r\\n    weakenTimeFullCycle;\\r\\n    // Grow Info\\r\\n    growStartMoney;\\r\\n    growMult;\\r\\n    growThreads;\\r\\n    growSecIncrease;\\r\\n    growTime;\\r\\n    // Hack Info\\r\\n    hackStartMoney;\\r\\n    hackTotal;\\r\\n    hackThreads;\\r\\n    hackSecIncrease;\\r\\n    hackTime;\\r\\n    hackPercentPerThread;\\r\\n    // Batch Cycle Info\\r\\n    threadsPerCycle;\\r\\n    cycleSpacer;\\r\\n    fullBatchTime;\\r\\n    cycleMax;\\r\\n    cycleTotal;\\r\\n    fullCycleTime;\\r\\n    primaryStats;\\r\\n    // Simulator Info\\r\\n    simEnabled;\\r\\n    simTarget;\\r\\n    simPlayer;\\r\\n    writeFile = \\\"\\\";\\r\\n    constructor(ns, targetname, hostnames) {\\r\\n        this.targetname = targetname;\\r\\n        this.highMoney = ns.getServerMaxMoney(this.targetname);\\r\\n        this.lowMoney = ns.getServerMaxMoney(this.targetname) * 0.5;\\r\\n        this.tspacer = TSPACER; // CONST\\r\\n        this.weakenRam = ns.getScriptRam(WEAKENJS);\\r\\n        this.growRam = ns.getScriptRam(GROWJS);\\r\\n        this.hackRam = ns.getScriptRam(HACKJS);\\r\\n        this.threadSize = Math.max(this.weakenRam, this.growRam, this.hackRam);\\r\\n        this.cores = 1; // Simplify\\r\\n        [this.hosts, this.maxThreads] = generateHosts(ns, hostnames, this.threadSize);\\r\\n        this.waitPID = 0;\\r\\n        // Target Info\\r\\n        this.security = 0;\\r\\n        this.lowSecurity = 0;\\r\\n        this.money = 0;\\r\\n        // Weaken Info\\r\\n        this.weakenStartSec = 0;\\r\\n        this.weakenAmountPerThread = 0;\\r\\n        this.weakenThreads = 0;\\r\\n        this.weakenGrowThreads = 0;\\r\\n        this.weakenHackThreads = 0;\\r\\n        this.weakenTime = 0;\\r\\n        this.weakenTimeFullCycle = 0;\\r\\n        // Grow Info\\r\\n        this.growStartMoney = 0;\\r\\n        this.growMult = 0;\\r\\n        this.growThreads = 0;\\r\\n        this.growSecIncrease = 0;\\r\\n        this.growTime = 0;\\r\\n        // Hack Info\\r\\n        this.hackStartMoney = 0;\\r\\n        this.hackTotal = 0;\\r\\n        this.hackThreads = 0;\\r\\n        this.hackSecIncrease = 0;\\r\\n        this.hackTime = 0;\\r\\n        this.hackPercentPerThread = 0;\\r\\n        // Batch Cycle Info\\r\\n        this.threadsPerCycle = 0;\\r\\n        this.cycleSpacer = this.tspacer * 4;\\r\\n        this.fullBatchTime = 0;\\r\\n        this.cycleMax = 0;\\r\\n        this.cycleTotal = 0;\\r\\n        this.fullCycleTime = 0;\\r\\n        this.primaryStats = {\\r\\n            primaryThreadsTotal: 0,\\r\\n            primaryGrowThreads: 0,\\r\\n            primaryWeakenThreads: 0,\\r\\n        };\\r\\n        // Simulator Info\\r\\n        this.simEnabled = false;\\r\\n        this.simTarget = ns.getServer(this.targetname);\\r\\n        this.simPlayer = ns.getPlayer();\\r\\n        //this.writeFile = ns.sprintf(\\\"%s-%d.txt\\\", this.targetname, new Date().getTime());\\r\\n    }\\r\\n    async init(ns, force = false) {\\r\\n        for (const host of this.hosts) {\\r\\n            await host.prep(ns, force);\\r\\n        }\\r\\n        if (this.writeFile !== \\\"\\\") {\\r\\n            await ns.write(this.writeFile, ns.sprintf(\\\"%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\", \\\"Target Name\\\", \\\"UID\\\", \\\"Batch ID\\\", \\\"Start Time\\\", \\\"End Time\\\", \\\"Operation Time\\\", \\\"Real Start Time\\\", \\\"Real End Time\\\", \\\"Real Operation Time\\\", \\\"Start Time Diff\\\", \\\"End Time Diff\\\", \\\"Operation Time Diff\\\", \\\"Result\\\", \\\"Security Before\\\", \\\"Security After\\\", \\\"Cash Before\\\", \\\"Cash After\\\"), \\\"w\\\");\\r\\n        }\\r\\n    }\\r\\n    getServerSecurityLevel(ns) {\\r\\n        if (this.simEnabled)\\r\\n            return this.simTarget.hackDifficulty;\\r\\n        return ns.getServerSecurityLevel(this.targetname);\\r\\n    }\\r\\n    getServerMoneyAvailable(ns) {\\r\\n        if (this.simEnabled)\\r\\n            return Math.max(this.simTarget.moneyAvailable, 1);\\r\\n        return Math.max(ns.getServerMoneyAvailable(this.targetname), 1);\\r\\n    }\\r\\n    getWeakenTime(ns, hackOverride) {\\r\\n        if (this.simEnabled)\\r\\n            return Math.ceil(ns.formulas.hacking.weakenTime(this.simTarget, this.simPlayer, hackOverride));\\r\\n        return Math.ceil(ns.getWeakenTime(this.targetname, hackOverride));\\r\\n    }\\r\\n    getWeakenLevelForTime(ns, ms) {\\r\\n        if (this.simEnabled)\\r\\n            return ns.formulas.hacking.weakenLevelForTime(this.simTarget, ns.getPlayer(), ms);\\r\\n        return ns.formulas.hacking.weakenLevelForTime(ns.getServer(this.targetname), ns.getPlayer(), ms);\\r\\n    }\\r\\n    getGrowTime(ns, hackOverride) {\\r\\n        if (this.simEnabled)\\r\\n            return Math.ceil(ns.formulas.hacking.growTime(this.simTarget, this.simPlayer, hackOverride));\\r\\n        return Math.ceil(ns.getGrowTime(this.targetname, hackOverride));\\r\\n    }\\r\\n    getHackTime(ns, hackOverride) {\\r\\n        if (this.simEnabled)\\r\\n            return Math.ceil(ns.formulas.hacking.hackTime(this.simTarget, this.simPlayer, hackOverride));\\r\\n        return Math.ceil(ns.getHackTime(this.targetname, hackOverride));\\r\\n    }\\r\\n    hackAnalyze(ns, assumeMinSec = false, hackOverride) {\\r\\n        if (this.simEnabled) {\\r\\n            if (assumeMinSec) {\\r\\n                const simTarget = Object.assign({}, this.simTarget);\\r\\n                simTarget.hackDifficulty = simTarget.minDifficulty;\\r\\n                return ns.formulas.hacking.hackPercent(simTarget, this.simPlayer, hackOverride);\\r\\n            }\\r\\n            return ns.formulas.hacking.hackPercent(this.simTarget, this.simPlayer, hackOverride);\\r\\n        }\\r\\n        if (assumeMinSec) {\\r\\n            const simTarget = ns.getServer(this.targetname);\\r\\n            simTarget.hackDifficulty = simTarget.minDifficulty;\\r\\n            return ns.formulas.hacking.hackPercent(simTarget, ns.getPlayer(), hackOverride);\\r\\n        }\\r\\n        return ns.hackAnalyze(this.targetname, hackOverride);\\r\\n    }\\r\\n    numCycleForGrowth(ns, server, growth, player, cores = 1) {\\r\\n        let ajdGrowthRate = 1 + (1.03 - 1) / server.hackDifficulty;\\r\\n        if (ajdGrowthRate > 1.0035) {\\r\\n            ajdGrowthRate = 1.0035;\\r\\n        }\\r\\n        const serverGrowthPercentage = server.serverGrowth / 100;\\r\\n        const coreBonus = 1 + (cores - 1) / 16;\\r\\n        const cycles = Math.log(growth) /\\r\\n            (Math.log(ajdGrowthRate) *\\r\\n                player.hacking_grow_mult *\\r\\n                serverGrowthPercentage *\\r\\n                ns.getBitNodeMultipliers().ServerGrowthRate *\\r\\n                coreBonus);\\r\\n        return cycles;\\r\\n    }\\r\\n    calcGrowThreads(ns, _growMult, assumeMinSec = false) {\\r\\n        const growMult = _growMult === undefined ? this.growMult : _growMult;\\r\\n        let threads = 0;\\r\\n        if (growMult >= 1) {\\r\\n            if (this.simEnabled) {\\r\\n                if (assumeMinSec) {\\r\\n                    const simTarget = Object.assign({}, this.simTarget);\\r\\n                    simTarget.hackDifficulty = simTarget.minDifficulty;\\r\\n                    threads = this.numCycleForGrowth(ns, simTarget, growMult, this.simPlayer);\\r\\n                }\\r\\n                else {\\r\\n                    threads = this.numCycleForGrowth(ns, this.simTarget, growMult, this.simPlayer);\\r\\n                }\\r\\n            }\\r\\n            else {\\r\\n                if (assumeMinSec) {\\r\\n                    const simTarget = ns.getServer(this.targetname);\\r\\n                    simTarget.hackDifficulty = simTarget.minDifficulty;\\r\\n                    threads = this.numCycleForGrowth(ns, simTarget, growMult, ns.getPlayer());\\r\\n                }\\r\\n                else {\\r\\n                    threads = ns.growthAnalyze(this.targetname, growMult, this.cores);\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        return Math.ceil(threads);\\r\\n    }\\r\\n    async refresh(ns, targetMs = Number.MAX_SAFE_INTEGER, fastCheck = false) {\\r\\n        if (this.isWRunning(ns)) {\\r\\n            // process in progress, wait for next refresh to update\\r\\n            await ns.sleep(1000);\\r\\n            return true;\\r\\n        }\\r\\n        // Player State\\r\\n        const playerHackLvl = ns.getPlayer().hacking;\\r\\n        // Host state\\r\\n        this.maxThreads = getMaxThreads(ns, this.hosts);\\r\\n        // Target Info\\r\\n        this.highMoney = ns.getServerMaxMoney(this.targetname);\\r\\n        this.lowMoney = ns.getServerMaxMoney(this.targetname) * 0.5;\\r\\n        this.money = this.getServerMoneyAvailable(ns);\\r\\n        this.lowSecurity = ns.getServerMinSecurityLevel(this.targetname);\\r\\n        this.security = this.getServerSecurityLevel(ns);\\r\\n        // Hack Info\\r\\n        this.hackTime = this.getHackTime(ns, playerHackLvl);\\r\\n        this.hackPercentPerThread = this.hackAnalyze(ns, true, playerHackLvl);\\r\\n        this.hackThreads = 1 / this.hackPercentPerThread - 1;\\r\\n        this.hackTotal = this.hackPercentPerThread * this.hackThreads * this.money;\\r\\n        this.hackSecIncrease = ns.hackAnalyzeSecurity(this.hackThreads);\\r\\n        // Grow Info\\r\\n        this.growTime = this.getGrowTime(ns, playerHackLvl);\\r\\n        // Weaken Info\\r\\n        this.weakenTime = this.getWeakenTime(ns, playerHackLvl);\\r\\n        this.weakenAmountPerThread = ns.weakenAnalyze(1, this.cores);\\r\\n        // Cycle Info\\r\\n        this.fullBatchTime = this.weakenTime + this.tspacer * 2;\\r\\n        this.cycleMax = Math.max(Math.floor((this.hackTime - this.tspacer) / this.cycleSpacer), 1);\\r\\n        this.threadsPerCycle = this.hackThreads + this.weakenHackThreads + this.growThreads + this.weakenGrowThreads;\\r\\n        // Primary Cycle Info\\r\\n        const primaryGrowMult = Math.max(this.highMoney / this.money, 1);\\r\\n        let primaryGrowThreads = this.calcGrowThreads(ns, primaryGrowMult);\\r\\n        let primaryGrowSecIncrease = ns.growthAnalyzeSecurity(primaryGrowThreads);\\r\\n        let primarySecDiff = this.security - this.lowSecurity;\\r\\n        let primaryWeakenThreads = Math.ceil((primaryGrowSecIncrease + primarySecDiff) / this.weakenAmountPerThread);\\r\\n        let primaryThreadsTotal = primaryGrowThreads + primaryWeakenThreads;\\r\\n        if (primarySecDiff < 1 && primaryGrowMult < 1.05)\\r\\n            primaryThreadsTotal = 0; // dont bother with the grow/weaken cycle if we're already very close to optimal\\r\\n        while (primaryThreadsTotal > this.maxThreads) {\\r\\n            primaryGrowThreads--;\\r\\n            primaryGrowSecIncrease = ns.growthAnalyzeSecurity(primaryGrowThreads);\\r\\n            primarySecDiff = this.security - this.lowSecurity;\\r\\n            primaryWeakenThreads = Math.ceil((primaryGrowSecIncrease + primarySecDiff) / this.weakenAmountPerThread);\\r\\n            primaryThreadsTotal = primaryGrowThreads + primaryWeakenThreads;\\r\\n        }\\r\\n        // memoize cycle production statistics indexed by cycleThreadAllowance\\r\\n        const cycleProductionLookup = getCycleProductionLookup(ns, this, playerHackLvl);\\r\\n        let allCycles = [];\\r\\n        for (let cycleTotal = 1; cycleTotal <= this.cycleMax; cycleTotal++) {\\r\\n            const usableThreads = this.maxThreads - primaryThreadsTotal;\\r\\n            const usableCycles = primaryThreadsTotal > 0 ? cycleTotal - 1 : cycleTotal;\\r\\n            const fullCycleTime = this.fullBatchTime + this.cycleSpacer * (cycleTotal - 1);\\r\\n            const cycleThreadAllowance = Math.floor(usableThreads / usableCycles);\\r\\n            const cycleStats = cycleProductionLookup[cycleThreadAllowance];\\r\\n            if (cycleTotal === 1 && primaryThreadsTotal > 0) {\\r\\n                allCycles.push({\\r\\n                    cycleTotal: cycleTotal,\\r\\n                    hackTotal: 1,\\r\\n                    production: 1,\\r\\n                    fullCycleTime: fullCycleTime,\\r\\n                    hackThreads: 0,\\r\\n                    growThreads: 0,\\r\\n                    weakenHackThreads: 0,\\r\\n                    weakenGrowThreads: 0,\\r\\n                    percentPerCycle: 0,\\r\\n                });\\r\\n                continue;\\r\\n            }\\r\\n            if (cycleStats === undefined) {\\r\\n                ns.print(ns.sprintf(\\\"WARNING: Thread Total %s is undefined\\\", cycleThreadAllowance));\\r\\n                continue;\\r\\n            }\\r\\n            let actualBatches = 0;\\r\\n            if (fastCheck) {\\r\\n                actualBatches = usableCycles;\\r\\n            }\\r\\n            else {\\r\\n                const doPrimary = primaryThreadsTotal > 0;\\r\\n                if (doPrimary)\\r\\n                    mockPrimaryBatch(ns, this.hosts, primaryGrowThreads, primaryWeakenThreads);\\r\\n                for (let batchID = doPrimary ? 1 : 0; batchID < cycleTotal; batchID++) {\\r\\n                    const result = mockBatch(ns, this.hosts, batchID, cycleStats.hackThreads, cycleStats.growThreads, cycleStats.weakenHackThreads, cycleStats.weakenGrowThreads);\\r\\n                    if (result)\\r\\n                        actualBatches++;\\r\\n                    else\\r\\n                        break;\\r\\n                }\\r\\n                clearAllBatches(this.hosts);\\r\\n            }\\r\\n            allCycles.push({\\r\\n                cycleTotal: cycleTotal,\\r\\n                hackTotal: cycleStats.hackTotal,\\r\\n                production: (actualBatches * cycleStats.hackTotal) / (fullCycleTime / 1000),\\r\\n                fullCycleTime: fullCycleTime,\\r\\n                hackThreads: cycleStats.hackThreads,\\r\\n                growThreads: cycleStats.growThreads,\\r\\n                weakenHackThreads: cycleStats.weakenHackThreads,\\r\\n                weakenGrowThreads: cycleStats.weakenGrowThreads,\\r\\n                percentPerCycle: (cycleStats.hackTotal / ns.getServerMaxMoney(this.targetname)) * 100,\\r\\n            });\\r\\n        }\\r\\n        allCycles = allCycles.sort((a, b) => b.production - a.production);\\r\\n        //this.debugPrintCycleStats(ns, primaryThreadsTotal, allCycles);\\r\\n        const cycleTarget = allCycles[0];\\r\\n        if (!cycleTarget) {\\r\\n            this.hackTotal = 0;\\r\\n            this.hackThreads = 0;\\r\\n            this.growThreads = 0;\\r\\n            this.weakenHackThreads = 0;\\r\\n            this.weakenGrowThreads = 0;\\r\\n            this.cycleTotal = 1;\\r\\n            this.fullCycleTime = Number.MAX_SAFE_INTEGER;\\r\\n            this.primaryStats = {\\r\\n                primaryThreadsTotal: primaryThreadsTotal,\\r\\n                primaryGrowThreads: primaryGrowThreads,\\r\\n                primaryWeakenThreads: primaryWeakenThreads,\\r\\n            };\\r\\n            return false;\\r\\n        }\\r\\n        this.hackTotal = cycleTarget.hackTotal;\\r\\n        this.hackThreads = cycleTarget.hackThreads;\\r\\n        this.growThreads = cycleTarget.growThreads;\\r\\n        this.weakenHackThreads = cycleTarget.weakenHackThreads;\\r\\n        this.weakenGrowThreads = cycleTarget.weakenGrowThreads;\\r\\n        this.cycleTotal = cycleTarget.cycleTotal;\\r\\n        this.fullCycleTime = cycleTarget.fullCycleTime;\\r\\n        this.primaryStats = {\\r\\n            primaryThreadsTotal: primaryThreadsTotal,\\r\\n            primaryGrowThreads: primaryGrowThreads,\\r\\n            primaryWeakenThreads: primaryWeakenThreads,\\r\\n        };\\r\\n        // dont do thread reservation and execution if this is a simulation\\r\\n        if (this.simEnabled)\\r\\n            return true;\\r\\n        const weakenGrowOffsetTime = this.tspacer * 2;\\r\\n        const growOffsetTime = this.weakenTime + this.tspacer - this.growTime;\\r\\n        const hackOffsetTime = this.weakenTime - this.hackTime - this.tspacer;\\r\\n        if (primaryThreadsTotal > 0) {\\r\\n            const threadsReserved = cleanPrimaryBatch(ns, this, playerHackLvl, playerHackLvl, playerHackLvl, growOffsetTime, weakenGrowOffsetTime, primaryGrowThreads, primaryWeakenThreads);\\r\\n            if (!threadsReserved) {\\r\\n                llog(ns, \\\"WARNING: Unable to reserve primary threads cleanly\\\");\\r\\n                clearOperationsByBatchId(this.hosts, 0);\\r\\n                sloppyPrimaryBatch(ns, this, playerHackLvl, playerHackLvl, playerHackLvl, growOffsetTime, weakenGrowOffsetTime, primaryGrowThreads, primaryWeakenThreads);\\r\\n            }\\r\\n        }\\r\\n        const allCycleTotal = this.cycleTotal;\\r\\n        for (let i = 0; i < allCycleTotal; i++) {\\r\\n            if (primaryThreadsTotal > 0 && i === 0)\\r\\n                continue;\\r\\n            const threadsReserved = cleanBatch(ns, this, i, playerHackLvl, playerHackLvl, playerHackLvl, playerHackLvl, hackOffsetTime, growOffsetTime, 0, weakenGrowOffsetTime);\\r\\n            if (!threadsReserved) {\\r\\n                if (this.cycleTotal > 1) {\\r\\n                    llog(ns, \\\"WARNING: Unable to Reserve batch %d\\\", i);\\r\\n                    this.cycleTotal--;\\r\\n                    clearOperationsByBatchId(this.hosts, i);\\r\\n                }\\r\\n                else {\\r\\n                    llog(ns, \\\"WARNING: Only reserving one bad batch\\\");\\r\\n                    sloppyBatch(ns, this, 0, playerHackLvl, playerHackLvl, playerHackLvl, playerHackLvl, hackOffsetTime, growOffsetTime, 0, weakenGrowOffsetTime);\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        const port = ns.getPortHandle(1);\\r\\n        port.clear();\\r\\n        port.write(JSON.stringify([\\r\\n            new Date(),\\r\\n            this.fullCycleTime,\\r\\n            this.targetname,\\r\\n            ns.getScriptIncome(ns.getScriptName(), ns.getHostname(), ...ns.args).toString(),\\r\\n            \\\"SMART\\\",\\r\\n        ]));\\r\\n        this.logStats(ns);\\r\\n        await this.execute(ns);\\r\\n        this.resetThreads();\\r\\n        return true;\\r\\n    }\\r\\n    debugPrintCycleStats(ns, primaryThreadsTotal, allCycles) {\\r\\n        for (const cycle of allCycles) {\\r\\n            let batchThreads = cycle.hackThreads + cycle.growThreads + cycle.weakenHackThreads + cycle.weakenGrowThreads;\\r\\n            if (cycle.hackThreads === undefined)\\r\\n                batchThreads = 0;\\r\\n            let cycleThreads = primaryThreadsTotal + batchThreads * (cycle.cycleTotal - 1);\\r\\n            if (primaryThreadsTotal === 0) {\\r\\n                cycleThreads = batchThreads * cycle.cycleTotal;\\r\\n            }\\r\\n            const cycleMem = cycleThreads * this.threadSize;\\r\\n            ns.tprintf(\\\"%3d;%s  %9s/s %5.2f %d/%4d/%5d %6dGB, %s|%s|%s|%s %s\\\", cycle.cycleTotal, this.targetname, ns.nFormat(cycle.production, \\\"($0.000a)\\\"), cycle.percentPerCycle ? cycle.percentPerCycle : 0, primaryThreadsTotal, batchThreads, cycleThreads, cycleMem, cycle.hackThreads, cycle.growThreads, cycle.weakenHackThreads, cycle.weakenGrowThreads, stFormat(ns, cycle.fullCycleTime));\\r\\n        }\\r\\n    }\\r\\n    logStats(ns) {\\r\\n        if (this.primaryStats.primaryThreadsTotal > 0) {\\r\\n            llog(ns, \\\"SMART-PRIMARY: %s => Grow %d; Weaken %d; Total Threads %d\\\", this.targetname, this.primaryStats.primaryGrowThreads, this.primaryStats.primaryWeakenThreads, this.primaryStats.primaryThreadsTotal);\\r\\n        }\\r\\n        const percentPerCycle = (this.hackTotal / ns.getServerMaxMoney(this.targetname)) * 100;\\r\\n        llog(ns, \\\"SMART: %s => H %d|%d; G %d|%d; T %d|%d(%d)/%d; Cycles %s/%s\\\", this.targetname, this.hackThreads, this.weakenHackThreads, this.growThreads, this.weakenGrowThreads, this.threadsPerCycle, this.threadsPerCycle * this.cycleTotal, this.threadsPerCycle * this.cycleTotal + this.primaryStats.primaryThreadsTotal, this.maxThreads, this.cycleTotal, this.cycleMax);\\r\\n        llog(ns, \\\"SMART: %s => Income %s|%s (%.2f%%|%.2f%%) %s/s\\\", this.targetname, ns.nFormat(this.hackTotal, \\\"($0.000a)\\\"), ns.nFormat(this.hackTotal * this.cycleTotal, \\\"($0.000a)\\\"), percentPerCycle, percentPerCycle * this.cycleTotal, ns.nFormat(((this.hackTotal * this.cycleTotal) / this.fullCycleTime) * 1000, \\\"($0.000a)\\\"));\\r\\n        llog(ns, \\\"SMART: %s => Complete %s; Total %s; Active -%s\\\", this.targetname, stdFormat(ns, this.fullCycleTime, true), stFormat(ns, this.fullCycleTime, true), stFormat(ns, this.fullCycleTime - this.weakenTime, true));\\r\\n    }\\r\\n    async execute(ns) {\\r\\n        let execs = [];\\r\\n        this.hosts.map((host) => host.reservedScriptCalls.map((sc) => execs.push(sc)));\\r\\n        execs = execs.sort((a, b) => b.offset - a.offset);\\r\\n        this.waitPID = 0;\\r\\n        let waitPIDFinishTime = 0;\\r\\n        const startTime = new Date().getTime();\\r\\n        execs.map((exec) => (exec.realTimeStart = startTime));\\r\\n        while (execs.length > 0) {\\r\\n            const exec = execs.pop();\\r\\n            if (exec === undefined)\\r\\n                break;\\r\\n            while (new Date().getTime() - startTime < exec.offset)\\r\\n                await ns.sleep(5);\\r\\n            // script call has come up, make sure it is starting and finishing within +- tspacer / 2\\r\\n            const curTOffset = new Date().getTime() - startTime;\\r\\n            const offsetDiff = Math.abs(curTOffset - exec.offset);\\r\\n            if (offsetDiff > this.tspacer / 2) {\\r\\n                execs = execs.filter((a) => a.batchId !== exec.batchId);\\r\\n                ns.print(ns.sprintf(\\\"WARNING: %s:%s #%d start time was off by %dms (limit is +- %d) and the batch was canceled s: %s c: %s\\\", exec.target, exec.script, exec.batchId, curTOffset - exec.offset, this.tspacer / 2, stFormat(ns, exec.offset, true), stFormat(ns, curTOffset, true)));\\r\\n                continue;\\r\\n            }\\r\\n            const pid = ns.exec(exec.script, exec.host, exec.numThreads, JSON.stringify(exec));\\r\\n            if (waitPIDFinishTime <= exec.finish) {\\r\\n                this.waitPID = pid;\\r\\n                waitPIDFinishTime = exec.finish;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n    resetThreads() {\\r\\n        for (const host of this.hosts) {\\r\\n            host.reset();\\r\\n        }\\r\\n    }\\r\\n    isWRunning(ns) {\\r\\n        if (this.simEnabled)\\r\\n            return false;\\r\\n        if (this.waitPID === 0)\\r\\n            return false;\\r\\n        if (ns.getRunningScript(this.waitPID)) {\\r\\n            return true;\\r\\n        }\\r\\n        this.waitPID = 0;\\r\\n        return false;\\r\\n    }\\r\\n    resetSim(ns) {\\r\\n        this.simTarget = ns.getServer(this.targetname);\\r\\n        this.simPlayer = ns.getPlayer();\\r\\n    }\\r\\n    async fastSim(ns, time) {\\r\\n        this.resetSim(ns);\\r\\n        this.simEnabled = true;\\r\\n        let simIncome = 0;\\r\\n        let simTime = 0;\\r\\n        let simState = 0; // 0: primary, 1: no-primary\\r\\n        while (true) {\\r\\n            if (simState === 0) {\\r\\n                const result = await this.refresh(ns, time - simTime, true);\\r\\n                if (!result)\\r\\n                    break;\\r\\n                if (this.primaryStats.primaryThreadsTotal === 0)\\r\\n                    simState = 1;\\r\\n                this.simTarget.moneyAvailable *= ns.formulas.hacking.growPercent(this.simTarget, this.primaryStats.primaryGrowThreads, this.simPlayer);\\r\\n                this.simTarget.moneyAvailable = Math.min(this.simTarget.moneyAvailable, this.simTarget.moneyMax);\\r\\n                this.simTarget.hackDifficulty += ns.growthAnalyzeSecurity(this.primaryStats.primaryGrowThreads);\\r\\n                this.simTarget.hackDifficulty -= ns.weakenAnalyze(this.primaryStats.primaryWeakenThreads);\\r\\n                this.simTarget.hackDifficulty = Math.max(this.simTarget.minDifficulty, this.simTarget.hackDifficulty);\\r\\n                simIncome += this.hackTotal * (this.cycleTotal - 1);\\r\\n                simTime += this.fullCycleTime;\\r\\n            }\\r\\n            else {\\r\\n                const timeRemaining = time - simTime;\\r\\n                const cyclesRemaining = Math.floor(timeRemaining / this.fullCycleTime);\\r\\n                simIncome += this.hackTotal * this.cycleTotal * cyclesRemaining;\\r\\n                simTime += this.fullCycleTime * cyclesRemaining;\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n        this.simEnabled = false;\\r\\n        if (simIncome === 0) {\\r\\n            ns.tprintf(\\\"%s - %s (%s / %s)\\\", this.targetname, stFormat(ns, this.fullCycleTime), this.simTarget.hackDifficulty, this.simTarget.minDifficulty);\\r\\n            return 0;\\r\\n        }\\r\\n        return simIncome / (simTime / 1000);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic21hcnRfaGFja19lbnYuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvaGFjay9zbWFydF9oYWNrX2Vudi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsUUFBUSxFQUFFLFNBQVMsRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFDL0UsT0FBTyxFQUFFLHdCQUF3QixFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFDckUsT0FBTyxFQUVILGFBQWEsRUFDYixhQUFhLEVBRWIsd0JBQXdCLEVBQ3hCLGlCQUFpQixFQUNqQixrQkFBa0IsRUFDbEIsVUFBVSxFQUNWLFdBQVcsRUFDWCxnQkFBZ0IsRUFDaEIsU0FBUyxFQUNULGVBQWUsRUFDbEIsTUFBTSxlQUFlLENBQUM7QUFFdkIsTUFBTSxDQUFDLE1BQU0sT0FBTyxHQUFHLEdBQUcsQ0FBQztBQWMzQixNQUFNLE9BQU8sWUFBWTtJQUNyQixVQUFVLENBQVM7SUFDbkIsU0FBUyxDQUFTO0lBQ2xCLFFBQVEsQ0FBUztJQUNqQixPQUFPLENBQVM7SUFFaEIsU0FBUyxDQUFTO0lBQ2xCLE9BQU8sQ0FBUztJQUNoQixPQUFPLENBQVM7SUFDaEIsVUFBVSxDQUFTO0lBRW5CLEtBQUssQ0FBUztJQUNkLEtBQUssQ0FBUztJQUNkLFVBQVUsQ0FBUztJQUVuQixPQUFPLENBQVM7SUFFaEIsUUFBUSxDQUFTO0lBQ2pCLFdBQVcsQ0FBUztJQUNwQixLQUFLLENBQVM7SUFFZCxjQUFjO0lBQ2QsY0FBYyxDQUFTO0lBQ3ZCLHFCQUFxQixDQUFTO0lBQzlCLGFBQWEsQ0FBUztJQUN0QixpQkFBaUIsQ0FBUztJQUMxQixpQkFBaUIsQ0FBUztJQUMxQixVQUFVLENBQVM7SUFDbkIsbUJBQW1CLENBQVM7SUFFNUIsWUFBWTtJQUNaLGNBQWMsQ0FBUztJQUN2QixRQUFRLENBQVM7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\",\"filename\":\"/lib/hack/smart_hack_env.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":16.35,\"server\":\"home\",\"moduleSequenceNumber\":4065,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getBitNodeMultipliers\",\"cost\":4},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getScriptIncome\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export class ExtendedNodeStats {\\r\\n    name;\\r\\n    level;\\r\\n    ram;\\r\\n    ramUsed;\\r\\n    cores;\\r\\n    cache;\\r\\n    hashCapacity;\\r\\n    production;\\r\\n    timeOnline;\\r\\n    totalCost;\\r\\n    totalValue;\\r\\n    constructor(stats) {\\r\\n        this.name = stats.name;\\r\\n        this.level = stats.level;\\r\\n        this.ram = stats.ram;\\r\\n        this.ramUsed = stats.ramUsed;\\r\\n        this.cores = stats.cores;\\r\\n        this.cache = stats.cache;\\r\\n        this.hashCapacity = stats.hashCapacity;\\r\\n        this.production = stats.production;\\r\\n        this.timeOnline = stats.timeOnline;\\r\\n        this.totalCost = 0;\\r\\n        this.totalValue = 0;\\r\\n    }\\r\\n    updateProduction(ns, zeroRamUsed = true) {\\r\\n        this.production = ns.formulas.hacknetServers.hashGainRate(this.level, zeroRamUsed ? 0 : this.ramUsed, this.ram, this.cores, ns.getPlayer().hacknet_node_money_mult);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXh0ZW5kZWQtbm9kZS1zdGF0cy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9oYWNrbmV0L2V4dGVuZGVkLW5vZGUtc3RhdHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxPQUFPLGlCQUFpQjtJQUMxQixJQUFJLENBQVM7SUFDYixLQUFLLENBQVM7SUFDZCxHQUFHLENBQVM7SUFDWixPQUFPLENBQVM7SUFDaEIsS0FBSyxDQUFTO0lBQ2QsS0FBSyxDQUFTO0lBQ2QsWUFBWSxDQUFTO0lBQ3JCLFVBQVUsQ0FBUztJQUNuQixVQUFVLENBQVM7SUFDbkIsU0FBUyxDQUFTO0lBQ2xCLFVBQVUsQ0FBUztJQUVuQixZQUFZLEtBQWdCO1FBQ3hCLElBQUksQ0FBQyxJQUFJLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQztRQUN2QixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUM7UUFDekIsSUFBSSxDQUFDLEdBQUcsR0FBRyxLQUFLLENBQUMsR0FBRyxDQUFDO1FBQ3JCLElBQUksQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFDLE9BQU8sQ0FBQztRQUM3QixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUM7UUFDekIsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUMsS0FBSyxDQUFDO1FBQ3pCLElBQUksQ0FBQyxZQUFZLEdBQUcsS0FBSyxDQUFDLFlBQVksQ0FBQztRQUN2QyxJQUFJLENBQUMsVUFBVSxHQUFHLEtBQUssQ0FBQyxVQUFVLENBQUM7UUFDbkMsSUFBSSxDQUFDLFVBQVUsR0FBRyxLQUFLLENBQUMsVUFBVSxDQUFDO1FBQ25DLElBQUksQ0FBQyxTQUFTLEdBQUcsQ0FBQyxDQUFDO1FBQ25CLElBQUksQ0FBQyxVQUFVLEdBQUcsQ0FBQyxDQUFDO0lBQ3hCLENBQUM7SUFFRCxnQkFBZ0IsQ0FBQyxFQUFNLEVBQUUsV0FBVyxHQUFHLElBQUk7UUFDdkMsSUFBSSxDQUFDLFVBQVUsR0FBRyxFQUFFLENBQUMsUUFBUSxDQUFDLGNBQWMsQ0FBQyxZQUFZLENBQ3JELElBQUksQ0FBQyxLQUFLLEVBQ1YsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQzlCLElBQUksQ0FBQyxHQUFHLEVBQ1IsSUFBSSxDQUFDLEtBQUssRUFDVixFQUFFLENBQUMsU0FBUyxFQUFFLENBQUMsdUJBQXVCLENBQ3pDLENBQUM7SUFDTixDQUFDO0NBQ0oifQ==\",\"filename\":\"/lib/hacknet/extended-node-stats.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.1,\"server\":\"home\",\"moduleSequenceNumber\":4066,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export var HSUpgradeType;\\r\\n(function (HSUpgradeType) {\\r\\n    HSUpgradeType[\\\"LEVEL\\\"] = \\\"LEVEL\\\";\\r\\n    HSUpgradeType[\\\"RAM\\\"] = \\\"RAM\\\";\\r\\n    HSUpgradeType[\\\"CORES\\\"] = \\\"CORES\\\";\\r\\n    HSUpgradeType[\\\"CACHE\\\"] = \\\"CACHE\\\";\\r\\n    HSUpgradeType[\\\"SERVER\\\"] = \\\"SERVER\\\";\\r\\n})(HSUpgradeType || (HSUpgradeType = {}));\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHMtdXBncmFkZS10eXBlLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2hhY2tuZXQvaHMtdXBncmFkZS10eXBlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE1BQU0sQ0FBTixJQUFZLGFBTVg7QUFORCxXQUFZLGFBQWE7SUFDckIsZ0NBQWUsQ0FBQTtJQUNmLDRCQUFXLENBQUE7SUFDWCxnQ0FBZSxDQUFBO0lBQ2YsZ0NBQWUsQ0FBQTtJQUNmLGtDQUFpQixDQUFBO0FBQ3JCLENBQUMsRUFOVyxhQUFhLEtBQWIsYUFBYSxRQU14QiJ9\",\"filename\":\"/lib/hacknet/hs-upgrade-type.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":4067,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { stFormat } from \\\"lib/util\\\";\\r\\nimport { HSUpgradeType } from \\\"lib/hacknet/hs-upgrade-type\\\";\\r\\nimport { ExtendedNodeStats } from \\\"lib/hacknet/extended-node-stats\\\";\\r\\nexport class HSUpgrade {\\r\\n    id;\\r\\n    type;\\r\\n    upgradeCost = 0;\\r\\n    upgradeProductionTotal = 0;\\r\\n    cacheIncrease = 0;\\r\\n    cacheCostPerHash = 0;\\r\\n    upgradeProductionIncrease = 0;\\r\\n    upgradeCashProduction = 0;\\r\\n    upgradePayoffTime = 0;\\r\\n    upgradeValue = 0;\\r\\n    constructor(ns, id, type, _stats) {\\r\\n        const hashBuyCost = ns.hacknet.hashCost(\\\"Sell for Money\\\");\\r\\n        const prodMult = ns.getPlayer().hacknet_node_money_mult;\\r\\n        const coreCostMult = ns.getPlayer().hacknet_node_core_cost_mult;\\r\\n        const levelCostMult = ns.getPlayer().hacknet_node_level_cost_mult;\\r\\n        const ramCostMult = ns.getPlayer().hacknet_node_ram_cost_mult;\\r\\n        let stats;\\r\\n        if (_stats)\\r\\n            stats = _stats;\\r\\n        else {\\r\\n            stats = new ExtendedNodeStats(ns.hacknet.getNodeStats(id));\\r\\n            stats.ramUsed = 0;\\r\\n            stats.updateProduction(ns);\\r\\n        }\\r\\n        this.id = id;\\r\\n        this.type = type;\\r\\n        switch (this.type) {\\r\\n            case HSUpgradeType.LEVEL: {\\r\\n                this.upgradeCost = ns.formulas.hacknetServers.levelUpgradeCost(stats.level, 1, levelCostMult);\\r\\n                this.upgradeProductionTotal = ns.formulas.hacknetServers.hashGainRate(stats.level + 1, 0, stats.ram, stats.cores, prodMult);\\r\\n                break;\\r\\n            }\\r\\n            case HSUpgradeType.RAM: {\\r\\n                this.upgradeCost = ns.formulas.hacknetServers.ramUpgradeCost(stats.ram, 1, ramCostMult);\\r\\n                this.upgradeProductionTotal = ns.formulas.hacknetServers.hashGainRate(stats.level, 0, stats.ram * 2, stats.cores, prodMult);\\r\\n                break;\\r\\n            }\\r\\n            case HSUpgradeType.CORES: {\\r\\n                this.upgradeCost = ns.formulas.hacknetServers.coreUpgradeCost(stats.cores, 1, coreCostMult);\\r\\n                this.upgradeProductionTotal = ns.formulas.hacknetServers.hashGainRate(stats.level, 0, stats.ram, stats.cores + 1, prodMult);\\r\\n                break;\\r\\n            }\\r\\n            case HSUpgradeType.CACHE: {\\r\\n                this.upgradeCost = ns.formulas.hacknetServers.cacheUpgradeCost(stats.cache);\\r\\n                this.upgradeProductionTotal = stats.production;\\r\\n                this.cacheIncrease = stats.cache;\\r\\n                this.cacheCostPerHash = this.upgradeCost / this.cacheIncrease;\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n        this.upgradeProductionIncrease = this.upgradeProductionTotal - stats.production;\\r\\n        this.upgradeCashProduction = (this.upgradeProductionTotal / hashBuyCost) * 1000000;\\r\\n        this.upgradePayoffTime = (this.upgradeCost / this.upgradeCashProduction) * 1000;\\r\\n        this.upgradeValue = this.upgradeProductionIncrease / this.upgradeCost;\\r\\n    }\\r\\n    toString(ns, totalProduction) {\\r\\n        const hashBuyCost = ns.hacknet.hashCost(\\\"Sell for Money\\\");\\r\\n        const totalUpgradeCashProduction = ((totalProduction + this.upgradeProductionIncrease) / hashBuyCost) * 1000000;\\r\\n        const totalUpgradePayoffTime = (this.upgradeCost / totalUpgradeCashProduction) * 1000;\\r\\n        return ns.sprintf(\\\"%02d => %6s %9s +%s h/s %6s %5.2f h/s/$bn\\\", this.id, this.type, ns.nFormat(this.upgradeCost, \\\"($0.000a)\\\"), // cost\\r\\n        ns.nFormat(this.upgradeProductionIncrease, \\\"(0.000a)\\\"), // hash increase\\r\\n        stFormat(ns, totalUpgradePayoffTime), // upgrade payoff time\\r\\n        this.upgradeValue * 1000000000);\\r\\n    }\\r\\n    buy(ns) {\\r\\n        const hashBuyCost = ns.hacknet.hashCost(\\\"Sell for Money\\\");\\r\\n        const numHashBuys = Math.floor(ns.hacknet.numHashes() / hashBuyCost);\\r\\n        const effectiveMoneyAvailable = ns.getPlayer().money + numHashBuys * 1000000;\\r\\n        if (effectiveMoneyAvailable < this.upgradeCost) {\\r\\n            ns.print(\\\"WARNING: Attempted to buy an upgrade you can't afford\\\");\\r\\n            return false;\\r\\n        }\\r\\n        while (ns.getPlayer().money < this.upgradeCost) {\\r\\n            ns.hacknet.spendHashes(\\\"Sell for Money\\\");\\r\\n        }\\r\\n        switch (this.type) {\\r\\n            case HSUpgradeType.LEVEL: {\\r\\n                return ns.hacknet.upgradeLevel(this.id, 1);\\r\\n            }\\r\\n            case HSUpgradeType.RAM: {\\r\\n                return ns.hacknet.upgradeRam(this.id, 1);\\r\\n            }\\r\\n            case HSUpgradeType.CORES: {\\r\\n                return ns.hacknet.upgradeCore(this.id, 1);\\r\\n            }\\r\\n            case HSUpgradeType.CACHE: {\\r\\n                return ns.hacknet.upgradeCache(this.id, 1);\\r\\n            }\\r\\n            case HSUpgradeType.SERVER: {\\r\\n                return ns.hacknet.purchaseNode() !== -1;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHMtdXBncmFkZS5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9oYWNrbmV0L2hzLXVwZ3JhZGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUNwQyxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sNkJBQTZCLENBQUM7QUFDNUQsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0saUNBQWlDLENBQUM7QUFrQnBFLE1BQU0sT0FBTyxTQUFTO0lBQ2xCLEVBQUUsQ0FBUztJQUNYLElBQUksQ0FBZ0I7SUFDcEIsV0FBVyxHQUFHLENBQUMsQ0FBQztJQUNoQixzQkFBc0IsR0FBRyxDQUFDLENBQUM7SUFDM0IsYUFBYSxHQUFHLENBQUMsQ0FBQztJQUNsQixnQkFBZ0IsR0FBRyxDQUFDLENBQUM7SUFDckIseUJBQXlCLEdBQUcsQ0FBQyxDQUFDO0lBQzlCLHFCQUFxQixHQUFHLENBQUMsQ0FBQztJQUMxQixpQkFBaUIsR0FBRyxDQUFDLENBQUM7SUFDdEIsWUFBWSxHQUFHLENBQUMsQ0FBQztJQUVqQixZQUFZLEVBQU0sRUFBRSxFQUFVLEVBQUUsSUFBbUIsRUFBRSxNQUF5QjtRQUMxRSxNQUFNLFdBQVcsR0FBRyxFQUFFLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1FBQzFELE1BQU0sUUFBUSxHQUFHLEVBQUUsQ0FBQyxTQUFTLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQztRQUN4RCxNQUFNLFlBQVksR0FBRyxFQUFFLENBQUMsU0FBUyxFQUFFLENBQUMsMkJBQTJCLENBQUM7UUFDaEUsTUFBTSxhQUFhLEdBQUcsRUFBRSxDQUFDLFNBQVMsRUFBRSxDQUFDLDRCQUE0QixDQUFDO1FBQ2xFLE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxTQUFTLEVBQUUsQ0FBQywwQkFBMEIsQ0FBQztRQUU5RCxJ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\",\"filename\":\"/lib/hacknet/hs-upgrade.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.1,\"server\":\"home\",\"moduleSequenceNumber\":4068,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.stanek.chargeFragment(ns.args[0], ns.args[1]);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hhcmdlLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL3N0YW5lay9jaGFyZ2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUM5QixPQUFPLElBQUksRUFBRTtRQUNULE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxjQUFjLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7S0FDekQ7QUFDTCxDQUFDIn0=\",\"filename\":\"/lib/stanek/charge.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/stanek/charge.js\",\"url\":\"blob:file:///845f73f5-bc04-4d80-bcfb-4b9c6a3b0135\",\"moduleSequenceNumber\":2054}],\"dependents\":[],\"ramUsage\":2,\"server\":\"home\",\"moduleSequenceNumber\":4069,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.chargeFragment\",\"cost\":0.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export var ReservedPorts;\\r\\n(function (ReservedPorts) {\\r\\n    ReservedPorts[ReservedPorts[\\\"HACKING_INFO\\\"] = 1] = \\\"HACKING_INFO\\\";\\r\\n    ReservedPorts[ReservedPorts[\\\"HACKNET_INFO\\\"] = 2] = \\\"HACKNET_INFO\\\";\\r\\n    ReservedPorts[ReservedPorts[\\\"HACK_WRITE_INFO\\\"] = 3] = \\\"HACK_WRITE_INFO\\\";\\r\\n})(ReservedPorts || (ReservedPorts = {}));\\r\\nexport const WEAKENJS = \\\"/lib/exec/weaken.js\\\";\\r\\nexport const GROWJS = \\\"/lib/exec/grow.js\\\";\\r\\nexport const HACKJS = \\\"/lib/exec/hack.js\\\";\\r\\nexport const UTILJS = \\\"/lib/util.js\\\";\\r\\nexport const CITIES = [\\\"Aevum\\\", \\\"Chongqing\\\", \\\"Sector-12\\\", \\\"New Tokyo\\\", \\\"Ishima\\\", \\\"Volhaven\\\"];\\r\\nexport function llog(ns, str, ...args) {\\r\\n    ns.print(ns.sprintf(\\\"%8s \\\" + str, new Date().toLocaleTimeString(\\\"it-IT\\\"), ...args));\\r\\n}\\r\\nexport function softenServer(ns, hostname) {\\r\\n    if (ns.hasRootAccess(hostname)) {\\r\\n        return;\\r\\n    }\\r\\n    let ports = 0;\\r\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n        ns.brutessh(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n        ns.ftpcrack(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n        ns.httpworm(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n        ns.relaysmtp(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n        ns.sqlinject(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ports >= ns.getServerNumPortsRequired(hostname)) {\\r\\n        ns.nuke(hostname);\\r\\n    }\\r\\n}\\r\\nexport function serverIsHackable(ns, hostname) {\\r\\n    return ns.hasRootAccess(hostname) && ns.getHackingLevel() >= ns.getServerRequiredHackingLevel(hostname);\\r\\n}\\r\\nexport function canExecuteOnServer(ns, hostname) {\\r\\n    return ns.hasRootAccess(hostname) && ns.getServerMaxRam(hostname) > 0;\\r\\n}\\r\\nexport function mapHosts(ns, hosts = {}, parents = [], current = \\\"home\\\") {\\r\\n    const newParents = parents.concat(current);\\r\\n    hosts[current] = newParents;\\r\\n    const children = ns.scan(current).filter((element) => !parents.includes(element));\\r\\n    for (const child of children) {\\r\\n        mapHosts(ns, hosts, newParents, child);\\r\\n    }\\r\\n    return hosts;\\r\\n}\\r\\nexport function allHosts(ns) {\\r\\n    return Object.keys(mapHosts(ns));\\r\\n}\\r\\nexport function doProgramBuys(ns) {\\r\\n    const player = ns.getPlayer();\\r\\n    if (!player.tor && player.money > 200e3)\\r\\n        ns.purchaseTor();\\r\\n    if (!ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\") && player.money > 500e3)\\r\\n        ns.purchaseProgram(\\\"BruteSSH.exe\\\");\\r\\n    if (!ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\") && player.money > 1500e3)\\r\\n        ns.purchaseProgram(\\\"FTPCrack.exe\\\");\\r\\n    if (!ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\") && player.money > 5e6)\\r\\n        ns.purchaseProgram(\\\"relaySMTP.exe\\\");\\r\\n    if (!ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\") && player.money > 30e6)\\r\\n        ns.purchaseProgram(\\\"HTTPWorm.exe\\\");\\r\\n    if (!ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\") && player.money > 250e6)\\r\\n        ns.purchaseProgram(\\\"SQLInject.exe\\\");\\r\\n}\\r\\nexport function doBuyAndSoftenAll(ns) {\\r\\n    doProgramBuys(ns);\\r\\n    for (const hostname of allHosts(ns)) {\\r\\n        softenServer(ns, hostname);\\r\\n    }\\r\\n}\\r\\nexport function stFormat(ns, ms, showms = false, showfull = false) {\\r\\n    let timeLeft = ms;\\r\\n    const hours = Math.floor(ms / (1000 * 60 * 60));\\r\\n    timeLeft -= hours * (1000 * 60 * 60);\\r\\n    const minutes = Math.floor(timeLeft / (1000 * 60));\\r\\n    timeLeft -= minutes * (1000 * 60);\\r\\n    const seconds = Math.floor(timeLeft / 1000);\\r\\n    timeLeft -= seconds * 1000;\\r\\n    const milliseconds = timeLeft;\\r\\n    if (showms) {\\r\\n        if (hours > 0 || showfull)\\r\\n            return ns.sprintf(\\\"%02d:%02d:%02d.%03d\\\", hours, minutes, seconds, milliseconds);\\r\\n        if (minutes > 0)\\r\\n            return ns.sprintf(\\\"%02d:%02d.%03d\\\", minutes, seconds, milliseconds);\\r\\n        return ns.sprintf(\\\"%02d.%03d\\\", seconds, milliseconds);\\r\\n    }\\r\\n    else {\\r\\n        if (hours > 0 || showfull)\\r\\n            return ns.sprintf(\\\"%02d:%02d:%02d\\\", hours, minutes, seconds);\\r\\n        if (minutes > 0)\\r\\n            return ns.sprintf(\\\"%02d:%02d\\\", minutes, seconds);\\r\\n        return ns.sprintf(\\\"%02d\\\", seconds);\\r\\n    }\\r\\n}\\r\\nexport function stdFormat(ns, offset = 0, showms = false) {\\r\\n    const date = new Date(new Date().getTime() + offset);\\r\\n    if (showms) {\\r\\n        const ms = ns.sprintf(\\\"%03d\\\", date.getUTCMilliseconds());\\r\\n        return date.toLocaleTimeString(\\\"it-IT\\\") + \\\".\\\" + ms;\\r\\n    }\\r\\n    else {\\r\\n        return date.toLocaleTimeString(\\\"it-IT\\\");\\r\\n    }\\r\\n}\\r\\nexport async function doBackdoors(ns) {\\r\\n    //const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"w0r1d_d43m0n\\\", \\\"b-and-a\\\", \\\"ecorp\\\", \\\"fulcrumassets\\\", \\\"fulcrumtech\\\"];\\r\\n    //const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"omnitek\\\", \\\"kuai-gong\\\", \\\"megacorp\\\"];\\r\\n    const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"w0r1d_d43m0n\\\"];\\r\\n    const hosts = mapHosts(ns);\\r\\n    for (const [hostName, trail] of Object.entries(hosts)) {\\r\\n        const server = ns.getServer(hostName);\\r\\n        if (!targetHosts.includes(hostName) ||\\r\\n            server.backdoorInstalled ||\\r\\n            server.requiredHackingSkill > ns.getHackingLevel() ||\\r\\n            !server.hasAdminRights)\\r\\n            continue;\\r\\n        ns.print(hostName);\\r\\n        for (const hostHopName of trail) {\\r\\n            ns.connect(hostHopName);\\r\\n        }\\r\\n        await ns.installBackdoor();\\r\\n        ns.connect(\\\"home\\\");\\r\\n    }\\r\\n}\\r\\nexport function cleanLogs(ns) {\\r\\n    ns.disableLog(\\\"disableLog\\\");\\r\\n    ns.disableLog(\\\"ALL\\\");\\r\\n    // ns.disableLog(\\\"sleep\\\")\\r\\n    // ns.disableLog(\\\"exec\\\")\\r\\n    // ns.disableLog(\\\"getServerMaxRam\\\")\\r\\n    // ns.disableLog(\\\"getServerSecurityLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerMinSecurityLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerMaxMoney\\\")\\r\\n    // ns.disableLog(\\\"getHackingLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerRequiredHackingLevel\\\")\\r\\n    // ns.disableLog(\\\"scan\\\")\\r\\n    // ns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n    // ns.disableLog(\\\"getServerUsedRam\\\")\\r\\n}\\r\\nexport const ALL_FACTIONS = [\\r\\n    \\\"Illuminati\\\",\\r\\n    \\\"Daedalus\\\",\\r\\n    \\\"The Covenant\\\",\\r\\n    \\\"ECorp\\\",\\r\\n    \\\"MegaCorp\\\",\\r\\n    \\\"Bachman & Associates\\\",\\r\\n    \\\"Blade Industries\\\",\\r\\n    \\\"NWO\\\",\\r\\n    \\\"Clarke Incorporated\\\",\\r\\n    \\\"OmniTek Incorporated\\\",\\r\\n    \\\"Four Sigma\\\",\\r\\n    \\\"KuaiGong International\\\",\\r\\n    \\\"Fulcrum Secret Technologies\\\",\\r\\n    \\\"BitRunners\\\",\\r\\n    \\\"The Black Hand\\\",\\r\\n    \\\"NiteSec\\\",\\r\\n    \\\"Aevum\\\",\\r\\n    \\\"Chongqing\\\",\\r\\n    \\\"Ishima\\\",\\r\\n    \\\"New Tokyo\\\",\\r\\n    \\\"Sector-12\\\",\\r\\n    \\\"Volhaven\\\",\\r\\n    \\\"Speakers for the Dead\\\",\\r\\n    \\\"The Dark Army\\\",\\r\\n    \\\"The Syndicate\\\",\\r\\n    \\\"Silhouette\\\",\\r\\n    \\\"Tetrads\\\",\\r\\n    \\\"Slum Snakes\\\",\\r\\n    \\\"Netburners\\\",\\r\\n    \\\"Tian Di Hui\\\",\\r\\n    \\\"CyberSec\\\",\\r\\n    \\\"Bladeburners\\\",\\r\\n    \\\"Church of the Machine God\\\",\\r\\n];\\r\\nexport async function writeOut(ns, data, startTime, endTime, result, startSec, startCash) {\\r\\n    if (data.writeFile !== \\\"\\\") {\\r\\n        const outstr = ns.sprintf(\\\"%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\", data.target, data.uid, data.batchId, data.realTimeStart + data.offset, data.realTimeStart + data.finish, data.operationTime, startTime, endTime, endTime - startTime, startTime - (data.realTimeStart + data.offset), endTime - (data.realTimeStart + data.finish), endTime - startTime - data.operationTime, result, startSec.toFixed(2), ns.getServerSecurityLevel(data.target).toFixed(2), ns.nFormat(startCash, \\\"($0.000a)\\\"), ns.nFormat(ns.getServerMoneyAvailable(data.target), \\\"($0.000a)\\\"));\\r\\n        while (!await ns.tryWritePort(ReservedPorts.HACK_WRITE_INFO, [data.writeFile, outstr]))\\r\\n            ;\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi91dGlsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLE1BQU0sQ0FBTixJQUFZLGFBSVg7QUFKRCxXQUFZLGFBQWE7SUFDckIsaUVBQWdCLENBQUE7SUFDaEIsaUVBQVksQ0FBQTtJQUNaLHVFQUFlLENBQUE7QUFDbkIsQ0FBQyxFQUpXLGFBQWEsS0FBYixhQUFhLFFBSXhCO0FBRUQsTUFBTSxDQUFDLE1BQU0sUUFBUSxHQUFHLHFCQUFxQixDQUFDO0FBQzlDLE1BQU0sQ0FBQyxNQUFNLE1BQU0sR0FBRyxtQkFBbUIsQ0FBQztBQUMxQyxNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUcsbUJBQW1CLENBQUM7QUFDMUMsTUFBTSxDQUFDLE1BQU0sTUFBTSxHQUFHLGNBQWMsQ0FBQztBQUVyQyxNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUcsQ0FBQyxPQUFPLEVBQUUsV0FBVyxFQUFFLFdBQVcsRUFBRSxXQUFXLEVBQUUsUUFBUSxFQUFFLFVBQVUsQ0FBQyxDQUFDO0FBRTdGLE1BQU0sVUFBVSxJQUFJLENBQUMsRUFBTSxFQUFFLEdBQVcsRUFBRSxHQUFHLElBQXlCO0lBQ2xFLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEdBQUcsR0FBRyxFQUFFLElBQUksSUFBSSxFQUFFLENBQUMsa0JBQWtCLENBQUMsT0FBTyxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDO0FBQ3hGLENBQUM7QUFFRCxNQUFNLFVBQVUsWUFBWSxDQUFDLEVBQU0sRUFBRSxRQUFnQjtJQUNqRCxJQUFJLEVBQUUsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDNUIsT0FBTztLQUNWO0lBRUQsSUFBSSxLQUFLLEdBQUcsQ0FBQyxDQUFDO0lBQ2QsSUFBSSxFQUFFLENBQUMsVUFBVSxDQUFDLGNBQWMsRUFB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\",\"filename\":\"/lib/util.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":13.25,\"server\":\"home\",\"moduleSequenceNumber\":4070,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"purchaseTor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"purchaseProgram\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"connect\",\"cost\":2},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    if (typeof ns.args[0] !== \\\"string\\\" && typeof ns.args[0] !== undefined) {\\r\\n        ns.tprintf(\\\"ERROR: Bad Server Name: %s\\\", ns.args[0]);\\r\\n        return;\\r\\n    }\\r\\n    if (typeof ns.args[0] === \\\"string\\\" && !ns.serverExists(ns.args[0])) {\\r\\n        ns.tprintf(\\\"ERROR: Server Doesn't Exist: %s\\\", ns.args[0]);\\r\\n        return;\\r\\n    }\\r\\n    const targetServer = ns.getServer(ns.args[0].toString());\\r\\n    const availableFunds = targetServer.moneyAvailable <= 1 ? 1 : targetServer.moneyAvailable;\\r\\n    const growthRequired = targetServer.moneyMax / availableFunds;\\r\\n    let growThreadsNeeded = 0;\\r\\n    if (growthRequired > 1)\\r\\n        growThreadsNeeded = Math.ceil(ns.growthAnalyze(targetServer.hostname, growthRequired));\\r\\n    const targetGrowTime = ns.getGrowTime(targetServer.hostname);\\r\\n    const targetWeakenTime = ns.getWeakenTime(targetServer.hostname);\\r\\n    ns.tprintf(\\\"%s:\\\", targetServer.hostname);\\r\\n    ns.tprintf(\\\"  %25s: %s/%s\\\", \\\"Target Funds\\\", ns.nFormat(targetServer.moneyAvailable, \\\"($0.000a)\\\"), ns.nFormat(targetServer.moneyMax, \\\"($0.000a)\\\"));\\r\\n    ns.tprintf(\\\"  %25s: %.2fx, %d Threads\\\", \\\"Growth Required\\\", growthRequired, growThreadsNeeded);\\r\\n    ns.tprintf(\\\"  %25s: %s @ %s\\\", \\\"Server Growth\\\", targetServer.serverGrowth, ns.tFormat(targetGrowTime));\\r\\n    ns.tprintf(\\\"  %25s: %s\\\", \\\"Weaken Time\\\", ns.tFormat(targetWeakenTime));\\r\\n    ns.tprintf(\\\"  %25s: %s / %s / %s\\\", \\\"Hack Difficulty [M/B/H]\\\", targetServer.minDifficulty, targetServer.baseDifficulty, targetServer.hackDifficulty);\\r\\n    ns.tprintf(\\\"  %25s: %d/%d\\\", \\\"Ram Available\\\", targetServer.maxRam - targetServer.ramUsed, targetServer.maxRam);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXNzZXNzLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsiYXNzZXNzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsSUFBSSxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssUUFBUSxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxTQUFTLEVBQUU7UUFDbkUsRUFBRSxDQUFDLE9BQU8sQ0FBQyw0QkFBNEIsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDckQsT0FBTztLQUNWO0lBQ0QsSUFBSSxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssUUFBUSxJQUFJLENBQUMsRUFBRSxDQUFDLFlBQVksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUU7UUFDaEUsRUFBRSxDQUFDLE9BQU8sQ0FBQyxpQ0FBaUMsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDMUQsT0FBTztLQUNWO0lBQ0QsTUFBTSxZQUFZLEdBQUcsRUFBRSxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFDekQsTUFBTSxjQUFjLEdBQUcsWUFBWSxDQUFDLGNBQWMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLGNBQWMsQ0FBQztJQUMxRixNQUFNLGNBQWMsR0FBRyxZQUFZLENBQUMsUUFBUSxHQUFHLGNBQWMsQ0FBQztJQUM5RCxJQUFJLGlCQUFpQixHQUFHLENBQUMsQ0FBQztJQUMxQixJQUFJLGNBQWMsR0FBRyxDQUFDO1FBQUUsaUJBQWlCLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDLFlBQVksQ0FBQyxRQUFRLEVBQUUsY0FBYyxDQUFDLENBQUMsQ0FBQztJQUUvRyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMsV0FBVyxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUM3RCxNQUFNLGdCQUFnQixHQUFHLEVBQUUsQ0FBQyxhQUFhLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBRWpFLEVBQUUsQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLFlBQVksQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUN6QyxFQUFFLENBQUMsT0FBTyxDQUNOLGVBQWUsRUFDZixjQUFjLEVBQ2QsRUFBRSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsY0FBYyxFQUFFLFdBQVcsQ0FBQyxFQUNwRCxFQUFFLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxRQUFRLEVBQUUsV0FBVyxDQUFDLENBQ2pELENBQUM7SUFDRixFQUFFLENBQUMsT0FBTyxDQUFDLDJCQUEyQixFQUFFLGlCQUFpQixFQUFFLGNBQWMsRUFBRSxpQkFBaUIsQ0FBQyxDQUFDO0lBQzlGLEVBQUUsQ0FBQyxPQUFPLENBQUMsaUJBQWlCLEVBQUUsZUFBZSxFQUFFLFlBQVksQ0FBQyxZQUFZLEVBQUUsRUFBRSxDQUFDLE9BQU8sQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDO0lBQ3RHLEVBQUUsQ0FBQyxPQUFPLENBQUMsWUFBWSxFQUFFLGFBQWEsRUFBRSxFQUFFLENBQUMsT0FBTyxDQUFDLGdCQUFnQixDQUFDLENBQUMsQ0FBQztJQUN0RSxFQUFFLENBQUMsT0FBTyxDQUNOLHNCQUFzQixFQUN0Qix5QkFBeUIsRUFDekIsWUFBWSxDQUFDLGFBQWEsRUFDMUIsWUFBWSxDQUFDLGNBQWMsRUFDM0IsWUFBWSxDQUFDLGNBQWMsQ0FDOUIsQ0FBQztJQUNGLEVBQUUsQ0FBQyxPQUFPLENBQUMsZUFBZSxFQUFFLGVBQWUsRUFBRSxZQUFZLENBQUMsTUFBTSxHQUFHLFlBQVksQ0FBQyxPQUFPLEVBQUUsWUFBWSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQ2xILENBQUMifQ==\",\"filename\":\"assess.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"assess.js\",\"url\":\"blob:file:///779990cd-a108-46d2-9b20-0ac45e268bee\",\"moduleSequenceNumber\":11640}],\"dependents\":[],\"ramUsage\":4.8,\"server\":\"home\",\"moduleSequenceNumber\":4071,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"serverExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { stFormat, CITIES, llog, cleanLogs } from \\\"lib/util\\\";\\r\\nfunction lerp(start, end, dist) {\\r\\n    return start + (end - start) * dist;\\r\\n}\\r\\nfunction checkLevel(obj, level) {\\r\\n    return Object.prototype.hasOwnProperty.call(obj, level);\\r\\n}\\r\\nfunction findProp(propName) {\\r\\n    for (const div of eval(\\\"document\\\").querySelectorAll(\\\"div\\\")) {\\r\\n        const propKey = Object.keys(div)[1];\\r\\n        if (!propKey)\\r\\n            continue;\\r\\n        const props = div[propKey];\\r\\n        if (props.children?.props && props.children.props[propName])\\r\\n            return props.children.props[propName];\\r\\n        if (props.children instanceof Array)\\r\\n            for (const child of props.children)\\r\\n                if (child?.props && child.props[propName])\\r\\n                    return child.props[propName];\\r\\n    }\\r\\n}\\r\\nfunction joinBladeburner() {\\r\\n    const p = findProp(\\\"player\\\");\\r\\n    if (!p.inBladeburner()) {\\r\\n        // Apply for Bladeburner division\\r\\n        if (p.strength >= 100 && p.defense >= 100 && p.dexterity >= 100 && p.agility >= 100) {\\r\\n            p.startBladeburner({ new: true });\\r\\n            return true;\\r\\n        }\\r\\n    }\\r\\n    else {\\r\\n        return true;\\r\\n    }\\r\\n    return false;\\r\\n}\\r\\nexport class City {\\r\\n    name = \\\"\\\";\\r\\n    pop = 0;\\r\\n    popEst = 0;\\r\\n    comms = 0;\\r\\n    chaos = 0;\\r\\n}\\r\\nclass Action {\\r\\n    type;\\r\\n    name;\\r\\n    city;\\r\\n    autoLevel = false;\\r\\n    countRemaining = 0;\\r\\n    successChanceMin = {};\\r\\n    successChanceMax = {};\\r\\n    successChance = {};\\r\\n    maxLevel = 1;\\r\\n    rankGain = {};\\r\\n    actionTime = {};\\r\\n    best = { rankPerMs: 0, level: 1, chance: 0 };\\r\\n    boRank = -1;\\r\\n    rawAction = null;\\r\\n    constructor(ns, type, name, city) {\\r\\n        this.type = type;\\r\\n        this.name = name;\\r\\n        this.city = city;\\r\\n        const bb = findProp(\\\"player\\\").bladeburner;\\r\\n        const rawActionId = bb.getActionIdFromTypeAndName(this.type, this.name);\\r\\n        if (rawActionId)\\r\\n            this.rawAction = bb.getActionObject(rawActionId);\\r\\n        this.refresh(ns);\\r\\n    }\\r\\n    refresh(ns) {\\r\\n        ns.bladeburner.switchCity(this.city);\\r\\n        ns.bladeburner.setActionAutolevel(this.type, this.name, false);\\r\\n        this.autoLevel = ns.bladeburner.getActionAutolevel(this.type, this.name);\\r\\n        this.countRemaining = ns.bladeburner.getActionCountRemaining(this.type, this.name);\\r\\n        this.maxLevel = ns.bladeburner.getActionMaxLevel(this.type, this.name);\\r\\n        if (this.type === \\\"BlackOps\\\")\\r\\n            this.boRank = ns.bladeburner.getBlackOpRank(this.name);\\r\\n        for (let level = 1; level <= this.maxLevel; level++) {\\r\\n            ns.bladeburner.setActionLevel(this.type, this.name, level);\\r\\n            const [successChanceMin, successChanceMax] = ns.bladeburner.getActionEstimatedSuccessChance(this.type, this.name);\\r\\n            this.successChanceMin[level] = successChanceMin;\\r\\n            this.successChanceMax[level] = successChanceMax;\\r\\n            this.actionTime[level] = ns.bladeburner.getActionTime(this.type, this.name);\\r\\n            // rank gain\\r\\n            this.rankGain[level] = 0;\\r\\n            if (this.rawAction && this.rawAction.rankGain) {\\r\\n                const rewardMultiplier = Math.pow(this.rawAction.rewardFac, level - 1);\\r\\n                this.rankGain[level] =\\r\\n                    this.rawAction.rankGain * rewardMultiplier * ns.getBitNodeMultipliers().BladeburnerRank;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n    avgChance(level) {\\r\\n        if (!checkLevel(this.successChanceMin, level) || !checkLevel(this.successChanceMax, level))\\r\\n            return 0;\\r\\n        return lerp(this.successChanceMin[level], this.successChanceMax[level], 0.25);\\r\\n    }\\r\\n    chance(level) {\\r\\n        if (this.rawAction) {\\r\\n            this.rawAction.level = level;\\r\\n            return this.rawAction.getSuccessChance(findProp(\\\"player\\\").bladeburner, { est: false });\\r\\n        }\\r\\n        return this.avgChance(level);\\r\\n    }\\r\\n    rankPerMs(level) {\\r\\n        if (!checkLevel(this.rankGain, level) || !checkLevel(this.actionTime, level))\\r\\n            return 0;\\r\\n        if (this.actionTime[level] === 0)\\r\\n            return 0;\\r\\n        return this.rankGain[level] / this.actionTime[level];\\r\\n    }\\r\\n    calcBestRankPerMs(ns, successThreshold) {\\r\\n        this.refresh(ns);\\r\\n        this.best = {\\r\\n            rankPerMs: 0,\\r\\n            level: 1,\\r\\n            chance: 0,\\r\\n        };\\r\\n        if (this.countRemaining <= 0)\\r\\n            return this.best;\\r\\n        if (ns.bladeburner.getRank() < this.boRank)\\r\\n            return this.best;\\r\\n        for (let level = 1; level <= this.maxLevel; level++) {\\r\\n            const rankPerMs = this.rankPerMs(level);\\r\\n            const chance = this.chance(level);\\r\\n            if (rankPerMs > this.best.rankPerMs && chance > successThreshold) {\\r\\n                this.best = {\\r\\n                    rankPerMs: rankPerMs,\\r\\n                    level: level,\\r\\n                    chance: chance,\\r\\n                };\\r\\n            }\\r\\n        }\\r\\n        return this.best;\\r\\n    }\\r\\n    runBest(ns) {\\r\\n        const time = this.bestTime();\\r\\n        llog(ns, \\\"Running %s:%s:%s:%d for %s (%s Rank/s)\\\", this.city, this.type, this.name, this.best.level, stFormat(ns, time, false, false), ns.nFormat(this.best.rankPerMs * 1000, \\\"0.000a\\\"));\\r\\n        ns.bladeburner.switchCity(this.city);\\r\\n        ns.bladeburner.setActionLevel(this.type, this.name, this.best.level);\\r\\n        ns.bladeburner.startAction(this.type, this.name);\\r\\n        return time;\\r\\n    }\\r\\n    bestTime() {\\r\\n        if (!checkLevel(this.actionTime, this.best.level))\\r\\n            return 0;\\r\\n        return this.actionTime[this.best.level];\\r\\n    }\\r\\n    toString(ns) {\\r\\n        let str = \\\"\\\";\\r\\n        str += ns.sprintf(\\\"%s:%s:%s:\\\\n\\\", this.city, this.type, this.name);\\r\\n        if (this.boRank !== -1)\\r\\n            str += ns.sprintf(\\\"  Required Rank: %d\\\\n\\\", this.boRank);\\r\\n        if (this.countRemaining < Number.MAX_SAFE_INTEGER)\\r\\n            str += ns.sprintf(\\\"  Count Remaining: %d\\\\n\\\", this.countRemaining);\\r\\n        str += ns.sprintf(\\\"  Autolevel: %s\\\\n\\\", this.autoLevel ? \\\"ON\\\" : \\\"OFF\\\");\\r\\n        for (let level = 1; level <= this.maxLevel; level++) {\\r\\n            const ranksStr = ns.nFormat(this.rankPerMs(level) * 1000, \\\"0.000a\\\");\\r\\n            str += ns.sprintf(\\\"  Level %d: %d - %d (%d), rank +%.3f, time %s, rank/s %s %s\\\\n\\\", level, this.successChanceMin[level] * 100, this.successChanceMax[level] * 100, this.chance(level) * 100, this.rankGain[level], stFormat(ns, this.actionTime[level], false, false), ranksStr, this.best.level === level ? `(BEST ${ranksStr} Rank/s)` : \\\"\\\");\\r\\n        }\\r\\n        return str;\\r\\n    }\\r\\n}\\r\\nfunction getRecoveryAction(ns) {\\r\\n    const bb = findProp(\\\"player\\\").bladeburner;\\r\\n    let bestCity = \\\"Sector-12\\\";\\r\\n    let bestDiffRatio = 0;\\r\\n    for (const [city, data] of Object.entries(bb.cities)) {\\r\\n        llog(ns, \\\"%10s: %8s / %8s diff: %8s (%.2f)\\\", city, ns.nFormat(data.pop, \\\"0.000a\\\"), ns.nFormat(data.popEst, \\\"0.000a\\\"), ns.nFormat(Math.abs(data.pop - data.popEst), \\\"0.000a\\\"), Math.abs((data.pop - data.popEst) / data.pop));\\r\\n        const diffRatio = Math.abs((data.pop - data.popEst) / data.pop);\\r\\n        if (diffRatio > bestDiffRatio) {\\r\\n            bestDiffRatio = diffRatio;\\r\\n            bestCity = city;\\r\\n        }\\r\\n    }\\r\\n    if (bestDiffRatio < 0.001)\\r\\n        return [new Action(ns, \\\"General\\\", \\\"Training\\\", \\\"Sector-12\\\"), 0];\\r\\n    return [new Action(ns, \\\"General\\\", \\\"Field Analysis\\\", bestCity), bestDiffRatio];\\r\\n}\\r\\nexport async function main(ns) {\\r\\n    cleanLogs(ns);\\r\\n    if (!joinBladeburner())\\r\\n        return;\\r\\n    const allActions = [];\\r\\n    for (const city of CITIES) {\\r\\n        for (const actionName of ns.bladeburner.getBlackOpNames()) {\\r\\n            allActions.push(new Action(ns, \\\"BlackOps\\\", actionName, city));\\r\\n        }\\r\\n        for (const actionName of ns.bladeburner.getContractNames()) {\\r\\n            allActions.push(new Action(ns, \\\"Contract\\\", actionName, city));\\r\\n        }\\r\\n        for (const actionName of ns.bladeburner.getGeneralActionNames()) {\\r\\n            allActions.push(new Action(ns, \\\"General\\\", actionName, city));\\r\\n        }\\r\\n        for (const actionName of ns.bladeburner.getOperationNames()) {\\r\\n            allActions.push(new Action(ns, \\\"Operation\\\", actionName, city));\\r\\n        }\\r\\n    }\\r\\n    let actionEndTime = 0;\\r\\n    while (true) {\\r\\n        const currentTime = new Date().getTime();\\r\\n        if (currentTime > actionEndTime) {\\r\\n            // prettier-ignore\\r\\n            const [recoveryAction, /*diffRatio*/] = getRecoveryAction(ns);\\r\\n            const [curStam, maxStam] = ns.bladeburner.getStamina();\\r\\n            if (curStam < maxStam / 2) {\\r\\n                actionEndTime = currentTime + recoveryAction.runBest(ns) + 50;\\r\\n            }\\r\\n            else {\\r\\n                let threshold = 0.85;\\r\\n                let runnableActions = [];\\r\\n                while (runnableActions.length === 0) {\\r\\n                    threshold -= 0.05;\\r\\n                    for (const action of allActions)\\r\\n                        action.calcBestRankPerMs(ns, threshold);\\r\\n                    runnableActions = allActions\\r\\n                        .filter((a) => a.best.rankPerMs > 0)\\r\\n                        .sort((a, b) => b.best.rankPerMs === a.best.rankPerMs\\r\\n                        ? b.best.chance - a.best.chance\\r\\n                        : b.best.rankPerMs - a.best.rankPerMs);\\r\\n                }\\r\\n                //for (const action of runnableActions) llog(ns,action.toString(ns));\\r\\n                actionEndTime = currentTime + runnableActions[0].runBest(ns) + 50;\\r\\n            }\\r\\n            // do skill check\\r\\n            const skillNames = [\\r\\n                \\\"Overclock\\\",\\r\\n                \\\"Blade's Intuition\\\",\\r\\n                \\\"Cloak\\\",\\r\\n                \\\"Short-Circuit\\\",\\r\\n                \\\"Digital Observer\\\",\\r\\n                \\\"Tracer\\\",\\r\\n                \\\"Reaper\\\",\\r\\n            ];\\r\\n            for (const skillName of skillNames) {\\r\\n                if (skillName === \\\"Overclock\\\" && ns.bladeburner.getSkillLevel(skillName) >= 90)\\r\\n                    continue;\\r\\n                const skillPoints = ns.bladeburner.getSkillPoints();\\r\\n                const skillCost = ns.bladeburner.getSkillUpgradeCost(skillName);\\r\\n                if (skillCost <= skillPoints) {\\r\\n                    llog(ns, \\\"Upgrading %s for %d skill points\\\", skillName, skillCost);\\r\\n                    ns.bladeburner.upgradeSkill(skillName);\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        await ns.sleep(100);\\r\\n        // for (const skillName of ns.bladeburner.getSkillNames()) {\\r\\n        //     //\\r\\n        // }\\r\\n    }\\r\\n    while (true) {\\r\\n        break;\\r\\n        await ns.sleep(100);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmxhZGVidXJuZXIuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJibGFkZWJ1cm5lci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLE1BQU0sVUFBVSxDQUFDO0FBRTdELFNBQVMsSUFBSSxDQUFDLEtBQWEsRUFBRSxHQUFXLEVBQUUsSUFBWTtJQUNsRCxPQUFPLEtBQUssR0FBRyxDQUFDLEdBQUcsR0FBRyxLQUFLLENBQUMsR0FBRyxJQUFJLENBQUM7QUFDeEMsQ0FBQztBQUVELFNBQVMsVUFBVSxDQUFDLEdBQW9CLEVBQUUsS0FBYTtJQUNuRCxPQUFPLE1BQU0sQ0FBQyxTQUFTLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFDNUQsQ0FBQztBQUVELFNBQVMsUUFBUSxDQUFDLFFBQWdCO0lBQzlCLEtBQUssTUFBTSxHQUFHLElBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLGdCQUFnQixDQUFDLEtBQUssQ0FBQyxFQUFFO1FBQ3hELE1BQU0sT0FBTyxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDcEMsSUFBSSxDQUFDLE9BQU87WUFBRSxTQUFTO1FBQ3ZCLE1BQU0sS0FBSyxHQUFHLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUMzQixJQUFJLEtBQUssQ0FBQyxRQUFRLEVBQUUsS0FBSyxJQUFJLEtBQUssQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQztZQUFFLE9BQU8sS0FBSyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDbkcsSUFBSSxLQUFLLENBQUMsUUFBUSxZQUFZLEtBQUs7WUFDL0IsS0FBSyxNQUFNLEtBQUssSUFBSSxLQUFL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\",\"filename\":\"bladeburner.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/util.js\",\"url\":\"blob:file:///cb9cd662-faf5-4c0b-841b-bc31882be9ce\",\"moduleSequenceNumber\":4070},{\"filename\":\"bladeburner.js\",\"url\":\"blob:file:///7b3478f5-ecf5-4c57-a84d-e5a2ea17aaaa\",\"moduleSequenceNumber\":4311}],\"dependents\":[],\"ramUsage\":69.2,\"server\":\"home\",\"moduleSequenceNumber\":4311,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"bladeburner.switchCity\",\"cost\":4},{\"type\":\"fn\",\"name\":\"bladeburner.setActionAutolevel\",\"cost\":4},{\"type\":\"fn\",\"name\":\"bladeburner.getActionAutolevel\",\"cost\":4},{\"type\":\"fn\",\"name\":\"bladeburner.getActionCountRemaining\",\"cost\":4},{\"type\":\"fn\",\"name\":\"bladeburner.getActionMaxLevel\",\"cost\":4},{\"type\":\"fn\",\"name\":\"bladeburner.getBlackOpRank\",\"cost\":2},{\"type\":\"fn\",\"name\":\"bladeburner.setActionLevel\",\"cost\":4},{\"type\":\"fn\",\"name\":\"bladeburner.getActionEstimatedSuccessChance\",\"cost\":4},{\"type\":\"fn\",\"name\":\"bladeburner.getActionTime\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getBitNodeMultipliers\",\"cost\":4},{\"type\":\"fn\",\"name\":\"bladeburner.getRank\",\"cost\":4},{\"type\":\"fn\",\"name\":\"bladeburner.startAction\",\"cost\":4},{\"type\":\"fn\",\"name\":\"bladeburner.getBlackOpNames\",\"cost\":0.4},{\"type\":\"fn\",\"name\":\"bladeburner.getContractNames\",\"cost\":0.4},{\"type\":\"fn\",\"name\":\"bladeburner.getGeneralActionNames\",\"cost\":0.4},{\"type\":\"fn\",\"name\":\"bladeburner.getOperationNames\",\"cost\":0.4},{\"type\":\"fn\",\"name\":\"bladeburner.getStamina\",\"cost\":4},{\"type\":\"fn\",\"name\":\"bladeburner.getSkillLevel\",\"cost\":4},{\"type\":\"fn\",\"name\":\"bladeburner.getSkillPoints\",\"cost\":4},{\"type\":\"fn\",\"name\":\"bladeburner.getSkillUpgradeCost\",\"cost\":4},{\"type\":\"fn\",\"name\":\"bladeburner.upgradeSkill\",\"cost\":4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    for (const faction of ns.getPlayer().factions) {\\r\\n        ns.corporation.bribe(faction, ns.corporation.getCorporation().funds * 0.001, 0);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnJpYmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJicmliZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFPO0lBQ2pDLEtBQUssTUFBTSxPQUFPLElBQUksRUFBRSxDQUFDLFNBQVMsRUFBRSxDQUFDLFFBQVEsRUFBRTtRQUM5QyxFQUFFLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUFDLFdBQVcsQ0FBQyxjQUFjLEVBQUUsQ0FBQyxLQUFLLEdBQUcsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFBO0tBQy9FO0FBQ0YsQ0FBQyJ9\",\"filename\":\"bribe.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1024.5,\"server\":\"home\",\"moduleSequenceNumber\":4073,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"ns\",\"name\":\"corporation\",\"cost\":1022.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { doProgramBuys } from \\\"lib/util\\\";\\r\\nexport async function main(ns) {\\r\\n    doProgramBuys(ns);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnV5X3Byb2dyYW1zLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsiYnV5X3Byb2dyYW1zLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFFekMsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUNqQyxhQUFhLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDbkIsQ0FBQyJ9\",\"filename\":\"buy_programs.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.2,\"server\":\"home\",\"moduleSequenceNumber\":4074,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"purchaseTor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"purchaseProgram\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let ram = Number(ns.args[0]);\\r\\n    let count = Number(ns.args[1]);\\r\\n    const cash = ns.getServerMoneyAvailable(\\\"home\\\");\\r\\n    if (isNaN(count)) {\\r\\n        if (ns.args[1] !== undefined)\\r\\n            ns.tprintf(\\\"count was not a number\\\");\\r\\n        count = 1;\\r\\n    }\\r\\n    if (isNaN(ram) && ns.args[0] !== \\\"max\\\") {\\r\\n        // ns.tprintf(\\\"Calculating maximum ram allocation for new server (Cash: %s)\\\", ns.nFormat(cash, '($0.000a)'))\\r\\n        ram = 0;\\r\\n        for (let i = 0; i <= 20; i++) {\\r\\n            const curRam = Math.pow(2, i);\\r\\n            const cost = ns.getPurchasedServerCost(curRam);\\r\\n            if (cost <= cash)\\r\\n                ram = curRam;\\r\\n            else\\r\\n                break;\\r\\n        }\\r\\n        let cost = ns.getPurchasedServerCost(ram);\\r\\n        let maxServers = Math.min(Math.floor(cash / cost), 25);\\r\\n        ns.tprintf(\\\"run buy_server.js %d %d %s\\\", ram, maxServers, ns.nFormat(cost * maxServers, \\\"($0.000a)\\\"));\\r\\n        ram /= 2;\\r\\n        if (ram < 256)\\r\\n            return;\\r\\n        cost = ns.getPurchasedServerCost(ram);\\r\\n        maxServers = Math.min(Math.floor(cash / cost), 25);\\r\\n        ns.tprintf(\\\"run buy_server.js %d %d %s\\\", ram, maxServers, ns.nFormat(cost * maxServers, \\\"($0.000a)\\\"));\\r\\n        ram /= 2;\\r\\n        if (ram < 256)\\r\\n            return;\\r\\n        cost = ns.getPurchasedServerCost(ram);\\r\\n        maxServers = Math.min(Math.floor(cash / cost), 25);\\r\\n        ns.tprintf(\\\"run buy_server.js %d %d %s\\\", ram, maxServers, ns.nFormat(cost * maxServers, \\\"($0.000a)\\\"));\\r\\n        ram /= 2;\\r\\n        if (ram < 256)\\r\\n            return;\\r\\n        cost = ns.getPurchasedServerCost(ram);\\r\\n        maxServers = Math.min(Math.floor(cash / cost), 25);\\r\\n        ns.tprintf(\\\"run buy_server.js %d %d %s\\\", ram, maxServers, ns.nFormat(cost * maxServers, \\\"($0.000a)\\\"));\\r\\n        ram /= 2;\\r\\n        if (ram < 256)\\r\\n            return;\\r\\n        cost = ns.getPurchasedServerCost(ram);\\r\\n        maxServers = Math.min(Math.floor(cash / cost), 25);\\r\\n        ns.tprintf(\\\"run buy_server.js %d %d %s\\\", ram, maxServers, ns.nFormat(cost * maxServers, \\\"($0.000a)\\\"));\\r\\n        ram /= 2;\\r\\n        if (ram < 256)\\r\\n            return;\\r\\n        cost = ns.getPurchasedServerCost(ram);\\r\\n        maxServers = Math.min(Math.floor(cash / cost), 25);\\r\\n        ns.tprintf(\\\"run buy_server.js %d %d %s\\\", ram, maxServers, ns.nFormat(cost * maxServers, \\\"($0.000a)\\\"));\\r\\n        return;\\r\\n    }\\r\\n    if (ns.args[0] === \\\"max\\\") {\\r\\n        ram = 0;\\r\\n        for (let i = 0; i <= 20; i++) {\\r\\n            const curRam = Math.pow(2, i);\\r\\n            const cost = ns.getPurchasedServerCost(curRam);\\r\\n            if (cost <= cash)\\r\\n                ram = curRam;\\r\\n            else\\r\\n                break;\\r\\n        }\\r\\n    }\\r\\n    const cost = ns.getPurchasedServerCost(ram) * count;\\r\\n    if (cash < cost) {\\r\\n        ns.tprintf(\\\"Unable to purchase %d server%s with %d ram (%s < %s)\\\", count, count > 1 ? \\\"s\\\" : \\\"\\\", ram, ns.nFormat(cash, \\\"($0.000a)\\\"), ns.nFormat(cost, \\\"($0.000a)\\\"));\\r\\n        return;\\r\\n    }\\r\\n    for (let i = 0; i < count; i++) {\\r\\n        const pservers = ns.getPurchasedServers().sort((a, b) => ns.getServerMaxRam(a) - ns.getServerMaxRam(b));\\r\\n        const nextIdx = pservers.length;\\r\\n        let nextServerName = \\\"pserv-\\\" + nextIdx;\\r\\n        if (pservers.length === ns.getPurchasedServerLimit()) {\\r\\n            const delServer = ns.getServer(pservers[0]);\\r\\n            if (delServer.maxRam >= ram) {\\r\\n                ns.tprintf(\\\"Max servers reached and new server is not an improvement (%dGB/%dGB ram)\\\", delServer.maxRam, ram);\\r\\n                return;\\r\\n            }\\r\\n            ns.tprintf(\\\"Deleting server %s with %dGB ram\\\", delServer.hostname, delServer.maxRam);\\r\\n            nextServerName = delServer.hostname;\\r\\n            ns.killall(delServer.hostname);\\r\\n            ns.deleteServer(delServer.hostname);\\r\\n        }\\r\\n        const hostname = ns.purchaseServer(nextServerName, ram);\\r\\n        ns.tprintf(\\\"Purchased server %s with %d ram for %s\\\", hostname, ram, ns.nFormat(cost / count, \\\"($0.000a)\\\"));\\r\\n        return;\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnV5X3NlcnZlci5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImJ1eV9zZXJ2ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixJQUFJLEdBQUcsR0FBRyxNQUFNLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzdCLElBQUksS0FBSyxHQUFHLE1BQU0sQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFL0IsTUFBTSxJQUFJLEdBQUcsRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBRWhELElBQUksS0FBSyxDQUFDLEtBQUssQ0FBQyxFQUFFO1FBQ2QsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFNBQVM7WUFBRSxFQUFFLENBQUMsT0FBTyxDQUFDLHdCQUF3QixDQUFDLENBQUM7UUFDbkUsS0FBSyxHQUFHLENBQUMsQ0FBQztLQUNiO0lBRUQsSUFBSSxLQUFLLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxLQUFLLEVBQUU7UUFDcEMsNEdBQTRHO1FBQzVHLEdBQUcsR0FBRyxDQUFDLENBQUM7UUFDUixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQzFCLE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1lBQzlCLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUMvQyxJQUFJLElBQUksSUFBSSxJQUFJO2dCQUFFLEdBQUcsR0FBRyxNQUFNLENBQUM7O2dC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\",\"filename\":\"buy_server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"buy_server.js\",\"url\":\"blob:file:///a5dbc774-c98c-4361-b613-6641516aad1c\",\"moduleSequenceNumber\":21792}],\"dependents\":[],\"ramUsage\":11.3,\"server\":\"home\",\"moduleSequenceNumber\":4075,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// returns the actual number of servers to buy that would be better than the ones we already have\\r\\nfunction compareToActualServers(ns, ram, numServers) {\\r\\n    // find the number of servers we own that have ram sizes > ram\\r\\n    ns.tprintf(\\\"comparing %s %s\\\", ram, numServers);\\r\\n    const betterServerCount = ns.getPurchasedServers().filter((x) => ns.getServerMaxRam(x) >= ram).length;\\r\\n    const freeSpots = ns.getPurchasedServerLimit() - betterServerCount;\\r\\n    return Math.min(numServers, freeSpots);\\r\\n}\\r\\nfunction getCurrentRamSize(ns) {\\r\\n    return ns.getPurchasedServers().reduce((tally, serverName) => tally + ns.getServerMaxRam(serverName), 0);\\r\\n}\\r\\nfunction getFinalRamSize(ns, ram, numServers) {\\r\\n    const pservers = ns.getPurchasedServers().sort((a, b) => ns.getServerMaxRam(a) - ns.getServerMaxRam(b));\\r\\n    const numToDelete = Math.max(pservers.length + numServers - ns.getPurchasedServerLimit(), 0);\\r\\n    for (let i = 0; i < numToDelete; i++) {\\r\\n        pservers.shift();\\r\\n    }\\r\\n    return pservers.reduce((tally, serverName) => tally + ns.getServerMaxRam(serverName), 0) + ram * numServers;\\r\\n}\\r\\nfunction buyServers(ns, ram, numServers) {\\r\\n    const pservers = ns.getPurchasedServers().sort((a, b) => ns.getServerMaxRam(a) - ns.getServerMaxRam(b));\\r\\n    const numToDelete = Math.max(pservers.length + numServers - ns.getPurchasedServerLimit(), 0);\\r\\n    const deleteServers = [];\\r\\n    for (let i = 0; i < numToDelete; i++) {\\r\\n        deleteServers.push(pservers.shift());\\r\\n    }\\r\\n    for (const server of deleteServers) {\\r\\n        ns.tprintf(\\\"Deleting %s with %d RAM\\\", server, ns.getServerMaxRam(server));\\r\\n        ns.killall(server);\\r\\n        ns.deleteServer(server);\\r\\n    }\\r\\n    let serverIndex = 0;\\r\\n    function getNextServerName() {\\r\\n        while (true) {\\r\\n            const serverName = \\\"pserv-\\\" + serverIndex;\\r\\n            if (!ns.getPurchasedServers().includes(serverName))\\r\\n                return serverName;\\r\\n            else\\r\\n                serverIndex++;\\r\\n        }\\r\\n        return \\\"\\\";\\r\\n    }\\r\\n    const cost = ns.getPurchasedServerCost(ram);\\r\\n    for (let i = 0; i < numServers; i++) {\\r\\n        const serverName = getNextServerName();\\r\\n        ns.tprintf(\\\"Buying %s with %d RAM for %s\\\", serverName, ram, ns.nFormat(cost, \\\"($0.000a)\\\"));\\r\\n        ns.purchaseServer(serverName, ram);\\r\\n    }\\r\\n    return cost * numServers;\\r\\n}\\r\\nexport async function main(ns) {\\r\\n    let maxPow = 8; // Minimum ram is 256\\r\\n    let sizes = [];\\r\\n    const cash = ns.getPlayer().money;\\r\\n    const currentSize = getCurrentRamSize(ns);\\r\\n    while (true) {\\r\\n        const curRam = Math.pow(2, maxPow);\\r\\n        const cost = ns.getPurchasedServerCost(curRam);\\r\\n        if (cost <= cash) {\\r\\n            const numServers = compareToActualServers(ns, curRam, Math.min(Math.floor(cash / cost), ns.getPurchasedServerLimit()));\\r\\n            if (numServers > 0)\\r\\n                sizes.push([curRam, numServers, getFinalRamSize(ns, curRam, numServers)]);\\r\\n            maxPow++;\\r\\n        }\\r\\n        else {\\r\\n            break;\\r\\n        }\\r\\n    }\\r\\n    if (sizes.length === 0) {\\r\\n        ns.tprintf(\\\"Not enough cash to buy an upgrade\\\");\\r\\n        return;\\r\\n    }\\r\\n    sizes = sizes.sort((a, b) => b[2] - a[2]);\\r\\n    const [ram, numServers, finalSize] = sizes[0];\\r\\n    for (const [ram, numServers, finalSize] of sizes) {\\r\\n        ns.tprintf(\\\"%s %s %s\\\", ram, numServers, finalSize);\\r\\n    }\\r\\n    if (ns.args[0]) {\\r\\n        ns.tprintf(\\\"Check: Buying %d %dGB servers, increasing the size from %d to %d for %s\\\", numServers, ram, currentSize, finalSize, ns.nFormat(numServers * ns.getPurchasedServerCost(ram), \\\"($0.000a)\\\"));\\r\\n        return;\\r\\n    }\\r\\n    const cost = buyServers(ns, ram, numServers);\\r\\n    ns.tprintf(\\\"Increased available server ram from %d to %d for %s\\\", currentSize, finalSize, ns.nFormat(numServers * ns.getPurchasedServerCost(ram), \\\"($0.000a)\\\"));\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnV5X3NlcnZlcl9hbGwuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJidXlfc2VydmVyX2FsbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxpR0FBaUc7QUFDakcsU0FBUyxzQkFBc0IsQ0FBQyxFQUFNLEVBQUUsR0FBVyxFQUFFLFVBQWtCO0lBQ25FLDhEQUE4RDtJQUM5RCxFQUFFLENBQUMsT0FBTyxDQUFDLGlCQUFpQixFQUFFLEdBQUcsRUFBRSxVQUFVLENBQUMsQ0FBQztJQUMvQyxNQUFNLGlCQUFpQixHQUFHLEVBQUUsQ0FBQyxtQkFBbUIsRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUMsSUFBSSxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUM7SUFDdEcsTUFBTSxTQUFTLEdBQUcsRUFBRSxDQUFDLHVCQUF1QixFQUFFLEdBQUcsaUJBQWlCLENBQUM7SUFDbkUsT0FBTyxJQUFJLENBQUMsR0FBRyxDQUFDLFVBQVUsRUFBRSxTQUFTLENBQUMsQ0FBQztBQUMzQyxDQUFDO0FBRUQsU0FBUyxpQkFBaUIsQ0FBQyxFQUFNO0lBQzdCLE9BQU8sRUFBRSxDQUFDLG1CQUFtQixFQUFFLENBQUMsTUFBTSxDQUFDLENBQUMsS0FBSyxFQUFFLFVBQVUsRUFBRSxFQUFFLENBQUMsS0FBSyxHQUFHLEVBQUUsQ0FBQyxlQUFlLENBQUMsVUFBVSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFDN0csQ0FBQztBQUVELFNBQVMsZUFBZSxDQUFDLEVBQU0sRUFBRSxHQUFXLEVBQUUsVUFBa0I7SUFDNUQsTUFBTSxRQUFRLEdBQUcsRUFBRSxDQUFDLG1CQUFtQixFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUMs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\",\"filename\":\"buy_server_all.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"buy_server_all.js\",\"url\":\"blob:file:///c52093ee-22db-429b-9a49-0a8a8c594b4c\",\"moduleSequenceNumber\":11176}],\"dependents\":[],\"ramUsage\":9.7,\"server\":\"home\",\"moduleSequenceNumber\":4076,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { allHosts } from \\\"lib/util\\\";\\r\\nfunction answerCCT(ns, cct, answer) {\\r\\n    try {\\r\\n        const reward = ns.codingcontract.attempt(answer, cct.name, cct.host, { returnReward: true });\\r\\n        if (reward === \\\"\\\") {\\r\\n            ns.tprintf(\\\"ERROR: Failed to solve %s:%s of type %s\\\", cct.host, cct.name, cct.type);\\r\\n            ns.tprintf(\\\"  data: %s; answer: %s\\\", cct.data.toString(), answer.toString());\\r\\n        }\\r\\n        else {\\r\\n            ns.tprintf(\\\"SUCCESS: Solved %s:%s => %s\\\", cct.host, cct.name, reward);\\r\\n        }\\r\\n    }\\r\\n    catch (e) {\\r\\n        ns.tprintf(\\\"Caught Exception: %s\\\", e);\\r\\n    }\\r\\n}\\r\\nclass CCT {\\r\\n    name;\\r\\n    host;\\r\\n    type;\\r\\n    desc;\\r\\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n    data;\\r\\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n    solve;\\r\\n    constructor(ns, hostname, filename) {\\r\\n        this.name = filename;\\r\\n        this.host = hostname;\\r\\n        this.type = ns.codingcontract.getContractType(filename, hostname);\\r\\n        this.desc = ns.codingcontract.getDescription(filename, hostname);\\r\\n        this.data = ns.codingcontract.getData(filename, hostname);\\r\\n        switch (this.type) {\\r\\n            case \\\"Find Largest Prime Factor\\\":\\r\\n                this.solve = _.bind(CCT.solveFindLargestPrimeFactor, null, _, this);\\r\\n                break;\\r\\n            case \\\"Subarray with Maximum Sum\\\":\\r\\n                this.solve = _.bind(CCT.solveSubarraywithMaximumSum, null, _, this);\\r\\n                break;\\r\\n            case \\\"Total Ways to Sum\\\":\\r\\n                this.solve = _.bind(CCT.solveTotalWaystoSum, null, _, this);\\r\\n                break;\\r\\n            case \\\"Spiralize Matrix\\\":\\r\\n                this.solve = _.bind(CCT.solveSpiralizeMatrix, null, _, this);\\r\\n                break;\\r\\n            case \\\"Array Jumping Game\\\":\\r\\n                this.solve = _.bind(CCT.solveArrayJumpingGame, null, _, this);\\r\\n                break;\\r\\n            case \\\"Merge Overlapping Intervals\\\":\\r\\n                this.solve = _.bind(CCT.solveMergeOverlappingIntervals, null, _, this);\\r\\n                break;\\r\\n            case \\\"Generate IP Addresses\\\":\\r\\n                this.solve = _.bind(CCT.solveGenerateIPAddresses, null, _, this);\\r\\n                break;\\r\\n            case \\\"Algorithmic Stock Trader I\\\":\\r\\n                this.solve = _.bind(CCT.solveAlgorithmicStockTraderI, null, _, this);\\r\\n                break;\\r\\n            case \\\"Algorithmic Stock Trader II\\\":\\r\\n                this.solve = _.bind(CCT.solveAlgorithmicStockTraderII, null, _, this);\\r\\n                break;\\r\\n            case \\\"Algorithmic Stock Trader III\\\":\\r\\n                this.solve = _.bind(CCT.solveAlgorithmicStockTraderIII, null, _, this);\\r\\n                break;\\r\\n            case \\\"Algorithmic Stock Trader IV\\\":\\r\\n                this.solve = _.bind(CCT.solveAlgorithmicStockTraderIV, null, _, this);\\r\\n                break;\\r\\n            case \\\"Minimum Path Sum in a Triangle\\\":\\r\\n                this.solve = _.bind(CCT.solveMinimumPathSuminaTriangle, null, _, this);\\r\\n                break;\\r\\n            case \\\"Unique Paths in a Grid I\\\":\\r\\n                this.solve = _.bind(CCT.solveUniquePathsinaGridI, null, _, this);\\r\\n                break;\\r\\n            case \\\"Unique Paths in a Grid II\\\":\\r\\n                this.solve = _.bind(CCT.solveUniquePathsinaGridII, null, _, this);\\r\\n                break;\\r\\n            case \\\"Sanitize Parentheses in Expression\\\":\\r\\n                this.solve = _.bind(CCT.solveSanitizeParenthesesinExpression, null, _, this);\\r\\n                break;\\r\\n            case \\\"Find All Valid Math Expressions\\\":\\r\\n                this.solve = _.bind(CCT.solveFindAllValidMathExpressions, null, _, this);\\r\\n                break;\\r\\n        }\\r\\n        //this.print(ns);\\r\\n    }\\r\\n    print(ns) {\\r\\n        ns.tprintf(\\\"%s %s:\\\", this.host, this.name);\\r\\n        ns.tprintf(\\\"  %s\\\", this.type);\\r\\n        ns.tprintf(\\\"  %s\\\", this.desc);\\r\\n        ns.tprintf(\\\"  %s\\\", this.data);\\r\\n    }\\r\\n    static solveTotalWaystoSum(ns, cct) {\\r\\n        const ways = [1];\\r\\n        ways.length = cct.data + 1;\\r\\n        ways.fill(0, 1);\\r\\n        for (let i = 1; i < cct.data; ++i) {\\r\\n            for (let j = i; j <= cct.data; ++j) {\\r\\n                ways[j] += ways[j - i];\\r\\n            }\\r\\n        }\\r\\n        answerCCT(ns, cct, ways[cct.data]);\\r\\n    }\\r\\n    static solveSubarraywithMaximumSum(ns, cct) {\\r\\n        const nums = cct.data.slice();\\r\\n        for (let i = 1; i < nums.length; i++) {\\r\\n            nums[i] = Math.max(nums[i], nums[i] + nums[i - 1]);\\r\\n        }\\r\\n        answerCCT(ns, cct, Math.max(...nums));\\r\\n    }\\r\\n    static solveSpiralizeMatrix(ns, cct) {\\r\\n        const spiral = [];\\r\\n        const m = cct.data.length;\\r\\n        const n = cct.data[0].length;\\r\\n        let u = 0;\\r\\n        let d = m - 1;\\r\\n        let l = 0;\\r\\n        let r = n - 1;\\r\\n        let k = 0;\\r\\n        while (true) {\\r\\n            // Up\\r\\n            for (let col = l; col <= r; col++) {\\r\\n                spiral[k] = cct.data[u][col];\\r\\n                ++k;\\r\\n            }\\r\\n            if (++u > d) {\\r\\n                break;\\r\\n            }\\r\\n            // Right\\r\\n            for (let row = u; row <= d; row++) {\\r\\n                spiral[k] = cct.data[row][r];\\r\\n                ++k;\\r\\n            }\\r\\n            if (--r < l) {\\r\\n                break;\\r\\n            }\\r\\n            // Down\\r\\n            for (let col = r; col >= l; col--) {\\r\\n                spiral[k] = cct.data[d][col];\\r\\n                ++k;\\r\\n            }\\r\\n            if (--d < u) {\\r\\n                break;\\r\\n            }\\r\\n            // Left\\r\\n            for (let row = d; row >= u; row--) {\\r\\n                spiral[k] = cct.data[row][l];\\r\\n                ++k;\\r\\n            }\\r\\n            if (++l > r) {\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n        answerCCT(ns, cct, spiral);\\r\\n    }\\r\\n    static solveArrayJumpingGame(ns, cct) {\\r\\n        const n = cct.data.length;\\r\\n        let i = 0;\\r\\n        for (let reach = 0; i < n && i <= reach; ++i) {\\r\\n            reach = Math.max(i + cct.data[i], reach);\\r\\n        }\\r\\n        answerCCT(ns, cct, i === n ? 1 : 0);\\r\\n    }\\r\\n    static solveMergeOverlappingIntervals(ns, cct) {\\r\\n        function convert2DArrayToString(arr) {\\r\\n            const components = [];\\r\\n            arr.forEach((e) => {\\r\\n                let s = e.toString();\\r\\n                s = [\\\"[\\\", s, \\\"]\\\"].join(\\\"\\\");\\r\\n                components.push(s);\\r\\n            });\\r\\n            return components.join(\\\",\\\").replace(/\\\\s/g, \\\"\\\");\\r\\n        }\\r\\n        const intervals = cct.data.slice();\\r\\n        intervals.sort((a, b) => {\\r\\n            return a[0] - b[0];\\r\\n        });\\r\\n        const result = [];\\r\\n        let start = intervals[0][0];\\r\\n        let end = intervals[0][1];\\r\\n        for (const interval of intervals) {\\r\\n            if (interval[0] <= end) {\\r\\n                end = Math.max(end, interval[1]);\\r\\n            }\\r\\n            else {\\r\\n                result.push([start, end]);\\r\\n                start = interval[0];\\r\\n                end = interval[1];\\r\\n            }\\r\\n        }\\r\\n        result.push([start, end]);\\r\\n        answerCCT(ns, cct, [convert2DArrayToString(result)]);\\r\\n    }\\r\\n    static solveGenerateIPAddresses(ns, cct) {\\r\\n        function validate(str) {\\r\\n            if (str === \\\"0\\\")\\r\\n                return true;\\r\\n            if (str.length > 1 && str[0] === \\\"0\\\")\\r\\n                return false;\\r\\n            if (str.length > 3)\\r\\n                return false;\\r\\n            return parseInt(str) < 255;\\r\\n        }\\r\\n        const results = [];\\r\\n        for (let i = 1; i <= 3; i++) {\\r\\n            if (cct.data.length - i > 9)\\r\\n                continue;\\r\\n            const a = cct.data.substr(0, i);\\r\\n            if (!validate(a))\\r\\n                continue;\\r\\n            for (let j = 1; j <= 3; j++) {\\r\\n                if (cct.data.length - (i + j) > 6)\\r\\n                    continue;\\r\\n                const b = cct.data.substr(i, j);\\r\\n                if (!validate(b))\\r\\n                    continue;\\r\\n                for (let k = 1; k <= 3; k++) {\\r\\n                    if (cct.data.length - (i + j + k) > 3)\\r\\n                        continue;\\r\\n                    const c = cct.data.substr(i + j, k);\\r\\n                    const d = cct.data.substr(i + j + k);\\r\\n                    if (validate(c) && validate(d)) {\\r\\n                        results.push(a + \\\".\\\" + b + \\\".\\\" + c + \\\".\\\" + d);\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        answerCCT(ns, cct, results);\\r\\n    }\\r\\n    static solveAlgorithmicStockTraderI(ns, cct) {\\r\\n        let maxCur = 0;\\r\\n        let maxSoFar = 0;\\r\\n        for (let i = 1; i < cct.data.length; ++i) {\\r\\n            maxCur = Math.max(0, (maxCur += cct.data[i] - cct.data[i - 1]));\\r\\n            maxSoFar = Math.max(maxCur, maxSoFar);\\r\\n        }\\r\\n        answerCCT(ns, cct, maxSoFar);\\r\\n    }\\r\\n    static solveAlgorithmicStockTraderII(ns, cct) {\\r\\n        let profit = 0;\\r\\n        for (let p = 1; p < cct.data.length; ++p) {\\r\\n            profit += Math.max(cct.data[p] - cct.data[p - 1], 0);\\r\\n        }\\r\\n        answerCCT(ns, cct, profit);\\r\\n    }\\r\\n    static solveAlgorithmicStockTraderIII(ns, cct) {\\r\\n        let hold1 = Number.MIN_SAFE_INTEGER;\\r\\n        let hold2 = Number.MIN_SAFE_INTEGER;\\r\\n        let release1 = 0;\\r\\n        let release2 = 0;\\r\\n        for (const price of cct.data) {\\r\\n            release2 = Math.max(release2, hold2 + price);\\r\\n            hold2 = Math.max(hold2, release1 - price);\\r\\n            release1 = Math.max(release1, hold1 + price);\\r\\n            hold1 = Math.max(hold1, price * -1);\\r\\n        }\\r\\n        answerCCT(ns, cct, release2);\\r\\n    }\\r\\n    static solveAlgorithmicStockTraderIV(ns, cct) {\\r\\n        const k = cct.data[0];\\r\\n        const prices = cct.data[1];\\r\\n        const len = prices.length;\\r\\n        if (len < 2) {\\r\\n            answerCCT(ns, cct, 0);\\r\\n        }\\r\\n        if (k > len / 2) {\\r\\n            let res = 0;\\r\\n            for (let i = 1; i < len; ++i) {\\r\\n                res += Math.max(prices[i] - prices[i - 1], 0);\\r\\n            }\\r\\n            answerCCT(ns, cct, res);\\r\\n        }\\r\\n        const hold = [];\\r\\n        const rele = [];\\r\\n        hold.length = k + 1;\\r\\n        rele.length = k + 1;\\r\\n        for (let i = 0; i <= k; ++i) {\\r\\n            hold[i] = Number.MIN_SAFE_INTEGER;\\r\\n            rele[i] = 0;\\r\\n        }\\r\\n        let cur;\\r\\n        for (let i = 0; i < len; ++i) {\\r\\n            cur = prices[i];\\r\\n            for (let j = k; j > 0; --j) {\\r\\n                rele[j] = Math.max(rele[j], hold[j] + cur);\\r\\n                hold[j] = Math.max(hold[j], rele[j - 1] - cur);\\r\\n            }\\r\\n        }\\r\\n        answerCCT(ns, cct, rele[k]);\\r\\n    }\\r\\n    static solveMinimumPathSuminaTriangle(ns, cct) {\\r\\n        const n = cct.data.length;\\r\\n        const dp = cct.data[n - 1].slice();\\r\\n        for (let i = n - 2; i > -1; --i) {\\r\\n            for (let j = 0; j < cct.data[i].length; ++j) {\\r\\n                dp[j] = Math.min(dp[j], dp[j + 1]) + cct.data[i][j];\\r\\n            }\\r\\n        }\\r\\n        answerCCT(ns, cct, dp[0]);\\r\\n    }\\r\\n    static solveUniquePathsinaGridI(ns, cct) {\\r\\n        const n = cct.data[0]; // Number of rows\\r\\n        const m = cct.data[1]; // Number of columns\\r\\n        const currentRow = [];\\r\\n        currentRow.length = n;\\r\\n        for (let i = 0; i < n; i++) {\\r\\n            currentRow[i] = 1;\\r\\n        }\\r\\n        for (let row = 1; row < m; row++) {\\r\\n            for (let i = 1; i < n; i++) {\\r\\n                currentRow[i] += currentRow[i - 1];\\r\\n            }\\r\\n        }\\r\\n        answerCCT(ns, cct, currentRow[n - 1]);\\r\\n    }\\r\\n    static solveUniquePathsinaGridII(ns, cct) {\\r\\n        const obstacleGrid = [];\\r\\n        obstacleGrid.length = cct.data.length;\\r\\n        for (let i = 0; i < obstacleGrid.length; ++i) {\\r\\n            obstacleGrid[i] = cct.data[i].slice();\\r\\n        }\\r\\n        for (let i = 0; i < obstacleGrid.length; i++) {\\r\\n            for (let j = 0; j < obstacleGrid[0].length; j++) {\\r\\n                if (obstacleGrid[i][j] == 1) {\\r\\n                    obstacleGrid[i][j] = 0;\\r\\n                }\\r\\n                else if (i == 0 && j == 0) {\\r\\n                    obstacleGrid[0][0] = 1;\\r\\n                }\\r\\n                else {\\r\\n                    obstacleGrid[i][j] = (i > 0 ? obstacleGrid[i - 1][j] : 0) + (j > 0 ? obstacleGrid[i][j - 1] : 0);\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        answerCCT(ns, cct, obstacleGrid[obstacleGrid.length - 1][obstacleGrid[0].length - 1]);\\r\\n    }\\r\\n    static solveSanitizeParenthesesinExpression(ns, cct) {\\r\\n        let left = 0;\\r\\n        let right = 0;\\r\\n        const res = [];\\r\\n        for (let i = 0; i < cct.data.length; ++i) {\\r\\n            if (cct.data[i] === \\\"(\\\") {\\r\\n                ++left;\\r\\n            }\\r\\n            else if (cct.data[i] === \\\")\\\") {\\r\\n                left > 0 ? --left : ++right;\\r\\n            }\\r\\n        }\\r\\n        function dfs(pair, index, left, right, s, solution, res) {\\r\\n            if (s.length === index) {\\r\\n                if (left === 0 && right === 0 && pair === 0) {\\r\\n                    for (let i = 0; i < res.length; i++) {\\r\\n                        if (res[i] === solution) {\\r\\n                            return;\\r\\n                        }\\r\\n                    }\\r\\n                    res.push(solution);\\r\\n                }\\r\\n                return;\\r\\n            }\\r\\n            if (s[index] === \\\"(\\\") {\\r\\n                if (left > 0) {\\r\\n                    dfs(pair, index + 1, left - 1, right, s, solution, res);\\r\\n                }\\r\\n                dfs(pair + 1, index + 1, left, right, s, solution + s[index], res);\\r\\n            }\\r\\n            else if (s[index] === \\\")\\\") {\\r\\n                if (right > 0)\\r\\n                    dfs(pair, index + 1, left, right - 1, s, solution, res);\\r\\n                if (pair > 0)\\r\\n                    dfs(pair - 1, index + 1, left, right, s, solution + s[index], res);\\r\\n            }\\r\\n            else {\\r\\n                dfs(pair, index + 1, left, right, s, solution + s[index], res);\\r\\n            }\\r\\n        }\\r\\n        dfs(0, 0, left, right, cct.data, \\\"\\\", res);\\r\\n        answerCCT(ns, cct, res);\\r\\n    }\\r\\n    static solveFindAllValidMathExpressions(ns, cct) {\\r\\n        const num = cct.data[0];\\r\\n        const target = cct.data[1];\\r\\n        function helper(res, path, num, target, pos, evaluated, multed) {\\r\\n            if (pos === num.length) {\\r\\n                if (target === evaluated) {\\r\\n                    res.push(path);\\r\\n                }\\r\\n                return;\\r\\n            }\\r\\n            for (let i = pos; i < num.length; ++i) {\\r\\n                if (i != pos && num[pos] == \\\"0\\\") {\\r\\n                    break;\\r\\n                }\\r\\n                const cur = parseInt(num.substring(pos, i + 1));\\r\\n                if (pos === 0) {\\r\\n                    helper(res, path + cur, num, target, i + 1, cur, cur);\\r\\n                }\\r\\n                else {\\r\\n                    helper(res, path + \\\"+\\\" + cur, num, target, i + 1, evaluated + cur, cur);\\r\\n                    helper(res, path + \\\"-\\\" + cur, num, target, i + 1, evaluated - cur, -cur);\\r\\n                    helper(res, path + \\\"*\\\" + cur, num, target, i + 1, evaluated - multed + multed * cur, multed * cur);\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        const result = [];\\r\\n        helper(result, \\\"\\\", num, target, 0, 0, 0);\\r\\n        answerCCT(ns, cct, result);\\r\\n    }\\r\\n    static solveFindLargestPrimeFactor(ns, cct) {\\r\\n        let fac = 2;\\r\\n        let n = cct.data;\\r\\n        while (n > (fac - 1) * (fac - 1)) {\\r\\n            while (n % fac === 0) {\\r\\n                n = Math.round(n / fac);\\r\\n            }\\r\\n            ++fac;\\r\\n        }\\r\\n        answerCCT(ns, cct, n === 1 ? fac - 1 : n);\\r\\n    }\\r\\n}\\r\\nexport async function main(ns) {\\r\\n    const hosts = allHosts(ns);\\r\\n    while (true) {\\r\\n        const ccts = [];\\r\\n        for (const hostname of hosts) {\\r\\n            const ls = ns.ls(hostname).filter((filename) => filename.indexOf(\\\".cct\\\") !== -1);\\r\\n            if (ls.length === 0)\\r\\n                continue;\\r\\n            ccts.push(new CCT(ns, hostname, ls[0]));\\r\\n        }\\r\\n        for (const cct of ccts) {\\r\\n            cct.solve(ns);\\r\\n        }\\r\\n        await ns.sleep(60 * 1000);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2N0LmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsiY2N0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFFcEMsU0FBUyxTQUFTLENBQUMsRUFBTSxFQUFFLEdBQVEsRUFBRSxNQUF5QjtJQUMxRCxJQUFJO1FBQ0EsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLGNBQWMsQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFLEdBQUcsQ0FBQyxJQUFJLEVBQUUsR0FBRyxDQUFDLElBQUksRUFBRSxFQUFFLFlBQVksRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO1FBRTdGLElBQUksTUFBTSxLQUFLLEVBQUUsRUFBRTtZQUNmLEVBQUUsQ0FBQyxPQUFPLENBQUMseUNBQXlDLEVBQUUsR0FBRyxDQUFDLElBQUksRUFBRSxHQUFHLENBQUMsSUFBSSxFQUFFLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUNwRixFQUFFLENBQUMsT0FBTyxDQUFDLHdCQUF3QixFQUFFLEdBQUcsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLEVBQUUsTUFBTSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7U0FDaEY7YUFBTTtZQUNILEVBQUUsQ0FBQyxPQUFPLENBQUMsNkJBQTZCLEVBQUUsR0FBRyxDQUFDLElBQUksRUFBRSxHQUFHLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1NBQ3pFO0tBQ0o7SUFBQyxPQUFPLENBQUMsRUFBRTtRQUNSLEVBQUUsQ0FBQyxPQUFPLENBQUMsc0JBQXNCLEVBQUUsQ0FBQyxDQUFDLENBQUM7S0FDekM7QUFDTCxDQUFDO0FBRUQsTUFBTSxHQUFHO0lBSUwsSUFBSSxDQUFTO0lBQ2IsSUFBSSxDQUFTO0lBQ2IsSUFBSSxDQUFTO0lBQ2IsSUFBSSxDQUFTO0lBRWIsOERBQThEO0lBQzlELElBQUksQ0FBTTtJQUNWLDhE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Q0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUM3QixFQUFFLENBQUMsQ0FBQzthQUNQO1lBQ0QsSUFBSSxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUU7Z0JBQ1QsTUFBTTthQUNUO1lBRUQsT0FBTztZQUNQLEtBQUssSUFBSSxHQUFHLEdBQUcsQ0FBQyxFQUFFLEdBQUcsSUFBSSxDQUFDLEVBQUUsR0FBRyxFQUFFLEVBQUU7Z0JBQy9CLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO2dCQUM3QixFQUFFLENBQUMsQ0FBQzthQUNQO1lBQ0QsSUFBSSxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUU7Z0JBQ1QsTUFBTTthQUNUO1lBRUQsT0FBTztZQUNQLEtBQUssSUFBSSxHQUFHLEdBQUcsQ0FBQyxFQUFFLEdBQUcsSUFBSSxDQUFDLEVBQUUsR0FBRyxFQUFFLEVBQUU7Z0JBQy9CLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUM3QixFQUFFLENBQUMsQ0FBQzthQUNQO1lBQ0QsSUFBSSxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUU7Z0JBQ1QsTUFBTTthQUNUO1NBQ0o7UUFFRCxTQUFTLENBQUMsRUFBRSxFQUFFLEdBQUcsRUFBRSxNQUFNLENBQUMsQ0FBQztJQUMvQixDQUFDO0lBRUQsTUFBTSxDQUFDLHFCQUFxQixDQUFDLEVBQU0sRUFBRSxHQUFRO1FBQ3pDLE1BQU0sQ0FBQyxHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDO1FBQzFCLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNWLEtBQUssSUFBSSxLQUFLLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLEtBQUssRUFBRSxFQUFFLENB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\",\"filename\":\"cct.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/util.js\",\"url\":\"blob:file:///208b7201-b7d3-45e9-bd70-89f55c3a8258\",\"moduleSequenceNumber\":444},{\"filename\":\"cct.js\",\"url\":\"blob:file:///649adce8-69ce-4bbe-8fb4-5fb1521b1a61\",\"moduleSequenceNumber\":877}],\"dependents\":[],\"ramUsage\":27,\"server\":\"home\",\"moduleSequenceNumber\":4077,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"codingcontract.getContractType\",\"cost\":5},{\"type\":\"fn\",\"name\":\"codingcontract.getDescription\",\"cost\":5},{\"type\":\"fn\",\"name\":\"codingcontract.getData\",\"cost\":5},{\"type\":\"fn\",\"name\":\"codingcontract.attempt\",\"cost\":10},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { allHosts, canExecuteOnServer } from \\\"/lib/util\\\";\\r\\nconst CHARGEJS = \\\"/lib/stanek/charge.js\\\";\\r\\nexport async function main(ns) {\\r\\n    const fragments = ns.stanek.activeFragments().filter((x) => x.id < 100);\\r\\n    const allHostnames = allHosts(ns);\\r\\n    const executableHosts = allHostnames\\r\\n        .filter(canExecuteOnServer.bind(null, ns))\\r\\n        .filter((x) => x.indexOf(\\\"hacknet-node\\\") === -1);\\r\\n    const availableRam = executableHosts.reduce((input, hostname) => input + (ns.getServerMaxRam(hostname) - ns.getServerUsedRam(hostname)), 0);\\r\\n    for (const hostname of executableHosts) {\\r\\n        if (hostname === \\\"home\\\")\\r\\n            continue;\\r\\n        await ns.scp(CHARGEJS, \\\"home\\\", hostname);\\r\\n    }\\r\\n    ns.tprintf(\\\"available ram: %d\\\", availableRam);\\r\\n    const fragSplit = availableRam / fragments.length;\\r\\n    const fragThreads = Math.floor(fragSplit / 2);\\r\\n    ns.tprintf(\\\"Frags %d\\\", fragments.length);\\r\\n    ns.tprintf(\\\"Split %f %d\\\", fragSplit, fragThreads);\\r\\n    for (const fragment of fragments) {\\r\\n        let threadsRemaining = fragThreads;\\r\\n        for (const hostname of executableHosts) {\\r\\n            const availableThreads = Math.floor((ns.getServerMaxRam(hostname) - ns.getServerUsedRam(hostname)) / 2);\\r\\n            const usingThreads = Math.min(threadsRemaining, availableThreads);\\r\\n            if (usingThreads <= 0)\\r\\n                continue;\\r\\n            ns.exec(CHARGEJS, hostname, usingThreads, fragment.x, fragment.y);\\r\\n            threadsRemaining -= usingThreads;\\r\\n            if (threadsRemaining <= 0)\\r\\n                break;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hhcmdlLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsiY2hhcmdlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxRQUFRLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFFekQsTUFBTSxRQUFRLEdBQUcsdUJBQXVCLENBQUM7QUFFekMsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLFNBQVMsR0FBRyxFQUFFLENBQUMsTUFBTSxDQUFDLGVBQWUsRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsR0FBRyxHQUFHLENBQUMsQ0FBQztJQUV4RSxNQUFNLFlBQVksR0FBRyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDbEMsTUFBTSxlQUFlLEdBQUcsWUFBWTtTQUMvQixNQUFNLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsQ0FBQztTQUN6QyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsY0FBYyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUVyRCxNQUFNLFlBQVksR0FBRyxlQUFlLENBQUMsTUFBTSxDQUN2QyxDQUFDLEtBQUssRUFBRSxRQUFRLEVBQUUsRUFBRSxDQUFDLEtBQUssR0FBRyxDQUFDLEVBQUUsQ0FBQyxlQUFlLENBQUMsUUFBUSxDQUFDLEdBQUcsRUFBRSxDQUFDLGdCQUFnQixDQUFDLFFBQVEsQ0FBQyxDQUFDLEVBQzNGLENBQUMsQ0FDSixDQUFDO0lBRUYsS0FBSyxNQUFNLFFBQVEsSUFBSSxlQUFlLEVBQUU7UUFDcEMsSUFBSSxRQUFRLEtBQUssTUFBTTtZQUFFLFNBQVM7UUFDbEMsTUFBTSxFQUFFLENBQUMsR0FBRyxDQUFDLFFBQVEsRUFBRSxNQUFNLEVBQUUsUUFBUSxDQUFDLENBQUM7S0FDNUM7SUFFRCxFQUFFLENBQUMsT0FBTyxDQUFDLG1CQUFtQixFQUFFLFlBQVksQ0FBQyxDQUFDO0lBQzlDLE1BQU0sU0FBUyxHQUFHLFlBQVksR0FBRyxTQUFTLENBQUMsTUFBTSxDQUFDO0lBQ2xELE1BQU0sV0FBVyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsU0FBUyxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBRTlDLEVBQUUsQ0FBQyxPQUFPLENBQUMsVUFBVSxFQUFFLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUN6QyxFQUFFLENBQUMsT0FBTyxDQUFDLGFBQWEsRUFBRSxTQUFTLEVBQUUsV0FBVyxDQUFDLENBQUM7SUFFbEQsS0FBSyxNQUFNLFFBQVEsSUFBSSxTQUFTLEVBQUU7UUFDOUIsSUFBSSxnQkFBZ0IsR0FBRyxXQUFXLENBQUM7UUFDbkMsS0FBSyxNQUFNLFFBQVEsSUFBSSxlQUFlLEVBQUU7WUFDcEMsTUFBTSxnQkFBZ0IsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLGVBQWUsQ0FBQyxRQUFRLENBQUMsR0FBRyxFQUFFLENBQUMsZ0JBQWdCLENBQUMsUUFBUSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztZQUN4RyxNQUFNLFlBQVksR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLGdCQUFnQixFQUFFLGdCQUFnQixDQUFDLENBQUM7WUFFbEUsSUFBSSxZQUFZLElBQUksQ0FBQztnQkFBRSxTQUFTO1lBRWhDLEVBQUUsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLFFBQVEsRUFBRSxZQUFZLEVBQUUsUUFBUSxDQUFDLENBQUMsRUFBRSxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFFbEUsZ0JBQWdCLElBQUksWUFBWSxDQUFDO1lBRWpDLElBQUksZ0JBQWdCLElBQUksQ0FBQztnQkFDckIsTUFBTTtTQUNiO0tBQ0o7QUFDTCxDQUFDIn0=\",\"filename\":\"charge.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/util.js\",\"url\":\"blob:file:///e4beedc1-8249-4399-be11-a590a6dea000\",\"moduleSequenceNumber\":2011},{\"filename\":\"charge.js\",\"url\":\"blob:file:///0baa7bea-c6b9-4317-8339-859aa049bbb7\",\"moduleSequenceNumber\":2047}],\"dependents\":[],\"ramUsage\":8.85,\"server\":\"home\",\"moduleSequenceNumber\":4078,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.activeFragments\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"let lastEl;\\r\\nconst roots = [];\\r\\nfunction stFormat(ns, ms, showms = true, showfull = false) {\\r\\n    if (ms <= 0)\\r\\n        return \\\"--\\\";\\r\\n    let timeLeft = ms;\\r\\n    const hours = Math.floor(ms / (1000 * 60 * 60));\\r\\n    timeLeft -= hours * (1000 * 60 * 60);\\r\\n    const minutes = Math.floor(timeLeft / (1000 * 60));\\r\\n    timeLeft -= minutes * (1000 * 60);\\r\\n    const seconds = Math.floor(timeLeft / 1000);\\r\\n    timeLeft -= seconds * 1000;\\r\\n    const milliseconds = timeLeft;\\r\\n    if (showms) {\\r\\n        if (hours > 0 || showfull)\\r\\n            return ns.sprintf(\\\"%dh%02dm%02d.%03ds\\\", hours, minutes, seconds, milliseconds);\\r\\n        if (minutes > 0)\\r\\n            return ns.sprintf(\\\"%dm%02d.%03ds\\\", minutes, seconds, milliseconds);\\r\\n        return ns.sprintf(\\\"%d.%03ds\\\", seconds, milliseconds);\\r\\n    }\\r\\n    else {\\r\\n        if (hours > 0 || showfull)\\r\\n            return ns.sprintf(\\\"%dh%02dm%02ds\\\", hours, minutes, seconds);\\r\\n        if (minutes > 0)\\r\\n            return ns.sprintf(\\\"%dm%02ds\\\", minutes, seconds);\\r\\n        return ns.sprintf(\\\"%ds\\\", seconds);\\r\\n    }\\r\\n}\\r\\nfunction insertAfter(newNode, existingNode) {\\r\\n    if (!existingNode.parentNode)\\r\\n        throw \\\"insertAfter init failed\\\";\\r\\n    if (existingNode.nextSibling)\\r\\n        return existingNode.parentNode.insertBefore(newNode, existingNode.nextSibling);\\r\\n    else\\r\\n        return existingNode.parentNode.appendChild(newNode);\\r\\n}\\r\\nfunction addBottomLine() {\\r\\n    const self = globalThis;\\r\\n    const doc = self[\\\"document\\\"];\\r\\n    const hook0 = doc?.getElementById(\\\"overview-extra-hook-0\\\");\\r\\n    const hookRootEl = hook0?.parentElement?.parentElement;\\r\\n    const newRootEl = hookRootEl?.cloneNode(true);\\r\\n    if (!hookRootEl || !newRootEl)\\r\\n        throw \\\"addBottomLine init failed\\\";\\r\\n    const child1 = newRootEl?.children[0]?.children[0];\\r\\n    if (child1) {\\r\\n        child1.innerText = \\\"\\\";\\r\\n    }\\r\\n    const child2 = newRootEl?.children[0]?.children[0];\\r\\n    if (child2) {\\r\\n        child2.innerText = \\\"\\\";\\r\\n        child2.removeAttribute(\\\"id\\\");\\r\\n    }\\r\\n    if (lastEl === undefined)\\r\\n        lastEl = hookRootEl;\\r\\n    try {\\r\\n        lastEl = insertAfter(newRootEl, lastEl);\\r\\n    }\\r\\n    catch (e) {\\r\\n        throw `${e}; addBottomLine init failed`;\\r\\n    }\\r\\n    roots.push(newRootEl);\\r\\n    return newRootEl;\\r\\n}\\r\\nfunction addSingle() {\\r\\n    const self = globalThis;\\r\\n    const doc = self[\\\"document\\\"];\\r\\n    const hook0 = doc?.getElementById(\\\"overview-extra-hook-0\\\");\\r\\n    const hookRootEl = hook0?.parentElement?.parentElement;\\r\\n    const overviewEl = hookRootEl?.parentElement;\\r\\n    const hackRootEl = overviewEl?.children[2];\\r\\n    const newRootEl = hackRootEl?.cloneNode(true);\\r\\n    const newEl = newRootEl?.children[0]?.firstChild;\\r\\n    if (!hookRootEl || !newRootEl || !newEl)\\r\\n        throw \\\"addSingle init failed\\\";\\r\\n    if (newRootEl?.childNodes[1])\\r\\n        newRootEl.removeChild(newRootEl.childNodes[1]);\\r\\n    newEl.removeAttribute(\\\"id\\\");\\r\\n    newEl.innerText = \\\"\\\";\\r\\n    if (lastEl === undefined)\\r\\n        lastEl = hookRootEl;\\r\\n    try {\\r\\n        lastEl = insertAfter(newRootEl, lastEl);\\r\\n    }\\r\\n    catch (e) {\\r\\n        throw `${e}; addSingle init failed`;\\r\\n    }\\r\\n    roots.push(newRootEl);\\r\\n    return newEl;\\r\\n}\\r\\nfunction addDouble() {\\r\\n    const self = globalThis;\\r\\n    const doc = self[\\\"document\\\"];\\r\\n    const hook0 = doc.getElementById(\\\"overview-extra-hook-0\\\");\\r\\n    const hookRootEl = hook0?.parentElement?.parentElement;\\r\\n    const overviewEl = hookRootEl?.parentElement;\\r\\n    const hackRootEl = overviewEl?.children[2];\\r\\n    const newRootEl = hackRootEl?.cloneNode(true);\\r\\n    const newEl1 = newRootEl?.children[0]?.children[0];\\r\\n    const newEl2 = newRootEl?.children[1]?.children[0];\\r\\n    // check if anything failed\\r\\n    if (!hookRootEl || !newRootEl || !newEl1 || !newEl2)\\r\\n        throw \\\"addDouble init failed\\\";\\r\\n    newEl1.removeAttribute(\\\"id\\\");\\r\\n    newEl1.innerText = \\\"\\\";\\r\\n    newEl2.removeAttribute(\\\"id\\\");\\r\\n    newEl2.innerText = \\\"\\\";\\r\\n    if (lastEl === undefined)\\r\\n        lastEl = hookRootEl;\\r\\n    try {\\r\\n        lastEl = insertAfter(newRootEl, lastEl);\\r\\n    }\\r\\n    catch (e) {\\r\\n        throw `${e}; addDouble init failed`;\\r\\n    }\\r\\n    roots.push(newRootEl);\\r\\n    return [newEl1, newEl2];\\r\\n}\\r\\nfunction addProgress() {\\r\\n    const self = globalThis;\\r\\n    const doc = self[\\\"document\\\"];\\r\\n    const hook0 = doc.getElementById(\\\"overview-extra-hook-0\\\");\\r\\n    const hookRootEl = hook0?.parentElement?.parentElement;\\r\\n    const overviewEl = hookRootEl?.parentElement;\\r\\n    const hackProgressEl = overviewEl?.children[3];\\r\\n    const newRootEl = hackProgressEl?.cloneNode(true);\\r\\n    const newSub1 = newRootEl?.children[0]?.children[0];\\r\\n    const newSub2 = newRootEl?.children[0]?.children[0]?.children[0];\\r\\n    // check if anything failed\\r\\n    if (!newRootEl || !newSub1 || !newSub2)\\r\\n        throw \\\"addProgress init failed\\\";\\r\\n    if (lastEl === undefined)\\r\\n        lastEl = newRootEl;\\r\\n    try {\\r\\n        lastEl = insertAfter(newRootEl, lastEl);\\r\\n    }\\r\\n    catch (e) {\\r\\n        throw `${e}; addProgress init failed`;\\r\\n    }\\r\\n    roots.push(newRootEl);\\r\\n    return [newSub1, newSub2];\\r\\n}\\r\\nexport async function main(ns) {\\r\\n    const args = ns.flags([[\\\"help\\\", false]]);\\r\\n    if (args.help) {\\r\\n        ns.tprint(\\\"This script will enhance your HUD (Heads up Display) with custom statistics.\\\");\\r\\n        ns.tprint(`Usage: run ${ns.getScriptName()}`);\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprint(`> run ${ns.getScriptName()}`);\\r\\n        return;\\r\\n    }\\r\\n    ns.atExit(function () {\\r\\n        for (const root of roots) {\\r\\n            root.parentNode?.removeChild(root);\\r\\n        }\\r\\n    });\\r\\n    try {\\r\\n        const [clockEl, karmaEl] = addDouble();\\r\\n        const targetEl = addSingle();\\r\\n        const incomeEl = addSingle();\\r\\n        const [stateEl, countdownEl] = addDouble();\\r\\n        const [hackProgressEl1, hackProgressEl2] = addProgress();\\r\\n        addBottomLine();\\r\\n        const hacknetProdEl = addSingle();\\r\\n        const hacknetTargetEl1 = addSingle();\\r\\n        const hacknetTargetEl2 = addSingle();\\r\\n        addBottomLine();\\r\\n        karmaEl.classList.toggle(\\\"makeStyles-hack-17\\\", false);\\r\\n        karmaEl.classList.add(\\\"makeStyles-hp-15\\\");\\r\\n        const port1 = ns.getPortHandle(1);\\r\\n        const port2 = ns.getPortHandle(2);\\r\\n        let startTime = 0;\\r\\n        let endTime = 1000;\\r\\n        let fullTime = 1000;\\r\\n        while (true) {\\r\\n            if (!port1.empty()) {\\r\\n                const data = JSON.parse(port1.peek().toString());\\r\\n                startTime = new Date(data[0]).getTime();\\r\\n                endTime = new Date(startTime + data[1]).getTime();\\r\\n                fullTime = endTime - startTime;\\r\\n                const date = new Date();\\r\\n                const curTime = date.getTime();\\r\\n                // Update Clock\\r\\n                // let ms = ns.sprintf(\\\"%03d\\\", date.getUTCMilliseconds());\\r\\n                // clockEl.innerText = date.toLocaleTimeString(\\\"it-IT\\\") + \\\".\\\" + ms;\\r\\n                clockEl.innerText = date.toLocaleTimeString(\\\"it-IT\\\");\\r\\n                // Update Karma\\r\\n                karmaEl.innerText = `k: ${ns.heart.break().toFixed(0)}`;\\r\\n                // Update Target & Income\\r\\n                targetEl.innerText = data[2];\\r\\n                incomeEl.innerText = `${ns.nFormat(data[3], \\\"($0.0a)\\\")}/s`;\\r\\n                // Update State & Countdown\\r\\n                stateEl.innerText = data[4];\\r\\n                countdownEl.innerText = stFormat(ns, endTime - curTime, false);\\r\\n                // Update Progress\\r\\n                const tvalue = curTime - startTime;\\r\\n                const nvalue = (tvalue / fullTime) * 100;\\r\\n                let transform = 100 - nvalue;\\r\\n                let wholeValue = Math.floor(nvalue);\\r\\n                if (startTime === 0 || wholeValue > 100) {\\r\\n                    port1.clear();\\r\\n                    transform = 100;\\r\\n                    wholeValue = 0;\\r\\n                }\\r\\n                hackProgressEl1.setAttribute(\\\"aria-valuenow\\\", `${wholeValue}`);\\r\\n                hackProgressEl2.setAttribute(\\\"style\\\", `transform: translateX(${-transform.toFixed(3)}%);`);\\r\\n            }\\r\\n            else {\\r\\n                const date = new Date();\\r\\n                clockEl.innerText = date.toLocaleTimeString(\\\"it-IT\\\");\\r\\n                karmaEl.innerText = ns.heart.break().toFixed(0).toString();\\r\\n                targetEl.innerText = \\\"NO TARGET\\\";\\r\\n                incomeEl.innerText = \\\"\\\";\\r\\n                stateEl.innerText = \\\"\\\";\\r\\n                countdownEl.innerText = \\\"\\\";\\r\\n                hackProgressEl1.setAttribute(\\\"aria-valuenow\\\", \\\"0\\\");\\r\\n                hackProgressEl2.setAttribute(\\\"style\\\", \\\"transform: translateX(-100%);\\\");\\r\\n            }\\r\\n            if (!port2.empty()) {\\r\\n                const data = JSON.parse(port2.peek().toString());\\r\\n                const production = data[0];\\r\\n                const upgrade = data[1];\\r\\n                const totalUpgradeCashProduction = ((production + upgrade.upgradeProductionIncrease) / 4) * 1000000;\\r\\n                const totalUpgradePayoffTime = (upgrade.upgradeCost / totalUpgradeCashProduction) * 1000;\\r\\n                hacknetProdEl.innerText = `hacknet: ${ns.nFormat((production / 4) * 1000000, \\\"($0.0a)\\\")}/s`;\\r\\n                hacknetTargetEl1.innerText = ns.sprintf(\\\"%02d/%s %s\\\", upgrade.id, upgrade.type, stFormat(ns, totalUpgradePayoffTime, false));\\r\\n                hacknetTargetEl2.innerText = ns.sprintf(\\\"%s %.2f\\\", ns.nFormat(upgrade.upgradeCost, \\\"($0.0a)\\\"), upgrade.upgradeValue * 1000000000);\\r\\n            }\\r\\n            else {\\r\\n                hacknetProdEl.innerText = \\\"\\\";\\r\\n                hacknetTargetEl1.innerText = \\\"\\\";\\r\\n                hacknetTargetEl2.innerText = \\\"\\\";\\r\\n            }\\r\\n            await ns.sleep(1000);\\r\\n        }\\r\\n    }\\r\\n    catch (e) {\\r\\n        ns.tprintf(\\\"ERROR: %s\\\", e);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xvY2suanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJjbG9jay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFJQSxJQUFJLE1BQW1CLENBQUM7QUFDeEIsTUFBTSxLQUFLLEdBQWtCLEVBQUUsQ0FBQztBQUVoQyxTQUFTLFFBQVEsQ0FBQyxFQUFNLEVBQUUsRUFBVSxFQUFFLE1BQU0sR0FBRyxJQUFJLEVBQUUsUUFBUSxHQUFHLEtBQUs7SUFDcEUsSUFBSSxFQUFFLElBQUksQ0FBQztRQUNWLE9BQU8sSUFBSSxDQUFBO0lBRVQsSUFBSSxRQUFRLEdBQUcsRUFBRSxDQUFDO0lBQ2xCLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxHQUFHLENBQUMsSUFBSSxHQUFHLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ2hELFFBQVEsSUFBSSxLQUFLLEdBQUcsQ0FBQyxJQUFJLEdBQUcsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDO0lBQ3JDLE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxHQUFHLENBQUMsSUFBSSxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDbkQsUUFBUSxJQUFJLE9BQU8sR0FBRyxDQUFDLElBQUksR0FBRyxFQUFFLENBQUMsQ0FBQztJQUNsQyxNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsQ0FBQztJQUM1QyxRQUFRLElBQUksT0FBTyxHQUFHLElBQUksQ0FBQztJQUMzQixNQUFNLFlBQVksR0FBRyxRQUFRLENBQUM7SUFFOUIsSUFBSSxNQUFNLEVBQUU7UUFDUixJQUFJLEtBQUssR0FBRyxDQUFDLElBQUksUUFBUTtZQUFFLE9BQU8sRUFBRSxDQUFDLE9BQU8sQ0FBQyxvQkFBb0IsRUFBRSxLQUFLLEVBQUUsT0FBTyxFQUFFLE9BQU8sRUFBRSxZQUFZLENB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\",\"filename\":\"clock.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"clock.js\",\"url\":\"blob:file:///bec1affa-a4bd-47b0-acb3-25eb092af645\",\"moduleSequenceNumber\":28053}],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":4079,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { cleanLogs, llog, CITIES } from \\\"lib/util\\\";\\r\\nimport { getMaterialPrice } from \\\"/lib/corp/sale\\\";\\r\\nfunction findProp(propName) {\\r\\n    for (const div of eval(\\\"document\\\").querySelectorAll(\\\"div\\\")) {\\r\\n        const propKey = Object.keys(div)[1];\\r\\n        if (!propKey)\\r\\n            continue;\\r\\n        const props = div[propKey];\\r\\n        if (props.children?.props && props.children.props[propName])\\r\\n            return props.children.props[propName];\\r\\n        if (props.children instanceof Array)\\r\\n            for (const child of props.children)\\r\\n                if (child?.props && child.props[propName])\\r\\n                    return child.props[propName];\\r\\n    }\\r\\n}\\r\\n// 10:22:01 Offer: 252.191b 2.274m - All Warehouses, selling at MP\\r\\nfunction unassignEmployees(divisionName, cityName) {\\r\\n    const playerProp = findProp(\\\"player\\\");\\r\\n    if (playerProp?.corporation?.divisions) {\\r\\n        const division = playerProp.corporation.divisions.find((a) => a.type === divisionName);\\r\\n        if (division) {\\r\\n            const office = division.offices[cityName];\\r\\n            if (office) {\\r\\n                for (const employee of office.employees) {\\r\\n                    employee.pos = \\\"Unassigned\\\";\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\nfunction unassignAllEmployees(divisionName) {\\r\\n    const playerProp = findProp(\\\"player\\\");\\r\\n    if (playerProp?.corporation?.divisions) {\\r\\n        const division = playerProp.corporation.divisions.find((a) => a.type === divisionName);\\r\\n        if (division) {\\r\\n            for (const cityName of Object.keys(division.offices)) {\\r\\n                unassignEmployees(divisionName, cityName);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\nfunction assignEmployees(ns, divisionName, city, assignments) {\\r\\n    const playerProp = findProp(\\\"player\\\");\\r\\n    if (playerProp?.corporation?.divisions) {\\r\\n        const division = playerProp.corporation.divisions.find((a) => a.type === divisionName);\\r\\n        if (division) {\\r\\n            const office = division.offices[city];\\r\\n            if (office) {\\r\\n                for (const employee of office.employees) {\\r\\n                    employee.pos = \\\"Unassigned\\\";\\r\\n                }\\r\\n                for (const assignment of assignments) {\\r\\n                    const employeeCount = office.employees.length;\\r\\n                    const job = assignment[0];\\r\\n                    const num = Math.floor(eval((assignment[1] + \\\"\\\").replace(/ec/g, employeeCount + \\\"\\\")));\\r\\n                    office.setEmployeeToJob(job, num);\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\nfunction assignAllEmployees(ns, divisionName, assignments) {\\r\\n    for (const city of ns.corporation.getDivision(divisionName).cities) {\\r\\n        assignEmployees(ns, divisionName, city, assignments);\\r\\n    }\\r\\n}\\r\\nasync function doAgSell(ns, selloff) {\\r\\n    const playerProp = findProp(\\\"player\\\");\\r\\n    const agDivName = \\\"Agriculture\\\";\\r\\n    if (playerProp?.corporation?.divisions) {\\r\\n        const agDiv = playerProp.corporation.divisions.find((a) => a.type === agDivName);\\r\\n        if (agDiv) {\\r\\n            if (selloff) {\\r\\n                assignAllEmployees(ns, agDivName, [\\r\\n                    [\\\"Engineer\\\", 1],\\r\\n                    [\\\"Business\\\", \\\"ec-1\\\"],\\r\\n                ]);\\r\\n            }\\r\\n            else {\\r\\n                assignAllEmployees(ns, agDivName, [\\r\\n                    [\\\"Operations\\\", \\\"ec-2\\\"],\\r\\n                    [\\\"Engineer\\\", 1],\\r\\n                    [\\\"Management\\\", 1],\\r\\n                ]);\\r\\n            }\\r\\n            await waitForState(ns);\\r\\n            for (const [city, warehouse] of Object.entries(agDiv.warehouses)) {\\r\\n                if (warehouse) {\\r\\n                    for (const matName of Object.keys(warehouse.materials)) {\\r\\n                        if (!Object.prototype.hasOwnProperty.call(warehouse.materials, matName))\\r\\n                            continue;\\r\\n                        const mat = warehouse.materials[matName];\\r\\n                        if (mat.name === \\\"Plants\\\")\\r\\n                            mat.marketTa2 = true;\\r\\n                        if (mat.name === \\\"Food\\\") {\\r\\n                            if (selloff) {\\r\\n                                mat.marketTa2 = false;\\r\\n                                const sellPrice = getMaterialPrice(agDivName, city, mat.name) + \\\"\\\";\\r\\n                                //ns.tprintf(\\\"selling %s:%s:%s\\\", city, mat.name, sellPrice)\\r\\n                                ns.corporation.sellMaterial(agDivName, city, mat.name, \\\"MAX\\\", \\\"MP*0.5\\\");\\r\\n                            }\\r\\n                            else {\\r\\n                                mat.marketTa2 = false;\\r\\n                                ns.corporation.sellMaterial(agDivName, city, mat.name, \\\"0\\\", \\\"0\\\");\\r\\n                            }\\r\\n                        }\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\nfunction buyOneTimeUpgrades(ns, _upgrades) {\\r\\n    let upgrades;\\r\\n    if (typeof _upgrades === \\\"string\\\") {\\r\\n        upgrades = [_upgrades];\\r\\n    }\\r\\n    else {\\r\\n        upgrades = _upgrades;\\r\\n    }\\r\\n    for (const upgrade of upgrades) {\\r\\n        if (!ns.corporation.hasUnlockUpgrade(upgrade)) {\\r\\n            const upgradeCost = ns.corporation.getUnlockUpgradeCost(upgrade);\\r\\n            const corpFunds = ns.corporation.getCorporation().funds;\\r\\n            if (corpFunds < upgradeCost) {\\r\\n                llog(ns, \\\"WARNING: Insufficient funds to purchase %s %s < %s\\\", upgrade, ns.nFormat(corpFunds, \\\"($0.000a)\\\"), ns.nFormat(upgradeCost, \\\"($0.000a)\\\"));\\r\\n            }\\r\\n            else {\\r\\n                llog(ns, \\\"Purchasing %s upgrade for %s\\\", upgrade, ns.nFormat(upgradeCost, \\\"($0.000a)\\\"));\\r\\n                ns.corporation.unlockUpgrade(upgrade);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\nfunction buyLeveledUpgrades(ns, _upgrades, _amount, threshold = 1) {\\r\\n    let upgrades;\\r\\n    if (typeof _upgrades === \\\"string\\\") {\\r\\n        upgrades = [_upgrades];\\r\\n    }\\r\\n    else {\\r\\n        upgrades = _upgrades;\\r\\n    }\\r\\n    const amount = _amount <= 0 ? Number.MAX_SAFE_INTEGER : _amount;\\r\\n    for (const upgrade of upgrades) {\\r\\n        let upgradeCount = 0;\\r\\n        let upgradeCost = 0;\\r\\n        while (ns.corporation.getUpgradeLevelCost(upgrade) < ns.corporation.getCorporation().funds * threshold &&\\r\\n            ns.corporation.getUpgradeLevel(upgrade) < amount) {\\r\\n            upgradeCost += ns.corporation.getUpgradeLevelCost(upgrade);\\r\\n            upgradeCount++;\\r\\n            ns.corporation.levelUpgrade(upgrade);\\r\\n        }\\r\\n        if (upgradeCount > 0) {\\r\\n            llog(ns, \\\"Purchased %dx of %s for %s\\\", upgradeCount, upgrade, ns.nFormat(upgradeCost, \\\"($0.000a)\\\"));\\r\\n        }\\r\\n    }\\r\\n}\\r\\nfunction buyAllWarehouseUpgrades(ns, divisionName, size) {\\r\\n    for (const city of ns.corporation.getDivision(divisionName).cities) {\\r\\n        buyWarehouseUpgrades(ns, divisionName, city, size);\\r\\n    }\\r\\n}\\r\\nfunction buyWarehouseUpgrades(ns, divisionName, city, size) {\\r\\n    let spentFunds = 0;\\r\\n    const startSize = ns.corporation.getWarehouse(divisionName, city).size;\\r\\n    if (startSize >= size)\\r\\n        return;\\r\\n    let newSize = startSize;\\r\\n    while (true) {\\r\\n        const upgradeCost = ns.corporation.getUpgradeWarehouseCost(divisionName, city);\\r\\n        const corpFunds = ns.corporation.getCorporation().funds;\\r\\n        if (corpFunds < upgradeCost)\\r\\n            break;\\r\\n        spentFunds += upgradeCost;\\r\\n        ns.corporation.upgradeWarehouse(divisionName, city);\\r\\n        newSize = ns.corporation.getWarehouse(divisionName, city).size;\\r\\n        if (newSize >= size)\\r\\n            break;\\r\\n    }\\r\\n    if (newSize < size) {\\r\\n        llog(ns, \\\"WARNING: Unable to purchase warehouse upgrades %d => %d (target %d)\\\", startSize, newSize, size);\\r\\n    }\\r\\n    llog(ns, \\\"Upgraded %s %s's warehouse size from %s to %s for %s\\\", divisionName, city, ns.nFormat(startSize, \\\"(0.000a)\\\"), ns.nFormat(newSize, \\\"(0.000a)\\\"), ns.nFormat(spentFunds, \\\"($0.000a)\\\"));\\r\\n}\\r\\nasync function waitForState(ns, state = \\\"START\\\", next = true) {\\r\\n    if (next)\\r\\n        while (ns.corporation.getCorporation().state === state)\\r\\n            await ns.sleep(20);\\r\\n    while (ns.corporation.getCorporation().state !== state)\\r\\n        await ns.sleep(20);\\r\\n}\\r\\nasync function buyMaterials(ns, divisionName, materials) {\\r\\n    // Check to see if we already have the materials we need\\r\\n    let materialCheck = true;\\r\\n    for (const city of ns.corporation.getDivision(divisionName).cities) {\\r\\n        for (const data of materials) {\\r\\n            const name = data[0];\\r\\n            const qty = data[1];\\r\\n            const material = ns.corporation.getMaterial(divisionName, city, name);\\r\\n            if (material.qty < qty) {\\r\\n                materialCheck = false;\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n        if (!materialCheck)\\r\\n            break;\\r\\n    }\\r\\n    if (materialCheck)\\r\\n        return false;\\r\\n    // Wait for start state\\r\\n    await waitForState(ns, \\\"START\\\", false);\\r\\n    // Set up all material buys\\r\\n    for (const city of ns.corporation.getDivision(divisionName).cities) {\\r\\n        for (const data of materials) {\\r\\n            const name = data[0];\\r\\n            const qty = data[1];\\r\\n            const material = ns.corporation.getMaterial(divisionName, city, name);\\r\\n            if (material.qty < qty) {\\r\\n                const tickBuy = (qty - material.qty) / 10;\\r\\n                ns.corporation.buyMaterial(divisionName, city, name, tickBuy);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n    await waitForState(ns, \\\"START\\\");\\r\\n    // Clear all material buys\\r\\n    for (const city of ns.corporation.getDivision(divisionName).cities) {\\r\\n        for (const data of materials) {\\r\\n            const name = data[0];\\r\\n            ns.corporation.buyMaterial(divisionName, city, name, 0);\\r\\n        }\\r\\n    }\\r\\n    // Check it\\r\\n    materialCheck = true;\\r\\n    for (const city of ns.corporation.getDivision(divisionName).cities) {\\r\\n        for (const data of materials) {\\r\\n            const name = data[0];\\r\\n            const qty = data[1];\\r\\n            const material = ns.corporation.getMaterial(divisionName, city, name);\\r\\n            if (material.qty < qty) {\\r\\n                llog(ns, \\\"WARNING: Expected %d %s:%s but found %d\\\", qty, city, name, material.qty);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n    return true;\\r\\n    /*\\r\\n        Hardware at 12.5/s for one tick to 125 total\\r\\n        AI Cores at 7.5/s for one tick to 75 total\\r\\n        Real Estate at 2.7k/s (that’s twenty-seven hundred, 2 700, 2.7×103) for one tick to 27k total\\r\\n\\r\\n        Hardware at 267.5/s for one tick to get to 125 + 2675 = 2800\\r\\n        Robots at 9.6/s for one tick to get to 96\\r\\n        AI Cores at 244.5/s for one tick to get to 75 + 2445 = 2520\\r\\n        Real Estate at 11940/s for one tick to get to 27000 + 119400 = 146400\\r\\n\\r\\n        Hardware at 650/s for one tick to 2800 + 6500 = 9300\\r\\n        Robots at 63/s for one tick to 96 + 630 = 726\\r\\n        AI Cores at 375/s for one tick to 2520 + 3750 = 6270\\r\\n        Real Estate at 8400/s for one tick to 146400 + 84000 = 230400\\r\\n    */\\r\\n}\\r\\nfunction growOffice(ns, divisionName, city, size) {\\r\\n    // Hire and assign jobs\\r\\n    let spentFunds = 0;\\r\\n    const startSize = ns.corporation.getOffice(divisionName, city).size;\\r\\n    if (startSize >= size) {\\r\\n        while (ns.corporation.getOffice(divisionName, city).employees.length < size) {\\r\\n            ns.corporation.hireEmployee(divisionName, city);\\r\\n        }\\r\\n        return;\\r\\n    }\\r\\n    let newSize = startSize;\\r\\n    while (true) {\\r\\n        const upgradeCost = ns.corporation.getOfficeSizeUpgradeCost(divisionName, city, 1);\\r\\n        const corpFunds = ns.corporation.getCorporation().funds;\\r\\n        if (corpFunds < upgradeCost)\\r\\n            break;\\r\\n        spentFunds += upgradeCost;\\r\\n        ns.corporation.upgradeOfficeSize(divisionName, city, 1);\\r\\n        newSize = ns.corporation.getOffice(divisionName, city).size;\\r\\n        if (newSize >= size)\\r\\n            break;\\r\\n    }\\r\\n    if (newSize < size) {\\r\\n        llog(ns, \\\"WARNING: Unable to purchase office size upgrade %d => %d (target %d)\\\", startSize, newSize, size);\\r\\n    }\\r\\n    llog(ns, \\\"Upgraded %s %s's office size from %s to %s for %s\\\", divisionName, city, ns.nFormat(startSize, \\\"(0.000a)\\\"), ns.nFormat(newSize, \\\"(0.000a)\\\"), ns.nFormat(spentFunds, \\\"($0.000a)\\\"));\\r\\n    while (ns.corporation.getOffice(divisionName, city).employees.length < size) {\\r\\n        ns.corporation.hireEmployee(divisionName, city);\\r\\n    }\\r\\n}\\r\\nfunction growAllOffices(ns, divisionName, size) {\\r\\n    for (const city of ns.corporation.getDivision(divisionName).cities) {\\r\\n        growOffice(ns, divisionName, city, size);\\r\\n    }\\r\\n}\\r\\nexport async function main(ns) {\\r\\n    cleanLogs(ns);\\r\\n    const playerProp = findProp(\\\"player\\\");\\r\\n    const agDivName = \\\"Agriculture\\\";\\r\\n    const tbDivName = \\\"Tobacco\\\";\\r\\n    const tbRDCity = \\\"Aevum\\\";\\r\\n    let waitForBuy = true;\\r\\n    while (waitForBuy) {\\r\\n        try {\\r\\n            ns.corporation.getCorporation();\\r\\n            waitForBuy = false;\\r\\n        }\\r\\n        catch (e) {\\r\\n            const bought = ns.corporation.createCorporation(\\\"Corporation\\\", true);\\r\\n            if (bought) {\\r\\n                llog(ns, \\\"Created Corporation for $150b\\\");\\r\\n                waitForBuy = false;\\r\\n            }\\r\\n            else {\\r\\n                llog(ns, \\\"Waiting to buy Corporation for $150b\\\");\\r\\n                await ns.sleep(1000);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n    // open the Agriculture division\\r\\n    if (ns.corporation.getCorporation().divisions.find((div) => div.type === agDivName) === undefined) {\\r\\n        const divCost = ns.corporation.getExpandIndustryCost(agDivName);\\r\\n        llog(ns, \\\"Starting %s division for %s\\\", agDivName, ns.nFormat(divCost, \\\"($0.000a)\\\"));\\r\\n        ns.corporation.expandIndustry(agDivName, agDivName);\\r\\n        // buy one time upgrades Smart Supply\\r\\n        buyOneTimeUpgrades(ns, [\\\"Smart Supply\\\", \\\"Warehouse API\\\"]);\\r\\n        // buy advert\\r\\n        ns.corporation.hireAdVert(agDivName);\\r\\n        // buy levelable upgrades FocusWires, Neural Accelerators, Speech Processor Implants,\\r\\n        // Nuoptimal Nootropic Injector Implants, and Smart Factories\\r\\n        buyLeveledUpgrades(ns, [\\r\\n            \\\"FocusWires\\\",\\r\\n            \\\"Neural Accelerators\\\",\\r\\n            \\\"Speech Processor Implants\\\",\\r\\n            \\\"Nuoptimal Nootropic Injector Implants\\\",\\r\\n            \\\"Smart Factories\\\",\\r\\n        ], 2);\\r\\n    }\\r\\n    // Expand to additional cities\\r\\n    for (const city of CITIES.filter((a) => !ns.corporation.getDivision(agDivName).cities.includes(a))) {\\r\\n        const expandCost = ns.corporation.getExpandCityCost();\\r\\n        const corpFunds = ns.corporation.getCorporation().funds;\\r\\n        if (corpFunds < expandCost) {\\r\\n            llog(ns, \\\"ERROR: Insufficient funds to expand %s to %s %s < %s\\\", agDivName, city, ns.nFormat(corpFunds, \\\"($0.000a)\\\"), ns.nFormat(expandCost, \\\"($0.000a)\\\"));\\r\\n            return;\\r\\n        }\\r\\n        else {\\r\\n            llog(ns, \\\"Expanding %s to %s for %s\\\", agDivName, city, ns.nFormat(expandCost, \\\"($0.000a)\\\"));\\r\\n            ns.corporation.expandCity(agDivName, city);\\r\\n        }\\r\\n    }\\r\\n    // Hire in all offices\\r\\n    growAllOffices(ns, agDivName, 3);\\r\\n    // Buy warehouses in all cities\\r\\n    for (const city of ns.corporation.getDivision(agDivName).cities) {\\r\\n        if (!ns.corporation.hasWarehouse(agDivName, city)) {\\r\\n            const warehouseCost = ns.corporation.getPurchaseWarehouseCost();\\r\\n            const corpFunds = ns.corporation.getCorporation().funds;\\r\\n            if (warehouseCost <= corpFunds) {\\r\\n                llog(ns, \\\"Purchasing a %s warehouse in %s for %s\\\", agDivName, city, ns.nFormat(warehouseCost, \\\"($0.000a)\\\"));\\r\\n                ns.corporation.purchaseWarehouse(agDivName, city);\\r\\n            }\\r\\n            else {\\r\\n                llog(ns, \\\"Insufficient funds to purchase a %s warehouse in %s %s < %s\\\", agDivName, city, ns.nFormat(corpFunds, \\\"($0.000a)\\\"), ns.nFormat(warehouseCost, \\\"($0.000a)\\\"));\\r\\n                return;\\r\\n            }\\r\\n        }\\r\\n        ns.corporation.setSmartSupply(agDivName, city, true);\\r\\n        ns.corporation.sellMaterial(agDivName, city, \\\"Food\\\", \\\"MAX\\\", \\\"MP\\\");\\r\\n        ns.corporation.sellMaterial(agDivName, city, \\\"Plants\\\", \\\"MAX\\\", \\\"MP\\\");\\r\\n    }\\r\\n    // upgrade the size of the warehouses in all of the cities to 300\\r\\n    buyAllWarehouseUpgrades(ns, agDivName, 300);\\r\\n    // buy production materials for all cities\\r\\n    const round1Mats = await buyMaterials(ns, agDivName, [\\r\\n        [\\\"Hardware\\\", 125],\\r\\n        [\\\"AI Cores\\\", 75],\\r\\n        [\\\"Real Estate\\\", 27000],\\r\\n    ]);\\r\\n    if (round1Mats)\\r\\n        llog(ns, \\\"Purchased Round 1 of production materials\\\");\\r\\n    // Attempt to get first round of funding\\r\\n    if (ns.corporation.getInvestmentOffer().round < 2) {\\r\\n        llog(ns, \\\"Investment round 1: %s warehoses are empty, beginning stockpile\\\", agDivName);\\r\\n        let invState = \\\"growing\\\";\\r\\n        await doAgSell(ns, false);\\r\\n        let tookOffer = false;\\r\\n        while (!tookOffer) {\\r\\n            if (invState === \\\"growing\\\") {\\r\\n                // growing, set all sale prices to food 0, plants max and wait until all warehouses are > 95% full\\r\\n                let countFullWarehouses = 0;\\r\\n                for (const city of ns.corporation.getDivision(agDivName).cities) {\\r\\n                    const warehouse = ns.corporation.getWarehouse(agDivName, city);\\r\\n                    if (warehouse.sizeUsed > warehouse.size * 0.95)\\r\\n                        countFullWarehouses++;\\r\\n                }\\r\\n                if (countFullWarehouses === ns.corporation.getDivision(agDivName).cities.length) {\\r\\n                    await doAgSell(ns, true);\\r\\n                    llog(ns, \\\"Investment round 1: %s warehouses are full, initiating bulk sell-off to woo investors\\\", agDivName);\\r\\n                    invState = \\\"selling\\\";\\r\\n                }\\r\\n            }\\r\\n            else {\\r\\n                // selling - bulk sell everything at market price until all warehouses are empty\\r\\n                let countEmptyWarehouses = 0;\\r\\n                for (const city of ns.corporation.getDivision(agDivName).cities) {\\r\\n                    const foodMat = ns.corporation.getMaterial(agDivName, city, \\\"Food\\\");\\r\\n                    if (foodMat.qty < 100)\\r\\n                        countEmptyWarehouses++;\\r\\n                }\\r\\n                if (countEmptyWarehouses === ns.corporation.getDivision(agDivName).cities.length) {\\r\\n                    await doAgSell(ns, false);\\r\\n                    llog(ns, \\\"Investment round 1: %s warehoses are empty, beginning stockpile\\\", agDivName);\\r\\n                    invState = \\\"growing\\\";\\r\\n                }\\r\\n            }\\r\\n            const offer = ns.corporation.getInvestmentOffer();\\r\\n            llog(ns, \\\"Offer: %s  (Revenue: %s)\\\", ns.nFormat(offer.funds, \\\"(0.000a)\\\"), ns.nFormat(ns.corporation.getCorporation().revenue, \\\"(0.000a)\\\"));\\r\\n            // only take offers over $220b\\r\\n            if (offer.funds > 220000000000) {\\r\\n                ns.corporation.acceptInvestmentOffer();\\r\\n                llog(ns, \\\"Investment round 1: Taking offer of %s for %d%%\\\", ns.nFormat(offer.funds, \\\"(0.000a)\\\"), (offer.shares / 1000000000) * 100);\\r\\n                tookOffer = true;\\r\\n                break;\\r\\n            }\\r\\n            //await waitForState(ns, \\\"START\\\");\\r\\n            await ns.sleep(500);\\r\\n        }\\r\\n    }\\r\\n    // upgrade the office size in every city to 9\\r\\n    growAllOffices(ns, agDivName, 9);\\r\\n    // Upgrade Smart Factories and Smart Storage\\r\\n    buyLeveledUpgrades(ns, [\\\"Smart Factories\\\", \\\"Smart Storage\\\"], 10);\\r\\n    // Increase Warehouse Sizes to 3000\\r\\n    buyAllWarehouseUpgrades(ns, agDivName, 3000);\\r\\n    const round2Mats = await buyMaterials(ns, agDivName, [\\r\\n        [\\\"Hardware\\\", 2800],\\r\\n        [\\\"AI Cores\\\", 2520],\\r\\n        [\\\"Robots\\\", 96],\\r\\n        [\\\"Real Estate\\\", 146400],\\r\\n    ]);\\r\\n    if (round2Mats)\\r\\n        llog(ns, \\\"Purchased Round 2 of production materials\\\");\\r\\n    // Attempt to get first round of funding\\r\\n    if (ns.corporation.getInvestmentOffer().round < 3) {\\r\\n        llog(ns, \\\"Investment round 2: %s warehoses are empty, beginning stockpile\\\", agDivName);\\r\\n        let invState = \\\"growing\\\";\\r\\n        await doAgSell(ns, false);\\r\\n        let tookOffer = false;\\r\\n        while (!tookOffer) {\\r\\n            if (invState === \\\"growing\\\") {\\r\\n                // growing, set all sale prices to food 0, plants max and wait until all warehouses are > 95% full\\r\\n                let countFullWarehouses = 0;\\r\\n                for (const city of ns.corporation.getDivision(agDivName).cities) {\\r\\n                    const warehouse = ns.corporation.getWarehouse(agDivName, city);\\r\\n                    if (warehouse.sizeUsed > warehouse.size * 0.95)\\r\\n                        countFullWarehouses++;\\r\\n                }\\r\\n                if (countFullWarehouses === ns.corporation.getDivision(agDivName).cities.length) {\\r\\n                    await doAgSell(ns, true);\\r\\n                    llog(ns, \\\"Investment round 2: %s warehouses are full, initiating bulk sell-off to woo investors\\\", agDivName);\\r\\n                    invState = \\\"selling\\\";\\r\\n                }\\r\\n            }\\r\\n            else {\\r\\n                // selling - bulk sell everything at market price until all warehouses are empty\\r\\n                let countEmptyWarehouses = 0;\\r\\n                for (const city of ns.corporation.getDivision(agDivName).cities) {\\r\\n                    const foodMat = ns.corporation.getMaterial(agDivName, city, \\\"Food\\\");\\r\\n                    if (foodMat.qty < 100)\\r\\n                        countEmptyWarehouses++;\\r\\n                }\\r\\n                if (countEmptyWarehouses === ns.corporation.getDivision(agDivName).cities.length) {\\r\\n                    await doAgSell(ns, false);\\r\\n                    llog(ns, \\\"Investment round 2: %s warehoses are empty, beginning stockpile\\\", agDivName);\\r\\n                    invState = \\\"growing\\\";\\r\\n                }\\r\\n            }\\r\\n            const offer = ns.corporation.getInvestmentOffer();\\r\\n            llog(ns, \\\"Offer: %s %s\\\", ns.nFormat(offer.funds, \\\"(0.000a)\\\"), ns.nFormat(ns.corporation.getCorporation().revenue, \\\"(0.000a)\\\"));\\r\\n            //only take offers over $2.5t\\r\\n            if (offer.funds > 2500000000000) {\\r\\n                ns.corporation.acceptInvestmentOffer();\\r\\n                llog(ns, \\\"Investment round 2: Taking offer of %s for %d%%\\\", ns.nFormat(offer.funds, \\\"(0.000a)\\\"), (offer.shares / 1000000000) * 100);\\r\\n                tookOffer = true;\\r\\n                break;\\r\\n            }\\r\\n            await ns.sleep(500);\\r\\n        }\\r\\n    }\\r\\n    // open the Tobacco division\\r\\n    if (ns.corporation.getCorporation().divisions.find((div) => div.type === tbDivName) === undefined) {\\r\\n        const divCost = ns.corporation.getExpandIndustryCost(tbDivName);\\r\\n        llog(ns, \\\"Starting %s division for %s\\\", tbDivName, ns.nFormat(divCost, \\\"($0.000a)\\\"));\\r\\n        ns.corporation.expandIndustry(tbDivName, tbDivName);\\r\\n    }\\r\\n    // Expand to additional cities\\r\\n    for (const city of CITIES.filter((a) => !ns.corporation.getDivision(tbDivName).cities.includes(a))) {\\r\\n        const expandCost = ns.corporation.getExpandCityCost();\\r\\n        const corpFunds = ns.corporation.getCorporation().funds;\\r\\n        if (corpFunds < expandCost) {\\r\\n            llog(ns, \\\"ERROR: Insufficient funds to expand %s to %s %s < %s\\\", tbDivName, city, ns.nFormat(corpFunds, \\\"($0.000a)\\\"), ns.nFormat(expandCost, \\\"($0.000a)\\\"));\\r\\n            return;\\r\\n        }\\r\\n        else {\\r\\n            llog(ns, \\\"Expanding %s to %s for %s\\\", tbDivName, city, ns.nFormat(expandCost, \\\"($0.000a)\\\"));\\r\\n            ns.corporation.expandCity(tbDivName, city);\\r\\n        }\\r\\n    }\\r\\n    // Buy warehouses in all cities\\r\\n    for (const city of ns.corporation.getDivision(tbDivName).cities) {\\r\\n        if (!ns.corporation.hasWarehouse(tbDivName, city)) {\\r\\n            const warehouseCost = ns.corporation.getPurchaseWarehouseCost();\\r\\n            const corpFunds = ns.corporation.getCorporation().funds;\\r\\n            if (warehouseCost <= corpFunds) {\\r\\n                llog(ns, \\\"Purchasing a %s warehouse in %s for %s\\\", tbDivName, city, ns.nFormat(warehouseCost, \\\"($0.000a)\\\"));\\r\\n                ns.corporation.purchaseWarehouse(tbDivName, city);\\r\\n            }\\r\\n            else {\\r\\n                llog(ns, \\\"Insufficient funds to purchase a %s warehouse in %s %s < %s\\\", tbDivName, city, ns.nFormat(corpFunds, \\\"($0.000a)\\\"), ns.nFormat(warehouseCost, \\\"($0.000a)\\\"));\\r\\n                return;\\r\\n            }\\r\\n        }\\r\\n        ns.corporation.setSmartSupply(tbDivName, city, true);\\r\\n    }\\r\\n    // upgrade the size of the warehouses in all of the cities to 1000\\r\\n    buyAllWarehouseUpgrades(ns, tbDivName, 1000);\\r\\n    // upgrade the office size in every city to 10 and assign jobs\\r\\n    growAllOffices(ns, tbDivName, 10);\\r\\n    assignAllEmployees(ns, tbDivName, [\\r\\n        [\\\"Operations\\\", 2],\\r\\n        [\\\"Engineer\\\", 2],\\r\\n        [\\\"Business\\\", 2],\\r\\n        [\\\"Management\\\", 2],\\r\\n        [\\\"Research & Development\\\", 2],\\r\\n    ]);\\r\\n    // Upgrade Aevum office to 30 employees\\r\\n    growOffice(ns, tbDivName, tbRDCity, 30);\\r\\n    assignEmployees(ns, tbDivName, tbRDCity, [\\r\\n        [\\\"Operations\\\", 6],\\r\\n        [\\\"Engineer\\\", 6],\\r\\n        [\\\"Business\\\", 6],\\r\\n        [\\\"Management\\\", 6],\\r\\n        [\\\"Research & Development\\\", 6],\\r\\n    ]);\\r\\n    buyLeveledUpgrades(ns, [\\\"FocusWires\\\", \\\"Neural Accelerators\\\", \\\"Speech Processor Implants\\\", \\\"Nuoptimal Nootropic Injector Implants\\\"], 20);\\r\\n    while (true) {\\r\\n        // Attempt to max out Wilson Analytics\\r\\n        buyLeveledUpgrades(ns, \\\"Wilson Analytics\\\", 0, 0.5);\\r\\n        let maxProducts = 3;\\r\\n        if (ns.corporation.hasResearched(tbDivName, \\\"uPgrade: Capacity.I\\\"))\\r\\n            maxProducts++;\\r\\n        if (ns.corporation.hasResearched(tbDivName, \\\"uPgrade: Capacity.II\\\"))\\r\\n            maxProducts++;\\r\\n        // Develop a product if there are none in development\\r\\n        let products = ns.corporation\\r\\n            .getDivision(tbDivName)\\r\\n            .products.map((prodname) => ns.corporation.getProduct(tbDivName, prodname))\\r\\n            .sort((a, b) => Number(a.name.slice(5)) - Number(b.name.slice(5)));\\r\\n        let productIsDeveloping = false;\\r\\n        for (const product of products) {\\r\\n            if (product.developmentProgress < 100) {\\r\\n                productIsDeveloping = true;\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n        // if there are no products in development, discontinue the oldest one if needed\\r\\n        if (!productIsDeveloping) {\\r\\n            if (products.length === maxProducts) {\\r\\n                llog(ns, \\\"Discontinuing %s product %s\\\", tbDivName, products[0].name);\\r\\n                ns.corporation.discontinueProduct(tbDivName, products[0].name);\\r\\n            }\\r\\n            const investmentCash = ns.corporation.getCorporation().funds * 0.01;\\r\\n            let productName = \\\"prod-0\\\";\\r\\n            if (products.length > 0) {\\r\\n                productName = \\\"prod-\\\" + (Number(products[products.length - 1].name.slice(5)) + 1).toString();\\r\\n            }\\r\\n            llog(ns, \\\"Developing new %s product %s for %s\\\", tbDivName, productName, ns.nFormat(investmentCash * 2, \\\"($0.000a)\\\"));\\r\\n            ns.corporation.makeProduct(tbDivName, tbRDCity, productName, investmentCash, investmentCash);\\r\\n            ns.corporation.sellProduct(tbDivName, tbRDCity, productName, \\\"MAX\\\", \\\"MP\\\", true);\\r\\n        }\\r\\n        products = ns.corporation\\r\\n            .getDivision(tbDivName)\\r\\n            .products.map((prodname) => ns.corporation.getProduct(tbDivName, prodname))\\r\\n            .sort((a, b) => Number(a.name) - Number(b.name));\\r\\n        if (playerProp?.corporation?.divisions) {\\r\\n            const tobaccoDiv = playerProp.corporation.divisions.find((a) => a.type === \\\"Tobacco\\\");\\r\\n            if (tobaccoDiv) {\\r\\n                for (const prod of Object.values(tobaccoDiv.products)) {\\r\\n                    if (prod)\\r\\n                        prod.marketTa2 = true;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        // compare price of increasing advertising vs increasing office space, do the cheaper if it's affordable\\r\\n        let officeSizeIncrease = 0;\\r\\n        let advertIncrease = 0;\\r\\n        let advertPrice = 0;\\r\\n        while (true) {\\r\\n            const advertCost = ns.corporation.getHireAdVertCost(tbDivName);\\r\\n            const tbRDCityOfficeExpandCost = ns.corporation.getOfficeSizeUpgradeCost(tbDivName, tbRDCity, 15);\\r\\n            if (advertCost > ns.corporation.getCorporation().funds * 0.5 &&\\r\\n                tbRDCityOfficeExpandCost > ns.corporation.getCorporation().funds * 0.5)\\r\\n                break;\\r\\n            if (advertCost < tbRDCityOfficeExpandCost) {\\r\\n                advertIncrease++;\\r\\n                advertPrice += advertCost;\\r\\n                ns.corporation.hireAdVert(tbDivName);\\r\\n                continue;\\r\\n            }\\r\\n            officeSizeIncrease += 15;\\r\\n            ns.corporation.upgradeOfficeSize(tbDivName, tbRDCity, 15);\\r\\n        }\\r\\n        if (advertIncrease > 0) {\\r\\n            llog(ns, \\\"Hiring %s AdVert %dx for %s\\\", tbDivName, advertIncrease, ns.nFormat(advertPrice, \\\"($0.000a)\\\"));\\r\\n        }\\r\\n        if (officeSizeIncrease > 0) {\\r\\n            const officeSize = ns.corporation.getOffice(tbDivName, tbRDCity).size;\\r\\n            while (ns.corporation.getOffice(tbDivName, tbRDCity).employees.length < officeSize) {\\r\\n                ns.corporation.hireEmployee(tbDivName, tbRDCity);\\r\\n            }\\r\\n            assignEmployees(ns, tbDivName, tbRDCity, [\\r\\n                [\\\"Operations\\\", officeSize / 5],\\r\\n                [\\\"Engineer\\\", officeSize / 5],\\r\\n                [\\\"Business\\\", officeSize / 5],\\r\\n                [\\\"Management\\\", officeSize / 5],\\r\\n                [\\\"Research & Development\\\", officeSize / 5],\\r\\n            ]);\\r\\n        }\\r\\n        // if any of the other office sizes are < 20% the size of the Aevum office, attempt to increase their size\\r\\n        const cityIncrease = {};\\r\\n        for (const city of ns.corporation.getDivision(tbDivName).cities) {\\r\\n            // iterate as long as this city's office size is less than 20% of Aevum's and the price\\r\\n            // of upgrading is less than 5% of the corporation's funds\\r\\n            while (ns.corporation.getOffice(tbDivName, city).size <\\r\\n                ns.corporation.getOffice(tbDivName, tbRDCity).size * 0.2 &&\\r\\n                ns.corporation.getOfficeSizeUpgradeCost(tbDivName, city, 5) <\\r\\n                    ns.corporation.getCorporation().funds * 0.05) {\\r\\n                const cost = ns.corporation.getOfficeSizeUpgradeCost(tbDivName, city, 5);\\r\\n                ns.corporation.upgradeOfficeSize(tbDivName, city, 5);\\r\\n                if (!(city in cityIncrease)) {\\r\\n                    cityIncrease[city] = {\\r\\n                        inc: 5,\\r\\n                        cost: cost,\\r\\n                    };\\r\\n                }\\r\\n                else {\\r\\n                    cityIncrease[city].inc += 5;\\r\\n                    cityIncrease[city].cost += cost;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        for (const [city, val] of Object.entries(cityIncrease)) {\\r\\n            llog(ns, \\\"Hiring %d employees in %s:%s for %s\\\", val.inc, tbDivName, city, ns.nFormat(val.cost, \\\"($0.000a)\\\"));\\r\\n            const officeSize = ns.corporation.getOffice(tbDivName, city).size;\\r\\n            while (ns.corporation.getOffice(tbDivName, city).employees.length < officeSize) {\\r\\n                ns.corporation.hireEmployee(tbDivName, city);\\r\\n            }\\r\\n            assignEmployees(ns, tbDivName, city, [\\r\\n                [\\\"Operations\\\", officeSize / 5],\\r\\n                [\\\"Engineer\\\", officeSize / 5],\\r\\n                [\\\"Business\\\", officeSize / 5],\\r\\n                [\\\"Management\\\", officeSize / 5],\\r\\n                [\\\"Research & Development\\\", officeSize / 5],\\r\\n            ]);\\r\\n        }\\r\\n        const leveledUpgrades = [\\r\\n            \\\"Project Insight\\\",\\r\\n            \\\"Nuoptimal Nootropic Injector Implants\\\",\\r\\n            \\\"Smart Factories\\\",\\r\\n            \\\"DreamSense\\\",\\r\\n            \\\"Speech Processor Implants\\\",\\r\\n            \\\"Neural Accelerators\\\",\\r\\n            \\\"FocusWires\\\",\\r\\n            \\\"ABC SalesBots\\\",\\r\\n            \\\"Smart Storage\\\",\\r\\n        ];\\r\\n        buyLeveledUpgrades(ns, leveledUpgrades, 0, 0.01);\\r\\n        // attempt to expand to additional divisions to improve valuation\\r\\n        const divisions = [\\r\\n            \\\"Food\\\",\\r\\n            \\\"Software\\\",\\r\\n            \\\"Chemical\\\",\\r\\n            \\\"Fishing\\\",\\r\\n            \\\"Utilities\\\",\\r\\n            \\\"Pharmaceutical\\\",\\r\\n            \\\"Energy\\\",\\r\\n            // \\\"Mining\\\",\\r\\n            // \\\"Computer\\\",\\r\\n            // \\\"RealEstate\\\",\\r\\n            // \\\"Healthcare\\\",\\r\\n            // \\\"Robotics\\\",\\r\\n        ];\\r\\n        for (const division of divisions) {\\r\\n            if (ns.corporation.getCorporation().divisions.find((div) => div.type === division) === undefined &&\\r\\n                ns.corporation.getExpandIndustryCost(division) < ns.corporation.getCorporation().funds) {\\r\\n                const divCost = ns.corporation.getExpandIndustryCost(division);\\r\\n                llog(ns, \\\"Starting %s division for %s\\\", division, ns.nFormat(divCost, \\\"($0.000a)\\\"));\\r\\n                ns.corporation.expandIndustry(division, division);\\r\\n            }\\r\\n        }\\r\\n        // If all divisions have been built and a 3rd round investment offer is made for > $1.5q, accept\\r\\n        const offer = ns.corporation.getInvestmentOffer();\\r\\n        if (offer.round === 3 && offer.funds > 1500000000000000) {\\r\\n            ns.corporation.acceptInvestmentOffer();\\r\\n            llog(ns, \\\"Investment round 3: Taking offer of %s for %d%%\\\", ns.nFormat(offer.funds, \\\"(0.000a)\\\"), (offer.shares / 1000000000) * 100);\\r\\n            ns.corporation.goPublic(0);\\r\\n            ns.corporation.issueDividends(.05);\\r\\n        }\\r\\n        // Buy Research Upgrades -- buy after high priority researches, and only if purchase cost is < 5% of total research\\r\\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n        const lowPriorityResearches = [\\r\\n            \\\"Automatic Drug Administration\\\",\\r\\n            \\\"CPH4 Injections\\\",\\r\\n            \\\"Drones\\\",\\r\\n            \\\"Drones - Assembly\\\",\\r\\n            \\\"Drones - Transport\\\",\\r\\n            \\\"Go-Juice\\\",\\r\\n            \\\"JoyWire\\\",\\r\\n            \\\"Overclock\\\",\\r\\n            \\\"Self-Correcting Assemblers\\\",\\r\\n            \\\"Sti.mu\\\",\\r\\n        ];\\r\\n        // High Priority - buy when purchase cost is 50% of total research\\r\\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n        const highPriorityResearches = [\\r\\n            \\\"Hi-Tech R&D Laboratory\\\",\\r\\n            \\\"Market-TA.I\\\",\\r\\n            \\\"Market-TA.II\\\",\\r\\n            \\\"uPgrade: Fulcrum\\\",\\r\\n            \\\"uPgrade: Capacity.I\\\",\\r\\n            \\\"uPgrade: Capacity.II\\\",\\r\\n        ];\\r\\n        // buy one time unlocks government partnership and shady accounting after going public\\r\\n        await waitForState(ns, \\\"START\\\");\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29ycC5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImNvcnAudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLFNBQVMsRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLE1BQU0sVUFBVSxDQUFDO0FBQ25ELE9BQU8sRUFBRSxnQkFBZ0IsRUFBWSxNQUFNLGdCQUFnQixDQUFDO0FBRTVELFNBQVMsUUFBUSxDQUFDLFFBQWdCO0lBQzlCLEtBQUssTUFBTSxHQUFHLElBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLGdCQUFnQixDQUFDLEtBQUssQ0FBQyxFQUFFO1FBQ3hELE1BQU0sT0FBTyxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDcEMsSUFBSSxDQUFDLE9BQU87WUFBRSxTQUFTO1FBQ3ZCLE1BQU0sS0FBSyxHQUFHLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUMzQixJQUFJLEtBQUssQ0FBQyxRQUFRLEVBQUUsS0FBSyxJQUFJLEtBQUssQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQztZQUFFLE9BQU8sS0FBSyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDbkcsSUFBSSxLQUFLLENBQUMsUUFBUSxZQUFZLEtBQUs7WUFDL0IsS0FBSyxNQUFNLEtBQUssSUFBSSxLQUFLLENBQUMsUUFBUTtnQkFBRSxJQUFJLEtBQUssRUFBRSxLQUFLLElBQUksS0FBSyxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUM7b0JBQUUsT0FBTyxLQUFLLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0tBQ25IO0FBQ0wsQ0FBQztBQUVELGtFQUFrRTtBQUVsRSxTQUFTLGlCQUFpQixDQUFDLFlBQW9CLEVBQUUsUUFBZ0I7SUFDN0QsTUFBTSxVQUFVLEdBQUcsUUFBUSxDQUFDLFFB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\",\"filename\":\"corp.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1024,\"server\":\"home\",\"moduleSequenceNumber\":4080,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"ns\",\"name\":\"corporation\",\"cost\":1022.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { allHosts, softenServer } from \\\"lib/util\\\";\\r\\nfunction listServers(ns, hostnames) {\\r\\n    const hackableHosts = hostnames.sort(\\r\\n    //(a, b) => ns.getServerRequiredHackingLevel(b) - ns.getServerRequiredHackingLevel(a)\\r\\n    (a, b) => ns.getServerMaxMoney(b) - ns.getServerMaxMoney(a));\\r\\n    for (const hostname of hackableHosts) {\\r\\n        const rootStr = ns.hasRootAccess(hostname) ? \\\"[O]\\\" : \\\"[X]\\\";\\r\\n        const hackStr = ns.getHackingLevel() >= ns.getServerRequiredHackingLevel(hostname) ? \\\"[O]\\\" : \\\"[X]\\\";\\r\\n        ns.tprintf(\\\"%20s %-9s %4d %s %s %6dGB %8.2f\\\", hostname, ns.nFormat(ns.getServerMaxMoney(hostname), \\\"($0.000a)\\\"), ns.getServerRequiredHackingLevel(hostname), rootStr, hackStr, ns.getServerMaxRam(hostname), Math.ceil(ns.getWeakenTime(hostname) / 1000) / 60);\\r\\n    }\\r\\n}\\r\\nexport async function main(ns) {\\r\\n    const hostnames = allHosts(ns);\\r\\n    for (const hostname of hostnames) {\\r\\n        softenServer(ns, hostname);\\r\\n    }\\r\\n    listServers(ns, hostnames);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3Jhd2wuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJjcmF3bC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsUUFBUSxFQUFFLFlBQVksRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUVsRCxTQUFTLFdBQVcsQ0FBQyxFQUFNLEVBQUUsU0FBbUI7SUFDNUMsTUFBTSxhQUFhLEdBQUcsU0FBUyxDQUFDLElBQUk7SUFDaEMscUZBQXFGO0lBQ3JGLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLGlCQUFpQixDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLENBQUMsQ0FDOUQsQ0FBQztJQUVGLEtBQUssTUFBTSxRQUFRLElBQUksYUFBYSxFQUFFO1FBQ2xDLE1BQU0sT0FBTyxHQUFHLEVBQUUsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDO1FBQzNELE1BQU0sT0FBTyxHQUFHLEVBQUUsQ0FBQyxlQUFlLEVBQUUsSUFBSSxFQUFFLENBQUMsNkJBQTZCLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDO1FBQ25HLEVBQUUsQ0FBQyxPQUFPLENBQ04saUNBQWlDLEVBQ2pDLFFBQVEsRUFDUixFQUFFLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxRQUFRLENBQUMsRUFBRSxXQUFXLENBQUMsRUFDdkQsRUFBRSxDQUFDLDZCQUE2QixDQUFDLFFBQVEsQ0FBQyxFQUMxQyxPQUFPLEVBQ1AsT0FBTyxFQUNQLEVBQUUsQ0FBQyxlQUFlLENBQUMsUUFBUSxDQUFDLEVBQzVCLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQ3BELENBQUM7S0FDTDtBQUNMLENBQUM7QUFFRCxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUUvQixLQUFLLE1BQU0sUUFBUSxJQUFJLFNBQVMsRUFBRTtRQUM5QixZQUFZLENBQUMsRUFBRSxFQUFFLFFBQVEsQ0FBQyxDQUFDO0tBQzlCO0lBRUQsV0FBVyxDQUFDLEVBQUUsRUFBRSxTQUFTLENBQUMsQ0FBQztBQUMvQixDQUFDIn0=\",\"filename\":\"crawl.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/util.js\",\"url\":\"blob:file:///e83d879c-ca62-48b8-b78b-82e06b62ed7b\",\"moduleSequenceNumber\":123215},{\"filename\":\"crawl.js\",\"url\":\"blob:file:///1a8ecab5-17d1-4d9a-821a-af564c11ab2d\",\"moduleSequenceNumber\":123841}],\"dependents\":[],\"ramUsage\":2.7,\"server\":\"home\",\"moduleSequenceNumber\":4081,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.disableLog(\\\"sleep\\\");\\r\\n    // const crimes = [\\r\\n    //     \\\"shoplift\\\",\\r\\n    //     \\\"rob store\\\",\\r\\n    //     \\\"mug\\\",\\r\\n    //     \\\"larceny\\\",\\r\\n    //     \\\"drugs\\\",\\r\\n    //     \\\"bond forge\\\",\\r\\n    //     \\\"traffick arms\\\",\\r\\n    //     \\\"homicide\\\",\\r\\n    //     \\\"grand auto\\\",\\r\\n    //     \\\"kidnap\\\",\\r\\n    //     \\\"assassinate\\\",\\r\\n    //     \\\"heist\\\",\\r\\n    // ];\\r\\n    // for (const crimename of crimes) {\\r\\n    //     const crimeStats = ns.getCrimeStats(crimename);\\r\\n    //     ns.tprintf(\\\"%16s  %9s %5s %9s/s\\\", crimeStats.name, ns.nFormat(crimeStats.money, \\\"($0.000a)\\\"), stFormat(ns, crimeStats.time, false), ns.nFormat(crimeStats.money / (crimeStats.time / 1000), \\\"($0.000a)\\\"));\\r\\n    // }\\r\\n    let dynamic = true;\\r\\n    let crime = \\\"shoplift\\\";\\r\\n    if (ns.args[0]) {\\r\\n        crime = ns.args[0].toString();\\r\\n        dynamic = false;\\r\\n    }\\r\\n    while (true) {\\r\\n        if (dynamic) {\\r\\n            if (ns.getCrimeChance(\\\"mug\\\") > 0.7)\\r\\n                crime = \\\"mug\\\";\\r\\n            if (ns.getCrimeChance(\\\"homicide\\\") > 0.7)\\r\\n                crime = \\\"homicide\\\";\\r\\n        }\\r\\n        // (!ns.getPlayer().factions.includes(\\\"NiteSec\\\")) {\\r\\n        await ns.sleep(ns.commitCrime(crime) + 200);\\r\\n        // let allFactions = ns.getPlayer().factions.concat(ns.checkFactionInvitations());\\r\\n        // if (allFactions.includes(\\\"NiteSec\\\")) {\\r\\n        //     ns.joinFaction(\\\"NiteSec\\\")\\r\\n        // }\\r\\n    }\\r\\n    ns.workForFaction(\\\"NiteSec\\\", \\\"Field Work\\\");\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JpbWUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJjcmltZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLEVBQUUsQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLENBQUM7SUFFdkIsbUJBQW1CO0lBQ25CLGtCQUFrQjtJQUNsQixtQkFBbUI7SUFDbkIsYUFBYTtJQUNiLGlCQUFpQjtJQUNqQixlQUFlO0lBQ2Ysb0JBQW9CO0lBQ3BCLHVCQUF1QjtJQUN2QixrQkFBa0I7SUFDbEIsb0JBQW9CO0lBQ3BCLGdCQUFnQjtJQUNoQixxQkFBcUI7SUFDckIsZUFBZTtJQUNmLEtBQUs7SUFFTCxvQ0FBb0M7SUFDcEMsc0RBQXNEO0lBQ3RELGlOQUFpTjtJQUNqTixJQUFJO0lBRUosSUFBSSxPQUFPLEdBQUcsSUFBSSxDQUFDO0lBQ25CLElBQUksS0FBSyxHQUFHLFVBQVUsQ0FBQztJQUN2QixJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUU7UUFDWixLQUFLLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUM5QixPQUFPLEdBQUcsS0FBSyxDQUFDO0tBQ25CO0lBRUQsT0FBTyxJQUFJLEVBQUU7UUFDVCxJQUFJLE9BQU8sRUFBRTtZQUNULElBQUksRUFBRSxDQUFDLGNBQWMsQ0FBQyxLQUFLLENBQUMsR0FBRyxHQUFHO2dCQUFFLEtBQUssR0FBRyxLQUFLLENBQUM7WUFDbEQsSUFBSSxFQUFFLENBQUMsY0FBYyxDQUFDLFVBQVUsQ0FBQyxHQUFHLEdBQUc7Z0JBQUUsS0FBSyxHQUFHLFVBQVUsQ0FBQztTQUMvRDtRQUVELG1EQUFtRDtRQUNuRCxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQztRQUU1QyxrRkFBa0Y7UUFDbEYseUNBQXlDO1FBQ3pDLGdDQUFnQztRQUNoQyxJQUFJO0tBQ1A7SUFFRCxFQUFFLENBQUMsY0FBYyxDQUFDLFNBQVMsRUFBRSxZQUFZLENBQUMsQ0FBQztBQUMvQyxDQUFDIn0=\",\"filename\":\"crime.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"crime.js\",\"url\":\"blob:file:///8bfb3f4f-1f16-4b6b-b518-b1b5e14a77d0\",\"moduleSequenceNumber\":10573}],\"dependents\":[],\"ramUsage\":14.6,\"server\":\"home\",\"moduleSequenceNumber\":4082,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getCrimeChance\",\"cost\":5},{\"type\":\"fn\",\"name\":\"commitCrime\",\"cost\":5},{\"type\":\"fn\",\"name\":\"workForFaction\",\"cost\":3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const script = ns.args[0].toString();\\r\\n    let host = ns.args[1].toString();\\r\\n    const args = ns.args.slice(2);\\r\\n    let doSpawn = false;\\r\\n    if (host === \\\"local\\\") {\\r\\n        host = ns.getHostname();\\r\\n        doSpawn = true;\\r\\n    }\\r\\n    if (!ns.fileExists(script, \\\"home\\\")) {\\r\\n        ns.tprintf(\\\"[%s] ERROR: %s does not exist on home server\\\", ns.getScriptName(), script, host);\\r\\n        return;\\r\\n    }\\r\\n    await ns.scp(script, \\\"home\\\", host);\\r\\n    const scriptRam = ns.getScriptRam(script, host);\\r\\n    let hostMaxRam = ns.getServerMaxRam(host);\\r\\n    if (host === \\\"home\\\")\\r\\n        hostMaxRam -= 128;\\r\\n    const threads = Math.floor(hostMaxRam / scriptRam);\\r\\n    if (threads <= 0)\\r\\n        return;\\r\\n    if (doSpawn) {\\r\\n        ns.tprintf(\\\"Spawning %s@%s on %s over %d threads\\\", script, host, args.toString(), threads);\\r\\n        ns.spawn(script, threads, ...args.map(x => x.toString()));\\r\\n    }\\r\\n    else {\\r\\n        ns.killall(host);\\r\\n        const pid = ns.exec(script, host, threads, ...args);\\r\\n        ns.tprintf(\\\"Executing %s@%s on %s over %d threads [pid: %d]\\\", script, host, args.toString(), threads, pid);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhlY19tYXguanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJleGVjX21heC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFPO0lBQzlCLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDckMsSUFBSSxJQUFJLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUNqQyxNQUFNLElBQUksR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUM5QixJQUFJLE9BQU8sR0FBRyxLQUFLLENBQUM7SUFFcEIsSUFBSSxJQUFJLEtBQUssT0FBTyxFQUFFO1FBQ2xCLElBQUksR0FBRyxFQUFFLENBQUMsV0FBVyxFQUFFLENBQUM7UUFDeEIsT0FBTyxHQUFHLElBQUksQ0FBQztLQUNsQjtJQUVELElBQUksQ0FBQyxFQUFFLENBQUMsVUFBVSxDQUFDLE1BQU0sRUFBRSxNQUFNLENBQUMsRUFBRTtRQUNoQyxFQUFFLENBQUMsT0FBTyxDQUFDLDhDQUE4QyxFQUFFLEVBQUUsQ0FBQyxhQUFhLEVBQUUsRUFBRSxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDN0YsT0FBTztLQUNWO0lBQ0QsTUFBTSxFQUFFLENBQUMsR0FBRyxDQUFDLE1BQU0sRUFBRSxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFFbkMsTUFBTSxTQUFTLEdBQUcsRUFBRSxDQUFDLFlBQVksQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDaEQsSUFBSSxVQUFVLEdBQUcsRUFBRSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUUxQyxJQUFJLElBQUksS0FBSyxNQUFNO1FBQUUsVUFBVSxJQUFJLEdBQUcsQ0FBQztJQUV2QyxNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLFVBQVUsR0FBRyxTQUFTLENBQUMsQ0FBQztJQUVuRCxJQUFJLE9BQU8sSUFBSSxDQUFDO1FBQUUsT0FBTztJQUV6QixJQUFJLE9BQU8sRUFBRTtRQUNULEVBQUUsQ0FBQyxPQUFPLENBQUMsc0NBQXNDLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsUUFBUSxFQUFFLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFDM0YsRUFBRSxDQUFDLEtBQUssQ0FBQyxNQUFNLEVBQUUsT0FBTyxFQUFFLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDLENBQUM7S0FDN0Q7U0FBTTtRQUNILEVBQUUsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDakIsTUFBTSxHQUFHLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxHQUFHLElBQUksQ0FBQyxDQUFDO1FBQ3BELEVBQUUsQ0FBQyxPQUFPLENBQUMsaURBQWlELEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsUUFBUSxFQUFFLEVBQUUsT0FBTyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0tBQzlHO0FBQ0wsQ0FBQyJ9\",\"filename\":\"exec_max.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.3,\"server\":\"home\",\"moduleSequenceNumber\":4083,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    function favorToRep(f) {\\r\\n        const raw = 25000 * (Math.pow(1.02, f) - 1);\\r\\n        return Math.round(raw * 10000) / 10000; // round to make things easier.\\r\\n    }\\r\\n    function repToFavor(r) {\\r\\n        const raw = Math.log(r / 25000 + 1) / Math.log(1.02);\\r\\n        return Math.round(raw * 10000) / 10000; // round to make things easier.\\r\\n    }\\r\\n    for (const faction of ns.getPlayer().factions) {\\r\\n        const favor = ns.getFactionFavor(faction);\\r\\n        const targetRep = favorToRep(150);\\r\\n        const currentRep = ns.getFactionRep(faction) +\\r\\n            (ns.getPlayer().currentWorkFactionName === faction ? ns.getPlayer().workRepGained : 0);\\r\\n        const storedRep = Math.max(0, favorToRep(favor));\\r\\n        const totalRep = currentRep + storedRep;\\r\\n        const fTotal = repToFavor(currentRep + storedRep);\\r\\n        const fGain = fTotal - favor;\\r\\n        if (favor > 150)\\r\\n            continue;\\r\\n        let successStr = \\\"\\\";\\r\\n        if (favor + fGain > 150) {\\r\\n            successStr = \\\" (SUCCESS)\\\";\\r\\n        }\\r\\n        let needStr = \\\" \\\";\\r\\n        if (totalRep < targetRep) {\\r\\n            needStr = ns.sprintf(\\\" | Need +%s Rep\\\", ns.nFormat(targetRep - totalRep, \\\"0.000a\\\"));\\r\\n        }\\r\\n        ns.tprintf(\\\"%s => %.2f + %.2f = %.2f%s%s\\\", faction, favor, fGain, favor + fGain, needStr, successStr);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmF2b3IuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJmYXZvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLFNBQVMsVUFBVSxDQUFDLENBQVM7UUFDekIsTUFBTSxHQUFHLEdBQUcsS0FBSyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDNUMsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsR0FBRyxLQUFLLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQywrQkFBK0I7SUFDM0UsQ0FBQztJQUVELFNBQVMsVUFBVSxDQUFDLENBQVM7UUFDekIsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsS0FBSyxHQUFHLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDckQsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsR0FBRyxLQUFLLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQywrQkFBK0I7SUFDM0UsQ0FBQztJQUVELEtBQUssTUFBTSxPQUFPLElBQUksRUFBRSxDQUFDLFNBQVMsRUFBRSxDQUFDLFFBQVEsRUFBRTtRQUMzQyxNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsZUFBZSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQzFDLE1BQU0sU0FBUyxHQUFHLFVBQVUsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNsQyxNQUFNLFVBQVUsR0FDWixFQUFFLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQztZQUN6QixDQUFDLEVBQUUsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxzQkFBc0IsS0FBSyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzNGLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1FBQ2pELE1BQU0sUUFBUSxHQUFHLFVBQVUsR0FBRyxTQUFTLENBQUM7UUFFeEMsTUFBTSxNQUFNLEdBQUcsVUFBVSxDQUFDLFVBQVUsR0FBRyxTQUFTLENBQUMsQ0FBQztRQUNsRCxNQUFNLEtBQUssR0FBRyxNQUFNLEdBQUcsS0FBSyxDQUFDO1FBRTdCLElBQUksS0FBSyxHQUFHLEdBQUc7WUFBRSxTQUFTO1FBRTFCLElBQUksVUFBVSxHQUFHLEVBQUUsQ0FBQztRQUNwQixJQUFJLEtBQUssR0FBRyxLQUFLLEdBQUcsR0FBRyxFQUFFO1lBQ3JCLFVBQVUsR0FBRyxZQUFZLENBQUM7U0FDN0I7UUFFRCxJQUFJLE9BQU8sR0FBRyxHQUFHLENBQUM7UUFDbEIsSUFBSSxRQUFRLEdBQUcsU0FBUyxFQUFFO1lBQ3RCLE9BQU8sR0FBRyxFQUFFLENBQUMsT0FBTyxDQUFDLGlCQUFpQixFQUFFLEVBQUUsQ0FBQyxPQUFPLENBQUMsU0FBUyxHQUFHLFFBQVEsRUFBRSxRQUFRLENBQUMsQ0FBQyxDQUFDO1NBQ3ZGO1FBRUQsRUFBRSxDQUFDLE9BQU8sQ0FBQyw4QkFBOEIsRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEdBQUcsS0FBSyxFQUFFLE9BQU8sRUFBRSxVQUFVLENBQUMsQ0FBQztLQUN6RztBQUNMLENBQUMifQ==\",\"filename\":\"favor.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"favor.js\",\"url\":\"blob:file:///7d1e9e73-3dee-4f85-baf1-8de7bbef16b5\",\"moduleSequenceNumber\":608079}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"home\",\"moduleSequenceNumber\":4084,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getFactionFavor\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getFactionRep\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.disableLog(\\\"sleep\\\");\\r\\n    let members;\\r\\n    while (true) {\\r\\n        ns.print(ns.sprintf(\\\"==================================\\\"));\\r\\n        let memberIndex = ns.gang.getMemberNames().length;\\r\\n        while (ns.gang.canRecruitMember()) {\\r\\n            const name = \\\"g\\\" + memberIndex.toString();\\r\\n            ns.gang.recruitMember(name);\\r\\n            ns.gang.setMemberTask(name, \\\"Train Combat\\\");\\r\\n            memberIndex++;\\r\\n        }\\r\\n        ns.print(ns.sprintf(\\\"==================================\\\"));\\r\\n        members = ns.gang.getMemberNames().map((name) => ns.gang.getMemberInformation(name));\\r\\n        for (const member of members) {\\r\\n            const ascmem = ns.gang.getAscensionResult(member.name);\\r\\n            ns.print(ns.sprintf(\\\"%3s:  %10s  %s  %s  %s %10s %s\\\", member.name, member.str_exp.toFixed(2), member.str_mult.toFixed(2), member.str_asc_mult.toFixed(2), ascmem !== undefined ? ascmem.str : 0, member.str_asc_points.toFixed(2), member.upgrades));\\r\\n            if (ascmem !== undefined && ascmem.str > 2) {\\r\\n                ns.print(ns.sprintf(\\\"Ascending %s %.2f => %.2f hack multiplier\\\", member.name, member.str_asc_mult, member.str_asc_mult * ascmem.str));\\r\\n                ns.gang.ascendMember(member.name);\\r\\n            }\\r\\n        }\\r\\n        ns.print(ns.sprintf(\\\"==================================\\\"));\\r\\n        const combatEquipment = ns.gang\\r\\n            .getEquipmentNames()\\r\\n            .map((_name) => Object.assign({ name: _name, price: ns.gang.getEquipmentCost(_name), type: ns.gang.getEquipmentType(_name) }, ns.gang.getEquipmentStats(_name)))\\r\\n            .filter((eq) => eq.str !== undefined ||\\r\\n            eq.dex !== undefined ||\\r\\n            eq.agi !== undefined ||\\r\\n            eq.def !== undefined ||\\r\\n            eq.cha !== undefined)\\r\\n            .sort((a, b) => a.price - b.price);\\r\\n        // for (const eq of combatEquipment) {\\r\\n        //     ns.print(ns.sprintf(\\r\\n        //         \\\"%-13s %20s  %.2f  %9s\\\",\\r\\n        //         eq.type,\\r\\n        //         eq.name,\\r\\n        //         eq.str !== undefined ? eq.str : 0,\\r\\n        //         ns.nFormat(eq.price, \\\"($0.000a)\\\")\\r\\n        //     ));\\r\\n        // }\\r\\n        const newBuys = [];\\r\\n        for (const member of members) {\\r\\n            for (const eq of combatEquipment) {\\r\\n                if (!member.upgrades.includes(eq.name)) {\\r\\n                    newBuys.push({\\r\\n                        member: member,\\r\\n                        equipment: eq,\\r\\n                    });\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        newBuys.sort((a, b) => a.equipment.price - b.equipment.price);\\r\\n        for (const buy of newBuys) {\\r\\n            if (ns.getPlayer().money > buy.equipment.price) {\\r\\n                const result = ns.gang.purchaseEquipment(buy.member.name, buy.equipment.name);\\r\\n                if (result)\\r\\n                    ns.print(ns.sprintf(\\\"Buying %s:%s for %s\\\", buy.member.name, buy.equipment.name, ns.nFormat(buy.equipment.price, \\\"($0.000a)\\\")));\\r\\n            }\\r\\n        }\\r\\n        await ns.sleep(10000);\\r\\n        ns.print(ns.sprintf(\\\"==================================\\\"));\\r\\n        break;\\r\\n    }\\r\\n    const tasks = ns.gang\\r\\n        .getTaskNames()\\r\\n        .map((_name) => ns.gang.getTaskStats(_name))\\r\\n        .filter((task) => task.isCombat)\\r\\n        .sort((a, b) => b.baseMoney - a.baseMoney);\\r\\n    for (const task of tasks) {\\r\\n        ns.tprintf(\\\"%22s %3s %3s %9s %s\\\", task.name, task.baseMoney, task.difficulty, task.baseRespect, task.baseWanted);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2FuZy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImdhbmcudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixFQUFFLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBRXZCLElBQUksT0FBTyxDQUFDO0lBQ1osT0FBTyxJQUFJLEVBQUU7UUFDVCxFQUFFLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsb0NBQW9DLENBQUMsQ0FBQyxDQUFDO1FBQzNELElBQUksV0FBVyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsY0FBYyxFQUFFLENBQUMsTUFBTSxDQUFDO1FBRWxELE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxFQUFFO1lBQy9CLE1BQU0sSUFBSSxHQUFHLEdBQUcsR0FBRyxXQUFXLENBQUMsUUFBUSxFQUFFLENBQUM7WUFDMUMsRUFBRSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDNUIsRUFBRSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxFQUFFLGNBQWMsQ0FBQyxDQUFDO1lBQzVDLFdBQVcsRUFBRSxDQUFDO1NBQ2pCO1FBRUQsRUFBRSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLG9DQUFvQyxDQUFDLENBQUMsQ0FBQztRQUUzRCxPQUFPLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsb0JBQW9CLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztRQUVyRixLQUFLLE1BQU0sTUFBTSxJQUFJLE9BQU8sRUFBRTtZQUMxQixNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLGtCQUFrQixDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUN2RCxFQUFFLENBQUMsS0FBSyxDQUNKLEVBQUUsQ0FBQyxPQUFPLENBQ04sZ0NBQWdDLEVBQ2hDLE1BQU0sQ0FBQyxJQUFJLEVBQ1gsTUFBTSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQ3pCLE1BQU0sQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUMxQixNQUFNLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFDOUIsTUFBTSxLQUFLLFNBQVMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUNyQyxNQUFNLENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFDaEMsTUFBTSxDQUFDLFFBQVEsQ0FDbEIsQ0FDSixDQUFDO1lBRUYsSUFBSSxNQUFNLEtBQUssU0FBUyxJQUFJLE1BQU0sQ0FBQyxHQUFHLEdBQUcsQ0FBQyxFQUFFO2dCQUN4QyxFQUFFLENBQUMsS0FBSyxDQUNKLEVBQUUsQ0FBQyxPQUFPLENBQ04sMkNBQTJDLEVBQzNDLE1BQU0sQ0FBQyxJQUFJLEVBQ1gsTUFBTSxDQUFDLFlBQVksRUFDbkIsTUFBTSxDQUFDLFlBQVksR0FBRyxNQUFNLENBQUMsR0FBRyxDQUNuQyxDQUNKLENBQUM7Z0JBRUYsRUFBRSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO2FBQ3JDO1NBQ0o7UUFFRCxFQUFFLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsb0NBQW9DLENBQUMsQ0FBQyxDQUFDO1FBRTNELE1BQU0sZUFBZSxHQUFHLEVBQUUsQ0FBQyxJQUFJO2FBQzFCLGlCQUFpQixFQUFFO2FBQ25CLEdBQUcsQ0FBQyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQ1gsTUFBTSxDQUFDLE1BQU0sQ0FDVCxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsS0FBSyxDQUFDLEVBQUUsSUFBSSxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsS0FBSyxDQUFDLEVBQUUsRUFDOUYsRUFBRSxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxLQUFLLENBQUMsQ0FDbkMsQ0FDSjthQUNBLE1BQU0sQ0FDSCxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQ0gsRUFBRSxDQUFDLEdBQUcsS0FBSyxTQUFTO1lBQ3BCLEVBQUUsQ0FBQyxHQUFHLEtBQUssU0FBUztZQUNwQixFQUFFLENBQUMsR0FBRyxLQUFLLFNBQVM7WUFDcEIsRUFBRSxDQUFDLEdBQUcsS0FBSyxTQUFTO1lBQ3BCLEVBQUUsQ0FBQyxHQUFHLEtBQUssU0FBUyxDQUMzQjthQUNBLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBRXZDLHNDQUFzQztRQUN0QywyQkFBMkI7UUFDM0IsbUNBQW1DO1FBQ25DLG1CQUFtQjtRQUNuQixtQkFBbUI7UUFDbkIsNkNBQTZDO1FBQzdDLDRDQUE0QztRQUM1QyxVQUFVO1FBQ1YsSUFBSTtRQUVKLE1BQU0sT0FBTyxHQUFHLEVBQUUsQ0FBQztRQUNuQixLQUFLLE1BQU0sTUFBTSxJQUFJLE9BQU8sRUFBRTtZQUMxQixLQUFLLE1BQU0sRUFBRSxJQUFJLGVBQWUsRUFBRTtnQkFDOUIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFBRTtvQkFDcEMsT0FBTyxDQUFDLElBQUksQ0FBQzt3QkFDVCxNQUFNLEVBQUUsTUFBTTt3QkFDZCxTQUFTLEVBQUUsRUFBRTtxQkFDaEIsQ0FBQyxDQUFDO2lCQUNOO2FBQ0o7U0FDSjtRQUVELE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBRTlELEtBQUssTUFBTSxHQUFHLElBQUksT0FBTyxFQUFFO1lBQ3ZCLElBQUksRUFBRSxDQUFDLFNBQVMsRUFBRSxDQUFDLEtBQUssR0FBRyxHQUFHLENBQUMsU0FBUyxDQUFDLEtBQUssRUFBRTtnQkFDNUMsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxHQUFHLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDO2dCQUM5RSxJQUFJLE1BQU07b0JBQ04sRUFBRSxDQUFDLEtBQUssQ0FDSixFQUFFLENBQUMsT0FBTyxDQUNOLHFCQUFxQixFQUNyQixHQUFHLENBQUMsTUFBTSxDQUFDLElBQUksRUFDZixHQUFHLENBQUMsU0FBUyxDQUFDLElBQUksRUFDbEIsRUFBRSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLEtBQUssRUFBRSxXQUFXLENBQUMsQ0FDL0MsQ0FDSixDQUFDO2FBQ1Q7U0FDSjtRQUVELE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUV0QixFQUFFLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsb0NBQW9DLENBQUMsQ0FBQyxDQUFDO1FBQzNELE1BQU07S0FDVDtJQUVELE1BQU0sS0FBSyxHQUFHLEVBQUUsQ0FBQyxJQUFJO1NBQ2hCLFlBQVksRUFBRTtTQUNkLEdBQUcsQ0FBQyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDM0MsTUFBTSxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDO1NBQy9CLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxTQUFTLEdBQUcsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBRS9DLEtBQUssTUFBTSxJQUFJLElBQUksS0FBSyxFQUFFO1FBQ3RCLEVBQUUsQ0FBQyxPQUFPLENBQ04scUJBQXFCLEVBQ3JCLElBQUksQ0FBQyxJQUFJLEVBQ1QsSUFBSSxDQUFDLFNBQVMsRUFDZCxJQUFJLENBQUMsVUFBVSxFQUNmLElBQUksQ0FBQyxXQUFXLEVBQ2hCLElBQUksQ0FBQyxVQUFVLENBQ2xCLENBQUM7S0FDTDtBQUNMLENBQUMifQ==\",\"filename\":\"gang.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":31.6,\"server\":\"home\",\"moduleSequenceNumber\":4085,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gang.getMemberNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.canRecruitMember\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.recruitMember\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.setMemberTask\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.getMemberInformation\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.getAscensionResult\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.ascendMember\",\"cost\":4},{\"type\":\"fn\",\"name\":\"gang.getEquipmentNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.getEquipmentCost\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.getEquipmentType\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.getEquipmentStats\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"stock.buy\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"gang.purchaseEquipment\",\"cost\":4},{\"type\":\"fn\",\"name\":\"gang.getTaskNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.getTaskStats\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { llog } from \\\"/lib/util\\\";\\r\\nexport async function main(ns) {\\r\\n    ns.disableLog(\\\"sleep\\\");\\r\\n    let members;\\r\\n    while (true) {\\r\\n        ns.print(ns.sprintf(\\\"==================================\\\"));\\r\\n        let memberIndex = ns.gang.getMemberNames().length;\\r\\n        while (ns.gang.canRecruitMember()) {\\r\\n            const name = \\\"g\\\" + memberIndex.toString();\\r\\n            ns.gang.recruitMember(name);\\r\\n            ns.gang.setMemberTask(name, \\\"Train Hacking\\\");\\r\\n            memberIndex++;\\r\\n        }\\r\\n        ns.print(ns.sprintf(\\\"==================================\\\"));\\r\\n        members = ns.gang.getMemberNames().map((name) => ns.gang.getMemberInformation(name));\\r\\n        for (const member of members) {\\r\\n            const ascmem = ns.gang.getAscensionResult(member.name);\\r\\n            let hack1str = \\\"--\\\";\\r\\n            let hack2str = \\\"--\\\";\\r\\n            let cha1str = \\\"--\\\";\\r\\n            let cha2str = \\\"--\\\";\\r\\n            if (ascmem?.hack) {\\r\\n                hack1str = ns.nFormat(ascmem.hack * member.hack_asc_mult, \\\"0.0\\\");\\r\\n                hack2str = ns.nFormat(ascmem.hack, \\\"0.0\\\");\\r\\n            }\\r\\n            if (ascmem?.cha) {\\r\\n                cha1str = ns.nFormat(ascmem.cha * member.cha_asc_mult, \\\"0.0\\\");\\r\\n                cha2str = ns.nFormat(ascmem.cha, \\\"0.0\\\");\\r\\n            }\\r\\n            llog(ns, \\\"%3s:  Hacking: %7s  %5s => %5s (%s)\\\", member.name, ns.nFormat(member.hack, \\\"0,0\\\"), ns.nFormat(member.hack_asc_mult, \\\"(0.0)\\\"), hack1str, hack2str);\\r\\n            llog(ns, \\\"     Charisma: %7s  %5s => %5s (%s)\\\", ns.nFormat(member.cha, \\\"0,0\\\"), ns.nFormat(member.cha_asc_mult, \\\"(0.0)\\\"), cha1str, cha2str);\\r\\n            if (ascmem !== undefined && (ascmem.hack > 2 || ascmem.cha > 2)) {\\r\\n                ns.print(ns.sprintf(\\\"Ascending %s %.2f => %.2f hack multiplier\\\", member.name, member.hack_asc_mult, member.hack_asc_mult * ascmem.hack));\\r\\n                ns.gang.ascendMember(member.name);\\r\\n            }\\r\\n        }\\r\\n        ns.print(ns.sprintf(\\\"==================================\\\"));\\r\\n        const combatEquipment = ns.gang\\r\\n            .getEquipmentNames()\\r\\n            .map((_name) => Object.assign({ name: _name, price: ns.gang.getEquipmentCost(_name), type: ns.gang.getEquipmentType(_name) }, ns.gang.getEquipmentStats(_name)))\\r\\n            .filter((eq) => eq.hack !== undefined || eq.cha !== undefined)\\r\\n            //.filter((eq) => eq.hack !== undefined)\\r\\n            .sort((a, b) => a.price - b.price);\\r\\n        // for (const eq of combatEquipment) {\\r\\n        //     ns.print(ns.sprintf(\\r\\n        //         \\\"%-13s %20s  %.2f  %9s\\\",\\r\\n        //         eq.type,\\r\\n        //         eq.name,\\r\\n        //         eq.hack !== undefined ? eq.hack : 0,\\r\\n        //         ns.nFormat(eq.price, \\\"($0.000a)\\\")\\r\\n        //     ));\\r\\n        // }\\r\\n        const newBuys = [];\\r\\n        for (const member of members) {\\r\\n            for (const eq of combatEquipment) {\\r\\n                if (!member.upgrades.includes(eq.name)) {\\r\\n                    newBuys.push({\\r\\n                        member: member,\\r\\n                        equipment: eq,\\r\\n                    });\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        newBuys.sort((a, b) => a.equipment.price - b.equipment.price);\\r\\n        // if (ns.getPlayer().money >= ns.getUpgradeHomeRamCost()) {\\r\\n        //     ns.upgradeHomeRam();\\r\\n        // }\\r\\n        for (const buy of newBuys) {\\r\\n            if ((ns.getPlayer().money * 0.25 > buy.equipment.price && buy.equipment.price < 1000000000) ||\\r\\n                ns.getPlayer().money * 0.01 > buy.equipment.price) {\\r\\n                const result = ns.gang.purchaseEquipment(buy.member.name, buy.equipment.name);\\r\\n                if (result)\\r\\n                    ns.print(ns.sprintf(\\\"Buying %s:%s for %s\\\", buy.member.name, buy.equipment.name, ns.nFormat(buy.equipment.price, \\\"($0.000a)\\\")));\\r\\n            }\\r\\n        }\\r\\n        await ns.sleep(10000);\\r\\n        ns.print(ns.sprintf(\\\"==================================\\\"));\\r\\n    }\\r\\n    const tasks = ns.gang\\r\\n        .getTaskNames()\\r\\n        .map((_name) => ns.gang.getTaskStats(_name))\\r\\n        .filter((task) => task.isCombat)\\r\\n        .sort((a, b) => b.baseMoney - a.baseMoney);\\r\\n    for (const task of tasks) {\\r\\n        ns.tprintf(\\\"%22s %3s %3s %9s %s\\\", task.name, task.baseMoney, task.difficulty, task.baseRespect, task.baseWanted);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFja2luZ19nYW5nLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsiaGFja2luZ19nYW5nLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFFakMsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixFQUFFLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBRXZCLElBQUksT0FBTyxDQUFDO0lBQ1osT0FBTyxJQUFJLEVBQUU7UUFDVCxFQUFFLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsb0NBQW9DLENBQUMsQ0FBQyxDQUFDO1FBQzNELElBQUksV0FBVyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsY0FBYyxFQUFFLENBQUMsTUFBTSxDQUFDO1FBRWxELE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxFQUFFO1lBQy9CLE1BQU0sSUFBSSxHQUFHLEdBQUcsR0FBRyxXQUFXLENBQUMsUUFBUSxFQUFFLENBQUM7WUFDMUMsRUFBRSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDNUIsRUFBRSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxFQUFFLGVBQWUsQ0FBQyxDQUFDO1lBQzdDLFdBQVcsRUFBRSxDQUFDO1NBQ2pCO1FBRUQsRUFBRSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLG9DQUFvQyxDQUFDLENBQUMsQ0FBQztRQUUzRCxPQUFPLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsb0JBQW9CLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztRQUVyRixLQUFLLE1BQU0sTUFB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\",\"filename\":\"hacking_gang.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/util.js\",\"url\":\"blob:file:///0574ae2d-f7d7-4a52-92c8-8fed34e68b14\",\"moduleSequenceNumber\":213},{\"filename\":\"hacking_gang.js\",\"url\":\"blob:file:///ea0c3d71-f88a-4044-8572-5fb5cf4db8c7\",\"moduleSequenceNumber\":27698}],\"dependents\":[],\"ramUsage\":31.7,\"server\":\"home\",\"moduleSequenceNumber\":4086,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gang.getMemberNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.canRecruitMember\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.recruitMember\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.setMemberTask\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.getMemberInformation\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.getAscensionResult\",\"cost\":2},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"gang.ascendMember\",\"cost\":4},{\"type\":\"fn\",\"name\":\"gang.getEquipmentNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.getEquipmentCost\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.getEquipmentType\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.getEquipmentStats\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"stock.buy\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"gang.purchaseEquipment\",\"cost\":4},{\"type\":\"fn\",\"name\":\"gang.getTaskNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.getTaskStats\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { cleanLogs, llog } from \\\"lib/util\\\";\\r\\nimport { HSUpgradeType } from \\\"lib/hacknet/hs-upgrade-type\\\";\\r\\nimport { ExtendedNodeStats } from \\\"lib/hacknet/extended-node-stats\\\";\\r\\nimport { HSUpgrade } from \\\"lib/hacknet/hs-upgrade\\\";\\r\\nfunction generateNewServerValue(ns) {\\r\\n    const stats = new ExtendedNodeStats(ns.hacknet.getNodeStats(0));\\r\\n    stats.cache = 1;\\r\\n    stats.cores = 1;\\r\\n    stats.hashCapacity = 64;\\r\\n    stats.level = 1;\\r\\n    stats.ram = 1;\\r\\n    stats.timeOnline = 1;\\r\\n    stats.totalCost = ns.hacknet.getPurchaseNodeCost();\\r\\n    stats.updateProduction(ns);\\r\\n    // ns.tprintf(\\\"New Server Production: %s\\\", stats.production);\\r\\n    // ns.tprintf(\\\"New Server Cost: %s\\\", ns.nFormat(stats.totalCost, \\\"($0.000a)\\\"));\\r\\n    // ns.tprintf(\\\"New Server Total Value: %.2f h/s/$bn\\\", (stats.production / stats.totalCost) * 1000000000);\\r\\n    let bestUpgrade;\\r\\n    while (true) {\\r\\n        const hashServerUpgrades = Object.keys(HSUpgradeType)\\r\\n            .map((key) => new HSUpgrade(ns, ns.hacknet.numNodes(), HSUpgradeType[key], stats))\\r\\n            .sort((a, b) => b.upgradeValue - a.upgradeValue);\\r\\n        const newBestUpgrade = hashServerUpgrades[0];\\r\\n        switch (newBestUpgrade.type) {\\r\\n            case HSUpgradeType.CORES:\\r\\n                stats.cores += 1;\\r\\n                break;\\r\\n            case HSUpgradeType.LEVEL:\\r\\n                stats.level += 1;\\r\\n                break;\\r\\n            case HSUpgradeType.RAM:\\r\\n                stats.ram *= 2;\\r\\n                break;\\r\\n        }\\r\\n        const newProduction = ns.formulas.hacknetServers.hashGainRate(stats.level, 0, stats.ram, stats.cores, ns.getPlayer().hacknet_node_money_mult);\\r\\n        const newCost = stats.totalCost + newBestUpgrade.upgradeCost;\\r\\n        const newValue = newProduction / newCost;\\r\\n        if (newValue < stats.totalValue)\\r\\n            break;\\r\\n        stats.production = newProduction;\\r\\n        stats.totalCost = newCost;\\r\\n        stats.totalValue = newValue;\\r\\n        bestUpgrade = newBestUpgrade;\\r\\n        // ns.tprintf(\\r\\n        //     \\\"%s => Total Value: %s\\\",\\r\\n        //     hashServerUpgrades[0].toString(ns, stats.production),\\r\\n        //     stats.totalValue * 1000000000\\r\\n        // );\\r\\n        const checkStats = ns.hacknet.getNodeStats(0);\\r\\n        if (stats.cores >= checkStats.cores && stats.level >= checkStats.level && stats.ram >= checkStats.ram)\\r\\n            break;\\r\\n    }\\r\\n    if (bestUpgrade === undefined)\\r\\n        return bestUpgrade;\\r\\n    bestUpgrade.upgradeCost = ns.hacknet.getPurchaseNodeCost();\\r\\n    bestUpgrade.upgradeValue = stats.totalValue;\\r\\n    bestUpgrade.type = HSUpgradeType.SERVER;\\r\\n    bestUpgrade.upgradeProductionIncrease = stats.production;\\r\\n    return bestUpgrade;\\r\\n}\\r\\nexport async function main(ns) {\\r\\n    cleanLogs(ns);\\r\\n    let prodCalc = 0;\\r\\n    for (let idx = 0; idx < ns.hacknet.numNodes(); idx++) {\\r\\n        const stats = ns.hacknet.getNodeStats(idx);\\r\\n        stats.ramUsed = 0;\\r\\n        stats.production = ns.formulas.hacknetServers.hashGainRate(stats.level, 0, stats.ram, stats.cores, ns.getPlayer().hacknet_node_money_mult);\\r\\n        prodCalc += stats.production;\\r\\n    }\\r\\n    const prodIncome = (prodCalc / ns.hacknet.hashCost(\\\"Sell for Money\\\")) * 1000000;\\r\\n    ns.tprintf(\\\"Income: %.2f h/s | %s/s\\\", prodCalc, ns.nFormat(prodIncome, \\\"($0.000a)\\\"));\\r\\n    if (ns.hacknet.numNodes() === 0) {\\r\\n        ns.print(ns.sprintf(\\\"%s | 0 hacknet nodes available, waiting for funds to buy one for %s\\\", new Date().toLocaleTimeString(\\\"it-IT\\\"), ns.nFormat(ns.hacknet.getPurchaseNodeCost(), \\\"($0.000a)\\\")));\\r\\n    }\\r\\n    while (ns.hacknet.numNodes() === 0) {\\r\\n        if (ns.getPlayer().money >= ns.hacknet.getPurchaseNodeCost()) {\\r\\n            ns.hacknet.purchaseNode();\\r\\n        }\\r\\n        else {\\r\\n            await ns.sleep(1000);\\r\\n        }\\r\\n    }\\r\\n    let buyServerUpgrade = generateNewServerValue(ns);\\r\\n    if (ns.args[0]) {\\r\\n        let hashServerUpgrades = [];\\r\\n        if (buyServerUpgrade !== undefined)\\r\\n            hashServerUpgrades.push(buyServerUpgrade);\\r\\n        let totalProduction = 0;\\r\\n        for (let idx = 0; idx < ns.hacknet.numNodes(); idx++) {\\r\\n            const stats = new ExtendedNodeStats(ns.hacknet.getNodeStats(idx));\\r\\n            stats.ramUsed = 0;\\r\\n            stats.updateProduction(ns);\\r\\n            Object.keys(HSUpgradeType).forEach((key) => {\\r\\n                if (key !== \\\"CACHE\\\" && key != \\\"SERVER\\\")\\r\\n                    hashServerUpgrades.push(new HSUpgrade(ns, idx, HSUpgradeType[key], stats));\\r\\n            });\\r\\n            totalProduction += stats.production;\\r\\n        }\\r\\n        hashServerUpgrades = hashServerUpgrades\\r\\n            .sort((a, b) => b.upgradeValue - a.upgradeValue)\\r\\n            .filter((a) => a.upgradeValue * 1000000000 > 0.15);\\r\\n        for (const upg of hashServerUpgrades)\\r\\n            ns.tprintf(upg.toString(ns, totalProduction));\\r\\n        return;\\r\\n    }\\r\\n    while (true) {\\r\\n        let hashServerUpgrades = [];\\r\\n        if (buyServerUpgrade !== undefined)\\r\\n            hashServerUpgrades.push(buyServerUpgrade);\\r\\n        let totalProduction = 0;\\r\\n        for (let idx = 0; idx < ns.hacknet.numNodes(); idx++) {\\r\\n            const stats = new ExtendedNodeStats(ns.hacknet.getNodeStats(idx));\\r\\n            stats.ramUsed = 0;\\r\\n            stats.updateProduction(ns);\\r\\n            Object.keys(HSUpgradeType).forEach((key) => {\\r\\n                if (key !== \\\"CACHE\\\" && key != \\\"SERVER\\\")\\r\\n                    hashServerUpgrades.push(new HSUpgrade(ns, idx, HSUpgradeType[key], stats));\\r\\n            });\\r\\n            totalProduction += stats.production;\\r\\n        }\\r\\n        hashServerUpgrades = hashServerUpgrades\\r\\n            .sort((a, b) => b.upgradeValue - a.upgradeValue);\\r\\n        //.filter((a) => a.upgradeValue * 1000000000 > 0.15);\\r\\n        const targetUpgrade = hashServerUpgrades[0];\\r\\n        if (targetUpgrade) {\\r\\n            const port = ns.getPortHandle(2);\\r\\n            port.clear();\\r\\n            port.write(JSON.stringify([totalProduction, targetUpgrade]));\\r\\n            llog(ns, \\\"%s\\\", targetUpgrade.toString(ns, totalProduction));\\r\\n            // const hashBuyCost = ns.hacknet.hashCost(\\\"Sell for Money\\\");\\r\\n            // const numHashBuys = Math.floor(ns.hacknet.numHashes() / hashBuyCost);\\r\\n            // const effectiveMoneyAvailable = ns.getPlayer().money + numHashBuys * 1000000;\\r\\n            // while (effectiveMoneyAvailable < targetUpgrade.upgradeCost) {\\r\\n            //     numHashBuys = Math.floor(ns.hacknet.numHashes() / hashBuyCost);\\r\\n            //     effectiveMoneyAvailable = ns.getPlayer().money + numHashBuys * 1000000;\\r\\n            //     while (ns.hacknet.numHashes() > ns.hacknet.hashCost(\\\"Sell for Money\\\"))\\r\\n            //         ns.hacknet.spendHashes(\\\"Sell for Money\\\");\\r\\n            //     await ns.sleep(1000);\\r\\n            // }\\r\\n            while (ns.getPlayer().money < targetUpgrade.upgradeCost)\\r\\n                await ns.sleep(1000);\\r\\n            targetUpgrade.buy(ns);\\r\\n        }\\r\\n        else {\\r\\n            // while (ns.hacknet.numHashes() > ns.hacknet.hashCost(\\\"Sell for Money\\\"))\\r\\n            //     ns.hacknet.spendHashes(\\\"Sell for Money\\\");\\r\\n            await ns.sleep(1000);\\r\\n        }\\r\\n        buyServerUpgrade = generateNewServerValue(ns);\\r\\n        await ns.sleep(20);\\r\\n    }\\r\\n    ns.print(ns.sprintf(\\\"%s | Leeching...\\\", new Date().toLocaleTimeString(\\\"it-IT\\\")));\\r\\n    while (true) {\\r\\n        while (ns.hacknet.numHashes() > ns.hacknet.hashCost(\\\"Sell for Money\\\"))\\r\\n            ns.hacknet.spendHashes(\\\"Sell for Money\\\");\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n    while (true) {\\r\\n        //let studyCost = ns.hacknet.hashCost(\\\"Increase Maximum Money\\\");\\r\\n        const studyCost = ns.hacknet.hashCost(\\\"Improve Studying\\\");\\r\\n        while (ns.hacknet.hashCapacity() < studyCost) {\\r\\n            while (ns.hacknet.numHashes() > ns.hacknet.hashCost(\\\"Sell for Money\\\"))\\r\\n                ns.hacknet.spendHashes(\\\"Sell for Money\\\");\\r\\n            // find the cheapest cache upgrade and attempt to buy it\\r\\n            let targetIdx = -1;\\r\\n            let targetIdxCost = Number.MAX_SAFE_INTEGER;\\r\\n            for (let idx = 0; idx < ns.hacknet.numNodes(); idx++) {\\r\\n                const idxCost = ns.hacknet.getCacheUpgradeCost(idx, 1);\\r\\n                if (idxCost < targetIdxCost) {\\r\\n                    targetIdx = idx;\\r\\n                    targetIdxCost = idxCost;\\r\\n                }\\r\\n            }\\r\\n            if (ns.getPlayer().money > targetIdxCost) {\\r\\n                ns.hacknet.upgradeCache(targetIdx, 1);\\r\\n                continue;\\r\\n            }\\r\\n            await ns.sleep(1000);\\r\\n        }\\r\\n        while (ns.hacknet.numHashes() < studyCost)\\r\\n            await ns.sleep(1000);\\r\\n        //ns.hacknet.spendHashes(\\\"Increase Maximum Money\\\", \\\"phantasy\\\");\\r\\n        ns.hacknet.spendHashes(\\\"Improve Studying\\\");\\r\\n        await ns.sleep(20);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFja25ldC5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImhhY2tuZXQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLFNBQVMsRUFBRSxJQUFJLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFDM0MsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBQzVELE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGlDQUFpQyxDQUFDO0FBQ3BFLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUVuRCxTQUFTLHNCQUFzQixDQUFDLEVBQU07SUFDbEMsTUFBTSxLQUFLLEdBQUcsSUFBSSxpQkFBaUIsQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ2hFLEtBQUssQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDO0lBQ2hCLEtBQUssQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDO0lBQ2hCLEtBQUssQ0FBQyxZQUFZLEdBQUcsRUFBRSxDQUFDO0lBQ3hCLEtBQUssQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDO0lBQ2hCLEtBQUssQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDO0lBQ2QsS0FBSyxDQUFDLFVBQVUsR0FBRyxDQUFDLENBQUM7SUFDckIsS0FBSyxDQUFDLFNBQVMsR0FBRyxFQUFFLENBQUMsT0FBTyxDQUFDLG1CQUFtQixFQUFFLENBQUM7SUFDbkQsS0FBSyxDQUFDLGdCQUFnQixDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBRTNCLDZEQUE2RDtJQUM3RCwrRUFBK0U7SUFDL0UseUdBQXlHO0lBRXpHLElBQUksV0FBa0MsQ0FBQztJQUN2QyxPQUFPLElBQUksRUFBRTtRQUNULE1BQU0sa0JBQWtCLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUM7YUFDaEQsR0FBRyxDQUFDLENBQUMs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\",\"filename\":\"hacknet.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/hacknet/extended-node-stats.js\",\"url\":\"blob:file:///e987eea8-90f4-41f5-9d17-c3d11588a149\",\"moduleSequenceNumber\":170},{\"filename\":\"/lib/hacknet/hs-upgrade-type.js\",\"url\":\"blob:file:///b41ad880-5282-4bb6-a6c2-79b2e23daae0\",\"moduleSequenceNumber\":171},{\"filename\":\"/lib/util.js\",\"url\":\"blob:file:///9338b570-c1db-43ce-bbba-10ee81909d66\",\"moduleSequenceNumber\":174},{\"filename\":\"/lib/hacknet/hs-upgrade.js\",\"url\":\"blob:file:///a80b7d20-c3b1-44cf-8e6f-dc018555a0be\",\"moduleSequenceNumber\":172},{\"filename\":\"/lib/hacknet/extended-node-stats.js\",\"url\":\"blob:file:///d5753983-5666-43a0-9218-49101420d38e\",\"moduleSequenceNumber\":170},{\"filename\":\"/lib/hacknet/hs-upgrade-type.js\",\"url\":\"blob:file:///4923c814-b68a-44aa-a5d8-d7dbf1eafadc\",\"moduleSequenceNumber\":171},{\"filename\":\"/lib/util.js\",\"url\":\"blob:file:///f94ea81e-515d-46f5-bb41-b964d319a7e2\",\"moduleSequenceNumber\":174},{\"filename\":\"hacknet.js\",\"url\":\"blob:file:///42026e29-81fd-44c4-9e45-3944d2250c4b\",\"moduleSequenceNumber\":6102}],\"dependents\":[],\"ramUsage\":8.6,\"server\":\"home\",\"moduleSequenceNumber\":4087,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"stock.buy\",\"cost\":2.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { doBuyAndSoftenAll, doBackdoors } from \\\"lib/util\\\";\\r\\nexport async function main(ns) {\\r\\n    doBuyAndSoftenAll(ns);\\r\\n    await doBackdoors(ns);\\r\\n    const findProp = function (propName) {\\r\\n        for (const div of eval(\\\"document\\\").querySelectorAll(\\\"div\\\")) {\\r\\n            const propKey = Object.keys(div)[1];\\r\\n            if (!propKey)\\r\\n                continue;\\r\\n            const props = div[propKey];\\r\\n            if (props.children?.props && props.children.props[propName])\\r\\n                return props.children.props[propName];\\r\\n            if (props.children instanceof Array)\\r\\n                for (const child of props.children)\\r\\n                    if (child?.props && child.props[propName])\\r\\n                        return child.props[propName];\\r\\n        }\\r\\n    };\\r\\n    const playerProp = findProp(\\\"player\\\");\\r\\n    if (!playerProp)\\r\\n        return;\\r\\n    // city priority:\\r\\n    //   Chongqing [Neuregen Gene Modification]\\r\\n    //   Sector-12 [CashRoot Starter Kit]\\r\\n    //   Aevum [PCMatrix]\\r\\n    //   New Tokyo --\\r\\n    //   Ishima --\\r\\n    //   Volhaven --\\r\\n    for (const city of [\\\"Aevum\\\", \\\"Chongqing\\\", \\\"New Tokyo\\\", \\\"Ishima\\\", \\\"Volhaven\\\", \\\"Sector-12\\\"]) {\\r\\n        //ns.tprintf(\\\"Traveling to %s\\\", city);\\r\\n        ns.travelToCity(city);\\r\\n        const factions = playerProp.checkForFactionInvitations();\\r\\n        for (const faction of factions) {\\r\\n            if (!faction.alreadyInvited) {\\r\\n                ns.tprintf(\\\"Getting invite to %s\\\", faction.name);\\r\\n                playerProp.receiveInvite(faction.name);\\r\\n                faction.alreadyInvited = true;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n    if (ns.args[0])\\r\\n        return;\\r\\n    if (ns.checkFactionInvitations().includes(\\\"Chongqing\\\") &&\\r\\n        !ns.getOwnedAugmentations(true).includes(\\\"Neuregen Gene Modification\\\")) {\\r\\n        ns.joinFaction(\\\"Chongqing\\\");\\r\\n    }\\r\\n    if (ns.checkFactionInvitations().includes(\\\"Sector-12\\\") &&\\r\\n        !ns.getOwnedAugmentations(true).includes(\\\"CashRoot Starter Kit\\\")) {\\r\\n        ns.joinFaction(\\\"Sector-12\\\");\\r\\n    }\\r\\n    if (ns.checkFactionInvitations().includes(\\\"Aevum\\\") && !ns.getOwnedAugmentations(true).includes(\\\"PCMatrix\\\")) {\\r\\n        ns.joinFaction(\\\"Aevum\\\");\\r\\n    }\\r\\n    for (const faction of ns.checkFactionInvitations()) {\\r\\n        ns.joinFaction(faction);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiam9pbi5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImpvaW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLGlCQUFpQixFQUFFLFdBQVcsRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUUxRCxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLGlCQUFpQixDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ3RCLE1BQU0sV0FBVyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBRXRCLE1BQU0sUUFBUSxHQUFHLFVBQVUsUUFBZ0I7UUFDdkMsS0FBSyxNQUFNLEdBQUcsSUFBSSxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsZ0JBQWdCLENBQUMsS0FBSyxDQUFDLEVBQUU7WUFDeEQsTUFBTSxPQUFPLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNwQyxJQUFJLENBQUMsT0FBTztnQkFBRSxTQUFTO1lBQ3ZCLE1BQU0sS0FBSyxHQUFHLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUMzQixJQUFJLEtBQUssQ0FBQyxRQUFRLEVBQUUsS0FBSyxJQUFJLEtBQUssQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQztnQkFBRSxPQUFPLEtBQUssQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1lBQ25HLElBQUksS0FBSyxDQUFDLFFBQVEsWUFBWSxLQUFLO2dCQUMvQixLQUFLLE1BQU0sS0FBSyxJQUFJLEtBQUssQ0FBQyxRQUFRO29CQUM5QixJQUFJLEtBQUssRUFBRSxLQUFLLElBQUksS0FBSyxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUM7d0JBQUUsT0FBTyxLQUFLLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1NBQ25GO0lBQ0wsQ0FBQyxDQUFDO0lBRUYsTUFBTSxVQUFVLEdBQUcsUUFBUSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBRXRDLElBQUksQ0FBQyxVQUFVO1FBQUUsT0FBTztJQUV4QixpQkFBaUI7SUFDakIsMkNBQTJDO0lBQzNDLHFDQUFxQztJQUNyQyxxQkFBcUI7SUFDckIsaUJBQWlCO0lBQ2pCLGNBQWM7SUFDZCxnQkFBZ0I7SUFFaEIsS0FBSyxNQUFNLElBQUksSUFBSSxDQUFDLE9BQU8sRUFBRSxXQUFXLEVBQUUsV0FBVyxFQUFFLFFBQVEsRUFBRSxVQUFVLEVBQUUsV0FBVyxDQUFDLEVBQUU7UUFDdkYsc0NBQXNDO1FBQ3RDLEVBQUUsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLENBQUM7UUFFdEIsTUFBTSxRQUFRLEdBQUcsVUFBVSxDQUFDLDBCQUEwQixFQUFFLENBQUM7UUFFekQsS0FBSyxNQUFNLE9BQU8sSUFBSSxRQUFRLEVBQUU7WUFDNUIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxjQUFjLEVBQUU7Z0JBQ3pCLEVBQUUsQ0FBQyxPQUFPLENBQUMsc0JBQXNCLEVBQUUsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO2dCQUNqRCxVQUFVLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztnQkFDdkMsT0FBTyxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUM7YUFDakM7U0FDSjtLQUNKO0lBRUQsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztRQUNWLE9BQU87SUFFWCxJQUNJLEVBQUUsQ0FBQyx1QkFBdUIsRUFBRSxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUM7UUFDbEQsQ0FBQyxFQUFFLENBQUMscUJBQXFCLENBQUMsSUFBSSxDQUFDLENBQUMsUUFBUSxDQUFDLDRCQUE0QixDQUFDLEVBQ3hFO1FBQ0UsRUFBRSxDQUFDLFdBQVcsQ0FBQyxXQUFXLENBQUMsQ0FBQztLQUMvQjtJQUVELElBQ0ksRUFBRSxDQUFDLHVCQUF1QixFQUFFLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQztRQUNsRCxDQUFDLEVBQUUsQ0FBQyxxQkFBcUIsQ0FBQyxJQUFJLENBQUMsQ0FBQyxRQUFRLENBQUMsc0JBQXNCLENBQUMsRUFDbEU7UUFDRSxFQUFFLENBQUMsV0FBVyxDQUFDLFdBQVcsQ0FBQyxDQUFDO0tBQy9CO0lBRUQsSUFBSSxFQUFFLENBQUMsdUJBQXVCLEVBQUUsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMscUJBQXFCLENBQUMsSUFBSSxDQUFDLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxFQUFFO1FBQ3hHLEVBQUUsQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLENBQUM7S0FDM0I7SUFFRCxLQUFLLE1BQU0sT0FBTyxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsRUFBRSxFQUFFO1FBQ2hELEVBQUUsQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLENBQUM7S0FDM0I7QUFDTCxDQUFDIn0=\",\"filename\":\"join.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/util.js\",\"url\":\"blob:file:///c0822e8e-12c7-4fc5-8e2e-54ffb9b9d622\",\"moduleSequenceNumber\":4070},{\"filename\":\"join.js\",\"url\":\"blob:file:///ce5fc7b3-c7cc-4742-8f7c-0a872fe30f4a\",\"moduleSequenceNumber\":4114}],\"dependents\":[],\"ramUsage\":25.9,\"server\":\"home\",\"moduleSequenceNumber\":4114,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"travelToCity\",\"cost\":2},{\"type\":\"fn\",\"name\":\"checkFactionInvitations\",\"cost\":3},{\"type\":\"fn\",\"name\":\"getOwnedAugmentations\",\"cost\":5},{\"type\":\"fn\",\"name\":\"joinFaction\",\"cost\":3},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"connect\",\"cost\":2},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"purchaseTor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"purchaseProgram\",\"cost\":2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { allHosts } from \\\"lib/util\\\";\\r\\nexport async function main(ns) {\\r\\n    for (const hostname of allHosts(ns)) {\\r\\n        if (hostname === \\\"home\\\")\\r\\n            continue;\\r\\n        ns.killall(hostname);\\r\\n    }\\r\\n    for (const ps of ns.ps(\\\"home\\\")) {\\r\\n        if (ps.filename === \\\"ka.js\\\" ||\\r\\n            ps.filename === \\\"clock.js\\\" ||\\r\\n            ps.filename === \\\"leech.js\\\" ||\\r\\n            ps.filename === \\\"hacknet.js\\\" ||\\r\\n            ps.filename === \\\"hacking_gang.js\\\" ||\\r\\n            ps.filename === \\\"corp.js\\\" ||\\r\\n            ps.filename === \\\"cct.js\\\" ||\\r\\n            ps.filename === \\\"bladeburner.js\\\" ||\\r\\n            ps.filename === \\\"market.js\\\" ||\\r\\n            ps.filename === \\\"cheap_market.js\\\")\\r\\n            continue;\\r\\n        ns.kill(ps.pid);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoia2EuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJrYS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sVUFBVSxDQUFDO0FBRXBDLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsS0FBSyxNQUFNLFFBQVEsSUFBSSxRQUFRLENBQUMsRUFBRSxDQUFDLEVBQUU7UUFDakMsSUFBSSxRQUFRLEtBQUssTUFBTTtZQUFFLFNBQVM7UUFDbEMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQztLQUN4QjtJQUVELEtBQUssTUFBTSxFQUFFLElBQUksRUFBRSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsRUFBRTtRQUM1QixJQUNJLEVBQUUsQ0FBQyxRQUFRLEtBQUssT0FBTztZQUN2QixFQUFFLENBQUMsUUFBUSxLQUFLLFVBQVU7WUFDMUIsRUFBRSxDQUFDLFFBQVEsS0FBSyxVQUFVO1lBQzFCLEVBQUUsQ0FBQyxRQUFRLEtBQUssWUFBWTtZQUM1QixFQUFFLENBQUMsUUFBUSxLQUFLLGlCQUFpQjtZQUNqQyxFQUFFLENBQUMsUUFBUSxLQUFLLFNBQVM7WUFDekIsRUFBRSxDQUFDLFFBQVEsS0FBSyxRQUFRO1lBQ2pDLEVBQUUsQ0FBQyxRQUFRLEtBQUssZ0JBQWdCO1lBQ3ZCLEVBQUUsQ0FBQyxRQUFRLEtBQUssV0FBVztZQUMzQixFQUFFLENBQUMsUUFBUSxLQUFLLGlCQUFpQjtZQUVqQyxTQUFTO1FBQ2IsRUFBRSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUM7S0FDbkI7QUFDTCxDQUFDIn0=\",\"filename\":\"ka.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/util.js\",\"url\":\"blob:file:///c0a4c517-a298-4bc5-aed7-d9303ea1703d\",\"moduleSequenceNumber\":444},{\"filename\":\"ka.js\",\"url\":\"blob:file:///a54f1f98-7990-49f5-87f1-c8a7cd3efb49\",\"moduleSequenceNumber\":3950}],\"dependents\":[],\"ramUsage\":3,\"server\":\"home\",\"moduleSequenceNumber\":4089,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    for (const ps of ns.ps(\\\"home\\\")) {\\r\\n        if (ps.filename === \\\"leech.js\\\") {\\r\\n            ns.kill(ps.pid);\\r\\n            return;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoia2xlZWNoLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsia2xlZWNoLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsS0FBSyxNQUFNLEVBQUUsSUFBSSxFQUFFLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxFQUFFO1FBQzVCLElBQUksRUFBRSxDQUFDLFFBQVEsS0FBSyxVQUFVLEVBQUc7WUFDN0IsRUFBRSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDaEIsT0FBTztTQUNWO0tBQ0o7QUFDTCxDQUFDIn0=\",\"filename\":\"kleech.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"kleech.js\",\"url\":\"blob:file:///367033d3-da9b-4163-b827-956627d704ee\",\"moduleSequenceNumber\":195274}],\"dependents\":[],\"ramUsage\":2.3,\"server\":\"home\",\"moduleSequenceNumber\":4090,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// Reduce Minimum Security\\r\\n// Increase Maximum Money\\r\\n// Generate Coding Contract\\r\\n// Sell for Money\\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\nexport function autocomplete(data, args) {\\r\\n    return [\\\"sec\\\", \\\"money\\\", \\\"cct\\\", \\\"gym\\\", \\\"research\\\", \\\"bladeburner\\\"]; // Autocomplete 3 specific strings.\\r\\n}\\r\\nexport async function main(ns) {\\r\\n    let buy;\\r\\n    switch (ns.args[0]) {\\r\\n        case \\\"sec\\\": {\\r\\n            buy = \\\"Reduce Minimum Security\\\";\\r\\n            break;\\r\\n        }\\r\\n        case \\\"money\\\": {\\r\\n            buy = \\\"Increase Maximum Money\\\";\\r\\n            break;\\r\\n        }\\r\\n        case \\\"cct\\\": {\\r\\n            buy = \\\"Generate Coding Contract\\\";\\r\\n            break;\\r\\n        }\\r\\n        case \\\"gym\\\": {\\r\\n            buy = \\\"Improve Gym Training\\\";\\r\\n            break;\\r\\n        }\\r\\n        case \\\"research\\\": {\\r\\n            buy = \\\"Exchange for Corporation Research\\\";\\r\\n            break;\\r\\n        }\\r\\n        case \\\"sell\\\":\\r\\n        default: {\\r\\n            buy = \\\"Sell for Money\\\";\\r\\n            break;\\r\\n        }\\r\\n    }\\r\\n    const target = ns.args[1]?.toString();\\r\\n    while (true) {\\r\\n        if (ns.args[0] === \\\"bladeburner\\\") {\\r\\n            if (ns.hacknet.hashCost(\\\"Exchange for Bladeburner Rank\\\") <= ns.hacknet.hashCost(\\\"Exchange for Bladeburner SP\\\"))\\r\\n                buy = \\\"Exchange for Bladeburner Rank\\\";\\r\\n            else\\r\\n                buy = \\\"Exchange for Bladeburner SP\\\";\\r\\n        }\\r\\n        const hashCost = ns.hacknet.hashCost(buy);\\r\\n        while (ns.hacknet.hashCapacity() < hashCost) {\\r\\n            while (ns.hacknet.numHashes() > ns.hacknet.hashCost(\\\"Sell for Money\\\"))\\r\\n                ns.hacknet.spendHashes(\\\"Sell for Money\\\");\\r\\n            // find the cheapest cache upgrade and attempt to buy it\\r\\n            let targetIdx = -1;\\r\\n            let targetIdxCost = Number.MAX_SAFE_INTEGER;\\r\\n            for (let idx = 0; idx < ns.hacknet.numNodes(); idx++) {\\r\\n                const idxCost = ns.hacknet.getCacheUpgradeCost(idx, 1);\\r\\n                if (idxCost < targetIdxCost) {\\r\\n                    targetIdx = idx;\\r\\n                    targetIdxCost = idxCost;\\r\\n                }\\r\\n            }\\r\\n            if (ns.getPlayer().money > targetIdxCost) {\\r\\n                ns.hacknet.upgradeCache(targetIdx, 1);\\r\\n                continue;\\r\\n            }\\r\\n            await ns.sleep(1000);\\r\\n        }\\r\\n        while (ns.hacknet.numHashes() < hashCost)\\r\\n            await ns.sleep(1000);\\r\\n        ns.hacknet.spendHashes(buy, target);\\r\\n        await ns.sleep(20);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGVlY2guanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsZWVjaC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSwwQkFBMEI7QUFDMUIseUJBQXlCO0FBQ3pCLDJCQUEyQjtBQUMzQixpQkFBaUI7QUFFakIsNkRBQTZEO0FBQzdELE1BQU0sVUFBVSxZQUFZLENBQUMsSUFBWSxFQUFFLElBQVk7SUFDbkQsT0FBTyxDQUFDLEtBQUssRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxVQUFVLEVBQUUsYUFBYSxDQUFDLENBQUMsQ0FBQyxtQ0FBbUM7QUFDekcsQ0FBQztBQUVELE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsSUFBSSxHQUFHLENBQUM7SUFDUixRQUFRLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUU7UUFDaEIsS0FBSyxLQUFLLENBQUMsQ0FBQztZQUNSLEdBQUcsR0FBRyx5QkFBeUIsQ0FBQztZQUNoQyxNQUFNO1NBQ1Q7UUFDRCxLQUFLLE9BQU8sQ0FBQyxDQUFDO1lBQ1YsR0FBRyxHQUFHLHdCQUF3QixDQUFDO1lBQy9CLE1BQU07U0FDVDtRQUNELEtBQUssS0FBSyxDQUFDLENBQUM7WUFDUixHQUFHLEdBQUcsMEJBQTBCLENBQUM7WUFDakMsTUFBTTtTQUNUO1FBQ0QsS0FBSyxLQUFLLENBQUMsQ0FBQztZQUNSLEdBQUcsR0FBRyxzQkFBc0IsQ0FBQztZQUM3QixNQUFNO1NBQ1Q7UUFDRCxLQUFLLFVBQVUsQ0FBQyxDQUFDO1lBQ2IsR0FBRyxHQUFHLG1DQUFtQyxDQUFBO1lBQ3pDLE1BQU07U0FDVDtRQUNELEtBQUssTUFBTSxDQUFDO1FBQ1osT0FBTyxDQUFDLENBQUM7WUFDTCxHQUFHLEdBQUcsZ0JBQWdCLENBQUE7WUFDdEIsTUFBTTtTQUNUO0tBQ0o7SUFDRCxNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLFFBQVEsRUFBRSxDQUFDO0lBRXRDLE9BQU8sSUFBSSxFQUFFO1FBQ2YsSUFBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLGFBQWEsRUFBRTtZQUNoQyxJQUFJLEVBQUUsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLCtCQUErQixDQUFDLElBQUksRUFBRSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsNkJBQTZCLENBQUM7Z0JBQzdHLEdBQUcsR0FBRywrQkFBK0IsQ0FBQzs7Z0JBRXRDLEdBQUcsR0FBRyw2QkFBNkIsQ0FBQztTQUNyQztRQUNLLE1BQU0sUUFBUSxHQUFHLEVBQUUsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBRTFDLE9BQU8sRUFBRSxDQUFDLE9BQU8sQ0FBQyxZQUFZLEVBQUUsR0FBRyxRQUFRLEVBQUU7WUFDekMsT0FBTyxFQUFFLENBQUMsT0FBTyxDQUFDLFNBQVMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLGdCQUFnQixDQUFDO2dCQUNqRSxFQUFFLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1lBRTdDLHdEQUF3RDtZQUN4RCxJQUFJLFNBQVMsR0FBRyxDQUFDLENBQUMsQ0FBQztZQUNuQixJQUFJLGFBQWEsR0FBRyxNQUFNLENBQUMsZ0JBQWdCLENBQUM7WUFDNUMsS0FBSyxJQUFJLEdBQUcsR0FBRyxDQUFDLEVBQUUsR0FBRyxHQUFHLEVBQUUsQ0FBQyxPQUFPLENBQUMsUUFBUSxFQUFFLEVBQUUsR0FBRyxFQUFFLEVBQUU7Z0JBQ2xELE1BQU0sT0FBTyxHQUFHLEVBQUUsQ0FBQyxPQUFPLENBQUMsbUJBQW1CLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDO2dCQUN2RCxJQUFJLE9BQU8sR0FBRyxhQUFhLEVBQUU7b0JBQ3pCLFNBQVMsR0FBRyxHQUFHLENBQUM7b0JBQ2hCLGFBQWEsR0FBRyxPQUFPLENBQUM7aUJBQzNCO2FBQ0o7WUFFRCxJQUFJLEVBQUUsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxLQUFLLEdBQUcsYUFBYSxFQUFFO2dCQUN0QyxFQUFFLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxTQUFTLEVBQUUsQ0FBQyxDQUFDLENBQUM7Z0JBQ3RDLFNBQVM7YUFDWjtZQUVELE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUN4QjtRQUVELE9BQU8sRUFBRSxDQUFDLE9BQU8sQ0FBQyxTQUFTLEVBQUUsR0FBRyxRQUFRO1lBQUUsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBRS9ELEVBQUUsQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLEdBQUcsRUFBRSxNQUFNLENBQUMsQ0FBQztRQUVwQyxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7S0FDdEI7QUFDTCxDQUFDIn0=\",\"filename\":\"leech.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"leech.js\",\"url\":\"blob:file:///6fc6315b-7c7d-424f-8541-45b067ac5900\",\"moduleSequenceNumber\":462}],\"dependents\":[],\"ramUsage\":8.6,\"server\":\"home\",\"moduleSequenceNumber\":4091,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"stock.buy\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function isScript(filename) {\\r\\n    return filename.indexOf(\\\".js\\\") !== -1 && filename.indexOf(\\\"/lib\\\") === -1;\\r\\n}\\r\\nfunction isProgram(filename) {\\r\\n    return filename.indexOf(\\\".exe\\\") !== -1;\\r\\n}\\r\\nfunction isOther(filename) {\\r\\n    return !isScript(filename) && !isProgram(filename) && !isLib(filename);\\r\\n}\\r\\nfunction isLib(filename) {\\r\\n    return filename.indexOf(\\\".js\\\") !== -1 && filename.indexOf(\\\"/lib\\\") !== -1;\\r\\n}\\r\\nexport async function main(ns) {\\r\\n    let hostname = ns.getHostname();\\r\\n    if (ns.args[0] && ns.serverExists(ns.args[0].toString())) {\\r\\n        hostname = ns.args[0].toString();\\r\\n    }\\r\\n    const filenames = ns.ls(hostname);\\r\\n    const scriptnames = filenames.filter(isScript);\\r\\n    const libnames = filenames.filter(isLib);\\r\\n    const programnames = filenames.filter(isProgram);\\r\\n    const othernames = filenames.filter(isOther);\\r\\n    let maxScriptFileLength = 0;\\r\\n    libnames.map(function (name) {\\r\\n        const len = name.length + 2;\\r\\n        if (len > maxScriptFileLength)\\r\\n            maxScriptFileLength = len;\\r\\n    });\\r\\n    if (scriptnames.length) {\\r\\n        ns.tprintf(\\\"======== SCRIPTS ========\\\");\\r\\n        for (const filename of scriptnames)\\r\\n            ns.tprintf(`  %-${maxScriptFileLength}s %7.2fGB %s`, filename, ns.getScriptRam(filename, hostname), ns.scriptRunning(filename, hostname) ? \\\"RUNNING\\\" : \\\"\\\");\\r\\n    }\\r\\n    if (libnames.length) {\\r\\n        ns.tprintf(\\\"========= LIBS ==========\\\");\\r\\n        for (const filename of libnames)\\r\\n            ns.tprintf(`  %-${maxScriptFileLength}s %7.2fGB %s`, filename, ns.getScriptRam(filename, hostname), ns.scriptRunning(filename, hostname) ? \\\"RUNNING\\\" : \\\"\\\");\\r\\n    }\\r\\n    if (programnames.length) {\\r\\n        ns.tprintf(\\\"======== PROGRAMS =======\\\");\\r\\n        for (const filename of programnames)\\r\\n            ns.tprintf(`  %-${maxScriptFileLength}s`, filename);\\r\\n    }\\r\\n    if (othernames.length) {\\r\\n        ns.tprintf(\\\"========= OTHER =========\\\");\\r\\n        for (const filename of othernames)\\r\\n            ns.tprintf(`  %-${maxScriptFileLength}s`, filename);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGwuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxTQUFTLFFBQVEsQ0FBQyxRQUFnQjtJQUM5QixPQUFPLFFBQVEsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksUUFBUSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztBQUM3RSxDQUFDO0FBRUQsU0FBUyxTQUFTLENBQUMsUUFBZ0I7SUFDL0IsT0FBTyxRQUFRLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO0FBQzNDLENBQUM7QUFFRCxTQUFTLE9BQU8sQ0FBQyxRQUFnQjtJQUM3QixPQUFPLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQzNFLENBQUM7QUFFRCxTQUFTLEtBQUssQ0FBQyxRQUFnQjtJQUM5QixPQUFPLFFBQVEsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksUUFBUSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztBQUMxRSxDQUFDO0FBRUQsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUM5QixJQUFJLFFBQVEsR0FBRyxFQUFFLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDaEMsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxZQUFZLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxFQUFFO1FBQ3RELFFBQVEsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO0tBQ3BDO0lBRUQsTUFBTSxTQUFTLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUNsQyxNQUFNLFdBQVcsR0FBRyxTQUFTLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ2xELE1BQU0sUUFBUSxHQUFHLFNBQVMsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDdEMsTUFBTSxZQUFZLEdBQUcsU0FBUyxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUNqRCxNQUFNLFVBQVUsR0FBRyxTQUFTLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBRTdDLElBQUksbUJBQW1CLEdBQUcsQ0FBQyxDQUFDO0lBQzVCLFFBQVEsQ0FBQyxHQUFHLENBQUMsVUFBVSxJQUFJO1FBQ3ZCLE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFBO1FBQzNCLElBQUksR0FBRyxHQUFHLG1CQUFtQjtZQUFFLG1CQUFtQixHQUFHLEdBQUcsQ0FBQztJQUM3RCxDQUFDLENBQUMsQ0FBQztJQUVILElBQUksV0FBVyxDQUFDLE1BQU0sRUFBRTtRQUNwQixFQUFFLENBQUMsT0FBTyxDQUFDLDJCQUEyQixDQUFDLENBQUM7UUFDeEMsS0FBSyxNQUFNLFFBQVEsSUFBSSxXQUFXO1lBQzlCLEVBQUUsQ0FBQyxPQUFPLENBQ04sT0FBTyxtQkFBbUIsY0FBYyxFQUN4QyxRQUFRLEVBQ1IsRUFBRSxDQUFDLFlBQVksQ0FBQyxRQUFRLEVBQUUsUUFBUSxDQUFDLEVBQ25DLEVBQUUsQ0FBQyxhQUFhLENBQUMsUUFBUSxFQUFFLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FDeEQsQ0FBQztLQUNUO0lBRUosSUFBSSxRQUFRLENBQUMsTUFBTSxFQUFFO1FBQ3BCLEVBQUUsQ0FBQyxPQUFPLENBQUMsMkJBQTJCLENBQUMsQ0FBQztRQUNsQyxLQUFLLE1BQU0sUUFBUSxJQUFJLFFBQVE7WUFDM0IsRUFBRSxDQUFDLE9BQU8sQ0FDTixPQUFPLG1CQUFtQixjQUFjLEVBQ3hDLFFBQVEsRUFDUixFQUFFLENBQUMsWUFBWSxDQUFDLFFBQVEsRUFBRSxRQUFRLENBQUMsRUFDbkMsRUFBRSxDQUFDLGFBQWEsQ0FBQyxRQUFRLEVBQUUsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUN4RCxDQUFDO0tBQ1Q7SUFFRCxJQUFJLFlBQVksQ0FBQyxNQUFNLEVBQUU7UUFDckIsRUFBRSxDQUFDLE9BQU8sQ0FBQywyQkFBMkIsQ0FBQyxDQUFDO1FBQ3hDLEtBQUssTUFBTSxRQUFRLElBQUksWUFBWTtZQUFFLEVBQUUsQ0FBQyxPQUFPLENBQUMsT0FBTyxtQkFBbUIsR0FBRyxFQUFFLFFBQVEsQ0FBQyxDQUFDO0tBQzVGO0lBRUQsSUFBSSxVQUFVLENBQUMsTUFBTSxFQUFFO1FBQ25CLEVBQUUsQ0FBQyxPQUFPLENBQUMsMkJBQTJCLENBQUMsQ0FBQztRQUN4QyxLQUFLLE1BQU0sUUFBUSxJQUFJLFVBQVU7WUFBRSxFQUFFLENBQUMsT0FBTyxDQUFDLE9BQU8sbUJBQW1CLEdBQUcsRUFBRSxRQUFRLENBQUMsQ0FBQztLQUMxRjtBQUNMLENBQUMifQ==\",\"filename\":\"ll.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"ll.js\",\"url\":\"blob:file:///e491b488-9bac-4e40-9947-10669ae3d0b9\",\"moduleSequenceNumber\":4312}],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"home\",\"moduleSequenceNumber\":4312,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"serverExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\nimport { doBuyAndSoftenAll, doBackdoors } from \\\"lib/util\\\";\\r\\nimport { Augmentation } from \\\"lib/augmentation/augmentation\\\";\\r\\nexport async function main(ns) {\\r\\n    doBuyAndSoftenAll(ns);\\r\\n    await doBackdoors(ns);\\r\\n    const player = ns.getPlayer();\\r\\n    const checkFactions = player.factions.concat(ns.checkFactionInvitations());\\r\\n    const sortedFactions = checkFactions.sort((a, b) => (ns.getPlayer().currentWorkFactionName === b ? ns.getPlayer().workRepGained : 0) +\\r\\n        ns.getFactionRep(b) -\\r\\n        ((ns.getPlayer().currentWorkFactionName === a ? ns.getPlayer().workRepGained : 0) + ns.getFactionRep(a)));\\r\\n    //let sortedFactions = ALL_FACTIONS.sort((a, b) => ns.getFactionRep(b) - ns.getFactionRep(a));\\r\\n    let allPurchaseableAugs = [];\\r\\n    let topFaction = true;\\r\\n    for (const faction of sortedFactions) {\\r\\n        const augs = ns\\r\\n            .getAugmentationsFromFaction(faction)\\r\\n            .map((name) => {\\r\\n            return new Augmentation(ns, name, faction);\\r\\n        })\\r\\n            .sort((a, b) => a.rep - b.rep);\\r\\n        const augsToBuy = [];\\r\\n        for (const aug of augs) {\\r\\n            if (aug.isHackUseful() && !aug.owned) {\\r\\n                augsToBuy.push(aug);\\r\\n            }\\r\\n            if (aug.isHackUseful() && aug.purchaseable && !aug.owned && !aug.installed) {\\r\\n                allPurchaseableAugs.push(aug);\\r\\n            }\\r\\n        }\\r\\n        if (augsToBuy.length === 0 && !topFaction)\\r\\n            continue;\\r\\n        ns.tprintf(\\\"%s (rep: %d):\\\", faction, (ns.getPlayer().currentWorkFactionName === faction ? ns.getPlayer().workRepGained : 0) +\\r\\n            ns.getFactionRep(faction));\\r\\n        for (const aug of augsToBuy) {\\r\\n            ns.tprintf(\\\"  %s\\\", aug);\\r\\n            // printAugStats(aug.stats);\\r\\n        }\\r\\n        topFaction = false;\\r\\n    }\\r\\n    for (let i = 0; i < allPurchaseableAugs.length; i++) {\\r\\n        const checkName = allPurchaseableAugs[i].name;\\r\\n        let j = i + 1;\\r\\n        while (j < allPurchaseableAugs.length) {\\r\\n            if (allPurchaseableAugs[j].name === checkName) {\\r\\n                allPurchaseableAugs.splice(j, 1);\\r\\n            }\\r\\n            else {\\r\\n                j++;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n    allPurchaseableAugs = allPurchaseableAugs.sort((a, b) => b.price - a.price);\\r\\n    // reorder array to buy dependent augs first and purge augs that cant be bought\\r\\n    // because of a missing dependency, need to loop multiple times until no more dependencies are found\\r\\n    while (true) {\\r\\n        let didDepMove = false;\\r\\n        for (let i = 0; i < allPurchaseableAugs.length; i++) {\\r\\n            const augName = allPurchaseableAugs[i].name;\\r\\n            const depName = allPurchaseableAugs[i].dep;\\r\\n            if (depName === \\\"\\\")\\r\\n                continue;\\r\\n            let foundDep = false;\\r\\n            // check to see if we've already re-organized this dep and it is placed higher in the queue\\r\\n            for (let k = 0; k < i; k++) {\\r\\n                if (allPurchaseableAugs[k].name === depName) {\\r\\n                    foundDep = true;\\r\\n                }\\r\\n            }\\r\\n            if (foundDep)\\r\\n                continue;\\r\\n            const depLoc = allPurchaseableAugs.findIndex((a) => a.name === depName);\\r\\n            if (depLoc >= 0) {\\r\\n                const tmp = allPurchaseableAugs[depLoc];\\r\\n                // remove aug from current place\\r\\n                allPurchaseableAugs.splice(depLoc, 1);\\r\\n                // place it before the main aug\\r\\n                const curLoc = allPurchaseableAugs.findIndex((a) => a.name === augName);\\r\\n                allPurchaseableAugs.splice(curLoc, 0, tmp);\\r\\n                foundDep = true;\\r\\n                didDepMove = true;\\r\\n            }\\r\\n            // if we dont have the dependency queued, remove this aug from the buy list\\r\\n            if (!foundDep) {\\r\\n                ns.tprintf(\\\"WARNING: Unable to find dependency %s:%s in the queue\\\", allPurchaseableAugs[i].name, allPurchaseableAugs[i].dep);\\r\\n                allPurchaseableAugs.splice(i, 1);\\r\\n            }\\r\\n        }\\r\\n        if (!didDepMove)\\r\\n            break;\\r\\n    }\\r\\n    // if (allPurchaseableAugs.length > 0) {\\r\\n    //     ns.tprintf(\\\"============================\\\");\\r\\n    //     let mult = 1;\\r\\n    //     let total = 0;\\r\\n    //     for (let aug of allPurchaseableAugs) {\\r\\n    //         //if (ns.args[0]) ns.purchaseAugmentation(aug.faction, aug.name);\\r\\n    //         ns.tprintf(\\r\\n    //             \\\"%40s - %9s %s\\\",\\r\\n    //             aug.name,\\r\\n    //             ns.nFormat(aug.price * mult, \\\"$0.000a\\\"),\\r\\n    //             aug.dep !== undefined ? aug.dep : \\\"\\\"\\r\\n    //         );\\r\\n    //         total += aug.price * mult;\\r\\n    //         mult *= 1.9;\\r\\n    //     }\\r\\n    //     ns.tprintf(\\\"\\\\n%40s - %9s\\\", \\\"Total\\\", ns.nFormat(total, \\\"$0.000a\\\"));\\r\\n    // }\\r\\n    const buysafe = ns.getPlayer().currentWorkFactionName !== sortedFactions[0];\\r\\n    if (!buysafe && ns.args[0]) {\\r\\n        ns.tprintf(\\\"WARNING: Unable to buy augmentations when actively working for the top faction\\\");\\r\\n    }\\r\\n    let mult = 1;\\r\\n    const srcFile11 = ns.getOwnedSourceFiles().find((x) => x.n === 11);\\r\\n    const srcFile11Lvl = srcFile11 ? srcFile11.lvl : 0;\\r\\n    const multmult = 1.9 * [1, 0.96, 0.94, 0.93][srcFile11Lvl];\\r\\n    let total = Number.MAX_SAFE_INTEGER;\\r\\n    let startAug = 0;\\r\\n    const purchaseableAugs = allPurchaseableAugs.filter((a) => a.name !== \\\"The Red Pill\\\");\\r\\n    while (startAug < purchaseableAugs.length) {\\r\\n        total = 0;\\r\\n        mult = 1;\\r\\n        for (let augIdx = startAug; augIdx < purchaseableAugs.length; augIdx++) {\\r\\n            total += purchaseableAugs[augIdx].price * mult;\\r\\n            mult *= multmult;\\r\\n        }\\r\\n        if (total < ns.getPlayer().money)\\r\\n            break;\\r\\n        startAug++;\\r\\n    }\\r\\n    let affordableAugs = purchaseableAugs.slice(startAug);\\r\\n    // check if affordableAugs includes deps if they're not already installed\\r\\n    let redoUpdate = false;\\r\\n    for (const aug of affordableAugs) {\\r\\n        const depName = aug.dep;\\r\\n        if (depName === \\\"\\\")\\r\\n            continue;\\r\\n        if (ns.getOwnedAugmentations(true).includes(depName))\\r\\n            continue;\\r\\n        let depAug = affordableAugs.find((a) => a.name === depName);\\r\\n        if (depAug === undefined) {\\r\\n            // dependency is not installed, and not in the list to be installed, pull it from purchaseableAugs\\r\\n            depAug = purchaseableAugs.find((a) => a.name === depName);\\r\\n            if (depAug === undefined) {\\r\\n                ns.tprintf(\\\"ERROR: Unable to find dependency aug in the purchaseableAugs \\\" +\\r\\n                    \\\"array even though it should be there %s | %s\\\");\\r\\n                return;\\r\\n            }\\r\\n            const thisAugIdx = affordableAugs.findIndex((a) => a.name === aug.name);\\r\\n            affordableAugs.splice(thisAugIdx, 0, depAug);\\r\\n            redoUpdate = true;\\r\\n        }\\r\\n    }\\r\\n    if (redoUpdate) {\\r\\n        startAug = 0;\\r\\n        while (startAug < affordableAugs.length) {\\r\\n            total = 0;\\r\\n            mult = 1;\\r\\n            for (let augIdx = startAug; augIdx < affordableAugs.length; augIdx++) {\\r\\n                total += affordableAugs[augIdx].price * mult;\\r\\n                mult *= multmult;\\r\\n            }\\r\\n            if (total < ns.getPlayer().money)\\r\\n                break;\\r\\n            startAug++;\\r\\n        }\\r\\n        affordableAugs = affordableAugs.slice(startAug);\\r\\n    }\\r\\n    //if (affordableAugs.length === 0) return;\\r\\n    ns.tprintf(\\\"============================\\\");\\r\\n    total = 0;\\r\\n    mult = 1;\\r\\n    const startmoney = ns.getPlayer().money;\\r\\n    for (const aug of affordableAugs) {\\r\\n        if (ns.args[0] && buysafe)\\r\\n            ns.purchaseAugmentation(aug.faction, aug.name);\\r\\n        ns.tprintf(\\\"%50s - %9s %s\\\", aug.name, ns.nFormat(aug.price * mult, \\\"$0.000a\\\"), aug.dep);\\r\\n        total += aug.price * mult;\\r\\n        mult *= multmult;\\r\\n    }\\r\\n    // see how many Neuroflux Governors we can buy\\r\\n    let neurofluxFactionIdx = 0;\\r\\n    while (neurofluxFactionIdx < sortedFactions.length) {\\r\\n        if (ns.gang.inGang() && ns.gang.getGangInformation().faction === sortedFactions[neurofluxFactionIdx]) {\\r\\n            neurofluxFactionIdx++;\\r\\n        }\\r\\n        else if (sortedFactions[neurofluxFactionIdx] === \\\"Bladeburners\\\") {\\r\\n            neurofluxFactionIdx++;\\r\\n        }\\r\\n        else {\\r\\n            break;\\r\\n        }\\r\\n    }\\r\\n    const topFactionForNeuroflux = neurofluxFactionIdx >= sortedFactions.length ? \\\"\\\" : sortedFactions[neurofluxFactionIdx];\\r\\n    const topFactionRep = topFactionForNeuroflux !== \\\"\\\"\\r\\n        ? (ns.getPlayer().currentWorkFactionName === topFactionForNeuroflux ? ns.getPlayer().workRepGained : 0) +\\r\\n            ns.getFactionRep(topFactionForNeuroflux)\\r\\n        : 0;\\r\\n    let ngPrice = ns.getAugmentationPrice(\\\"NeuroFlux Governor\\\") * (ns.args[0] && buysafe ? 1 : mult);\\r\\n    let ngRepReq = ns.getAugmentationRepReq(\\\"NeuroFlux Governor\\\");\\r\\n    let nfCount = 1;\\r\\n    let neuroError = false;\\r\\n    while (true) {\\r\\n        if (total + ngPrice < startmoney && ngRepReq <= topFactionRep) {\\r\\n            if (ns.args[0] && buysafe) {\\r\\n                const result = ns.purchaseAugmentation(topFactionForNeuroflux, \\\"NeuroFlux Governor\\\");\\r\\n                if (!result) {\\r\\n                    ns.tprintf(\\\"ERROR, could not buy Neuroflux governor\\\");\\r\\n                    neuroError = true;\\r\\n                }\\r\\n            }\\r\\n            ns.tprintf(\\\"%50s - %9s %s\\\", \\\"NeuroFlux Governor +\\\" + nfCount.toString(), ns.nFormat(ngPrice, \\\"$0.000a\\\"), ns.nFormat(ngRepReq, \\\"0.000a\\\"));\\r\\n            nfCount++;\\r\\n            total += ngPrice;\\r\\n            ngPrice = ngPrice * 1.14 * multmult;\\r\\n            ngRepReq *= 1.14;\\r\\n        }\\r\\n        else {\\r\\n            ns.tprintf(\\\"%50s - %9s %s)\\\", \\\"(NeuroFlux Governor +\\\" + nfCount.toString(), ns.nFormat(ngPrice, \\\"$0.000a\\\"), ns.nFormat(ngRepReq, \\\"0.000a\\\"));\\r\\n            break;\\r\\n        }\\r\\n    }\\r\\n    const redPillAug = allPurchaseableAugs.find((a) => a.name === \\\"The Red Pill\\\");\\r\\n    if (!neuroError && redPillAug) {\\r\\n        if (ns.args[0] && buysafe)\\r\\n            ns.purchaseAugmentation(redPillAug.faction, redPillAug.name);\\r\\n        ns.tprintf(\\\"%50s - %9s %s\\\", \\\"The Red Pill\\\", ns.nFormat(0, \\\"$0.000a\\\"), ns.nFormat(redPillAug.rep, \\\"0.000a\\\"));\\r\\n    }\\r\\n    ns.tprintf(\\\"\\\\n%50s - %9s (%s)\\\", \\\"Total\\\", ns.nFormat(total, \\\"$0.000a\\\"), ns.nFormat(total + ngPrice, \\\"$0.000a\\\"));\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWNwLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibWNwLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLDZEQUE2RDtBQUM3RCxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsV0FBVyxFQUEwQixNQUFNLFVBQVUsQ0FBQztBQUNsRixPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sK0JBQStCLENBQUM7QUFFN0QsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixpQkFBaUIsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUN0QixNQUFNLFdBQVcsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUV0QixNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsU0FBUyxFQUFFLENBQUM7SUFFOUIsTUFBTSxhQUFhLEdBQUcsTUFBTSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLHVCQUF1QixFQUFFLENBQUMsQ0FBQztJQUMzRSxNQUFNLGNBQWMsR0FBRyxhQUFhLENBQUMsSUFBSSxDQUNyQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUNMLENBQUMsRUFBRSxDQUFDLFNBQVMsRUFBRSxDQUFDLHNCQUFzQixLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLFNBQVMsRUFBRSxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2hGLEVBQUUsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDO1FBQ25CLENBQUMsQ0FBQyxFQUFFLENBQUMsU0FBUyxFQUFFLENBQUMsc0JBQXNCLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsU0FBUyxFQUFFLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQy9HLENBQUM7SUFDRiw4RkFBOEY7SUFFOUYsSUFBSSxt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\",\"filename\":\"mcp.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/util.js\",\"url\":\"blob:file:///1dec6532-5c2a-4275-8229-8e98540e670a\",\"moduleSequenceNumber\":4070},{\"filename\":\"/lib/augmentation/augmentation.js\",\"url\":\"blob:file:///e696ee89-5cec-4230-858d-5830e5f26a6c\",\"moduleSequenceNumber\":4052},{\"filename\":\"/lib/util.js\",\"url\":\"blob:file:///17a30620-7d54-4212-af47-e7706ac7c9c1\",\"moduleSequenceNumber\":4070},{\"filename\":\"mcp.js\",\"url\":\"blob:file:///7f106c98-4627-44c0-bd3a-6d89cd0e2dc3\",\"moduleSequenceNumber\":4113}],\"dependents\":[],\"ramUsage\":54.9,\"server\":\"home\",\"moduleSequenceNumber\":4113,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"checkFactionInvitations\",\"cost\":3},{\"type\":\"fn\",\"name\":\"getFactionRep\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getAugmentationsFromFaction\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getOwnedSourceFiles\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getOwnedAugmentations\",\"cost\":5},{\"type\":\"fn\",\"name\":\"purchaseAugmentation\",\"cost\":5},{\"type\":\"fn\",\"name\":\"gang.inGang\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.getGangInformation\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getAugmentationPrice\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"getAugmentationRepReq\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"getAugmentationStats\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getAugmentationPrereq\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"connect\",\"cost\":2},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"purchaseTor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"purchaseProgram\",\"cost\":2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { allHosts, serverIsHackable, canExecuteOnServer, cleanLogs, doBuyAndSoftenAll } from \\\"lib/util\\\";\\r\\nimport { ModHackEnv } from \\\"lib/hack/mod_hack_env\\\";\\r\\nasync function calcIncome(ns, target, hosts, simMinutes = 2) {\\r\\n    return await new ModHackEnv(ns, target, hosts).fastSim(ns, 1000 * 60 * simMinutes);\\r\\n}\\r\\nexport async function main(ns) {\\r\\n    cleanLogs(ns);\\r\\n    doBuyAndSoftenAll(ns);\\r\\n    const allHostnames = allHosts(ns);\\r\\n    const executableHosts = allHostnames\\r\\n        .filter(canExecuteOnServer.bind(null, ns))\\r\\n        .filter((x) => x.indexOf(\\\"hacknet-node\\\") === -1);\\r\\n    const targetArr = allHostnames.filter(serverIsHackable.bind(null, ns)).filter((x) => ns.getServerMaxMoney(x) > 1);\\r\\n    let minutes = Number.MAX_SAFE_INTEGER / 60 / 1000;\\r\\n    if (ns.args[0] && !isNaN(Number(ns.args[0])))\\r\\n        minutes = Number(ns.args[0]);\\r\\n    let orderedTargetArr = [];\\r\\n    for (const target of targetArr) {\\r\\n        const income = await calcIncome(ns, target, executableHosts, minutes);\\r\\n        orderedTargetArr.push({ target: target, income: income });\\r\\n    }\\r\\n    orderedTargetArr = orderedTargetArr.sort((a, b) => b.income - a.income);\\r\\n    for (const ti of orderedTargetArr) {\\r\\n        ns.tprintf(\\\"%15s: %s/s\\\", ti.target, ns.nFormat(ti.income, \\\"($0.000a)\\\"));\\r\\n    }\\r\\n    if (ns.args[1] === \\\"check\\\") {\\r\\n        return;\\r\\n    }\\r\\n    const env = new ModHackEnv(ns, orderedTargetArr[0].target, executableHosts);\\r\\n    await ns.sleep(2000);\\r\\n    await env.init(ns, true);\\r\\n    while (await env.refresh(ns, minutes * 60 * 1000))\\r\\n        ;\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9kX2hhY2suanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJtb2RfaGFjay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsUUFBUSxFQUFFLGdCQUFnQixFQUFFLGtCQUFrQixFQUFFLFNBQVMsRUFBRSxpQkFBaUIsRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUN4RyxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFFbkQsS0FBSyxVQUFVLFVBQVUsQ0FBQyxFQUFNLEVBQUUsTUFBYyxFQUFFLEtBQWUsRUFBRSxVQUFVLEdBQUcsQ0FBQztJQUM3RSxPQUFPLE1BQU0sSUFBSSxVQUFVLENBQUMsRUFBRSxFQUFFLE1BQU0sRUFBRSxLQUFLLENBQUMsQ0FBQyxPQUFPLENBQUMsRUFBRSxFQUFFLElBQUksR0FBRyxFQUFFLEdBQUcsVUFBVSxDQUFDLENBQUM7QUFDdkYsQ0FBQztBQU9ELE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsU0FBUyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ2QsaUJBQWlCLENBQUMsRUFBRSxDQUFDLENBQUM7SUFFdEIsTUFBTSxZQUFZLEdBQUcsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ2xDLE1BQU0sZUFBZSxHQUFHLFlBQVk7U0FDL0IsTUFBTSxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLENBQUM7U0FDekMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLGNBQWMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDckQsTUFBTSxTQUFTLEdBQUcsWUFBWSxDQUFDLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFFbEgsSUFBSSxPQUFPLEdBQUcsTUFBTSxDQUFDLGdCQUFnQixHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUM7SUFDbEQsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFBRSxPQUFPLEdBQUcsTUFBTSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUUzRSxJQUFJLGdCQUFnQixHQUFtQixFQUFFLENBQUM7SUFDMUMsS0FBSyxNQUFNLE1BQU0sSUFBSSxTQUFTLEVBQUU7UUFDNUIsTUFBTSxNQUFNLEdBQUcsTUFBTSxVQUFVLENBQUMsRUFBRSxFQUFFLE1BQU0sRUFBRSxlQUFlLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFDdEUsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLENBQUMsQ0FBQztLQUM3RDtJQUVELGdCQUFnQixHQUFHLGdCQUFnQixDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBRXhFLEtBQUssTUFBTSxFQUFFLElBQUksZ0JBQWdCLEVBQUU7UUFDL0IsRUFBRSxDQUFDLE9BQU8sQ0FBQyxZQUFZLEVBQUUsRUFBRSxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsV0FBVyxDQUFDLENBQUMsQ0FBQztLQUMzRTtJQUVELElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxPQUFPLEVBQUU7UUFDeEIsT0FBTztLQUNWO0lBRUQsTUFBTSxHQUFHLEdBQUcsSUFBSSxVQUFVLENBQUMsRUFBRSxFQUFFLGdCQUFnQixDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sRUFBRSxlQUFlLENBQUMsQ0FBQztJQUM1RSxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFckIsTUFBTSxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUN6QixPQUFPLE1BQU0sR0FBRyxDQUFDLE9BQU8sQ0FBQyxFQUFFLEVBQUUsT0FBTyxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUM7UUFBQyxDQUFDO0FBQ3ZELENBQUMifQ==\",\"filename\":\"mod_hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/util.js\",\"url\":\"blob:file:///76b0e898-30c1-47a2-aa9e-fd911bc78cba\",\"moduleSequenceNumber\":123215},{\"filename\":\"/lib/hack/host.js\",\"url\":\"blob:file:///84b26c42-a6f4-404c-8bf9-9b8ad427a74b\",\"moduleSequenceNumber\":123208},{\"filename\":\"/lib/hack/cycle_production.js\",\"url\":\"blob:file:///84395a8a-4315-42c8-8a3f-764f79d0cf3a\",\"moduleSequenceNumber\":123207},{\"filename\":\"/lib/util.js\",\"url\":\"blob:file:///20fab32a-1fd9-4f34-b548-28a53646d36d\",\"moduleSequenceNumber\":123215},{\"filename\":\"/lib/hack/mod_hack_env.js\",\"url\":\"blob:file:///ca90b97c-ea13-484f-b207-ab3174f9018e\",\"moduleSequenceNumber\":123209},{\"filename\":\"/lib/util.js\",\"url\":\"blob:file:///72302856-90a5-471e-ae00-7ca50a104090\",\"moduleSequenceNumber\":123215},{\"filename\":\"mod_hack.js\",\"url\":\"blob:file:///55fa4656-a8ce-4cec-bc03-9456d47955e5\",\"moduleSequenceNumber\":123259}],\"dependents\":[],\"ramUsage\":21.15,\"server\":\"home\",\"moduleSequenceNumber\":4094,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getBitNodeMultipliers\",\"cost\":4},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getScriptIncome\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"purchaseTor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"purchaseProgram\",\"cost\":2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const processInfoArr = ns\\r\\n        .ps()\\r\\n        .filter((a) => a.filename.indexOf(\\\"/lib\\\") === -1 && a.filename.indexOf(\\\"ps.js\\\") === -1);\\r\\n    let maxScriptFileLength = 0;\\r\\n    processInfoArr.map(function (pi) {\\r\\n        const len = pi.filename.length - 2;\\r\\n        if (len > maxScriptFileLength)\\r\\n            maxScriptFileLength = len;\\r\\n    });\\r\\n    for (const pi of processInfoArr) {\\r\\n        const info = ns.getRunningScript(pi.pid);\\r\\n        let incomeStr = \\\"\\\";\\r\\n        if (info.onlineMoneyMade > 0)\\r\\n            incomeStr = ns.sprintf(\\\" %9s/s\\\", ns.nFormat(info.onlineMoneyMade / info.onlineRunningTime, \\\"$0.000a\\\"));\\r\\n        if ((info.filename === \\\"gang.js\\\" || info.filename === \\\"hacking_gang.js\\\") && ns.gang.inGang()) {\\r\\n            // let gangIncome = 0;\\r\\n            // let gangRep = 0;\\r\\n            // const members = ns.gang.getMemberNames().map((name) => ns.gang.getMemberInformation(name));\\r\\n            // for (const member of members) {\\r\\n            //     gangIncome += member.moneyGain;\\r\\n            //     gangRep += member.respectGain;\\r\\n            // }\\r\\n            incomeStr = ns.sprintf(\\\" %9s/s %8s Respect/s\\\", ns.nFormat(ns.gang.getGangInformation().moneyGainRate, \\\"$0.000a\\\"), ns.nFormat(ns.gang.getGangInformation().respectGainRate, \\\"0.000a\\\"));\\r\\n        }\\r\\n        if (info.args.length > 0) {\\r\\n            incomeStr += ns.sprintf(\\\" %s\\\", info.args);\\r\\n        }\\r\\n        ns.tprintf(`  %6d %-${maxScriptFileLength}s %7.2fGB%s`, pi.pid, pi.filename.slice(0, pi.filename.length - 3), info.ramUsage, incomeStr);\\r\\n    }\\r\\n    if (processInfoArr.length > 0) {\\r\\n        const maxRam = ns.getServerMaxRam(ns.getHostname());\\r\\n        const usedRam = ns.getServerUsedRam(ns.getHostname());\\r\\n        ns.tprintf(`\\\\n         %-${maxScriptFileLength}s %7.2fGB / %7.2fGB (%.2fGB Available)`, \\\"Total\\\", usedRam, maxRam, maxRam - usedRam);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(`  %s RAM Available: %dGB`, ns.getHostname(), ns.getServerMaxRam(ns.getHostname()));\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHMuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJwcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE1BQU0sY0FBYyxHQUFHLEVBQUU7U0FDcEIsRUFBRSxFQUFFO1NBQ0osTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRTVGLElBQUksbUJBQW1CLEdBQUcsQ0FBQyxDQUFDO0lBQzVCLGNBQWMsQ0FBQyxHQUFHLENBQUMsVUFBVSxFQUFFO1FBQzNCLE1BQU0sR0FBRyxHQUFHLEVBQUUsQ0FBQyxRQUFRLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQztRQUNuQyxJQUFJLEdBQUcsR0FBRyxtQkFBbUI7WUFBRSxtQkFBbUIsR0FBRyxHQUFHLENBQUM7SUFDN0QsQ0FBQyxDQUFDLENBQUM7SUFFSCxLQUFLLE1BQU0sRUFBRSxJQUFJLGNBQWMsRUFBRTtRQUM3QixNQUFNLElBQUksR0FBRyxFQUFFLENBQUMsZ0JBQWdCLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ3pDLElBQUksU0FBUyxHQUFHLEVBQUUsQ0FBQztRQUVuQixJQUFJLElBQUksQ0FBQyxlQUFlLEdBQUcsQ0FBQztZQUN4QixTQUFTLEdBQUcsRUFBRSxDQUFDLE9BQU8sQ0FBQyxRQUFRLEVBQUUsRUFBRSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsZUFBZSxHQUFHLElBQUksQ0FBQyxpQkFBaUIsRUFBRSxTQUFTLENBQUMsQ0FBQyxDQUFDO1FBRTNHLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxLQUFLLFNBQVMsSUFBSSxJQUFJLENBQUMsUUFBUSxLQUFLLGlCQUFpQixDQUFDLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRTtZQUMxRixzQkFBc0I7WUFDdEIsbUJBQW1CO1lBQ25CLDhGQUE4RjtZQUM5RixrQ0FBa0M7WUFDbEMsc0NBQXNDO1lBQ3RDLHFDQUFxQztZQUNyQyxJQUFJO1lBRUosU0FBUyxHQUFHLEVBQUUsQ0FBQyxPQUFPLENBQ2xCLHNCQUFzQixFQUN0QixFQUFFLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsa0JBQWtCLEVBQUUsQ0FBQyxhQUFhLEVBQUUsU0FBUyxDQUFDLEVBQ2pFLEVBQUUsQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxrQkFBa0IsRUFBRSxDQUFDLGVBQWUsRUFBRSxRQUFRLENBQUMsQ0FDckUsQ0FBQztTQUNMO1FBRUQsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7WUFDdEIsU0FBUyxJQUFJLEVBQUUsQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtTQUM1QztRQUVELEVBQUUsQ0FBQyxPQUFPLENBQ04sV0FBVyxtQkFBbUIsYUFBYSxFQUMzQyxFQUFFLENBQUMsR0FBRyxFQUNOLEVBQUUsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsUUFBUSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsRUFDNUMsSUFBSSxDQUFDLFFBQVEsRUFDYixTQUFTLENBQ1osQ0FBQztLQUNMO0lBRUQsSUFBSSxjQUFjLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtRQUMzQixNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsZUFBZSxDQUFDLEVBQUUsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDO1FBQ3BELE1BQU0sT0FBTyxHQUFHLEVBQUUsQ0FBQyxnQkFBZ0IsQ0FBQyxFQUFFLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQztRQUV0RCxFQUFFLENBQUMsT0FBTyxDQUNOLGdCQUFnQixtQkFBbUIsd0NBQXdDLEVBQzNFLE9BQU8sRUFDUCxPQUFPLEVBQ1AsTUFBTSxFQUNOLE1BQU0sR0FBRyxPQUFPLENBQ25CLENBQUM7S0FDTDtTQUFNO1FBQ0gsRUFBRSxDQUFDLE9BQU8sQ0FBQywwQkFBMEIsRUFBRSxFQUFFLENBQUMsV0FBVyxFQUFFLEVBQUUsRUFBRSxDQUFDLGVBQWUsQ0FBQyxFQUFFLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQyxDQUFDO0tBQ2xHO0FBQ0wsQ0FBQyJ9\",\"filename\":\"ps.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"ps.js\",\"url\":\"blob:file:///2073843d-0d3c-4377-8032-14d273afc002\",\"moduleSequenceNumber\":157332}],\"dependents\":[],\"ramUsage\":5.25,\"server\":\"home\",\"moduleSequenceNumber\":4095,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"gang.inGang\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.getGangInformation\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { ReservedPorts } from \\\"/lib/util\\\";\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        const data = ns.readPort(ReservedPorts.HACK_WRITE_INFO);\\r\\n        if (data !== \\\"NULL PORT DATA\\\") {\\r\\n            await ns.write(data[0], data[1]);\\r\\n        }\\r\\n        await ns.sleep(10);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVhZHBvcnQuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJyZWFkcG9ydC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBRTFDLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsT0FBTyxJQUFJLEVBQUU7UUFDVCxNQUFNLElBQUksR0FBd0MsRUFBRSxDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQUMsZUFBZSxDQUFDLENBQUM7UUFDN0YsSUFBSSxJQUFJLEtBQUssZ0JBQWdCLEVBQUU7WUFDM0IsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUNwQztRQUVELE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQztLQUN0QjtBQUNMLENBQUMifQ==\",\"filename\":\"readport.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":4096,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.installAugmentations(\\\"\\\");\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVzZXQuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJyZXNldC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLEVBQUUsQ0FBQyxvQkFBb0IsQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUNoQyxDQUFDIn0=\",\"filename\":\"reset.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"reset.js\",\"url\":\"blob:file:///1e01a718-03e6-4e5d-a4d8-a1ce2897b9f0\",\"moduleSequenceNumber\":4048}],\"dependents\":[],\"ramUsage\":6.6,\"server\":\"home\",\"moduleSequenceNumber\":4097,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"installAugmentations\",\"cost\":5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\nexport function autocomplete(data, args) {\\r\\n    return [\\\"hack\\\", \\\"terror\\\", \\\"money\\\", \\\"cha\\\"];\\r\\n}\\r\\nexport async function main(ns) {\\r\\n    const members = ns.gang\\r\\n        .getMemberNames()\\r\\n        .map((name) => ns.gang.getMemberInformation(name))\\r\\n        .sort((a, b) => a.hack - b.hack);\\r\\n    if (ns.args[0] === undefined || ns.args[0] === \\\"hack\\\") {\\r\\n        for (const member of members) {\\r\\n            ns.gang.setMemberTask(member.name, \\\"Train Hacking\\\");\\r\\n        }\\r\\n    }\\r\\n    if (ns.args[0] === \\\"cha\\\") {\\r\\n        for (const member of members) {\\r\\n            ns.gang.setMemberTask(member.name, \\\"Train Charisma\\\");\\r\\n        }\\r\\n    }\\r\\n    if (ns.args[0] === \\\"terror\\\") {\\r\\n        let start = 0;\\r\\n        while (true) {\\r\\n            let wantedLevelGain = 0;\\r\\n            for (let memberIdx = 0; memberIdx < members.length; memberIdx++) {\\r\\n                const member = members[memberIdx];\\r\\n                if (member.hack < 10000) {\\r\\n                    ns.gang.setMemberTask(member.name, \\\"Train Hacking\\\");\\r\\n                }\\r\\n                else if (memberIdx <= start) {\\r\\n                    ns.gang.setMemberTask(member.name, \\\"Ethical Hacking\\\");\\r\\n                }\\r\\n                else {\\r\\n                    ns.gang.setMemberTask(member.name, \\\"Cyberterrorism\\\");\\r\\n                }\\r\\n                wantedLevelGain += ns.gang.getMemberInformation(member.name).wantedLevelGain;\\r\\n            }\\r\\n            if (wantedLevelGain <= 0 || start >= members.length)\\r\\n                break;\\r\\n            start++;\\r\\n        }\\r\\n    }\\r\\n    if (ns.args[0] === \\\"money\\\") {\\r\\n        let start = 0;\\r\\n        while (true) {\\r\\n            let wantedLevelGain = 0;\\r\\n            for (let memberIdx = 0; memberIdx < members.length; memberIdx++) {\\r\\n                const member = members[memberIdx];\\r\\n                if (member.hack < 10000) {\\r\\n                    ns.gang.setMemberTask(member.name, \\\"Train Hacking\\\");\\r\\n                }\\r\\n                else if (memberIdx <= start) {\\r\\n                    ns.gang.setMemberTask(member.name, \\\"Ethical Hacking\\\");\\r\\n                }\\r\\n                else {\\r\\n                    ns.gang.setMemberTask(member.name, \\\"Money Laundering\\\");\\r\\n                }\\r\\n                wantedLevelGain += ns.gang.getMemberInformation(member.name).wantedLevelGain;\\r\\n            }\\r\\n            if (wantedLevelGain <= 0 || start >= members.length)\\r\\n                break;\\r\\n            start++;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2V0X2dhbmcuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJzZXRfZ2FuZy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSw2REFBNkQ7QUFDN0QsTUFBTSxVQUFVLFlBQVksQ0FBQyxJQUFZLEVBQUUsSUFBWTtJQUNuRCxPQUFPLENBQUMsTUFBTSxFQUFFLFFBQVEsRUFBRSxPQUFPLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFDOUMsQ0FBQztBQUVELE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxPQUFPLEdBQUcsRUFBRSxDQUFDLElBQUk7U0FDbEIsY0FBYyxFQUFFO1NBQ2hCLEdBQUcsQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUNqRCxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNyQyxJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssU0FBUyxJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssTUFBTSxFQUFFO1FBQ25ELEtBQUssTUFBTSxNQUFNLElBQUksT0FBTyxFQUFFO1lBQzFCLEVBQUUsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsZUFBZSxDQUFDLENBQUM7U0FDdkQ7S0FDSjtJQUVELElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxLQUFLLEVBQUU7UUFDdEIsS0FBSyxNQUFNLE1BQU0sSUFBSSxPQUFPLEVBQUU7WUFDMUIsRUFBRSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxnQkFB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\",\"filename\":\"set_gang.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"set_gang.js\",\"url\":\"blob:file:///c0dc090f-c938-448d-a527-4f965a00c54a\",\"moduleSequenceNumber\":220591}],\"dependents\":[],\"ramUsage\":6.7,\"server\":\"home\",\"moduleSequenceNumber\":4098,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gang.getMemberNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.getMemberInformation\",\"cost\":2},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"gang.setMemberTask\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function help(ns) {\\r\\n    ns.tprintf(\\\"Sleeve Modes:\\\");\\r\\n    ns.tprintf(\\\"  h     : show help text\\\");\\r\\n    ns.tprintf(\\\"  all   : all stats\\\");\\r\\n    ns.tprintf(\\\"  hack  : all hack\\\");\\r\\n    ns.tprintf(\\\"  str   : all str\\\");\\r\\n    ns.tprintf(\\\"  def   : all def\\\");\\r\\n    ns.tprintf(\\\"  dex   : all dex\\\");\\r\\n    ns.tprintf(\\\"  agi   : all agi\\\");\\r\\n    ns.tprintf(\\\"  cha   : all cha\\\");\\r\\n    ns.tprintf(\\\"  mug   : all mug\\\");\\r\\n    ns.tprintf(\\\"  hom   : all homicide\\\");\\r\\n    ns.tprintf(\\\"  shock : all shock recovery\\\");\\r\\n}\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[0] === \\\"h\\\" || ns.args[0] === undefined) {\\r\\n        help(ns);\\r\\n        return;\\r\\n    }\\r\\n    switch (ns.args[0]) {\\r\\n        case \\\"all\\\":\\r\\n            ns.sleeve.travel(0, \\\"Sector-12\\\");\\r\\n            ns.sleeve.setToGymWorkout(0, \\\"Powerhouse Gym\\\", \\\"str\\\");\\r\\n            ns.sleeve.travel(1, \\\"Sector-12\\\");\\r\\n            ns.sleeve.setToGymWorkout(1, \\\"Powerhouse Gym\\\", \\\"def\\\");\\r\\n            ns.sleeve.travel(2, \\\"Sector-12\\\");\\r\\n            ns.sleeve.setToGymWorkout(2, \\\"Powerhouse Gym\\\", \\\"dex\\\");\\r\\n            ns.sleeve.travel(3, \\\"Sector-12\\\");\\r\\n            ns.sleeve.setToGymWorkout(3, \\\"Powerhouse Gym\\\", \\\"agi\\\");\\r\\n            ns.sleeve.travel(4, \\\"Volhaven\\\");\\r\\n            ns.sleeve.setToUniversityCourse(4, \\\"ZB Institute of Technology\\\", \\\"Algorithms\\\");\\r\\n            ns.sleeve.travel(5, \\\"Volhaven\\\");\\r\\n            ns.sleeve.setToUniversityCourse(5, \\\"ZB Institute of Technology\\\", \\\"Leadership\\\");\\r\\n            break;\\r\\n        case \\\"hack\\\":\\r\\n            for (let i = 0; i < ns.sleeve.getNumSleeves(); i++) {\\r\\n                ns.sleeve.travel(i, \\\"Volhaven\\\");\\r\\n                ns.sleeve.setToUniversityCourse(i, \\\"ZB Institute of Technology\\\", \\\"Algorithms\\\");\\r\\n            }\\r\\n            break;\\r\\n        case \\\"cha\\\":\\r\\n            for (let i = 0; i < ns.sleeve.getNumSleeves(); i++) {\\r\\n                ns.sleeve.travel(i, \\\"Volhaven\\\");\\r\\n                ns.sleeve.setToUniversityCourse(i, \\\"ZB Institute of Technology\\\", \\\"Leadership\\\");\\r\\n            }\\r\\n            break;\\r\\n        case \\\"str\\\":\\r\\n        case \\\"def\\\":\\r\\n        case \\\"dex\\\":\\r\\n        case \\\"agi\\\":\\r\\n            for (let i = 0; i < ns.sleeve.getNumSleeves(); i++) {\\r\\n                ns.sleeve.travel(i, \\\"Sector-12\\\");\\r\\n                ns.sleeve.setToGymWorkout(i, \\\"Powerhouse Gym\\\", ns.args[0]);\\r\\n            }\\r\\n            break;\\r\\n        case \\\"mug\\\":\\r\\n            for (let i = 0; i < ns.sleeve.getNumSleeves(); i++) {\\r\\n                ns.sleeve.setToCommitCrime(i, \\\"Mug\\\");\\r\\n            }\\r\\n            break;\\r\\n        case \\\"hom\\\":\\r\\n            for (let i = 0; i < ns.sleeve.getNumSleeves(); i++) {\\r\\n                ns.sleeve.setToCommitCrime(i, \\\"Homicide\\\");\\r\\n            }\\r\\n            break;\\r\\n        case \\\"shock\\\":\\r\\n            for (let i = 0; i < ns.sleeve.getNumSleeves(); i++) {\\r\\n                ns.sleeve.setToShockRecovery(i);\\r\\n            }\\r\\n            break;\\r\\n        default:\\r\\n            ns.tprintf(`ERROR: Unknown sleeve mode: ${ns.args[0]}`);\\r\\n            help(ns);\\r\\n            break;\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2xlZXZlLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsic2xlZXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLFNBQVMsSUFBSSxDQUFDLEVBQU07SUFDaEIsRUFBRSxDQUFDLE9BQU8sQ0FBQyxlQUFlLENBQUMsQ0FBQztJQUM1QixFQUFFLENBQUMsT0FBTyxDQUFDLDBCQUEwQixDQUFDLENBQUM7SUFDdkMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDO0lBQ2xDLEVBQUUsQ0FBQyxPQUFPLENBQUMsb0JBQW9CLENBQUMsQ0FBQztJQUNqQyxFQUFFLENBQUMsT0FBTyxDQUFDLG1CQUFtQixDQUFDLENBQUM7SUFDaEMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO0lBQ2hDLEVBQUUsQ0FBQyxPQUFPLENBQUMsbUJBQW1CLENBQUMsQ0FBQztJQUNoQyxFQUFFLENBQUMsT0FBTyxDQUFDLG1CQUFtQixDQUFDLENBQUM7SUFDaEMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO0lBQ2hDLEVBQUUsQ0FBQyxPQUFPLENBQUMsbUJBQW1CLENBQUMsQ0FBQztJQUNoQyxFQUFFLENBQUMsT0FBTyxDQUFDLHdCQUF3QixDQUFDLENBQUM7SUFDckMsRUFBRSxDQUFDLE9BQU8sQ0FBQyw4QkFBOEIsQ0FBQyxDQUFDO0FBQy9DLENBQUM7QUFFRCxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFPO0lBQzlCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxHQUFHLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxTQUFTLEVBQUU7UUFDaEQsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ1QsT0FBTztLQUNWO0lBRUQsUUFBUSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFO1FBQ2hCLEtBQUssS0FBSztZQUNOLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxXQUFXLENBQUMsQ0FBQztZQUNqQyxFQUFFLENBQUMsTUFBTSxDQUFDLGVBQWUsQ0FBQyxDQUFDLEVBQUUsZ0JBQWdCLEVBQUUsS0FBSyxDQUFDLENBQUM7WUFDdEQsRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLFdBQVcsQ0FBQyxDQUFDO1lBQ2pDLEVBQUUsQ0FBQyxNQUFNLENBQUMsZUFBZSxDQUFDLENBQUMsRUFBRSxnQkFBZ0IsRUFBRSxLQUFLLENBQUMsQ0FBQztZQUN0RCxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsV0FBVyxDQUFDLENBQUM7WUFDakMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxlQUFlLENBQUMsQ0FBQyxFQUFFLGdCQUFnQixFQUFFLEtBQUssQ0FBQyxDQUFDO1lBQ3RELEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxXQUFXLENBQUMsQ0FBQztZQUNqQyxFQUFFLENBQUMsTUFBTSxDQUFDLGVBQWUsQ0FBQyxDQUFDLEVBQUUsZ0JBQWdCLEVBQUUsS0FBSyxDQUFDLENBQUM7WUFFdEQsRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLFVBQVUsQ0FBQyxDQUFDO1lBQ2hDLEVBQUUsQ0FBQyxNQUFNLENBQUMscUJBQXFCLENBQUMsQ0FBQyxFQUFFLDRCQUE0QixFQUFFLFlBQVksQ0FBQyxDQUFDO1lBQy9FLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxVQUFVLENBQUMsQ0FBQztZQUNoQyxFQUFFLENBQUMsTUFBTSxDQUFDLHFCQUFxQixDQUFDLENBQUMsRUFBRSw0QkFBNEIsRUFBRSxZQUFZLENBQUMsQ0FBQztZQUMvRSxNQUFNO1FBQ1YsS0FBSyxNQUFNO1lBQ1AsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxNQUFNLENBQUMsYUFBYSxFQUFFLEVBQUUsQ0FBQyxFQUFFLEVBQUU7Z0JBQ2hELEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxVQUFVLENBQUMsQ0FBQztnQkFDaEMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDLEVBQUUsNEJBQTRCLEVBQUUsWUFBWSxDQUFDLENBQUM7YUFDbEY7WUFDRCxNQUFNO1FBQ1YsS0FBSyxLQUFLO1lBQ04sS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxNQUFNLENBQUMsYUFBYSxFQUFFLEVBQUUsQ0FBQyxFQUFFLEVBQUU7Z0JBQ2hELEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxVQUFVLENBQUMsQ0FBQztnQkFDaEMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDLEVBQUUsNEJBQTRCLEVBQUUsWUFBWSxDQUFDLENBQUM7YUFDbEY7WUFDRCxNQUFNO1FBQ1YsS0FBSyxLQUFLLENBQUM7UUFDWCxLQUFLLEtBQUssQ0FBQztRQUNYLEtBQUssS0FBSyxDQUFDO1FBQ1gsS0FBSyxLQUFLO1lBQ04sS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxNQUFNLENBQUMsYUFBYSxFQUFFLEVBQUUsQ0FBQyxFQUFFLEVBQUU7Z0JBQ2hELEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxXQUFXLENBQUMsQ0FBQztnQkFDakMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxlQUFlLENBQUMsQ0FBQyxFQUFFLGdCQUFnQixFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQzthQUM5RDtZQUNELE1BQU07UUFDVixLQUFLLEtBQUs7WUFDTixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDLE1BQU0sQ0FBQyxhQUFhLEVBQUUsRUFBRSxDQUFDLEVBQUUsRUFBRTtnQkFDaEQsRUFBRSxDQUFDLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUM7YUFDeEM7WUFDRCxNQUFNO1FBQ1YsS0FBSyxLQUFLO1lBQ04sS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxNQUFNLENBQUMsYUFBYSxFQUFFLEVBQUUsQ0FBQyxFQUFFLEVBQUU7Z0JBQ2hELEVBQUUsQ0FBQyxNQUFNLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxFQUFFLFVBQVUsQ0FBQyxDQUFDO2FBQzdDO1lBQ0QsTUFBTTtRQUNWLEtBQUssT0FBTztZQUNSLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUMsTUFBTSxDQUFDLGFBQWEsRUFBRSxFQUFFLENBQUMsRUFBRSxFQUFFO2dCQUNoRCxFQUFFLENBQUMsTUFBTSxDQUFDLGtCQUFrQixDQUFDLENBQUMsQ0FBQyxDQUFDO2FBQ25DO1lBQ0QsTUFBTTtRQUNWO1lBQ0ksRUFBRSxDQUFDLE9BQU8sQ0FBQywrQkFBK0IsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7WUFDeEQsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQ1QsTUFBTTtLQUNiO0FBQ0wsQ0FBQyJ9\",\"filename\":\"sleeve.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"sleeve.js\",\"url\":\"blob:file:///8ff004af-c33e-4df2-afaf-d12c836ba073\",\"moduleSequenceNumber\":4115}],\"dependents\":[],\"ramUsage\":25.6,\"server\":\"home\",\"moduleSequenceNumber\":4115,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"sleeve.travel\",\"cost\":4},{\"type\":\"fn\",\"name\":\"sleeve.setToGymWorkout\",\"cost\":4},{\"type\":\"fn\",\"name\":\"sleeve.setToUniversityCourse\",\"cost\":4},{\"type\":\"fn\",\"name\":\"sleeve.getNumSleeves\",\"cost\":4},{\"type\":\"fn\",\"name\":\"sleeve.setToCommitCrime\",\"cost\":4},{\"type\":\"fn\",\"name\":\"sleeve.setToShockRecovery\",\"cost\":4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function isHackUseful(stats) {\\r\\n    return true;\\r\\n    if (stats.company_rep_mult)\\r\\n        return true;\\r\\n    if (stats.faction_rep_mult)\\r\\n        return true;\\r\\n    if (stats.hacking_chance_mult)\\r\\n        return true;\\r\\n    if (stats.hacking_exp_mult)\\r\\n        return true;\\r\\n    if (stats.hacking_grow_mult)\\r\\n        return true;\\r\\n    if (stats.hacking_money_mult)\\r\\n        return true;\\r\\n    if (stats.hacking_mult)\\r\\n        return true;\\r\\n    if (stats.hacking_speed_mult)\\r\\n        return true;\\r\\n    if (stats.crime_money_mult)\\r\\n        return true;\\r\\n    return false;\\r\\n}\\r\\nexport async function main(ns) {\\r\\n    let purchaseableAugs = [];\\r\\n    for (let sleeveId = 0; sleeveId < ns.sleeve.getNumSleeves(); sleeveId++) {\\r\\n        for (const aug of ns.sleeve.getSleevePurchasableAugs(sleeveId)) {\\r\\n            const stats = ns.getAugmentationStats(aug.name);\\r\\n            if (isHackUseful(stats) || ns.args[0]) {\\r\\n                purchaseableAugs.push({\\r\\n                    sleeveId: sleeveId,\\r\\n                    cost: aug.cost,\\r\\n                    name: aug.name,\\r\\n                    stats: stats,\\r\\n                });\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n    purchaseableAugs = purchaseableAugs.sort((a, b) => a.cost - b.cost);\\r\\n    for (const aug of purchaseableAugs) {\\r\\n        // ns.tprintf(\\\"%d - %s [%s]\\\", aug.sleeveId, aug.name, ns.nFormat(aug.cost, \\\"$0.000a\\\"))\\r\\n        if (aug.cost > ns.getPlayer().money)\\r\\n            break;\\r\\n        ns.sleeve.purchaseSleeveAug(aug.sleeveId, aug.name);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2xlZXZlX2F1Zy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbInNsZWV2ZV9hdWcudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsU0FBUyxZQUFZLENBQUMsS0FBd0I7SUFDMUMsT0FBTyxJQUFJLENBQUM7SUFDWixJQUFJLEtBQUssQ0FBQyxnQkFBZ0I7UUFBRSxPQUFPLElBQUksQ0FBQztJQUN4QyxJQUFJLEtBQUssQ0FBQyxnQkFBZ0I7UUFBRSxPQUFPLElBQUksQ0FBQztJQUN4QyxJQUFJLEtBQUssQ0FBQyxtQkFBbUI7UUFBRSxPQUFPLElBQUksQ0FBQztJQUMzQyxJQUFJLEtBQUssQ0FBQyxnQkFBZ0I7UUFBRSxPQUFPLElBQUksQ0FBQztJQUN4QyxJQUFJLEtBQUssQ0FBQyxpQkFBaUI7UUFBRSxPQUFPLElBQUksQ0FBQztJQUN6QyxJQUFJLEtBQUssQ0FBQyxrQkFBa0I7UUFBRSxPQUFPLElBQUksQ0FBQztJQUMxQyxJQUFJLEtBQUssQ0FBQyxZQUFZO1FBQUUsT0FBTyxJQUFJLENBQUM7SUFDcEMsSUFBSSxLQUFLLENBQUMsa0JBQWtCO1FBQUUsT0FBTyxJQUFJLENBQUM7SUFDN0MsSUFBSSxLQUFLLENBQUMsZ0JBQWdCO1FBQUUsT0FBTyxJQUFJLENBQUM7SUFFckMsT0FBTyxLQUFLLENBQUM7QUFDakIsQ0FBQztBQUVELE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsSUFBSSxnQkFBZ0IsR0FLZCxFQUFFLENBQUM7SUFJVCxLQUFLLElBQUksUUFBUSxHQUFHLENBQUMsRUFBRSxRQUFRLEdBQUcsRUFBRSxDQUFDLE1BQU0sQ0FBQyxhQUFhLEVBQUUsRUFBRSxRQUFRLEVBQUUsRUFBRTtRQUNyRSxLQUFLLE1BQU0sR0FBRyxJQUFJLEVBQUUsQ0FBQyxNQUFNLENBQUMsd0JBQXdCLENBQUMsUUFBUSxDQUFDLEVBQUU7WUFDNUQsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLG9CQUFvQixDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUNoRCxJQUFJLFlBQVksQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFO2dCQUNuQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUM7b0JBQ2xCLFFBQVEsRUFBRSxRQUFRO29CQUNsQixJQUFJLEVBQUUsR0FBRyxDQUFDLElBQUk7b0JBQ2QsSUFBSSxFQUFFLEdBQUcsQ0FBQyxJQUFJO29CQUNkLEtBQUssRUFBRSxLQUFLO2lCQUNmLENBQUMsQ0FBQzthQUNOO1NBQ0o7S0FDSjtJQUVKLGdCQUFnQixHQUFHLGdCQUFnQixDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFBO0lBRW5FLEtBQUssTUFBTSxHQUFHLElBQUksZ0JBQWdCLEVBQUU7UUFDbkMsc0ZBQXNGO1FBQ3RGLElBQUksR0FBRyxDQUFDLElBQUksR0FBRyxFQUFFLENBQUMsU0FBUyxFQUFFLENBQUMsS0FBSztZQUNsQyxNQUFNO1FBQ1AsRUFBRSxDQUFDLE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLENBQUMsUUFBUSxFQUFFLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztLQUNwRDtBQUNGLENBQUMifQ==\",\"filename\":\"sleeve_aug.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"sleeve_aug.js\",\"url\":\"blob:file:///bc7266ad-79fc-4180-ba5a-d02467890ae7\",\"moduleSequenceNumber\":407294}],\"dependents\":[],\"ramUsage\":19.1,\"server\":\"home\",\"moduleSequenceNumber\":4100,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"sleeve.getNumSleeves\",\"cost\":4},{\"type\":\"fn\",\"name\":\"sleeve.getSleevePurchasableAugs\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getAugmentationStats\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"sleeve.purchaseSleeveAug\",\"cost\":4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { allHosts, serverIsHackable, canExecuteOnServer, cleanLogs, doBuyAndSoftenAll } from \\\"lib/util\\\";\\r\\nimport { SmartHackEnv } from \\\"lib/hack/smart_hack_env\\\";\\r\\nasync function calcIncome(ns, target, hosts, simMinutes = 2) {\\r\\n    return await new SmartHackEnv(ns, target, hosts).fastSim(ns, 1000 * 60 * simMinutes);\\r\\n}\\r\\nexport async function main(ns) {\\r\\n    ns.tail();\\r\\n    cleanLogs(ns);\\r\\n    doBuyAndSoftenAll(ns);\\r\\n    const allHostnames = allHosts(ns);\\r\\n    const executableHosts = allHostnames\\r\\n        .filter(canExecuteOnServer.bind(null, ns))\\r\\n        .filter((x) => x.indexOf(\\\"hacknet-node\\\") === -1);\\r\\n    const targetArr = allHostnames.filter(serverIsHackable.bind(null, ns)).filter((x) => ns.getServerMaxMoney(x) > 1);\\r\\n    let orderedTargetArr = [];\\r\\n    for (const target of targetArr) {\\r\\n        let minutes = 2;\\r\\n        if (ns.args[0] && !isNaN(Number(ns.args[0])))\\r\\n            minutes = Number(ns.args[0]);\\r\\n        const income = await calcIncome(ns, target, executableHosts, minutes);\\r\\n        orderedTargetArr.push({ target: target, income: income });\\r\\n    }\\r\\n    orderedTargetArr = orderedTargetArr.sort((a, b) => b.income - a.income);\\r\\n    for (const ti of orderedTargetArr) {\\r\\n        ns.tprintf(\\\"%15s: %s/s\\\", ti.target, ns.nFormat(ti.income, \\\"($0.000a)\\\"));\\r\\n    }\\r\\n    if (ns.args[1] === \\\"check\\\") {\\r\\n        return;\\r\\n    }\\r\\n    const env = new SmartHackEnv(ns, orderedTargetArr[0].target, executableHosts);\\r\\n    // const env = new SmartHackEnv(ns, orderedTargetArr[0].target, [\\\"pserv-3\\\"]);\\r\\n    // const env = new SmartHackEnv(ns, orderedTargetArr[1].target, [\\\"pserv-4\\\"]);\\r\\n    // const env = new SmartHackEnv(ns, orderedTargetArr[2].target, [\\\"pserv-5\\\"]);\\r\\n    // const env = new SmartHackEnv(ns, orderedTargetArr[3].target, [\\\"pserv-6\\\"]);\\r\\n    // const env = new SmartHackEnv(ns, orderedTargetArr[4].target, [\\\"pserv-7\\\"]);\\r\\n    // const env = new SmartHackEnv(ns, orderedTargetArr[5].target, [\\\"pserv-8\\\"]);\\r\\n    // const env = new SmartHackEnv(ns, orderedTargetArr[6].target, [\\\"pserv-9\\\"]);\\r\\n    await env.init(ns, true);\\r\\n    while (await env.refresh(ns))\\r\\n        ;\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic21hcnRfaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbInNtYXJ0X2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLFFBQVEsRUFBRSxnQkFBZ0IsRUFBRSxrQkFBa0IsRUFBRSxTQUFTLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFDeEcsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBRXZELEtBQUssVUFBVSxVQUFVLENBQUMsRUFBTSxFQUFFLE1BQWMsRUFBRSxLQUFlLEVBQUUsVUFBVSxHQUFHLENBQUM7SUFDN0UsT0FBTyxNQUFNLElBQUksWUFBWSxDQUFDLEVBQUUsRUFBRSxNQUFNLEVBQUUsS0FBSyxDQUFDLENBQUMsT0FBTyxDQUFDLEVBQUUsRUFBRSxJQUFJLEdBQUcsRUFBRSxHQUFHLFVBQVUsQ0FBQyxDQUFDO0FBQ3pGLENBQUM7QUFPRCxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUNWLFNBQVMsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUNkLGlCQUFpQixDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBRXRCLE1BQU0sWUFBWSxHQUFHLFFBQVEsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUNsQyxNQUFNLGVBQWUsR0FBRyxZQUFZO1NBQy9CLE1BQU0sQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1NBQ3pDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxjQUFjLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3JELE1BQU0sU0FBUyxHQUFHLFlBQVksQ0FBQyxNQUFNLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLGlCQUFpQixDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBRWxILElBQUksZ0JBQWdCLEdBQW1CLEVBQUUsQ0FBQztJQUMxQyxLQUFLLE1BQU0sTUFBTSxJQUFJLFNBQVMsRUFBRTtRQUM1QixJQUFJLE9BQU8sR0FBRyxDQUFDLENBQUM7UUFDaEIsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFBRSxPQUFPLEdBQUcsTUFBTSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUUzRSxNQUFNLE1BQU0sR0FBRyxNQUFNLFVBQVUsQ0FBQyxFQUFFLEVBQUUsTUFBTSxFQUFFLGVBQWUsRUFBRSxPQUFPLENBQUMsQ0FBQztRQUN0RSxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsQ0FBQyxDQUFDO0tBQzdEO0lBRUQsZ0JBQWdCLEdBQUcsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUM7SUFFeEUsS0FBSyxNQUFNLEVBQUUsSUFBSSxnQkFBZ0IsRUFBRTtRQUMvQixFQUFFLENBQUMsT0FBTyxDQUFDLFlBQVksRUFBRSxFQUFFLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxXQUFXLENBQUMsQ0FBQyxDQUFDO0tBQzNFO0lBRUQsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLE9BQU8sRUFBRTtRQUN4QixPQUFPO0tBQ1Y7SUFFRCxNQUFNLEdBQUcsR0FBRyxJQUFJLFlBQVksQ0FBQyxFQUFFLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxFQUFFLGVBQWUsQ0FBQyxDQUFDO0lBQzlFLDZFQUE2RTtJQUM3RSw2RUFBNkU7SUFDN0UsNkVBQTZFO0lBQzdFLDZFQUE2RTtJQUM3RSw2RUFBNkU7SUFDN0UsNkVBQTZFO0lBQzdFLDZFQUE2RTtJQUM3RSxNQUFNLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQ3pCLE9BQU8sTUFBTSxHQUFHLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQztRQUFDLENBQUM7QUFDbEMsQ0FBQyJ9\",\"filename\":\"smart_hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/util.js\",\"url\":\"blob:file:///f7b9bb2a-f643-47b6-bdb6-75e3fc48efa6\",\"moduleSequenceNumber\":141785},{\"filename\":\"/lib/hack/host.js\",\"url\":\"blob:file:///a1383bc4-ec49-4262-a0a2-cd888f419564\",\"moduleSequenceNumber\":141778},{\"filename\":\"/lib/hack/cycle_production.js\",\"url\":\"blob:file:///add6d790-1a18-40d0-9eea-475856e8711c\",\"moduleSequenceNumber\":141777},{\"filename\":\"/lib/util.js\",\"url\":\"blob:file:///37efef8f-3b40-4f6b-b06b-50e757b4c488\",\"moduleSequenceNumber\":141785},{\"filename\":\"/lib/hack/smart_hack_env.js\",\"url\":\"blob:file:///0cd0b67a-a52e-4a16-825d-ded8237000d9\",\"moduleSequenceNumber\":141780},{\"filename\":\"/lib/util.js\",\"url\":\"blob:file:///5cf0b00e-b87e-4f64-9f90-8aedcaf36c07\",\"moduleSequenceNumber\":141785},{\"filename\":\"smart_hack.js\",\"url\":\"blob:file:///2b9e52e2-0d71-41d9-98c2-0c5e0e9c239b\",\"moduleSequenceNumber\":141830}],\"dependents\":[],\"ramUsage\":21.15,\"server\":\"home\",\"moduleSequenceNumber\":4101,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getBitNodeMultipliers\",\"cost\":4},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getScriptIncome\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"purchaseTor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"purchaseProgram\",\"cost\":2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { allHosts, doBackdoors, softenServer } from \\\"lib/util\\\";\\r\\nexport async function main(ns) {\\r\\n    for (const hostName of allHosts(ns)) {\\r\\n        softenServer(ns, hostName);\\r\\n    }\\r\\n    await doBackdoors(ns);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic29mdGVuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsic29mdGVuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxRQUFRLEVBQUUsV0FBVyxFQUFFLFlBQVksRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUUvRCxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFPO0lBQzlCLEtBQUssTUFBTSxRQUFRLElBQUksUUFBUSxDQUFDLEVBQUUsQ0FBQyxFQUFFO1FBQ2pDLFlBQVksQ0FBQyxFQUFFLEVBQUUsUUFBUSxDQUFDLENBQUM7S0FDOUI7SUFFRCxNQUFNLFdBQVcsQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUMxQixDQUFDIn0=\",\"filename\":\"soften.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.4,\"server\":\"home\",\"moduleSequenceNumber\":4102,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"connect\",\"cost\":2},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var FragmentType;\\r\\n(function (FragmentType) {\\r\\n    // Special fragments for the UI\\r\\n    FragmentType[FragmentType[\\\"None\\\"] = 0] = \\\"None\\\";\\r\\n    FragmentType[FragmentType[\\\"Delete\\\"] = 1] = \\\"Delete\\\";\\r\\n    // Stats boosting fragments\\r\\n    FragmentType[FragmentType[\\\"HackingChance\\\"] = 2] = \\\"HackingChance\\\";\\r\\n    FragmentType[FragmentType[\\\"HackingSpeed\\\"] = 3] = \\\"HackingSpeed\\\";\\r\\n    FragmentType[FragmentType[\\\"HackingMoney\\\"] = 4] = \\\"HackingMoney\\\";\\r\\n    FragmentType[FragmentType[\\\"HackingGrow\\\"] = 5] = \\\"HackingGrow\\\";\\r\\n    FragmentType[FragmentType[\\\"Hacking\\\"] = 6] = \\\"Hacking\\\";\\r\\n    FragmentType[FragmentType[\\\"Strength\\\"] = 7] = \\\"Strength\\\";\\r\\n    FragmentType[FragmentType[\\\"Defense\\\"] = 8] = \\\"Defense\\\";\\r\\n    FragmentType[FragmentType[\\\"Dexterity\\\"] = 9] = \\\"Dexterity\\\";\\r\\n    FragmentType[FragmentType[\\\"Agility\\\"] = 10] = \\\"Agility\\\";\\r\\n    FragmentType[FragmentType[\\\"Charisma\\\"] = 11] = \\\"Charisma\\\";\\r\\n    FragmentType[FragmentType[\\\"HacknetMoney\\\"] = 12] = \\\"HacknetMoney\\\";\\r\\n    FragmentType[FragmentType[\\\"HacknetCost\\\"] = 13] = \\\"HacknetCost\\\";\\r\\n    FragmentType[FragmentType[\\\"Rep\\\"] = 14] = \\\"Rep\\\";\\r\\n    FragmentType[FragmentType[\\\"WorkMoney\\\"] = 15] = \\\"WorkMoney\\\";\\r\\n    FragmentType[FragmentType[\\\"Crime\\\"] = 16] = \\\"Crime\\\";\\r\\n    FragmentType[FragmentType[\\\"Bladeburner\\\"] = 17] = \\\"Bladeburner\\\";\\r\\n    // utility fragments.\\r\\n    FragmentType[FragmentType[\\\"Booster\\\"] = 18] = \\\"Booster\\\";\\r\\n})(FragmentType || (FragmentType = {}));\\r\\nfunction fragmentTypeEffect(tpe) {\\r\\n    switch (tpe) {\\r\\n        case FragmentType.HackingChance: {\\r\\n            return \\\"+x% hack() success chance\\\";\\r\\n            break;\\r\\n        }\\r\\n        case FragmentType.HackingSpeed: {\\r\\n            return \\\"+x% faster hack(), grow(), and weaken()\\\";\\r\\n            break;\\r\\n        }\\r\\n        case FragmentType.HackingMoney: {\\r\\n            return \\\"+x% hack() power\\\";\\r\\n            break;\\r\\n        }\\r\\n        case FragmentType.HackingGrow: {\\r\\n            return \\\"+x% grow() power\\\";\\r\\n            break;\\r\\n        }\\r\\n        case FragmentType.Hacking: {\\r\\n            return \\\"+x% hacking skill\\\";\\r\\n            break;\\r\\n        }\\r\\n        case FragmentType.Strength: {\\r\\n            return \\\"+x% strength skill\\\";\\r\\n            break;\\r\\n        }\\r\\n        case FragmentType.Defense: {\\r\\n            return \\\"+x% defense skill\\\";\\r\\n            break;\\r\\n        }\\r\\n        case FragmentType.Dexterity: {\\r\\n            return \\\"+x% dexterity skill\\\";\\r\\n            break;\\r\\n        }\\r\\n        case FragmentType.Agility: {\\r\\n            return \\\"+x% agility skill\\\";\\r\\n            break;\\r\\n        }\\r\\n        case FragmentType.Charisma: {\\r\\n            return \\\"+x% charisma skill\\\";\\r\\n            break;\\r\\n        }\\r\\n        case FragmentType.HacknetMoney: {\\r\\n            return \\\"+x% hacknet production\\\";\\r\\n            break;\\r\\n        }\\r\\n        case FragmentType.HacknetCost: {\\r\\n            return \\\"x% cheaper hacknet cost\\\";\\r\\n            break;\\r\\n        }\\r\\n        case FragmentType.Rep: {\\r\\n            return \\\"+x% reputation from factions and companies\\\";\\r\\n            break;\\r\\n        }\\r\\n        case FragmentType.WorkMoney: {\\r\\n            return \\\"+x% work money\\\";\\r\\n            break;\\r\\n        }\\r\\n        case FragmentType.Crime: {\\r\\n            return \\\"+x% crime money\\\";\\r\\n            break;\\r\\n        }\\r\\n        case FragmentType.Bladeburner: {\\r\\n            return \\\"+x% all bladeburner stats\\\";\\r\\n            break;\\r\\n        }\\r\\n        case FragmentType.Booster: {\\r\\n            return \\\"Booster\\\";\\r\\n            break;\\r\\n        }\\r\\n    }\\r\\n    throw new Error(\\\"Calling effect for fragment type that doesn't have an effect \\\" + tpe);\\r\\n}\\r\\nexport async function main(ns) {\\r\\n    const fragmentDefs = ns.stanek.fragmentDefinitions();\\r\\n    for (const fragmentDef of fragmentDefs) {\\r\\n        ns.tprintf(\\\"%s %s %s %s %s\\\", fragmentDef.id, fragmentDef.limit, fragmentDef.power, fragmentDef.shape, fragmentTypeEffect(fragmentDef.type));\\r\\n    }\\r\\n    // useful hack fragment id's are\\r\\n    // 0 1    S  +x% hacking skill  0,1\\r\\n    // 1 1    Z  +x% hacking skill  0,1\\r\\n    // 5 1.3  T  +x% faster HGW     0,1,2,3\\r\\n    // 6 2    I  +x% hack() power   0,1\\r\\n    // 7 0.5  J  +x% grow() power   0,1,2,3\\r\\n    // array of fragments, each fragment is an ID and an array of valid rotations\\r\\n    const fragmentIDs = [\\r\\n        //[100, [0, 1, 2, 3]], // 4\\r\\n        [0, [0, 1]],\\r\\n        //[101, [0, 1, 2, 3]], // 4\\r\\n        [1, [0, 1]],\\r\\n        //[102, [0, 1, 2, 3]], // 4\\r\\n        [5, [0, 1, 2, 3]],\\r\\n        //[103, [0, 1, 2, 3]], // 4\\r\\n        [6, [0, 1]],\\r\\n        //[104, [0, 1, 2, 3]], // 4\\r\\n        [7, [0, 1, 2, 3]],\\r\\n        //[105, [0, 1, 2, 3]], // 4\\r\\n        [25, [0, 1, 2, 3]],\\r\\n        //[106, [0, 1, 2, 3]], // 4\\r\\n        [28, [0, 1, 2, 3]], // 4\\r\\n        // [107, [0, 1, 2, 3]], // 4\\r\\n    ];\\r\\n    // a valid configuration is if all pieces can be placed\\r\\n    // try to place each piece\\r\\n    // if we hit a piece that cant be placed, iterate over all rotations\\r\\n    // if all rotations cant be placed, move to next cell and iterate over all rotations\\r\\n    // if all cells have been checked, roll back to earlier piece and rotate it.\\r\\n    ns.stanek.clearGift();\\r\\n    let watchdog = 0;\\r\\n    async function doPlacement(frag, x, y, rot) {\\r\\n        if (watchdog++ % 1000 === 0) {\\r\\n            await ns.sleep(0);\\r\\n        }\\r\\n        //ns.tprintf(\\\"Attempting to place %d at %d,%d,%d\\\", fragmentIDs[frag][0], x, y, rot);\\r\\n        if (ns.stanek.placeFragment(x, y, rot, fragmentIDs[frag][0])) {\\r\\n            if (frag === fragmentIDs.length - 1)\\r\\n                return true;\\r\\n            //ns.tprintf(\\\"Placed %d at %d,%d,%d\\\", fragmentIDs[frag][0], x, y, rot);\\r\\n            if (!(await doPlacement(frag + 1, 0, 0, 0))) {\\r\\n                // ns.tprintf(\\r\\n                //     \\\"Failed to place %d in current board, rolling back %d at %d,%d,%d\\\",\\r\\n                //     fragmentIDs[frag + 1][0],\\r\\n                //     fragmentIDs[frag][0],\\r\\n                //     x,\\r\\n                //     y,\\r\\n                //     rot\\r\\n                // );\\r\\n                ns.stanek.removeFragment(x, y);\\r\\n            }\\r\\n            else {\\r\\n                return true;\\r\\n            }\\r\\n        }\\r\\n        if (rot + 1 < fragmentIDs[frag][1].length)\\r\\n            return await doPlacement(frag, x, y, rot + 1);\\r\\n        if (x + 1 < ns.stanek.giftWidth())\\r\\n            return await doPlacement(frag, x + 1, y, 0);\\r\\n        if (y + 1 < ns.stanek.giftHeight())\\r\\n            return await doPlacement(frag, 0, y + 1, 0);\\r\\n        return false;\\r\\n    }\\r\\n    await doPlacement(0, 0, 0, 0);\\r\\n    for (const fragment of ns.stanek.activeFragments()) {\\r\\n        ns.tprintf(\\\"%s %s %s %s\\\", fragment.id, fragment.x, fragment.y, fragment.rotation);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RhbmVrLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsic3RhbmVrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLElBQUssWUF5Qko7QUF6QkQsV0FBSyxZQUFZO0lBQ2IsK0JBQStCO0lBQy9CLCtDQUFJLENBQUE7SUFDSixtREFBTSxDQUFBO0lBRU4sMkJBQTJCO0lBQzNCLGlFQUFhLENBQUE7SUFDYiwrREFBWSxDQUFBO0lBQ1osK0RBQVksQ0FBQTtJQUNaLDZEQUFXLENBQUE7SUFDWCxxREFBTyxDQUFBO0lBQ1AsdURBQVEsQ0FBQTtJQUNSLHFEQUFPLENBQUE7SUFDUCx5REFBUyxDQUFBO0lBQ1Qsc0RBQU8sQ0FBQTtJQUNQLHdEQUFRLENBQUE7SUFDUixnRUFBWSxDQUFBO0lBQ1osOERBQVcsQ0FBQTtJQUNYLDhDQUFHLENBQUE7SUFDSCwwREFBUyxDQUFBO0lBQ1Qsa0RBQUssQ0FBQTtJQUNMLDhEQUFXLENBQUE7SUFFWCxxQkFBcUI7SUFDckIsc0RBQU8sQ0FBQTtBQUNYLENBQUMsRUF6QkksWUFBWSxLQUFaLFlBQVksUUF5QmhCO0FBRUQsU0FBUyxrQkFBa0IsQ0FBQyxHQUFpQjtJQUN6QyxRQUFRLEdBQUcsRUFBRTtRQUNULEtBQUssWUFBWSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1lBQzdCLE9BQU8sMkJBQTJCLENBQUM7WUFDbkMsTUFBTTtTQUNUO1FBQ0QsS0FBSyxZQUFZLENBQUMsWUFBWSxDQUFDLENBQUM7WUFDNUIsT0FBTyx5Q0FBeUMsQ0FBQztZQUNqRCxNQUFNO1NBQ1Q7UUFDRCxLQUFLLFlBQVksQ0FBQyxZQUFZLENBQUMsQ0FBQztZQUM1QixPQUFPLGtCQUFrQixDQUFDO1lBQzFCLE1BQU07U0FDVDtRQUNELEtBQUssWUFBWSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1lBQzNCLE9BQU8sa0JBQWtCLENBQUM7WUFDMUIsTUFBTTtTQUNUO1FBQ0QsS0FBSyxZQUFZLENB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\",\"filename\":\"stanek.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"stanek.js\",\"url\":\"blob:file:///d7f909e1-c02f-4f34-848a-6946f1fee1a6\",\"moduleSequenceNumber\":799}],\"dependents\":[],\"ramUsage\":12.55,\"server\":\"home\",\"moduleSequenceNumber\":4103,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.placeFragment\",\"cost\":5},{\"type\":\"fn\",\"name\":\"stanek.removeFragment\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"stanek.giftWidth\",\"cost\":0.4},{\"type\":\"fn\",\"name\":\"stanek.giftHeight\",\"cost\":0.4},{\"type\":\"fn\",\"name\":\"stanek.activeFragments\",\"cost\":5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function findProp(propName) {\\r\\n    for (const div of eval(\\\"document\\\").querySelectorAll(\\\"div\\\")) {\\r\\n        const propKey = Object.keys(div)[1];\\r\\n        if (!propKey)\\r\\n            continue;\\r\\n        const props = div[propKey];\\r\\n        if (props.children?.props && props.children.props[propName])\\r\\n            return props.children.props[propName];\\r\\n        if (props.children instanceof Array)\\r\\n            for (const child of props.children)\\r\\n                if (child?.props && child.props[propName])\\r\\n                    return child.props[propName];\\r\\n    }\\r\\n}\\r\\nexport async function main(ns) {\\r\\n    ns.tprintf(\\\"TEST: %s\\\", ns.heart.break());\\r\\n    const playerProp = findProp(\\\"player\\\");\\r\\n    const agDivName = \\\"Tobacco\\\";\\r\\n    if (playerProp?.corporation?.divisions) {\\r\\n        const agDiv = playerProp.corporation.divisions.find((a) => a.type === agDivName);\\r\\n        if (agDiv) {\\r\\n            for (const [city, product] of Object.entries(agDiv.products)) {\\r\\n                if (product)\\r\\n                    product.marketTa2 = false;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdC5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbInRlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsU0FBUyxRQUFRLENBQUMsUUFBZ0I7SUFDOUIsS0FBSyxNQUFNLEdBQUcsSUFBSSxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsZ0JBQWdCLENBQUMsS0FBSyxDQUFDLEVBQUU7UUFDeEQsTUFBTSxPQUFPLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNwQyxJQUFJLENBQUMsT0FBTztZQUFFLFNBQVM7UUFDdkIsTUFBTSxLQUFLLEdBQUcsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQzNCLElBQUksS0FBSyxDQUFDLFFBQVEsRUFBRSxLQUFLLElBQUksS0FBSyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDO1lBQUUsT0FBTyxLQUFLLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUNuRyxJQUFJLEtBQUssQ0FBQyxRQUFRLFlBQVksS0FBSztZQUMvQixLQUFLLE1BQU0sS0FBSyxJQUFJLEtBQUssQ0FBQyxRQUFRO2dCQUFFLElBQUksS0FBSyxFQUFFLEtBQUssSUFBSSxLQUFLLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQztvQkFBRSxPQUFPLEtBQUssQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUM7S0FDbkg7QUFDTCxDQUFDO0FBRUQsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixFQUFFLENBQUMsT0FBTyxDQUFDLFVBQVUsRUFBRSxFQUFFLENBQUMsS0FBSyxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUM7SUFFekMsTUFBTSxVQUFVLEdBQUcsUUFBUSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ3RDLE1BQU0sU0FBUyxHQUFHLFNBQVMsQ0FBQztJQUU1QixJQUFJLFVBQVUsRUFBRSxXQUFXLEVBQUUsU0FBUyxFQUFFO1FBQ3BDLE1BQU0sS0FBSyxHQUFhLFVBQVUsQ0FBQyxXQUFXLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQW1CLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLEtBQUssU0FBUyxDQUFDLENBQUM7UUFFN0csSUFBSSxLQUFLLEVBQUU7WUFDUCxLQUFLLE1BQU0sQ0FBQyxJQUFJLEVBQUUsT0FBTyxDQUFDLElBQUksTUFBTSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7Z0JBQzFELElBQUksT0FBTztvQkFDUCxPQUFPLENBQUMsU0FBUyxHQUFHLEtBQUssQ0FBQzthQUNqQztTQUNKO0tBQ0o7QUFDTCxDQUFDIn0=\",\"filename\":\"test.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"test.js\",\"url\":\"blob:file:///28a0f1d2-6fa7-4551-b72d-a17322edb8be\",\"moduleSequenceNumber\":509245}],\"dependents\":[],\"ramUsage\":1024,\"server\":\"home\",\"moduleSequenceNumber\":4104,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"ns\",\"name\":\"corporation\",\"cost\":1022.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { MarketData, logMarketData, waitForMarketUpdate } from \\\"/lib/stock/market_data\\\";\\r\\nexport async function main(ns) {\\r\\n    ns.disableLog(\\\"disableLog\\\");\\r\\n    ns.disableLog(\\\"sleep\\\");\\r\\n    ns.tail();\\r\\n    const volatilityFilter = 0.0175;\\r\\n    const movementFilter = 0.05;\\r\\n    //const potentialFilter = 0.0005;\\r\\n    const mData = ns.stock.getSymbols().map((sym) => {\\r\\n        return new MarketData(ns, sym);\\r\\n    });\\r\\n    while (true) {\\r\\n        mData.map((x) => x.update(ns));\\r\\n        const filteredData = mData\\r\\n            .filter((a) => a.movement >= movementFilter && a.volatility < volatilityFilter)\\r\\n            .sort((a, b) => b.potential - a.potential);\\r\\n        const unfilteredData = mData\\r\\n            .filter((a) => !(a.movement >= movementFilter && a.volatility < volatilityFilter));\\r\\n        logMarketData(ns, filteredData);\\r\\n        for (const data of mData) {\\r\\n            data.polaritySwitchSell(ns);\\r\\n        }\\r\\n        for (const data of unfilteredData) {\\r\\n            data.sell(ns, true);\\r\\n        }\\r\\n        for (let idx = 0; idx < filteredData.length; idx++) {\\r\\n            const pprice = filteredData[idx].getPurchasePrice(ns);\\r\\n            if (pprice < 10000000)\\r\\n                continue;\\r\\n            if (pprice > ns.getPlayer().money) {\\r\\n                filteredData.slice(idx + 1).map((x) => x.sell(ns));\\r\\n            }\\r\\n            filteredData[idx].buy(ns);\\r\\n        }\\r\\n        await waitForMarketUpdate(ns, mData);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFya2V0LmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibWFya2V0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxVQUFVLEVBQUUsYUFBYSxFQUFFLG1CQUFtQixFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFFeEYsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixFQUFFLENBQUMsVUFBVSxDQUFDLFlBQVksQ0FBQyxDQUFDO0lBQzVCLEVBQUUsQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLENBQUM7SUFFdkIsRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDO0lBRVYsTUFBTSxnQkFBZ0IsR0FBRyxNQUFNLENBQUM7SUFDaEMsTUFBTSxjQUFjLEdBQUcsSUFBSSxDQUFDO0lBQzVCLGlDQUFpQztJQUVqQyxNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDLFVBQVUsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFO1FBQzVDLE9BQU8sSUFBSSxVQUFVLENBQUMsRUFBRSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ25DLENBQUMsQ0FBQyxDQUFDO0lBRUgsT0FBTyxJQUFJLEVBQUU7UUFDVCxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDL0IsTUFBTSxZQUFZLEdBQUcsS0FBSzthQUNyQixNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxRQUFRLElBQUksY0FBYyxJQUFJLENBQUMsQ0FBQyxVQUFVLEdBQUcsZ0JBQWdCLENBQUM7YUFDOUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDL0MsTUFBTSxjQUFjLEdBQUcsS0FBSzthQUN2QixNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxJQUFJLGNBQWMsSUFBSSxDQUFDLENBQUMsVUFBVSxHQUFHLGdCQUFnQixDQUFDLENBQUMsQ0FBQztRQUd2RixhQUFhLENBQUMsRUFBRSxFQUFFLFlBQVksQ0FBQyxDQUFDO1FBRWhDLEtBQUssTUFBTSxJQUFJLElBQUksS0FBSyxFQUFFO1lBQ3RCLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxFQUFFLENBQUMsQ0FBQztTQUMvQjtRQUVELEtBQUssTUFBTSxJQUFJLElBQUksY0FBYyxFQUFFO1lBQy9CLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxFQUFFLElBQUksQ0FBQyxDQUFDO1NBQ3ZCO1FBRUQsS0FBSyxJQUFJLEdBQUcsR0FBRyxDQUFDLEVBQUUsR0FBRyxHQUFHLFlBQVksQ0FBQyxNQUFNLEVBQUUsR0FBRyxFQUFFLEVBQUU7WUFDaEQsTUFBTSxNQUFNLEdBQUcsWUFBWSxDQUFDLEdBQUcsQ0FBQyxDQUFDLGdCQUFnQixDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQ3RELElBQUksTUFBTSxHQUFHLFFBQVE7Z0JBQUUsU0FBUztZQUVoQyxJQUFJLE1BQU0sR0FBRyxFQUFFLENBQUMsU0FBUyxFQUFFLENBQUMsS0FBSyxFQUFFO2dCQUMvQixZQUFZLENBQUMsS0FBSyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQzthQUN0RDtZQUVELFlBQVksQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUM7U0FDN0I7UUFFRCxNQUFNLG1CQUFtQixDQUFDLEVBQUUsRUFBRSxLQUFLLENBQUMsQ0FBQztLQUN4QztBQUNMLENBQUMifQ==\",\"filename\":\"market.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/util.js\",\"url\":\"blob:file:///305ce3a1-6bcf-41ad-a7b4-99fc395cd697\",\"moduleSequenceNumber\":4070},{\"filename\":\"/lib/stock/market_data.js\",\"url\":\"blob:file:///bbbfbad1-4b8d-4f54-ae63-dba410fde7e5\",\"moduleSequenceNumber\":4112},{\"filename\":\"market.js\",\"url\":\"blob:file:///63c929f6-d196-4d3c-b399-0f97cbfb67e2\",\"moduleSequenceNumber\":4214}],\"dependents\":[],\"ramUsage\":31.1,\"server\":\"home\",\"moduleSequenceNumber\":4214,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stock.getSymbols\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.sell\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"stock.buy\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.getAskPrice\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getBidPrice\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getPrice\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getMaxShares\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getPosition\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getSaleGain\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getForecast\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.getVolatility\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.short\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.sellShort\",\"cost\":2.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const commission = 100000;\\r\\nconst samplingLength = 30;\\r\\nfunction predictState(samples) {\\r\\n    const limits = [null, null, null, null, null, null, 6, 7, 8, 8, 9, 10, 10, 11, 11, 12, 12, 13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 19, 19, 20];\\r\\n    let inc = 0;\\r\\n    for (let i = 0; i < samples.length; ++i) {\\r\\n        const total = i + 1;\\r\\n        const idx = samples.length - total;\\r\\n        if (samples[idx] > 1) {\\r\\n            ++inc;\\r\\n        }\\r\\n        const limit = limits[i];\\r\\n        if (limit === null) {\\r\\n            continue;\\r\\n        }\\r\\n        if (inc >= limit) {\\r\\n            return 1;\\r\\n        }\\r\\n        if (total - inc >= limit) {\\r\\n            return -1;\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\nfunction format(money) {\\r\\n    const prefixes = [\\\"\\\", \\\"k\\\", \\\"m\\\", \\\"b\\\", \\\"t\\\", \\\"q\\\"];\\r\\n    for (let i = 0; i < prefixes.length; i++) {\\r\\n        if (Math.abs(money) < 1000) {\\r\\n            return `${Math.floor(money * 10) / 10}${prefixes[i]}`;\\r\\n        }\\r\\n        else {\\r\\n            money /= 1000;\\r\\n        }\\r\\n    }\\r\\n    return `${Math.floor(money * 10) / 10}${prefixes[prefixes.length - 1]}`;\\r\\n}\\r\\nfunction posNegDiff(samples) {\\r\\n    const pos = samples.reduce((acc, curr) => acc + (curr > 1 ? 1 : 0), 0);\\r\\n    return Math.abs(samples.length - 2 * pos);\\r\\n}\\r\\nfunction posNegRatio(samples) {\\r\\n    const pos = samples.reduce((acc, curr) => acc + (curr > 1 ? 1 : 0), 0);\\r\\n    return Math.round(100 * ((2 * pos) / samples.length - 1));\\r\\n}\\r\\nexport async function main(ns) {\\r\\n    ns.disableLog(\\\"ALL\\\");\\r\\n    const symLastPrice = {};\\r\\n    const symChanges = {};\\r\\n    for (const sym of ns.stock.getSymbols()) {\\r\\n        symLastPrice[sym] = ns.stock.getPrice(sym);\\r\\n        symChanges[sym] = [];\\r\\n    }\\r\\n    while (true) {\\r\\n        await ns.sleep(2000);\\r\\n        if (symLastPrice[\\\"FSIG\\\"] === ns.stock.getPrice(\\\"FSIG\\\")) {\\r\\n            continue;\\r\\n        }\\r\\n        for (const sym of ns.stock.getSymbols()) {\\r\\n            const current = ns.stock.getPrice(sym);\\r\\n            symChanges[sym].push(current / symLastPrice[sym]);\\r\\n            symLastPrice[sym] = current;\\r\\n            if (symChanges[sym].length > samplingLength) {\\r\\n                symChanges[sym] = symChanges[sym].slice(symChanges[sym].length - samplingLength);\\r\\n            }\\r\\n        }\\r\\n        const prioritizedSymbols = [...ns.stock.getSymbols()];\\r\\n        prioritizedSymbols.sort((a, b) => posNegDiff(symChanges[b]) - posNegDiff(symChanges[a]));\\r\\n        for (const sym of prioritizedSymbols) {\\r\\n            const positions = ns.stock.getPosition(sym);\\r\\n            const longShares = positions[0];\\r\\n            const longPrice = positions[1];\\r\\n            const shortShares = positions[2];\\r\\n            const shortPrice = positions[3];\\r\\n            const state = predictState(symChanges[sym]);\\r\\n            const ratio = posNegRatio(symChanges[sym]);\\r\\n            const bidPrice = ns.stock.getBidPrice(sym);\\r\\n            const askPrice = ns.stock.getAskPrice(sym);\\r\\n            if (longShares <= 0 && shortShares <= 0 && ns.stock.getPrice(sym) < 30000) {\\r\\n                continue;\\r\\n            }\\r\\n            if (longShares > 0) {\\r\\n                const cost = longShares * longPrice;\\r\\n                const profit = longShares * (bidPrice - longPrice) - 2 * commission;\\r\\n                if (state < 0) {\\r\\n                    const sellPrice = ns.stock.sell(sym, longShares);\\r\\n                    if (sellPrice > 0) {\\r\\n                        ns.print(`SOLD (long) ${sym}. Profit: ${format(profit)}`);\\r\\n                    }\\r\\n                }\\r\\n                else {\\r\\n                    ns.print(`${sym} (${ratio}): ${format(profit + cost)} / ${format(profit)} (${Math.round((profit / cost) * 10000) / 100}%)`);\\r\\n                }\\r\\n            }\\r\\n            else if (shortShares > 0) {\\r\\n                const cost = shortShares * shortPrice;\\r\\n                const profit = shortShares * (shortPrice - askPrice) - 2 * commission;\\r\\n                if (state > 0) {\\r\\n                    const sellPrice = ns.stock.sellShort(sym, shortShares);\\r\\n                    if (sellPrice > 0) {\\r\\n                        ns.print(`SOLD (short) ${sym}. Profit: ${format(profit)}`);\\r\\n                    }\\r\\n                }\\r\\n                else {\\r\\n                    ns.print(`${sym} (${ratio}): ${format(profit + cost)} / ${format(profit)} (${Math.round((profit / cost) * 10000) / 100}%)`);\\r\\n                }\\r\\n            }\\r\\n            else {\\r\\n                const money = ns.getServerMoneyAvailable(\\\"home\\\");\\r\\n                if (state > 0) {\\r\\n                    const sharesToBuy = Math.min(10000, ns.stock.getMaxShares(sym), Math.floor((money - commission) / askPrice));\\r\\n                    if (ns.stock.buy(sym, sharesToBuy) > 0) {\\r\\n                        ns.print(`BOUGHT (long) ${sym}.`);\\r\\n                    }\\r\\n                }\\r\\n                else if (state < 0) {\\r\\n                    const sharesToBuy = Math.min(10000, ns.stock.getMaxShares(sym), Math.floor((money - commission) / bidPrice));\\r\\n                    if (ns.stock.short(sym, sharesToBuy) > 0) {\\r\\n                        ns.print(`BOUGHT (short) ${sym}.`);\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hlYXBfbWFya2V0LmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsiY2hlYXBfbWFya2V0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sVUFBVSxHQUFHLE1BQU0sQ0FBQztBQUMxQixNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUM7QUFFMUIsU0FBUyxZQUFZLENBQUMsT0FBTztJQUN6QixNQUFNLE1BQU0sR0FBRyxDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDL0ksSUFBSSxHQUFHLEdBQUcsQ0FBQyxDQUFDO0lBQ1osS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDLEVBQUU7UUFDckMsTUFBTSxLQUFLLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNwQixNQUFNLEdBQUcsR0FBRyxPQUFPLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQztRQUNuQyxJQUFJLE9BQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEVBQUU7WUFDbEIsRUFBRSxHQUFHLENBQUM7U0FDVDtRQUNELE1BQU0sS0FBSyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN4QixJQUFJLEtBQUssS0FBSyxJQUFJLEVBQUU7WUFDaEIsU0FBUztTQUNaO1FBQ0QsSUFBSSxHQUFHLElBQUksS0FBSyxFQUFFO1lBQ2QsT0FBTyxDQUFDLENBQUM7U0FDWjtRQUNELElBQUksS0FBSyxHQUFHLEdBQUcsSUFBSSxLQUFLLEVBQUU7WUFDdEIsT0FBTyxDQUFDLENBQUMsQ0FBQztTQUNiO0tBQ0o7SUFDRCxPQUFPLENBQUMsQ0FBQztBQUNiLENBQUM7QUFFRCxTQUFTLE1BQU0sQ0FBQyxLQUFLO0lBQ2pCLE1BQU0sUUFBUSxHQUFHLENBQUMsRUFBRSxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQztJQUMvQyxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsUUFBUSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtRQUN0QyxJQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsSUFBSSxFQUFFO1lBQ3hCLE9BQU8sR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssR0FBRyxFQUFFLENBQUMsR0FBRyxFQUFFLEdBQUcsUUFBUSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7U0FDekQ7YUFBTTtZQUNILEtBQUssSUFBSSxJQUFJLENBQUM7U0FDakI7S0FDSjtJQUNELE9BQU8sR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssR0FBRyxFQUFFLENBQUMsR0FBRyxFQUFFLEdBQUcsUUFBUSxDQUFDLFFBQVEsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQztBQUM1RSxDQUFDO0FBRUQsU0FBUyxVQUFVLENBQUMsT0FBTztJQUN2QixNQUFNLEdBQUcsR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxFQUFFLElBQUksRUFBRSxFQUFFLENBQUMsR0FBRyxHQUFHLENBQUMsSUFBSSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUN2RSxPQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLE1BQU0sR0FBRyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUM7QUFDOUMsQ0FBQztBQUVELFNBQVMsV0FBVyxDQUFDLE9BQU87SUFDeEIsTUFBTSxHQUFHLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsRUFBRSxJQUFJLEVBQUUsRUFBRSxDQUFDLEdBQUcsR0FBRyxDQUFDLElBQUksR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDdkUsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUM5RCxDQUFDO0FBRUQsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixFQUFFLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3JCLE1BQU0sWUFBWSxHQUFHLEVBQUUsQ0FBQztJQUN4QixNQUFNLFVBQVUsR0FBRyxFQUFFLENBQUM7SUFDdEIsS0FBSyxNQUFNLEdBQUcsSUFBSSxFQUFFLENBQUMsS0FBSyxDQUFDLFVBQVUsRUFBRSxFQUFFO1FBQ3JDLFlBQVksQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUMzQyxVQUFVLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDO0tBQ3hCO0lBRUQsT0FBTyxJQUFJLEVBQUU7UUFDVCxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7UUFFckIsSUFBSSxZQUFZLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLEVBQUU7WUFDcEQsU0FBUztTQUNaO1FBRUQsS0FBSyxNQUFNLEdBQUcsSUFBSSxFQUFFLENBQUMsS0FBSyxDQUFDLFVBQVUsRUFBRSxFQUFFO1lBQ3JDLE1BQU0sT0FBTyxHQUFHLEVBQUUsQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ3ZDLFVBQVUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxHQUFHLFlBQVksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1lBQ2xELFlBQVksQ0FBQyxHQUFHLENBQUMsR0FBRyxPQUFPLENBQUM7WUFDNUIsSUFBSSxVQUFVLENBQUMsR0FBRyxDQUFDLENBQUMsTUFBTSxHQUFHLGNBQWMsRUFBRTtnQkFDekMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxHQUFHLFVBQVUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sR0FBRyxjQUFjLENBQUMsQ0FBQzthQUNwRjtTQUNKO1FBRUQsTUFBTSxrQkFBa0IsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxVQUFVLEVBQUUsQ0FBQyxDQUFDO1FBQ3RELGtCQUFrQixDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLFVBQVUsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxVQUFVLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUV6RixLQUFLLE1BQU0sR0FBRyxJQUFJLGtCQUFrQixFQUFFO1lBQ2xDLE1BQU0sU0FBUyxHQUFHLEVBQUUsQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQzVDLE1BQU0sVUFBVSxHQUFHLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNoQyxNQUFNLFNBQVMsR0FBRyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDL0IsTUFBTSxXQUFXLEdBQUcsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ2pDLE1BQU0sVUFBVSxHQUFHLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNoQyxNQUFNLEtBQUssR0FBRyxZQUFZLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7WUFDNUMsTUFBTSxLQUFLLEdBQUcsV0FBVyxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1lBQzNDLE1BQU0sUUFBUSxHQUFHLEVBQUUsQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQzNDLE1BQU0sUUFBUSxHQUFHLEVBQUUsQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQzNDLElBQUksVUFBVSxJQUFJLENBQUMsSUFBSSxXQUFXLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEtBQUssRUFBRTtnQkFDdkUsU0FBUzthQUNaO1lBRUQsSUFBSSxVQUFVLEdBQUcsQ0FBQyxFQUFFO2dCQUNoQixNQUFNLElBQUksR0FBRyxVQUFVLEdBQUcsU0FBUyxDQUFDO2dCQUNwQyxNQUFNLE1BQU0sR0FBRyxVQUFVLEdBQUcsQ0FBQyxRQUFRLEdBQUcsU0FBUyxDQUFDLEdBQUcsQ0FBQyxHQUFHLFVBQVUsQ0FBQztnQkFDcEUsSUFBSSxLQUFLLEdBQUcsQ0FBQyxFQUFFO29CQUNYLE1BQU0sU0FBUyxHQUFHLEVBQUUsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxVQUFVLENBQUMsQ0FBQztvQkFDakQsSUFBSSxTQUFTLEdBQUcsQ0FBQyxFQUFFO3dCQUNmLEVBQUUsQ0FBQyxLQUFLLENBQUMsZUFBZSxHQUFHLGFBQWEsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQztxQkFDN0Q7aUJBQ0o7cUJBQU07b0JBQ0gsRUFBRSxDQUFDLEtBQUssQ0FDSixHQUFHLEdBQUcsS0FBSyxLQUFLLE1BQU0sTUFBTSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTSxNQUFNLENBQUMsTUFBTSxDQUFDLEtBQzNELElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLEdBQUcsS0FBSyxDQUFDLEdBQUcsR0FDMUMsSUFBSSxDQUNQLENBQUM7aUJBQ0w7YUFDSjtpQkFBTSxJQUFJLFdBQVcsR0FBRyxDQUFDLEVBQUU7Z0JBQ3hCLE1BQU0sSUFBSSxHQUFHLFdBQVcsR0FBRyxVQUFVLENBQUM7Z0JBQ3RDLE1BQU0sTUFBTSxHQUFHLFdBQVcsR0FBRyxDQUFDLFVBQVUsR0FBRyxRQUFRLENBQUMsR0FBRyxDQUFDLEdBQUcsVUFBVSxDQUFDO2dCQUN0RSxJQUFJLEtBQUssR0FBRyxDQUFDLEVBQUU7b0JBQ1gsTUFBTSxTQUFTLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsR0FBRyxFQUFFLFdBQVcsQ0FBQyxDQUFDO29CQUN2RCxJQUFJLFNBQVMsR0FBRyxDQUFDLEVBQUU7d0JBQ2YsRUFBRSxDQUFDLEtBQUssQ0FBQyxnQkFBZ0IsR0FBRyxhQUFhLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUM7cUJBQzlEO2lCQUNKO3FCQUFNO29CQUNILEVBQUUsQ0FBQyxLQUFLLENBQ0osR0FBRyxHQUFHLEtBQUssS0FBSyxNQUFNLE1BQU0sQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLE1BQU0sTUFBTSxDQUFDLE1BQU0sQ0FBQyxLQUMzRCxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxHQUFHLEtBQUssQ0FBQyxHQUFHLEdBQzFDLElBQUksQ0FDUCxDQUFDO2lCQUNMO2FBQ0o7aUJBQU07Z0JBQ0gsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxDQUFDO2dCQUNqRCxJQUFJLEtBQUssR0FBRyxDQUFDLEVBQUU7b0JBQ1gsTUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FDeEIsS0FBSyxFQUNMLEVBQUUsQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxFQUMxQixJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsS0FBSyxHQUFHLFVBQVUsQ0FBQyxHQUFHLFFBQVEsQ0FBQyxDQUM5QyxDQUFDO29CQUNGLElBQUksRUFBRSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLFdBQVcsQ0FBQyxHQUFHLENBQUMsRUFBRTt3QkFDcEMsRUFBRSxDQUFDLEtBQUssQ0FBQyxpQkFBaUIsR0FBRyxHQUFHLENBQUMsQ0FBQztxQkFDckM7aUJBQ0o7cUJBQU0sSUFBSSxLQUFLLEdBQUcsQ0FBQyxFQUFFO29CQUNsQixNQUFNLFdBQVcsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUN4QixLQUFLLEVBQ0wsRUFBRSxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLEVBQzFCLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxLQUFLLEdBQUcsVUFBVSxDQUFDLEdBQUcsUUFBUSxDQUFDLENBQzlDLENBQUM7b0JBQ0YsSUFBSSxFQUFFLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxHQUFHLEVBQUUsV0FBVyxDQUFDLEdBQUcsQ0FBQyxFQUFFO3dCQUN0QyxFQUFFLENBQUMsS0FBSyxDQUFDLGtCQUFrQixHQUFHLEdBQUcsQ0FBQyxDQUFDO3FCQUN0QztpQkFDSjthQUNKO1NBQ0o7S0FDSjtBQUNMLENBQUMifQ==\",\"filename\":\"cheap_market.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"cheap_market.js\",\"url\":\"blob:file:///208fabe2-f9b2-4020-a846-85aec9fb4ca3\",\"moduleSequenceNumber\":141828}],\"dependents\":[],\"ramUsage\":23.7,\"server\":\"home\",\"moduleSequenceNumber\":4106,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stock.getSymbols\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getPrice\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getPosition\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getBidPrice\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getAskPrice\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.sell\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.sellShort\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"stock.getMaxShares\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.buy\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.short\",\"cost\":2.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { allHosts, canExecuteOnServer } from \\\"/lib/util\\\";\\r\\nexport async function main(ns) {\\r\\n    const allHostnames = allHosts(ns);\\r\\n    const executableHosts = allHostnames\\r\\n        .filter(canExecuteOnServer.bind(null, ns))\\r\\n        .filter((x) => x.indexOf(\\\"hacknet-node\\\") === -1);\\r\\n    for (const hostname of executableHosts) {\\r\\n        if (hostname === \\\"home\\\")\\r\\n            continue;\\r\\n        await ns.scp(\\\"/lib/exec/const_weaken.js\\\", \\\"home\\\", hostname);\\r\\n    }\\r\\n    for (const hostname of executableHosts) {\\r\\n        let availableRam = ns.getServerMaxRam(hostname) - ns.getServerUsedRam(hostname);\\r\\n        if (hostname === \\\"home\\\")\\r\\n            availableRam -= 128;\\r\\n        const availableThreads = Math.floor(availableRam / ns.getScriptRam(\\\"/lib/exec/const_weaken.js\\\"));\\r\\n        if (availableThreads <= 0)\\r\\n            continue;\\r\\n        ns.exec(\\\"/lib/exec/const_weaken.js\\\", hostname, availableThreads, \\\"joesguns\\\");\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhwLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsiZXhwLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxRQUFRLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFFekQsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLFlBQVksR0FBRyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDbEMsTUFBTSxlQUFlLEdBQUcsWUFBWTtTQUMvQixNQUFNLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsQ0FBQztTQUN6QyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsY0FBYyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUVyRCxLQUFLLE1BQU0sUUFBUSxJQUFJLGVBQWUsRUFBRTtRQUNwQyxJQUFJLFFBQVEsS0FBSyxNQUFNO1lBQUUsU0FBUztRQUNsQyxNQUFNLEVBQUUsQ0FBQyxHQUFHLENBQUMsMkJBQTJCLEVBQUUsTUFBTSxFQUFFLFFBQVEsQ0FBQyxDQUFDO0tBQy9EO0lBRUQsS0FBSyxNQUFNLFFBQVEsSUFBSSxlQUFlLEVBQUU7UUFDcEMsSUFBSSxZQUFZLEdBQUcsRUFBRSxDQUFDLGVBQWUsQ0FBQyxRQUFRLENBQUMsR0FBRyxFQUFFLENBQUMsZ0JBQWdCLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDaEYsSUFBSSxRQUFRLEtBQUssTUFBTTtZQUFFLFlBQVksSUFBSSxHQUFHLENBQUM7UUFDN0MsTUFBTSxnQkFBZ0IsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLFlBQVksR0FBRyxFQUFFLENBQUMsWUFBWSxDQUFDLDJCQUEyQixDQUFDLENBQUMsQ0FBQztRQUVqRyxJQUFJLGdCQUFnQixJQUFJLENBQUM7WUFBRSxTQUFTO1FBRXBDLEVBQUUsQ0FBQyxJQUFJLENBQUMsMkJBQTJCLEVBQUUsUUFBUSxFQUFFLGdCQUFnQixFQUFFLFVBQVUsQ0FBQyxDQUFDO0tBQ2hGO0FBQ0wsQ0FBQyJ9\",\"filename\":\"exp.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/util.js\",\"url\":\"blob:file:///ccea8ff0-66f4-4260-8488-37d2dd9abcda\",\"moduleSequenceNumber\":4070},{\"filename\":\"exp.js\",\"url\":\"blob:file:///e1aaaa94-84bd-43aa-82b6-09b2a9ba6a52\",\"moduleSequenceNumber\":4116}],\"dependents\":[],\"ramUsage\":3.95,\"server\":\"home\",\"moduleSequenceNumber\":4116,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.weaken(ns.args[0].toString());\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfd2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvY29uc3Rfd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsT0FBTyxJQUFJO1FBQ1AsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztBQUMvQyxDQUFDIn0=\",\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"blob:file:///627c1e48-318d-4ce1-ba9b-71c185a735d8\",\"moduleSequenceNumber\":4181}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":4181,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUNQLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ3pCLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/exec/const_share.js\",\"url\":\"blob:file:///cf285ee6-c6b5-4597-8793-005fee84c168\",\"moduleSequenceNumber\":10018}],\"dependents\":[],\"ramUsage\":4,\"server\":\"home\",\"moduleSequenceNumber\":4109,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { allHosts, canExecuteOnServer } from \\\"/lib/util\\\";\\r\\nexport async function main(ns) {\\r\\n    const allHostnames = allHosts(ns);\\r\\n    const executableHosts = allHostnames\\r\\n        .filter(canExecuteOnServer.bind(null, ns))\\r\\n        .filter((x) => x.indexOf(\\\"hacknet-node\\\") === -1);\\r\\n    for (const hostname of executableHosts) {\\r\\n        if (hostname === \\\"home\\\")\\r\\n            continue;\\r\\n        await ns.scp(\\\"/lib/exec/const_share.js\\\", \\\"home\\\", hostname);\\r\\n    }\\r\\n    for (const hostname of executableHosts) {\\r\\n        let availableRam = ns.getServerMaxRam(hostname) - ns.getServerUsedRam(hostname);\\r\\n        if (hostname === \\\"home\\\")\\r\\n            availableRam -= 128;\\r\\n        const availableThreads = Math.floor(availableRam / ns.getScriptRam(\\\"/lib/exec/const_share.js\\\"));\\r\\n        if (availableThreads <= 0)\\r\\n            continue;\\r\\n        ns.exec(\\\"/lib/exec/const_share.js\\\", hostname, availableThreads);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJzaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsUUFBUSxFQUFFLGtCQUFrQixFQUFFLE1BQU0sV0FBVyxDQUFDO0FBRXpELE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxZQUFZLEdBQUcsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ2xDLE1BQU0sZUFBZSxHQUFHLFlBQVk7U0FDL0IsTUFBTSxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLENBQUM7U0FDekMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLGNBQWMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFckQsS0FBSyxNQUFNLFFBQVEsSUFBSSxlQUFlLEVBQUU7UUFDcEMsSUFBSSxRQUFRLEtBQUssTUFBTTtZQUFFLFNBQVM7UUFDbEMsTUFBTSxFQUFFLENBQUMsR0FBRyxDQUFDLDBCQUEwQixFQUFFLE1BQU0sRUFBRSxRQUFRLENBQUMsQ0FBQztLQUM5RDtJQUVELEtBQUssTUFBTSxRQUFRLElBQUksZUFBZSxFQUFFO1FBQ3BDLElBQUksWUFBWSxHQUFHLEVBQUUsQ0FBQyxlQUFlLENBQUMsUUFBUSxDQUFDLEdBQUcsRUFBRSxDQUFDLGdCQUFnQixDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ2hGLElBQUksUUFBUSxLQUFLLE1BQU07WUFBRSxZQUFZLElBQUksR0FBRyxDQUFDO1FBQzdDLE1BQU0sZ0JBQWdCLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxZQUFZLEdBQUcsRUFBRSxDQUFDLFlBQVksQ0FBQywwQkFBMEIsQ0FBQyxDQUFDLENBQUM7UUFFaEcsSUFBSSxnQkFBZ0IsSUFBSSxDQUFDO1lBQUUsU0FBUztRQUVwQyxFQUFFLENBQUMsSUFBSSxDQUFDLDBCQUEwQixFQUFFLFFBQVEsRUFBRSxnQkFBZ0IsQ0FBQyxDQUFDO0tBQ25FO0FBQ0wsQ0FBQyJ9\",\"filename\":\"share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/util.js\",\"url\":\"blob:file:///169e2728-e4ca-4562-baf2-86d9924ae3f1\",\"moduleSequenceNumber\":604},{\"filename\":\"share.js\",\"url\":\"blob:file:///8e15f2d8-ef77-4217-ac44-afe02f90aae4\",\"moduleSequenceNumber\":9993}],\"dependents\":[],\"ramUsage\":3.95,\"server\":\"home\",\"moduleSequenceNumber\":4110,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { MarketData } from \\\"/lib/stock/market_data\\\";\\r\\nexport async function main(ns) {\\r\\n    const mData = ns.stock.getSymbols().map((sym) => {\\r\\n        return new MarketData(ns, sym);\\r\\n    });\\r\\n    for (const data of mData) {\\r\\n        data.sell(ns, true);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFya2V0X3NlbGwuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJtYXJrZXRfc2VsbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFFcEQsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDLFVBQVUsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFO1FBQzVDLE9BQU8sSUFBSSxVQUFVLENBQUMsRUFBRSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ25DLENBQUMsQ0FBQyxDQUFDO0lBRUgsS0FBSyxNQUFNLElBQUksSUFBSSxLQUFLLEVBQUU7UUFDdEIsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUUsSUFBSSxDQUFDLENBQUM7S0FDdkI7QUFDTCxDQUFDIn0=\",\"filename\":\"market_sell.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/util.js\",\"url\":\"blob:file:///ee6880b1-a2a1-40e2-a675-4ec76b36e34e\",\"moduleSequenceNumber\":444},{\"filename\":\"/lib/stock/market_data.js\",\"url\":\"blob:file:///8cdaa3a4-6f28-4f43-acfa-8af2dbc33766\",\"moduleSequenceNumber\":486},{\"filename\":\"market_sell.js\",\"url\":\"blob:file:///1c5ee6dd-5377-49d2-93b1-53a2f2cd70a6\",\"moduleSequenceNumber\":3951}],\"dependents\":[],\"ramUsage\":31.1,\"server\":\"home\",\"moduleSequenceNumber\":4111,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stock.getSymbols\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.sell\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.getAskPrice\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getBidPrice\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getPrice\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getMaxShares\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getPosition\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getSaleGain\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getForecast\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.getVolatility\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"stock.buy\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.short\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.sellShort\",\"cost\":2.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { llog } from '/lib/util';\\r\\nconst TCOST = 100000;\\r\\nexport class MarketData {\\r\\n    sym;\\r\\n    ask = 0;\\r\\n    bid = 0;\\r\\n    price = 0;\\r\\n    spread = 0;\\r\\n    max = 0;\\r\\n    cap = 0;\\r\\n    shares = 0;\\r\\n    avgPx = 0;\\r\\n    totalPx = 0;\\r\\n    sharesShort = 0;\\r\\n    avgPxShort = 0;\\r\\n    totalPxShort = 0;\\r\\n    forecast = 0;\\r\\n    movement = 0;\\r\\n    sgain = 0;\\r\\n    sgainper = 0;\\r\\n    volatility = 0;\\r\\n    potential = 0;\\r\\n    constructor(ns, sym) {\\r\\n        this.sym = sym;\\r\\n        this.update(ns);\\r\\n    }\\r\\n    update(ns) {\\r\\n        this.ask = ns.stock.getAskPrice(this.sym);\\r\\n        this.bid = ns.stock.getBidPrice(this.sym);\\r\\n        this.price = ns.stock.getPrice(this.sym);\\r\\n        this.spread = this.ask - this.bid;\\r\\n        this.max = ns.stock.getMaxShares(this.sym);\\r\\n        this.cap = this.price * this.max;\\r\\n        [this.shares, this.avgPx, this.sharesShort, this.avgPxShort] = ns.stock.getPosition(this.sym);\\r\\n        this.totalPx = this.avgPx * this.shares;\\r\\n        this.totalPxShort = this.avgPxShort * this.sharesShort;\\r\\n        this.sgain = 0;\\r\\n        this.sgainper = 0;\\r\\n        if (this.shares > 0) {\\r\\n            this.sgain = ns.stock.getSaleGain(this.sym, this.shares, \\\"Long\\\");\\r\\n            this.sgainper = (this.sgain - this.totalPx) / this.totalPx;\\r\\n        }\\r\\n        if (this.sharesShort > 0) {\\r\\n            this.sgain = ns.stock.getSaleGain(this.sym, this.sharesShort, \\\"Short\\\");\\r\\n            this.sgainper = (this.sgain - this.totalPxShort) / this.totalPxShort;\\r\\n        }\\r\\n        try {\\r\\n            this.forecast = ns.stock.getForecast(this.sym);\\r\\n            this.movement = Math.abs(0.5 - this.forecast);\\r\\n            this.volatility = ns.stock.getVolatility(this.sym);\\r\\n            this.potential = this.movement * this.volatility;\\r\\n        }\\r\\n        catch (e) {\\r\\n            // do nothing\\r\\n        }\\r\\n    }\\r\\n    value() {\\r\\n        return this.sgain;\\r\\n    }\\r\\n    buy(ns) {\\r\\n        this.update(ns);\\r\\n        let buyShareCount = this.max - this.shares - this.sharesShort;\\r\\n        if (this.forecast >= 0.5) {\\r\\n            if (this.ask * buyShareCount + TCOST > ns.getPlayer().money) {\\r\\n                buyShareCount = Math.floor((ns.getPlayer().money - TCOST) / this.ask);\\r\\n            }\\r\\n            if (buyShareCount <= 0 || this.ask * buyShareCount < 10000000)\\r\\n                return false;\\r\\n            ns.stock.buy(this.sym, buyShareCount);\\r\\n            llog(ns, \\\"Buy %s - %d (%s)\\\", this.sym, buyShareCount, ns.nFormat(this.ask * buyShareCount, \\\"$0.000a\\\"));\\r\\n        }\\r\\n        else {\\r\\n            if (this.bid * buyShareCount + TCOST > ns.getPlayer().money) {\\r\\n                buyShareCount = Math.floor((ns.getPlayer().money - TCOST) / this.bid);\\r\\n            }\\r\\n            if (buyShareCount <= 0 || this.bid * buyShareCount < 10000000)\\r\\n                return false;\\r\\n            ns.stock.short(this.sym, buyShareCount);\\r\\n            llog(ns, \\\"Buy %s - %d (SHORT)\\\", this.sym, buyShareCount);\\r\\n        }\\r\\n        this.update(ns);\\r\\n        return true;\\r\\n    }\\r\\n    sell(ns, force) {\\r\\n        this.update(ns);\\r\\n        if (this.sgainper < 0.01 && force !== true)\\r\\n            return; // dont sell if we're losing money or gaining very little\\r\\n        if (this.shares > 0) {\\r\\n            ns.stock.sell(this.sym, this.shares);\\r\\n            llog(ns, \\\"Sell %s - %d\\\", this.sym, this.shares);\\r\\n        }\\r\\n        if (this.sharesShort > 0) {\\r\\n            ns.stock.sellShort(this.sym, this.sharesShort);\\r\\n            llog(ns, \\\"Sell %s - %d (SHORT)\\\", this.sym, this.sharesShort);\\r\\n        }\\r\\n    }\\r\\n    getPurchasePrice(ns) {\\r\\n        this.update(ns);\\r\\n        const buyShareCount = this.max - this.shares - this.sharesShort;\\r\\n        if (this.forecast >= 0.5) {\\r\\n            return this.ask * buyShareCount + TCOST;\\r\\n        }\\r\\n        else {\\r\\n            return this.bid * buyShareCount + TCOST;\\r\\n        }\\r\\n    }\\r\\n    polaritySwitchSell(ns) {\\r\\n        this.update(ns);\\r\\n        if (this.shares > 0 && this.forecast < 0.5) {\\r\\n            ns.stock.sell(this.sym, this.shares);\\r\\n            llog(ns, \\\"*POLARITY SWITCH* Sell %s - %d\\\", this.sym, this.shares);\\r\\n        }\\r\\n        if (this.sharesShort > 0 && this.forecast > 0.5) {\\r\\n            ns.stock.sellShort(this.sym, this.sharesShort);\\r\\n            llog(ns, \\\"*POLARITY SWITCH* Sell %s - %d (SHORT)\\\", this.sym, this.sharesShort);\\r\\n        }\\r\\n    }\\r\\n    isUpdated(ns) {\\r\\n        return ns.stock.getAskPrice(this.sym) !== this.ask || ns.stock.getBidPrice(this.sym) !== this.bid;\\r\\n    }\\r\\n}\\r\\nexport async function waitForMarketUpdate(ns, mData) {\\r\\n    while (!mData.some((x) => x.isUpdated(ns))) {\\r\\n        await ns.sleep(500);\\r\\n    }\\r\\n}\\r\\nexport function logMarketData(ns, mData) {\\r\\n    const mFormat = function (num) {\\r\\n        if (Math.abs(num) > 1000)\\r\\n            return ns.nFormat(num, \\\"$0.000a\\\");\\r\\n        return ns.sprintf(\\\"$%.3f \\\", num);\\r\\n    };\\r\\n    llog(ns, \\\"=======================================================================\\\");\\r\\n    llog(ns, \\\"  SYM   POT MOV FOR  VOL      VALUE    SHARES  TYPE   GAIN%%  VALUE INC\\\");\\r\\n    for (const data of mData) {\\r\\n        let shareStr = \\\"---------\\\";\\r\\n        let posStr = \\\"-----\\\";\\r\\n        let gainStr = \\\"----------\\\";\\r\\n        let sellStr = \\\"----------\\\";\\r\\n        if (data.shares > 0) {\\r\\n            shareStr = ns.sprintf(\\\"%9d\\\", data.shares);\\r\\n            posStr = \\\" LONG\\\";\\r\\n            gainStr = mFormat(data.sgain - data.totalPx);\\r\\n            sellStr = mFormat(data.sgain);\\r\\n        }\\r\\n        if (data.sharesShort > 0) {\\r\\n            shareStr = ns.sprintf(\\\"%9d\\\", data.sharesShort);\\r\\n            posStr = \\\"SHORT\\\";\\r\\n            gainStr = mFormat(data.sgain - data.totalPxShort);\\r\\n            sellStr = mFormat(data.sgain);\\r\\n        }\\r\\n        llog(ns, \\\"%5s %5.2f %3d %3d %.2f %10s %s %s %7s %10s \\\", data.sym, data.potential * 10000, data.movement * 100, data.forecast * 100, data.volatility * 100, sellStr, shareStr, posStr, data.sgainper !== 0 ? ns.nFormat(data.sgainper, \\\"0.00%\\\") : \\\"-------\\\", gainStr);\\r\\n    }\\r\\n    const value = mData.reduce((total, data) => total + data.value(), 0);\\r\\n    llog(ns, \\\"Value: %s\\\", mFormat(value));\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFya2V0X2RhdGEuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvc3RvY2svbWFya2V0X2RhdGEudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUVqQyxNQUFNLEtBQUssR0FBRyxNQUFNLENBQUM7QUFFckIsTUFBTSxPQUFPLFVBQVU7SUFDbkIsR0FBRyxDQUFTO0lBQ1osR0FBRyxHQUFHLENBQUMsQ0FBQztJQUNSLEdBQUcsR0FBRyxDQUFDLENBQUM7SUFDUixLQUFLLEdBQUcsQ0FBQyxDQUFDO0lBQ1YsTUFBTSxHQUFHLENBQUMsQ0FBQztJQUNYLEdBQUcsR0FBRyxDQUFDLENBQUM7SUFDUixHQUFHLEdBQUcsQ0FBQyxDQUFDO0lBQ1IsTUFBTSxHQUFHLENBQUMsQ0FBQztJQUNYLEtBQUssR0FBRyxDQUFDLENBQUM7SUFDVixPQUFPLEdBQUcsQ0FBQyxDQUFDO0lBQ1osV0FBVyxHQUFHLENBQUMsQ0FBQztJQUNoQixVQUFVLEdBQUcsQ0FBQyxDQUFDO0lBQ2YsWUFBWSxHQUFHLENBQUMsQ0FBQztJQUNqQixRQUFRLEdBQUcsQ0FBQyxDQUFDO0lBQ2IsUUFBUSxHQUFHLENBQUMsQ0FBQztJQUNiLEtBQUssR0FBRyxDQUFDLENBQUM7SUFDVixRQUFRLEdBQUcsQ0FBQyxDQUFDO0lBQ2IsVUFBVSxHQUFHLENBQUMsQ0FBQztJQUNmLFNBQVMsR0FBRyxDQUFDLENBQUM7SUFFZCxZQUFZLEVBQU0sRUFBRSxHQUFXO1FBQzNCLElBQUksQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDO1FBRWYsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUNwQixDQUFDO0lBRUQsTUFBTSxDQUFDLEVBQU07UUFDVCxJQUFJLENBQUMsR0FBRyxHQUFHLEVBQUUsQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDLElBQUksQ0FB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\",\"filename\":\"/lib/stock/market_data.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":29.1,\"server\":\"home\",\"moduleSequenceNumber\":4112,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stock.getAskPrice\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getBidPrice\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getPrice\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getMaxShares\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getPosition\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getSaleGain\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getForecast\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.getVolatility\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"stock.buy\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.short\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.sell\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.sellShort\",\"cost\":2.5}]}}],\"serversOnNetwork\":[\"n00dles\",\"foodnstuff\",\"sigma-cosmetics\",\"joesguns\",\"hong-fang-tea\",\"harakiri-sushi\",\"iron-gym\",\"darkweb\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":1,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"suppression\":0,\"activeSuppressionThreads\":[],\"suppressionIntervalID\":null,\"suppressionLastUpdateTime\":0}},\"ecorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"ecorp\",\"httpPortOpen\":true,\"ip\":\"73.2.9.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"clarkinc\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":44690091229,\"moneyMax\":1117252280725,\"numOpenPortsRequired\":5,\"openPortCount\":4,\"requiredHackingSkill\":1359,\"serverGrowth\":99,\"suppression\":0,\"activeSuppressionThreads\":[],\"suppressionIntervalID\":null,\"suppressionLastUpdateTime\":0}},\"megacorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"megacorp\",\"httpPortOpen\":true,\"ip\":\"84.9.7.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"clarkinc\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":59765969921,\"moneyMax\":1494149248025,\"numOpenPortsRequired\":5,\"openPortCount\":4,\"requiredHackingSkill\":1127,\"serverGrowth\":99,\"suppression\":0,\"activeSuppressionThreads\":[],\"suppressionIntervalID\":null,\"suppressionLastUpdateTime\":0}},\"b-and-a\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"b-and-a\",\"httpPortOpen\":true,\"ip\":\"3.9.9.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnitek\",\"The-Cave\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":72,\"hackDifficulty\":72,\"minDifficulty\":24,\"moneyAvailable\":23012713347,\"moneyMax\":575317833675,\"numOpenPortsRequired\":5,\"openPortCount\":4,\"requiredHackingSkill\":1130,\"serverGrowth\":80,\"suppression\":0,\"activeSuppressionThreads\":[],\"suppressionIntervalID\":null,\"suppressionLastUpdateTime\":0}},\"blade\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"blade\",\"httpPortOpen\":true,\"ip\":\"11.6.1.6\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnitek\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":95,\"hackDifficulty\":95,\"minDifficulty\":32,\"moneyAvailable\":30358232235,\"moneyMax\":758955805875,\"numOpenPortsRequired\":5,\"openPortCount\":4,\"requiredHackingSkill\":946,\"serverGrowth\":73,\"suppression\":0,\"activeSuppressionThreads\":[],\"suppressionIntervalID\":null,\"suppressionLastUpdateTime\":0}},\"nwo\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-390513.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"25089158177\",\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"nwo\",\"httpPortOpen\":true,\"ip\":\"58.0.6.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"NWO\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"kuai-gong\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":38570415880,\"moneyMax\":964260397000,\"numOpenPortsRequired\":5,\"openPortCount\":4,\"requiredHackingSkill\":1083,\"serverGrowth\":71,\"suppression\":0,\"activeSuppressionThreads\":[],\"suppressionIntervalID\":null,\"suppressionLastUpdateTime\":0}},\"clarkinc\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-784940.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[110,129,170,85,140,125,98,12,34,147,31,146,185,71,144,50,14,166,185,188,196,21,104,186,12],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"clarkinc\",\"httpPortOpen\":true,\"ip\":\"40.7.6.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\".\",\"ecorp\",\"megacorp\",\"fulcrumassets\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":55,\"hackDifficulty\":55,\"minDifficulty\":18,\"moneyAvailable\":16075417215,\"moneyMax\":401885430375,\"numOpenPortsRequired\":5,\"openPortCount\":4,\"requiredHackingSkill\":1032,\"serverGrowth\":65,\"suppression\":0,\"activeSuppressionThreads\":[],\"suppressionIntervalID\":null,\"suppressionLastUpdateTime\":0}},\"omnitek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"omnitek\",\"httpPortOpen\":true,\"ip\":\"11.0.1.1\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"vitalife\",\"b-and-a\",\"blade\",\"powerhouse-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":97,\"hackDifficulty\":97,\"minDifficulty\":32,\"moneyAvailable\":16775423661,\"moneyMax\":419385591525,\"numOpenPortsRequired\":5,\"openPortCount\":4,\"requiredHackingSkill\":1057,\"serverGrowth\":97,\"suppression\":0,\"activeSuppressionThreads\":[],\"suppressionIntervalID\":null,\"suppressionLastUpdateTime\":0}},\"4sigma\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"4sigma\",\"httpPortOpen\":true,\"ip\":\"22.3.6.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"fulcrumtech\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":70,\"hackDifficulty\":70,\"minDifficulty\":23,\"moneyAvailable\":22055355816,\"moneyMax\":551383895400,\"numOpenPortsRequired\":5,\"openPortCount\":4,\"requiredHackingSkill\":978,\"serverGrowth\":99,\"suppression\":0,\"activeSuppressionThreads\":[],\"suppressionIntervalID\":null,\"suppressionLastUpdateTime\":0}},\"kuai-gong\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"kuai-gong\",\"httpPortOpen\":true,\"ip\":\"37.2.4.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"vitalife\",\"nwo\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":97,\"hackDifficulty\":97,\"minDifficulty\":32,\"moneyAvailable\":23400147776,\"moneyMax\":585003694400,\"numOpenPortsRequired\":5,\"openPortCount\":4,\"requiredHackingSkill\":1040,\"serverGrowth\":96,\"suppression\":0,\"activeSuppressionThreads\":[],\"suppressionIntervalID\":null,\"suppressionLastUpdateTime\":0}},\"fulcrumtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":true,\"ip\":\"0.1.3.6\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"applied-energetics\",\"4sigma\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":89,\"hackDifficulty\":89,\"minDifficulty\":30,\"moneyAvailable\":1792893701,\"moneyMax\":44822342525,\"numOpenPortsRequired\":5,\"openPortCount\":4,\"requiredHackingSkill\":998,\"serverGrowth\":86,\"suppression\":0,\"activeSuppressionThreads\":[],\"suppressionIntervalID\":null,\"suppressionLastUpdateTime\":0}},\"fulcrumassets\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-923557.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[-4,4,-9,-3,5,9],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":true,\"ip\":\"93.6.7.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"clarkinc\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":1000000,\"moneyMax\":25000000,\"numOpenPortsRequired\":5,\"openPortCount\":4,\"requiredHackingSkill\":1335,\"serverGrowth\":1,\"suppression\":0,\"activeSuppressionThreads\":[],\"suppressionIntervalID\":null,\"suppressionLastUpdateTime\":0}},\"stormtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"stormtech\",\"httpPortOpen\":true,\"ip\":\"35.0.9.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"run4theh111z\",\".\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":82,\"hackDifficulty\":82,\"minDifficulty\":27,\"moneyAvailable\":1089931127,\"moneyMax\":27248278175,\"numOpenPortsRequired\":5,\"openPortCount\":4,\"requiredHackingSkill\":921,\"serverGrowth\":69,\"suppression\":0,\"activeSuppressionThreads\":[],\"suppressionIntervalID\":null,\"suppressionLastUpdateTime\":0}},\"defcomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-465181-Ishima.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[191,70,119,190,143,112,173,36,100,32,136,49,1,11,69,129,177,43,181,61,51,59,66,174,111,142,110,58,92],\"reward\":{\"name\":\"Ishima\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"defcomm\",\"httpPortOpen\":true,\"ip\":\"13.7.5.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnia\",\"taiyang-digital\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":93,\"hackDifficulty\":93,\"minDifficulty\":31,\"moneyAvailable\":947121741,\"moneyMax\":23678043525,\"numOpenPortsRequired\":5,\"openPortCount\":4,\"requiredHackingSkill\":989,\"serverGrowth\":71,\"suppression\":0,\"activeSuppressionThreads\":[],\"suppressionIntervalID\":null,\"suppressionLastUpdateTime\":0}},\"infocomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"infocomm\",\"httpPortOpen\":true,\"ip\":\"38.8.0.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"univ-energy\",\"microdyne\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":860218735,\"moneyMax\":21505468375,\"numOpenPortsRequired\":5,\"openPortCount\":4,\"requiredHackingSkill\":905,\"serverGrowth\":51,\"suppression\":0,\"activeSuppressionThreads\":[],\"suppressionIntervalID\":null,\"suppressionLastUpdateTime\":0}},\"helios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"helios\",\"httpPortOpen\":true,\"ip\":\"44.4.4.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"run4theh111z\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":92,\"hackDifficulty\":92,\"minDifficulty\":31,\"moneyAvailable\":592531387,\"moneyMax\":14813284675,\"numOpenPortsRequired\":5,\"openPortCount\":4,\"requiredHackingSkill\":886,\"serverGrowth\":79,\"suppression\":0,\"activeSuppressionThreads\":[],\"suppressionIntervalID\":null,\"suppressionLastUpdateTime\":0}},\"vitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-490833-NewTokyo.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[7],[8,4],[6,4,3],[1,8,2,9],[5,8,6,7,3],[8,8,1,7,9,1],[8,9,9,9,6,3,9],[6,6,3,8,3,4,8,8],[3,8,3,2,6,8,1,6,6],[9,8,4,1,8,2,7,6,8,7],[6,7,7,3,4,7,6,8,7,5,3],[5,9,6,1,4,1,2,2,4,6,9,9]],\"reward\":{\"name\":\"New Tokyo\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"vitalife\",\"httpPortOpen\":true,\"ip\":\"64.3.0.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"applied-energetics\",\"omnitek\",\"kuai-gong\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":87,\"hackDifficulty\":87,\"minDifficulty\":29,\"moneyAvailable\":736506267,\"moneyMax\":18412656675,\"numOpenPortsRequired\":5,\"openPortCount\":4,\"requiredHackingSkill\":843,\"serverGrowth\":61,\"suppression\":0,\"activeSuppressionThreads\":[],\"suppressionIntervalID\":null,\"suppressionLastUpdateTime\":0}},\"icarus\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"icarus\",\"httpPortOpen\":true,\"ip\":\"42.4.8.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"deltaone\",\"nova-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":91,\"hackDifficulty\":91,\"minDifficulty\":30,\"moneyAvailable\":988537374,\"moneyMax\":24713434350,\"numOpenPortsRequired\":5,\"openPortCount\":4,\"requiredHackingSkill\":910,\"serverGrowth\":90,\"suppression\":0,\"activeSuppressionThreads\":[],\"suppressionIntervalID\":null,\"suppressionLastUpdateTime\":0}},\"univ-energy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"univ-energy\",\"httpPortOpen\":true,\"ip\":\"51.4.0.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.weaken(ns.args[0].toString());\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfd2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvY29uc3Rfd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsT0FBTyxJQUFJO1FBQ1AsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztBQUMvQyxDQUFDIn0=\",\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"blob:file:///fc53a5ba-58f5-42d5-9aee-b8e1aa7e2215\",\"moduleSequenceNumber\":4203}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"univ-energy\",\"moduleSequenceNumber\":4203,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"omnia\",\"infocomm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":87,\"hackDifficulty\":87,\"minDifficulty\":29,\"moneyAvailable\":1172276538,\"moneyMax\":29306913450,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":849,\"serverGrowth\":80,\"suppression\":0,\"activeSuppressionThreads\":[],\"suppressionIntervalID\":null,\"suppressionLastUpdateTime\":0}},\"titan-labs\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"titan-labs\",\"httpPortOpen\":true,\"ip\":\"48.2.1.1\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"taiyang-digital\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":78,\"hackDifficulty\":78,\"minDifficulty\":26,\"moneyAvailable\":761911375,\"moneyMax\":19047784375,\"numOpenPortsRequired\":5,\"openPortCount\":4,\"requiredHackingSkill\":836,\"serverGrowth\":78,\"suppression\":0,\"activeSuppressionThreads\":[],\"suppressionIntervalID\":null,\"suppressionLastUpdateTime\":0}},\"microdyne\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-127618-NewTokyo.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[10,13],[25,32],[15,20]],\"reward\":{\"name\":\"New Tokyo\",\"type\":0}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-730140-NewTokyo.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[3,2,-2,-4,2,5,4,6,-7,-5,-3,-1,-9,2],\"reward\":{\"name\":\"New Tokyo\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"microdyne\",\"httpPortOpen\":true,\"ip\":\"9.7.9.5\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"infocomm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":66,\"hackDifficulty\":66,\"minDifficulty\":22,\"moneyAvailable\":652760676,\"moneyMax\":16319016900,\"numOpenPortsRequired\":5,\"openPortCount\":4,\"requiredHackingSkill\":807,\"serverGrowth\":80,\"suppression\":0,\"activeSuppressionThreads\":[],\"suppressionIntervalID\":null,\"suppressionLastUpdateTime\":0}},\"taiyang-digital\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":true,\"ip\":\"55.1.8.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"defcomm\",\"titan-labs\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":74,\"hackDifficulty\":74,\"minDifficulty\":25,\"moneyAvailable\":812813178,\"moneyMax\":20320329450,\"numOpenPortsRequired\":5,\"openPortCount\":4,\"requiredHackingSkill\":891,\"serverGrowth\":79,\"suppression\":0,\"activeSuppressionThreads\":[],\"suppressionIntervalID\":null,\"suppressionLastUpdateTime\":0}},\"galactic-cyber\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":true,\"ip\":\"47.8.5.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"aevum-police\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":59,\"hackDifficulty\":59,\"minDifficulty\":20,\"moneyAvailable\":773580728,\"moneyMax\":19339518200,\"numOpenPortsRequired\":5,\"openPortCount\":4,\"requiredHackingSkill\":849,\"serverGrowth\":84,\"suppression\":0,\"activeSuppressionThreads\":[],\"suppressionIntervalID\":null,\"suppressionLastUpdateTime\":0}},\"aerocorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"aerocorp\",\"httpPortOpen\":true,\"ip\":\"75.8.1.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"aevum-police\",\"omnia\",\"deltaone\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":82,\"hackDifficulty\":82,\"minDifficulty\":27,\"moneyAvailable\":1042764037,\"moneyMax\":26069100925,\"numOpenPortsRequired\":5,\"openPortCount\":4,\"requiredHackingSkill\":889,\"serverGrowth\":61,\"suppression\":0,\"activeSuppressionThreads\":[],\"suppressionIntervalID\":null,\"suppressionLastUpdateTime\":0}},\"omnia\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"omnia\",\"httpPortOpen\":true,\"ip\":\"60.3.5.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"aerocorp\",\"defcomm\",\"univ-energy\",\"solaris\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":85,\"hackDifficulty\":85,\"minDifficulty\":28,\"moneyAvailable\":988684080,\"moneyMax\":24717102000,\"numOpenPortsRequired\":5,\"openPortCount\":4,\"requiredHackingSkill\":918,\"serverGrowth\":64,\"suppression\":0,\"activeSuppressionThreads\":[],\"suppressionIntervalID\":null,\"suppressionLastUpdateTime\":0}},\"zb-def\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zb-def\",\"httpPortOpen\":true,\"ip\":\"88.7.3.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zeus-med\",\"applied-energetics\",\"run4theh111z\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":61,\"hackDifficulty\":61,\"minDifficulty\":20,\"moneyAvailable\":1017623742,\"moneyMax\":25440593550,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":819,\"serverGrowth\":75,\"suppression\":0,\"activeSuppressionThreads\":[],\"suppressionIntervalID\":null,\"suppressionLastUpdateTime\":0}},\"applied-energetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"applied-energetics\",\"httpPortOpen\":true,\"ip\":\"88.7.8.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zb-def\",\"fulcrumtech\",\"vitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":62,\"hackDifficulty\":62,\"minDifficulty\":21,\"moneyAvailable\":944551090,\"moneyMax\":23613777250,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":824,\"serverGrowth\":71,\"suppression\":0,\"activeSuppressionThreads\":[],\"suppressionIntervalID\":null,\"suppressionLastUpdateTime\":0}},\"solaris\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"solaris\",\"httpPortOpen\":true,\"ip\":\"50.8.2.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnia\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":78,\"hackDifficulty\":78,\"minDifficulty\":26,\"moneyAvailable\":852284463,\"moneyMax\":21307111575,\"numOpenPortsRequired\":5,\"openPortCount\":4,\"requiredHackingSkill\":801,\"serverGrowth\":79,\"suppression\":0,\"activeSuppressionThreads\":[],\"suppressionIntervalID\":null,\"suppressionLastUpdateTime\":0}},\"deltaone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"deltaone\",\"httpPortOpen\":true,\"ip\":\"40.3.4.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"aerocorp\",\"icarus\",\"zeus-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":76,\"hackDifficulty\":76,\"minDifficulty\":25,\"moneyAvailable\":1507409244,\"moneyMax\":37685231100,\"numOpenPortsRequired\":5,\"openPortCount\":4,\"requiredHackingSkill\":859,\"serverGrowth\":55,\"suppression\":0,\"activeSuppressionThreads\":[],\"suppressionIntervalID\":null,\"suppressionLastUpdateTime\":0}},\"global-pharm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"global-pharm\",\"httpPortOpen\":true,\"ip\":\"57.5.5.3\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"ramUsed\":63,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.weaken(ns.args[0].toString());\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfd2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvY29uc3Rfd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsT0FBTyxJQUFJO1FBQ1AsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztBQUMvQyxDQUFDIn0=\",\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"blob:file:///8b22006d-0a22-4003-925b-3c7bbf727cf6\",\"moduleSequenceNumber\":4206}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"global-pharm\",\"moduleSequenceNumber\":4206,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"aevum-police\",\"unitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":79,\"hackDifficulty\":79,\"minDifficulty\":26,\"moneyAvailable\":1581845784,\"moneyMax\":39546144600,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":811,\"serverGrowth\":85,\"suppression\":0,\"activeSuppressionThreads\":[],\"suppressionIntervalID\":null,\"suppressionLastUpdateTime\":0}},\"nova-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nova-med\",\"httpPortOpen\":true,\"ip\":\"68.5.2.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"icarus\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":64,\"hackDifficulty\":64,\"minDifficulty\":21,\"moneyAvailable\":1144550818,\"moneyMax\":28613770450,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":816,\"serverGrowth\":83,\"suppression\":0,\"activeSuppressionThreads\":[],\"suppressionIntervalID\":null,\"suppressionLastUpdateTime\":0}},\"zeus-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"zeus-med\",\"httpPortOpen\":true,\"ip\":\"40.8.4.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"deltaone\",\"zb-def\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":85,\"hackDifficulty\":85,\"minDifficulty\":28,\"moneyAvailable\":1453813997,\"moneyMax\":36345349925,\"numOpenPortsRequired\":5,\"openPortCount\":4,\"requiredHackingSkill\":817,\"serverGrowth\":77,\"suppression\":0,\"activeSuppressionThreads\":[],\"suppressionIntervalID\":null,\"suppressionLastUpdateTime\":0}},\"unitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"unitalife\",\"httpPortOpen\":true,\"ip\":\"68.1.3.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.weaken(ns.args[0].toString());\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfd2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvY29uc3Rfd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsT0FBTyxJQUFJO1FBQ1AsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztBQUMvQyxDQUFDIn0=\",\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"blob:file:///3ccd718c-58c5-42fb-884e-ba40b4b11d1d\",\"moduleSequenceNumber\":4207}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"unitalife\",\"moduleSequenceNumber\":4207,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"global-pharm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":75,\"minDifficulty\":25,\"moneyAvailable\":1079121111,\"moneyMax\":26978027775,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":779,\"serverGrowth\":76,\"suppression\":0,\"activeSuppressionThreads\":[],\"suppressionIntervalID\":null,\"suppressionLastUpdateTime\":0}},\"lexo-corp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lexo-corp\",\"httpPortOpen\":true,\"ip\":\"66.2.9.1\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"ramUsed\":127.75,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.weaken(ns.args[0].toString());\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfd2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvY29uc3Rfd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsT0FBTyxJQUFJO1FBQ1AsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztBQUMvQyxDQUFDIn0=\",\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"blob:file:///0c60739e-a7e3-4b15-8bd2-f9ccfda3e064\",\"moduleSequenceNumber\":4186}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":4186,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"zb-institute\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":76,\"hackDifficulty\":76,\"minDifficulty\":25,\"moneyAvailable\":759214157,\"moneyMax\":18980353925,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":667,\"serverGrowth\":59,\"suppression\":0,\"activeSuppressionThreads\":[],\"suppressionIntervalID\":null,\"suppressionLastUpdateTime\":0}},\"rho-construction\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-660073.cct\",\"type\":\"Total Ways to Sum\",\"data\":60,\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rho-construction\",\"httpPortOpen\":true,\"ip\":\"14.1.8.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.weaken(ns.args[0].toString());\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfd2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvY29uc3Rfd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsT0FBTyxJQUFJO1FBQ1AsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztBQUMvQyxDQUFDIn0=\",\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"blob:file:///6af88455-be0a-4190-9dc7-563408c7a61d\",\"moduleSequenceNumber\":4187}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"rho-construction\",\"moduleSequenceNumber\":4187,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"zb-institute\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":54,\"hackDifficulty\":54,\"minDifficulty\":18,\"moneyAvailable\":567042101,\"moneyMax\":14176052525,\"numOpenPortsRequired\":3,\"openPortCount\":4,\"requiredHackingSkill\":513,\"serverGrowth\":60,\"suppression\":0,\"activeSuppressionThreads\":[],\"suppressionIntervalID\":null,\"suppressionLastUpdateTime\":0}},\"alpha-ent\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"alpha-ent\",\"httpPortOpen\":true,\"ip\":\"4.2.3.8\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"ramUsed\":63,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.weaken(ns.args[0].toString());\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfd2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvY29uc3Rfd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsT0FBTyxJQUFJO1FBQ1AsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztBQUMvQyxDQUFDIn0=\",\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"blob:file:///eb987efb-77e9-40df-ab83-4ac173612e00\",\"moduleSequenceNumber\":4201}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":4201,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"rothman-uni\",\"snap-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":60,\"hackDifficulty\":60,\"minDifficulty\":20,\"moneyAvailable\":616590013,\"moneyMax\":15414750325,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":559,\"serverGrowth\":54,\"suppression\":0,\"activeSuppressionThreads\":[],\"suppressionIntervalID\":null,\"suppressionLastUpdateTime\":0}},\"aevum-police\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aevum-police\",\"httpPortOpen\":true,\"ip\":\"4.0.3.8\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"ramUsed\":63,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.weaken(ns.args[0].toString());\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfd2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvY29uc3Rfd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsT0FBTyxJQUFJO1FBQ1AsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztBQUMvQyxDQUFDIn0=\",\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"blob:file:///1ede22e7-43bf-45e8-8769-61b0ca1d5a32\",\"moduleSequenceNumber\":4202}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"aevum-police\",\"moduleSequenceNumber\":4202,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"rothman-uni\",\"galactic-cyber\",\"aerocorp\",\"global-pharm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":78,\"hackDifficulty\":78,\"minDifficulty\":26,\"moneyAvailable\":373648119,\"moneyMax\":9341202975,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":441,\"serverGrowth\":49,\"suppression\":0,\"activeSuppressionThreads\":[],\"suppressionIntervalID\":null,\"suppressionLastUpdateTime\":0}},\"rothman-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rothman-uni\",\"httpPortOpen\":true,\"ip\":\"87.4.2.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.weaken(ns.args[0].toString());\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfd2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvY29uc3Rfd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsT0FBTyxJQUFJO1FBQ1AsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztBQUMvQyxDQUFDIn0=\",\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"blob:file:///5f7ee80c-d1fa-4298-93a9-8a2b4335e8e6\",\"moduleSequenceNumber\":4200}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":4200,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"computek\",\"alpha-ent\",\"aevum-police\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":55,\"hackDifficulty\":55,\"minDifficulty\":18,\"moneyAvailable\":238951482,\"moneyMax\":5973787050,\"numOpenPortsRequired\":3,\"openPortCount\":4,\"requiredHackingSkill\":374,\"serverGrowth\":37,\"suppression\":0,\"activeSuppressionThreads\":[],\"suppressionIntervalID\":null,\"suppressionLastUpdateTime\":0}},\"zb-institute\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"zb-institute\",\"httpPortOpen\":true,\"ip\":\"29.2.6.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"avmnite-02h\",\"lexo-corp\",\"rho-construction\",\"millenium-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":79,\"hackDifficulty\":79,\"minDifficulty\":26,\"moneyAvailable\":912582861,\"moneyMax\":22814571525,\"numOpenPortsRequired\":5,\"openPortCount\":4,\"requiredHackingSkill\":760,\"serverGrowth\":80,\"suppression\":0,\"activeSuppressionThreads\":[],\"suppressionIntervalID\":null,\"suppressionLastUpdateTime\":0}},\"summit-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"summit-uni\",\"httpPortOpen\":true,\"ip\":\"74.6.6.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.weaken(ns.args[0].toString());\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfd2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvY29uc3Rfd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsT0FBTyxJQUFJO1FBQ1AsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztBQUMvQyxDQUFDIn0=\",\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"blob:file:///cc1d228e-ba57-4e4e-a04c-831dfeb26e70\",\"moduleSequenceNumber\":4189}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"summit-uni\",\"moduleSequenceNumber\":4189,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"avmnite-02h\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":45,\"hackDifficulty\":45,\"minDifficulty\":15,\"moneyAvailable\":206613326,\"moneyMax\":5165333150,\"numOpenPortsRequired\":3,\"openPortCount\":4,\"requiredHackingSkill\":462,\"serverGrowth\":53,\"suppression\":0,\"activeSuppressionThreads\":[],\"suppressionIntervalID\":null,\"suppressionLastUpdateTime\":0}},\"syscore\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"syscore\",\"httpPortOpen\":true,\"ip\":\"19.9.9.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"netlink\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":66,\"hackDifficulty\":66,\"minDifficulty\":22,\"moneyAvailable\":475617431,\"moneyMax\":11890435775,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":565,\"serverGrowth\":70,\"suppression\":0,\"activeSuppressionThreads\":[],\"suppressionIntervalID\":null,\"suppressionLastUpdateTime\":0}},\"catalyst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"catalyst\",\"httpPortOpen\":true,\"ip\":\"41.1.4.5\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"ramUsed\":127.75,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.weaken(ns.args[0].toString());\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfd2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvY29uc3Rfd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsT0FBTyxJQUFJO1FBQ1AsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztBQUMvQyxDQUFDIn0=\",\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"blob:file:///f636a498-8eae-4bdc-ad96-5cbc5f9060ec\",\"moduleSequenceNumber\":4190}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"catalyst\",\"moduleSequenceNumber\":4190,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"avmnite-02h\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":66,\"hackDifficulty\":66,\"minDifficulty\":22,\"moneyAvailable\":412270090,\"moneyMax\":10306752250,\"numOpenPortsRequired\":3,\"openPortCount\":4,\"requiredHackingSkill\":446,\"serverGrowth\":25,\"suppression\":0,\"activeSuppressionThreads\":[],\"suppressionIntervalID\":null,\"suppressionLastUpdateTime\":0}},\"the-hub\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"the-hub\",\"httpPortOpen\":true,\"ip\":\"15.6.7.0\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"ramUsed\":63,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.weaken(ns.args[0].toString());\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfd2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvY29uc3Rfd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsT0FBTyxJQUFJO1FBQ1AsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztBQUMvQyxDQUFDIn0=\",\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"blob:file:///f3fa2955-aebb-49ce-afd9-bf1209546989\",\"moduleSequenceNumber\":4196}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"the-hub\",\"moduleSequenceNumber\":4196,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"silver-helix\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":42,\"hackDifficulty\":42,\"minDifficulty\":14,\"moneyAvailable\":197329531,\"moneyMax\":4933238275,\"numOpenPortsRequired\":2,\"openPortCount\":4,\"requiredHackingSkill\":307,\"serverGrowth\":45,\"suppression\":0,\"activeSuppressionThreads\":[],\"suppressionIntervalID\":null,\"suppressionLastUpdateTime\":0}},\"computek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"computek\",\"httpPortOpen\":true,\"ip\":\"70.2.1.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"neo-net\",\"rothman-uni\",\"I.I.I.I\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":63,\"hackDifficulty\":63,\"minDifficulty\":21,\"moneyAvailable\":222914742,\"moneyMax\":5572868550,\"numOpenPortsRequired\":3,\"openPortCount\":4,\"requiredHackingSkill\":300,\"serverGrowth\":65,\"suppression\":0,\"activeSuppressionThreads\":[],\"suppressionIntervalID\":null,\"suppressionLastUpdateTime\":0}},\"netlink\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-424087.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"(()a)))(((a)a)())\",\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"netlink\",\"httpPortOpen\":true,\"ip\":\"33.2.0.9\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"ramUsed\":127.75,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.weaken(ns.args[0].toString());\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfd2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvY29uc3Rfd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsT0FBTyxJQUFJO1FBQ1AsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztBQUMvQyxDQUFDIn0=\",\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"blob:file:///784149c6-64ce-4878-b752-995628c822e8\",\"moduleSequenceNumber\":4197}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"netlink\",\"moduleSequenceNumber\":4197,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"silver-helix\",\"syscore\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":77,\"hackDifficulty\":77,\"minDifficulty\":26,\"moneyAvailable\":275000000,\"moneyMax\":6875000000,\"numOpenPortsRequired\":3,\"openPortCount\":4,\"requiredHackingSkill\":421,\"serverGrowth\":65,\"suppression\":0,\"activeSuppressionThreads\":[],\"suppressionIntervalID\":null,\"suppressionLastUpdateTime\":0}},\"johnson-ortho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":true,\"ip\":\"1.1.2.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"silver-helix\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":37,\"hackDifficulty\":37,\"minDifficulty\":12,\"moneyAvailable\":81870335,\"moneyMax\":2046758375,\"numOpenPortsRequired\":2,\"openPortCount\":4,\"requiredHackingSkill\":285,\"serverGrowth\":38,\"suppression\":0,\"activeSuppressionThreads\":[],\"suppressionIntervalID\":null,\"suppressionLastUpdateTime\":0}},\"n00dles\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-714107.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[18,21],[9,15],[19,22],[9,15],[15,21],[22,23],[25,35],[25,33],[10,18],[22,24],[11,18],[24,32],[6,10],[14,15],[11,19],[4,13]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"n00dles\",\"httpPortOpen\":true,\"ip\":\"13.6.0.5\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"ramUsed\":3.5,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.weaken(ns.args[0].toString());\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfd2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvY29uc3Rfd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsT0FBTyxJQUFJO1FBQ1AsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztBQUMvQyxDQUFDIn0=\",\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"blob:file:///367348b3-3c26-4659-9ed4-117a117ffa1b\",\"moduleSequenceNumber\":4182}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"n00dles\",\"moduleSequenceNumber\":4182,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\",\"CSEC\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":70000,\"moneyMax\":1750000,\"numOpenPortsRequired\":0,\"openPortCount\":4,\"requiredHackingSkill\":1,\"serverGrowth\":3000,\"suppression\":0,\"activeSuppressionThreads\":[],\"suppressionIntervalID\":null,\"suppressionLastUpdateTime\":0}},\"foodnstuff\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"foodnstuff\",\"httpPortOpen\":true,\"ip\":\"6.9.9.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.weaken(ns.args[0].toString());\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfd2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvY29uc3Rfd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsT0FBTyxJQUFJO1FBQ1AsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztBQUMvQyxDQUFDIn0=\",\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"blob:file:///fa1f99f5-4b44-4994-88a4-b9eb99ea511e\",\"moduleSequenceNumber\":4191}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":4191,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":10,\"minDifficulty\":3,\"moneyAvailable\":2000000,\"moneyMax\":50000000,\"numOpenPortsRequired\":0,\"openPortCount\":4,\"requiredHackingSkill\":1,\"serverGrowth\":5,\"suppression\":0,\"activeSuppressionThreads\":[],\"suppressionIntervalID\":null,\"suppressionLastUpdateTime\":0}},\"sigma-cosmetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-897299.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"9823145242\",8],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":true,\"ip\":\"99.4.1.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.weaken(ns.args[0].toString());\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfd2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvY29uc3Rfd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsT0FBTyxJQUFJO1FBQ1AsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztBQUMvQyxDQUFDIn0=\",\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"blob:file:///7503100e-ffb2-4ff6-b00e-4ee566907d7e\",\"moduleSequenceNumber\":4192}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":4192,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":10,\"minDifficulty\":3,\"moneyAvailable\":2300000,\"moneyMax\":57500000,\"numOpenPortsRequired\":0,\"openPortCount\":4,\"requiredHackingSkill\":5,\"serverGrowth\":10,\"suppression\":0,\"activeSuppressionThreads\":[],\"suppressionIntervalID\":null,\"suppressionLastUpdateTime\":0}},\"joesguns\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"joesguns\",\"httpPortOpen\":true,\"ip\":\"3.8.7.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.weaken(ns.args[0].toString());\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfd2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvY29uc3Rfd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsT0FBTyxJQUFJO1FBQ1AsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztBQUMvQyxDQUFDIn0=\",\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"blob:file:///8f5cb6ff-de55-4600-832f-b7dc631792c5\",\"moduleSequenceNumber\":4193}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"joesguns\",\"moduleSequenceNumber\":4193,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\",\"zer0\",\"max-hardware\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":5,\"minDifficulty\":5,\"moneyAvailable\":2500000,\"moneyMax\":62500000,\"numOpenPortsRequired\":0,\"openPortCount\":4,\"requiredHackingSkill\":10,\"serverGrowth\":20,\"suppression\":0,\"activeSuppressionThreads\":[],\"suppressionIntervalID\":null,\"suppressionLastUpdateTime\":0}},\"zer0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zer0\",\"httpPortOpen\":true,\"ip\":\"73.7.7.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.weaken(ns.args[0].toString());\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfd2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvY29uc3Rfd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsT0FBTyxJQUFJO1FBQ1AsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztBQUMvQyxDQUFDIn0=\",\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"blob:file:///e8c23ad7-3cea-4b65-b030-56de43cda44d\",\"moduleSequenceNumber\":4194}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zer0\",\"moduleSequenceNumber\":4194,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"joesguns\",\"silver-helix\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":25,\"minDifficulty\":8,\"moneyAvailable\":7500000,\"moneyMax\":187500000,\"numOpenPortsRequired\":1,\"openPortCount\":4,\"requiredHackingSkill\":75,\"serverGrowth\":40,\"suppression\":0,\"activeSuppressionThreads\":[],\"suppressionIntervalID\":null,\"suppressionLastUpdateTime\":0}},\"nectar-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nectar-net\",\"httpPortOpen\":true,\"ip\":\"17.4.7.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.weaken(ns.args[0].toString());\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfd2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvY29uc3Rfd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsT0FBTyxJQUFJO1FBQ1AsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztBQUMvQyxDQUFDIn0=\",\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"blob:file:///c33f7bee-003f-4121-adc3-6febbda84a84\",\"moduleSequenceNumber\":4213}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nectar-net\",\"moduleSequenceNumber\":4213,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"iron-gym\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":20,\"minDifficulty\":7,\"moneyAvailable\":2750000,\"moneyMax\":68750000,\"numOpenPortsRequired\":0,\"openPortCount\":4,\"requiredHackingSkill\":20,\"serverGrowth\":25,\"suppression\":0,\"activeSuppressionThreads\":[],\"suppressionIntervalID\":null,\"suppressionLastUpdateTime\":0}},\"neo-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"neo-net\",\"httpPortOpen\":true,\"ip\":\"32.4.5.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.weaken(ns.args[0].toString());\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfd2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvY29uc3Rfd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsT0FBTyxJQUFJO1FBQ1AsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztBQUMvQyxDQUFDIn0=\",\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"blob:file:///2041c5d4-f4f2-417d-ae3a-a444f7decd9f\",\"moduleSequenceNumber\":4199}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"neo-net\",\"moduleSequenceNumber\":4199,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"max-hardware\",\"computek\",\"crush-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":25,\"minDifficulty\":8,\"moneyAvailable\":5000000,\"moneyMax\":125000000,\"numOpenPortsRequired\":1,\"openPortCount\":4,\"requiredHackingSkill\":50,\"serverGrowth\":25,\"suppression\":0,\"activeSuppressionThreads\":[],\"suppressionIntervalID\":null,\"suppressionLastUpdateTime\":0}},\"silver-helix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"silver-helix\",\"httpPortOpen\":true,\"ip\":\"31.4.2.1\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"ramUsed\":63,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.weaken(ns.args[0].toString());\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfd2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvY29uc3Rfd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsT0FBTyxJQUFJO1FBQ1AsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztBQUMvQyxDQUFDIn0=\",\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"blob:file:///94174a8f-aa71-4dfe-a487-d48da140859e\",\"moduleSequenceNumber\":4195}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"silver-helix\",\"moduleSequenceNumber\":4195,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"zer0\",\"the-hub\",\"netlink\",\"johnson-ortho\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":30,\"minDifficulty\":10,\"moneyAvailable\":45000000,\"moneyMax\":1125000000,\"numOpenPortsRequired\":2,\"openPortCount\":4,\"requiredHackingSkill\":150,\"serverGrowth\":30,\"suppression\":0,\"activeSuppressionThreads\":[],\"suppressionIntervalID\":null,\"suppressionLastUpdateTime\":0}},\"hong-fang-tea\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":true,\"ip\":\"7.2.3.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.weaken(ns.args[0].toString());\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfd2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvY29uc3Rfd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsT0FBTyxJQUFJO1FBQ1AsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztBQUMvQyxDQUFDIn0=\",\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"blob:file:///bbea0d87-72f6-4fe0-8218-45db07070570\",\"moduleSequenceNumber\":4210}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":4210,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":3000000,\"moneyMax\":75000000,\"numOpenPortsRequired\":0,\"openPortCount\":4,\"requiredHackingSkill\":30,\"serverGrowth\":20,\"suppression\":0,\"activeSuppressionThreads\":[],\"suppressionIntervalID\":null,\"suppressionLastUpdateTime\":0}},\"harakiri-sushi\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-895165.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[186,182,27,177,150,29,20,73,54,130,101,49,106,192,74,4,165],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":true,\"ip\":\"42.6.3.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.weaken(ns.args[0].toString());\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfd2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvY29uc3Rfd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsT0FBTyxJQUFJO1FBQ1AsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztBQUMvQyxDQUFDIn0=\",\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"blob:file:///d54a9a23-3e94-44bf-8d9b-9f8a1213a9f2\",\"moduleSequenceNumber\":4211}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":4211,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":4000000,\"moneyMax\":100000000,\"numOpenPortsRequired\":0,\"openPortCount\":4,\"requiredHackingSkill\":40,\"serverGrowth\":40,\"suppression\":0,\"activeSuppressionThreads\":[],\"suppressionIntervalID\":null,\"suppressionLastUpdateTime\":0}},\"phantasy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"phantasy\",\"httpPortOpen\":true,\"ip\":\"74.7.3.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.weaken(ns.args[0].toString());\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfd2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvY29uc3Rfd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsT0FBTyxJQUFJO1FBQ1AsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztBQUMvQyxDQUFDIn0=\",\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"blob:file:///36f8127b-8156-4a14-b555-69b9b9d44135\",\"moduleSequenceNumber\":4184}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"phantasy\",\"moduleSequenceNumber\":4184,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"CSEC\",\"avmnite-02h\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":20,\"minDifficulty\":7,\"moneyAvailable\":24000000,\"moneyMax\":600000000,\"numOpenPortsRequired\":2,\"openPortCount\":4,\"requiredHackingSkill\":100,\"serverGrowth\":35,\"suppression\":0,\"activeSuppressionThreads\":[],\"suppressionIntervalID\":null,\"suppressionLastUpdateTime\":0}},\"max-hardware\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"max-hardware\",\"httpPortOpen\":true,\"ip\":\"87.2.8.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.weaken(ns.args[0].toString());\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfd2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvY29uc3Rfd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsT0FBTyxJQUFJO1FBQ1AsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztBQUMvQyxDQUFDIn0=\",\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"blob:file:///05db3640-3d58-4ca9-91ee-53df12c14945\",\"moduleSequenceNumber\":4198}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"max-hardware\",\"moduleSequenceNumber\":4198,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"joesguns\",\"neo-net\",\"omega-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":10000000,\"moneyMax\":250000000,\"numOpenPortsRequired\":1,\"openPortCount\":4,\"requiredHackingSkill\":80,\"serverGrowth\":30,\"suppression\":0,\"activeSuppressionThreads\":[],\"suppressionIntervalID\":null,\"suppressionLastUpdateTime\":0}},\"omega-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-642387.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"5852202121\",\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omega-net\",\"httpPortOpen\":true,\"ip\":\"17.7.9.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.weaken(ns.args[0].toString());\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfd2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvY29uc3Rfd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsT0FBTyxJQUFJO1FBQ1AsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztBQUMvQyxDQUFDIn0=\",\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"blob:file:///54b90561-196e-4a21-b6c6-99c57e548da5\",\"moduleSequenceNumber\":4209}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omega-net\",\"moduleSequenceNumber\":4209,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"max-hardware\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":27,\"hackDifficulty\":27,\"minDifficulty\":9,\"moneyAvailable\":66509816,\"moneyMax\":1662745400,\"numOpenPortsRequired\":2,\"openPortCount\":4,\"requiredHackingSkill\":185,\"serverGrowth\":36,\"suppression\":0,\"activeSuppressionThreads\":[],\"suppressionIntervalID\":null,\"suppressionLastUpdateTime\":0}},\"crush-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-634195.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"(a))()(\",\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"crush-fitness\",\"httpPortOpen\":true,\"ip\":\"85.0.6.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"neo-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":41,\"hackDifficulty\":41,\"minDifficulty\":14,\"moneyAvailable\":47889563,\"moneyMax\":1197239075,\"numOpenPortsRequired\":2,\"openPortCount\":4,\"requiredHackingSkill\":270,\"serverGrowth\":31,\"suppression\":0,\"activeSuppressionThreads\":[],\"suppressionIntervalID\":null,\"suppressionLastUpdateTime\":0}},\"iron-gym\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-858119-CyberSec.cct\",\"type\":\"Array Jumping Game\",\"data\":[8,1,0,0,10,10,0,4,4,5,8,2,0,9,6,2,3,1,5,8,0,1,0,10],\"reward\":{\"name\":\"CyberSec\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"iron-gym\",\"httpPortOpen\":true,\"ip\":\"19.2.4.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.weaken(ns.args[0].toString());\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfd2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvY29uc3Rfd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsT0FBTyxJQUFJO1FBQ1AsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztBQUMvQyxDQUFDIn0=\",\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"blob:file:///e8da753f-296e-4515-9f57-9d3924e9325e\",\"moduleSequenceNumber\":4212}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"iron-gym\",\"moduleSequenceNumber\":4212,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\",\"nectar-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":30,\"minDifficulty\":10,\"moneyAvailable\":20000000,\"moneyMax\":500000000,\"numOpenPortsRequired\":1,\"openPortCount\":4,\"requiredHackingSkill\":100,\"serverGrowth\":20,\"suppression\":0,\"activeSuppressionThreads\":[],\"suppressionIntervalID\":null,\"suppressionLastUpdateTime\":0}},\"millenium-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":true,\"ip\":\"69.7.2.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.weaken(ns.args[0].toString());\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfd2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvY29uc3Rfd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsT0FBTyxJQUFJO1FBQ1AsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztBQUMvQyxDQUFDIn0=\",\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"blob:file:///6ba17d41-49b6-4bd2-aa83-3dc57684c766\",\"moduleSequenceNumber\":4188}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":4188,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"zb-institute\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":49,\"hackDifficulty\":49,\"minDifficulty\":16,\"moneyAvailable\":250000000,\"moneyMax\":6250000000,\"numOpenPortsRequired\":3,\"openPortCount\":4,\"requiredHackingSkill\":496,\"serverGrowth\":40,\"suppression\":0,\"activeSuppressionThreads\":[],\"suppressionIntervalID\":null,\"suppressionLastUpdateTime\":0}},\"powerhouse-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":true,\"ip\":\"51.2.3.9\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnitek\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":61,\"hackDifficulty\":61,\"minDifficulty\":20,\"moneyAvailable\":900000000,\"moneyMax\":22500000000,\"numOpenPortsRequired\":5,\"openPortCount\":4,\"requiredHackingSkill\":1011,\"serverGrowth\":50,\"suppression\":0,\"activeSuppressionThreads\":[],\"suppressionIntervalID\":null,\"suppressionLastUpdateTime\":0}},\"snap-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"snap-fitness\",\"httpPortOpen\":true,\"ip\":\"89.9.6.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"alpha-ent\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":56,\"hackDifficulty\":56,\"minDifficulty\":19,\"moneyAvailable\":450000000,\"moneyMax\":11250000000,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":680,\"serverGrowth\":41,\"suppression\":0,\"activeSuppressionThreads\":[],\"suppressionIntervalID\":null,\"suppressionLastUpdateTime\":0}},\"run4theh111z\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"run4theh111z\",\"httpPortOpen\":true,\"ip\":\"47.2.9.3\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"ramUsed\":255.5,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.weaken(ns.args[0].toString());\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfd2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvY29uc3Rfd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsT0FBTyxJQUFJO1FBQ1AsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztBQUMvQyxDQUFDIn0=\",\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"blob:file:///b9394d1d-ec02-44c1-a34b-60130c855aa3\",\"moduleSequenceNumber\":4204}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":4204,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"zb-def\",\"stormtech\",\"helios\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":548,\"serverGrowth\":0,\"suppression\":0,\"activeSuppressionThreads\":[],\"suppressionIntervalID\":null,\"suppressionLastUpdateTime\":0}},\"I.I.I.I\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":true,\"ip\":\"28.8.5.3\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"ramUsed\":255.5,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.weaken(ns.args[0].toString());\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfd2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvY29uc3Rfd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsT0FBTyxJQUFJO1FBQ1AsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztBQUMvQyxDQUFDIn0=\",\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"blob:file:///a75b9544-abec-4894-9dff-722fd0b00f88\",\"moduleSequenceNumber\":4208}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":4208,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"computek\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":4,\"requiredHackingSkill\":340,\"serverGrowth\":0,\"suppression\":0,\"activeSuppressionThreads\":[],\"suppressionIntervalID\":null,\"suppressionLastUpdateTime\":0}},\"avmnite-02h\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":true,\"ip\":\"55.6.0.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.weaken(ns.args[0].toString());\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfd2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvY29uc3Rfd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsT0FBTyxJQUFJO1FBQ1AsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztBQUMvQyxDQUFDIn0=\",\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"blob:file:///2f6b9716-bc8a-4484-a5bc-91c294cc38b4\",\"moduleSequenceNumber\":4185}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":4185,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"phantasy\",\"zb-institute\",\"summit-uni\",\"catalyst\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":4,\"requiredHackingSkill\":216,\"serverGrowth\":0,\"suppression\":0,\"activeSuppressionThreads\":[],\"suppressionIntervalID\":null,\"suppressionLastUpdateTime\":0}},\".\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\".\",\"httpPortOpen\":true,\"ip\":\"25.7.3.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.weaken(ns.args[0].toString());\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfd2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvY29uc3Rfd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsT0FBTyxJQUFJO1FBQ1AsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztBQUMvQyxDQUFDIn0=\",\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"blob:file:///e6ba8b1c-d2a6-4401-bc1b-a7b4c8c0d053\",\"moduleSequenceNumber\":4205}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\".\",\"moduleSequenceNumber\":4205,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"stormtech\",\"clarkinc\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":543,\"serverGrowth\":0,\"suppression\":0,\"activeSuppressionThreads\":[],\"suppressionIntervalID\":null,\"suppressionLastUpdateTime\":0}},\"CSEC\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"CSEC\",\"httpPortOpen\":true,\"ip\":\"19.1.2.2\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"ramUsed\":7,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.weaken(ns.args[0].toString());\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfd2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvY29uc3Rfd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsT0FBTyxJQUFJO1FBQ1AsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztBQUMvQyxDQUFDIn0=\",\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"blob:file:///07acdf9c-43fc-45a7-b525-737ea58b505e\",\"moduleSequenceNumber\":4183}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"CSEC\",\"moduleSequenceNumber\":4183,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"n00dles\",\"phantasy\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":4,\"requiredHackingSkill\":55,\"serverGrowth\":0,\"suppression\":0,\"activeSuppressionThreads\":[],\"suppressionIntervalID\":null,\"suppressionLastUpdateTime\":0}},\"The-Cave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"The-Cave\",\"httpPortOpen\":true,\"ip\":\"31.2.5.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"b-and-a\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":4,\"requiredHackingSkill\":925,\"serverGrowth\":0,\"suppression\":0,\"activeSuppressionThreads\":[],\"suppressionIntervalID\":null,\"suppressionLastUpdateTime\":0}},\"w0r1d_d43m0n\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":false,\"ip\":\"57.7.8.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":3000,\"serverGrowth\":0,\"suppression\":0,\"activeSuppressionThreads\":[],\"suppressionIntervalID\":null,\"suppressionLastUpdateTime\":0}},\"darkweb\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"darkweb\",\"httpPortOpen\":true,\"ip\":\"7.5.8.1\",\"isConnectedTo\":false,\"maxRam\":1,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":4,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"suppression\":0,\"activeSuppressionThreads\":[],\"suppressionIntervalID\":null,\"suppressionLastUpdateTime\":0}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"ECorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"MegaCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Bachman & Associates\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.6,\"salaryMultiplier\":2.6,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Blade Industries\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NWO\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Clarke Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"OmniTek Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Four Sigma\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.5,\"salaryMultiplier\":2.5,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"name\":\"KuaiGong International\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.2,\"salaryMultiplier\":2.2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Fulcrum Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Storm Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DefComm\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Helios Labs\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"name\":\"VitaLife\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Icarus Microsystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Universal Energy\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Galactic Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"AeroCorp\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omnia Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Solaris Space Systems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DeltaOne\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.6,\"salaryMultiplier\":1.6,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Nova Medical\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Central Intelligence Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"National Security Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Watchdog Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"LexoCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.4,\"salaryMultiplier\":1.4,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Rho Construction\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Alpha Enterprises\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Aevum Police Headquarters\",\"info\":\"\",\"companyPositions\":{\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"name\":\"SysCore Securities\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"name\":\"CompuTek\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NetLink Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Carmichael Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"name\":\"FoodNStuff\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Joe's Guns\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omega Software\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true},\"expMultiplier\":1.1,\"salaryMultiplier\":1.1,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Noodle Bar\",\"info\":\"\",\"companyPositions\":{\"Waiter\":true,\"Part-time Waiter\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"QLink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Illuminati\",\"playerReputation\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"The Red Pill\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Daedalus\",\"playerReputation\":0}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib III\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"SPTN-97 Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Covenant\",\"playerReputation\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"ECorp HVMind Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"ECorp\",\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"CordiARC Fusion Reactor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"MegaCorp\",\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"SmartJaw\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bachman & Associates\",\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"HyperSight Corneal Implant\",\"Neotra\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Blade Industries\",\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"Neurotrainer III\",\"Power Recirculation Core\",\"Xanipher\",\"Hydroflame Left Arm\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NWO\",\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Neuronal Densification\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"nextSENS Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Clarke Incorporated\",\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"OmniTek InfoLoad\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"OmniTek Incorporated\",\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"PC Direct-Neural Interface\",\"ADR-V1 Pheromone Gene\",\"ADR-V2 Pheromone Gene\",\"Neurotrainer III\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Four Sigma\",\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module Core V2 Upgrade\",\"Speech Enhancement\",\"FocusWire\",\"HyperSight Corneal Implant\",\"Photosynthetic Cells\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"KuaiGong International\",\"playerReputation\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface Optimization Submodule\",\"PC Direct-Neural Interface NeuroNet Injector\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Fulcrum Secret Technologies\",\"playerReputation\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Neural Accelerator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"Cranial Signal Processors - Gen V\",\"Neurotrainer II\",\"BitRunners Neurolink\"],\"favor\":142.4185,\"isBanned\":false,\"isMember\":true,\"name\":\"BitRunners\",\"playerReputation\":1746628.5842642675}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Artificial Synaptic Potentiation\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Neuralstimulator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"The Black Hand\"],\"favor\":129.543,\"isBanned\":false,\"isMember\":true,\"name\":\"The Black Hand\",\"playerReputation\":336454.03868622973}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"BitWire\",\"Artificial Synaptic Potentiation\",\"Neural-Retention Enhancement\",\"DataJack\",\"Embedded Netburner Module\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"Cranial Signal Processors - Gen III\",\"Neurotrainer II\",\"CRTX42-AA Gene Modification\"],\"favor\":96.6951,\"isBanned\":false,\"isMember\":true,\"name\":\"NiteSec\",\"playerReputation\":288096.36149916984}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Synaptic Enhancement Implant\",\"Neuralstimulator\",\"Neurotrainer I\",\"PCMatrix\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Aevum\",\"playerReputation\":0}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Neuregen Gene Modification\"],\"favor\":65.5186,\"isBanned\":false,\"isMember\":true,\"name\":\"Chongqing\",\"playerReputation\":180483.5040579947}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"INFRARET Enhancement\"],\"favor\":76.5564,\"isBanned\":false,\"isMember\":true,\"name\":\"Ishima\",\"playerReputation\":221119.47302146195}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NutriGen Implant\"],\"favor\":22.014699999999998,\"isBanned\":false,\"isMember\":true,\"name\":\"New Tokyo\",\"playerReputation\":55253.9760447873}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"CashRoot Starter Kit\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Sector-12\",\"playerReputation\":0}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"DermaForce Particle Barrier\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Volhaven\",\"playerReputation\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Unstable Circadian Modulator\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"Speech Enhancement\",\"The Shadow's Simulacrum\",\"Graphene BrachiBlades Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Speakers for the Dead\",\"playerReputation\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Wired Reflexes\",\"The Shadow's Simulacrum\",\"Power Recirculation Core\",\"Graphene Bionic Arms Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Dark Army\",\"playerReputation\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"ADR-V1 Pheromone Gene\",\"The Shadow's Simulacrum\",\"Power Recirculation Core\",\"BrachiBlades\"],\"favor\":0.8459,\"isBanned\":false,\"isMember\":false,\"name\":\"The Syndicate\",\"playerReputation\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Speech Processor Implant\",\"TITN-41 Gene-Modification Injection\",\"ADR-V2 Pheromone Gene\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Silhouette\",\"playerReputation\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"HemoRecirculator\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"Power Recirculation Core\",\"Bionic Arms\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Tetrads\",\"playerReputation\":0}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"SmartSonar Implant\"],\"favor\":21.0589,\"isBanned\":false,\"isMember\":false,\"name\":\"Slum Snakes\",\"playerReputation\":0}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Hacknet Node CPU Architecture Neural-Upload\",\"Hacknet Node Cache Architecture Neural-Upload\",\"Hacknet Node NIC Architecture Neural-Upload\",\"Hacknet Node Kernel Direct-Neural Interface\",\"Hacknet Node Core Direct-Neural Interface\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Netburners\",\"playerReputation\":0}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"ADR-V1 Pheromone Gene\",\"Social Negotiation Assistant (S.N.A)\",\"Neuroreceptor Management Implant\"],\"favor\":32.9468,\"isBanned\":false,\"isMember\":false,\"name\":\"Tian Di Hui\",\"playerReputation\":0}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"BitWire\",\"Synaptic Enhancement Implant\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"Neurotrainer I\"],\"favor\":79.2856,\"isBanned\":false,\"isMember\":true,\"name\":\"CyberSec\",\"playerReputation\":231720.23577120394}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"EsperTech Bladeburner Eyewear\",\"EMS-4 Recombination\",\"ORION-MKIV Shoulder\",\"Hyperion Plasma Cannon V1\",\"Hyperion Plasma Cannon V2\",\"GOLEM Serum\",\"Vangelis Virus\",\"Vangelis Virus 3.0\",\"I.N.T.E.R.L.I.N.K.E.D\",\"Blade's Runners\",\"BLADE-51b Tesla Armor\",\"BLADE-51b Tesla Armor: Power Cells Upgrade\",\"BLADE-51b Tesla Armor: Energy Shielding Upgrade\",\"BLADE-51b Tesla Armor: Unibeam Upgrade\",\"BLADE-51b Tesla Armor: Omnibeam Upgrade\",\"BLADE-51b Tesla Armor: IPU Upgrade\",\"The Blade's Simulacrum\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bladeburners\",\"playerReputation\":0}},\"Church of the Machine God\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Stanek's Gift - Genesis\",\"Stanek's Gift - Awakening\",\"Stanek's Gift - Serenity\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Church of the Machine God\",\"playerReputation\":0}}}","AliasesSave":"{\"sa\":\"scan-analyze\",\"ll\":\"run ll.js\",\"as\":\"run assess.js\",\"mcp\":\"run mcp.js\",\"ka\":\"run ka.js\",\"cct\":\"run cct.js\",\"bs\":\"run buy_server.js\",\"bp\":\"run buy_programs.js\",\"crawl\":\"run crawl.js\",\"fav\":\"run favor.js\",\"c\":\"run clock.js\",\"hn\":\"run hacknet.js\",\"hnk\":\"kill hacknet.js\",\"corp\":\"run corp.js\",\"sh\":\"run smart_hack.js\",\"leech\":\"run leech.js\",\"kleech\":\"run kleech.js\",\"test\":\"run test.js\",\"mug\":\"run crime.js mug; tail crime.js\",\"hom\":\"run crime.js homicide; tail crime.js\",\"crime\":\"run crime.js; tail crime.js\",\"gang\":\"run hacking_gang.js\",\"sleeve\":\"run sleeve.js\",\"pss\":\"run ps.js\",\"join\":\"run join.js\",\"bribe\":\"run bribe.js\",\"reset\":\"run reset.js\",\"bb\":\"run bladeburner.js\",\"kbb\":\"kill bladeburner.js\",\"mh\":\"run mod_hack.js\",\"bsa\":\"run buy_server_all.js\",\"sg\":\"run set_gang.js\",\"ma\":\"run market.js\",\"ms\":\"run market_sell.js\",\"exp\":\"run exp.js\",\"share\":\"run share.js\"}","GlobalAliasesSave":"{}","MessagesSave":"{\"j0.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j0.msg\",\"msg\":\"I know you can sense it. I know you're searching for it. It's why you spend night after night at your computer. <br><br>It's real, I've seen it. And I can help you find it. But not right now. You're not ready yet.<br><br>Use this program to track your progress<br><br>The fl1ght.exe program was added to your home computer<br><br>-jump3R\",\"recvd\":true}},\"j1.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j1.msg\",\"msg\":\"Soon you will be contacted by a hacking group known as NiteSec. They can help you with your search. <br><br>You should join them, garner their favor, and exploit them for their Augmentations. But do not trust them. They are not what they seem. No one is.<br><br>-jump3R\",\"recvd\":true}},\"j2.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j2.msg\",\"msg\":\"Do not try to save the world. There is no world to save. If you want to find the truth, worry only about yourself. Ethics and morals will get you killed. <br><br>Watch out for a hacking group known as NiteSec.<br><br>-jump3R\",\"recvd\":true}},\"j3.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j3.msg\",\"msg\":\"You must learn to walk before you can run. And you must run before you can fly. Look for The Black Hand. <br><br>I.I.I.I <br><br>-jump3R\",\"recvd\":true}},\"j4.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j4.msg\",\"msg\":\"To find what you are searching for, you must understand the bits. The bits are all around us. The runners will help you.<br><br>-jump3R\",\"recvd\":true}},\"csec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"csec-test.msg\",\"msg\":\"We've been watching you. Your skills are very impressive. But you're wasting your talents. If you join us, you can put your skills to good use and change the world for the better. If you join us, we can unlock your full potential. <br><br>But first, you must pass our test. Find and install the backdoor on our server. <br><br>-CyberSec\",\"recvd\":true}},\"nitesec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"nitesec-test.msg\",\"msg\":\"People say that the corrupted governments and corporations rule the world. Yes, maybe they do. But do you know who everyone really fears? People like us. Because they can't hide from us. Because they can't fight shadows and ideas with bullets. <br><br>Join us, and people will fear you, too. <br><br>Find and install the backdoor on our server. Then, we will contact you again.<br><br>-NiteSec\",\"recvd\":true}},\"19dfj3l1nd.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"19dfj3l1nd.msg\",\"msg\":\"We know what you are doing. We know what drives you. We know what you are looking for. <br><br> We can help you find the answers.<br><br>run4theh111z\",\"recvd\":true}},\"icarus.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"icarus.msg\",\"msg\":\"@)(#V%*N)@(#*)*C)@#%*)*V)@#(*%V@)(#VN%*)@#(*%<br>)@B(*#%)@)M#B*%V)____FIND___#$@)#%(B*)@#(*%B)<br>@_#(%_@#M(BDSPOMB__THE-CAVE_#)$(*@#$)@#BNBEGB<br>DFLSMFVMV)#@($*)@#*$MV)@#(*$V)M#(*$)M@(#*VM$)\",\"recvd\":false}}}","StockMarketSave":"{\"ECorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"ECorp\",\"symbol\":\"ECP\",\"price\":23193.490399061182,\"lastPrice\":23293.45734758511,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.47,\"b\":false,\"otlkMag\":20.9409816032235,\"otlkMagForecast\":29.7995808399744,\"cap\":298671965,\"spreadPerc\":0.1,\"shareTxForMovement\":36378,\"shareTxUntilMovement\":36378,\"totalShares\":137000000,\"maxShares\":27400000}},\"MegaCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"MegaCorp\",\"symbol\":\"MGCP\",\"price\":52198.949408534965,\"lastPrice\":51960.696923780306,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.5,\"b\":true,\"otlkMag\":17.187873124996237,\"otlkMagForecast\":66.13621282921387,\"cap\":368047320,\"spreadPerc\":0.3,\"shareTxForMovement\":53244,\"shareTxUntilMovement\":53244,\"totalShares\":93700000,\"maxShares\":18700000}},\"Blade Industries\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Blade Industries\",\"symbol\":\"BLD\",\"price\":66810.75326407742,\"lastPrice\":67258.01494871947,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.73,\"b\":false,\"otlkMag\":12.82712262676679,\"otlkMagForecast\":37.652564225792524,\"cap\":182363031,\"spreadPerc\":0.4,\"shareTxForMovement\":69145,\"shareTxUntilMovement\":69145,\"totalShares\":101500000,\"maxShares\":20300000}},\"Clarke Incorporated\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Clarke Incorporated\",\"symbol\":\"CLRK\",\"price\":10364.748446600113,\"lastPrice\":10428.431816365946,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.67,\"b\":false,\"otlkMag\":11.068808519926945,\"otlkMagForecast\":38.11886559546811,\"cap\":155730483,\"spreadPerc\":0.5,\"shareTxForMovement\":64750,\"shareTxUntilMovement\":64750,\"totalShares\":92900000,\"maxShares\":18600000}},\"OmniTek Incorporated\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"OmniTek Incorporated\",\"symbol\":\"OMTK\",\"price\":115003.34776989139,\"lastPrice\":114332.3185198547,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.64,\"b\":false,\"otlkMag\":14.70308563184631,\"otlkMagForecast\":35.55660075585517,\"cap\":112901382,\"spreadPerc\":0.2,\"shareTxForMovement\":45303,\"shareTxUntilMovement\":45303,\"totalShares\":42000000,\"maxShares\":8400000}},\"Four Sigma\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Four Sigma\",\"symbol\":\"FSIG\",\"price\":106891.02977441893,\"lastPrice\":105871.59086631042,\"playerShares\":1702921,\"playerAvgPx\":109999.11752514784,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.05,\"b\":true,\"otlkMag\":10.555806518941631,\"otlkMagForecast\":62.01436083163229,\"cap\":325028279,\"spreadPerc\":0.3,\"shareTxForMovement\":33260,\"shareTxUntilMovement\":29347,\"totalShares\":28200000,\"maxShares\":5600000}},\"KuaiGong International\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"KuaiGong International\",\"symbol\":\"KGI\",\"price\":62674.94828318803,\"lastPrice\":63117.513396597766,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.77,\"b\":true,\"otlkMag\":10.220081320528422,\"otlkMagForecast\":58.66447311399621,\"cap\":381670762,\"spreadPerc\":0.5,\"shareTxForMovement\":88175,\"shareTxUntilMovement\":88175,\"totalShares\":77100000,\"maxShares\":15400000}},\"Fulcrum Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Fulcrum Technologies\",\"symbol\":\"FLCM\",\"price\":33551.938245259335,\"lastPrice\":33159.661765637444,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.29,\"b\":true,\"otlkMag\":8.160587265808795,\"otlkMagForecast\":61.17531218490678,\"cap\":327535099,\"spreadPerc\":1,\"shareTxForMovement\":65248,\"shareTxUntilMovement\":16339,\"totalShares\":59500000,\"maxShares\":11900000}},\"Storm Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Storm Technologies\",\"symbol\":\"STM\",\"price\":16571.779711575608,\"lastPrice\":16448.09333102914,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.82,\"b\":false,\"otlkMag\":7.1633097167210655,\"otlkMagForecast\":43.932201922080075,\"cap\":289786960,\"spreadPerc\":0.3,\"shareTxForMovement\":86362,\"shareTxUntilMovement\":86362,\"totalShares\":53100000,\"maxShares\":10600000}},\"DefComm\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"DefComm\",\"symbol\":\"DCOMM\",\"price\":13492.125662097498,\"lastPrice\":13407.289202723961,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.69,\"b\":false,\"otlkMag\":8.54935639806658,\"otlkMagForecast\":42.010578475522074,\"cap\":259506146,\"spreadPerc\":0.7,\"shareTxForMovement\":75623,\"shareTxUntilMovement\":75623,\"totalShares\":64800000,\"maxShares\":13000000}},\"Helios Labs\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Helios Labs\",\"symbol\":\"HLS\",\"price\":8198.582249499505,\"lastPrice\":8243.693251654242,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.6,\"b\":false,\"otlkMag\":8.237601525284834,\"otlkMagForecast\":40.293707239969514,\"cap\":91981340,\"spreadPerc\":0.3,\"shareTxForMovement\":62367,\"shareTxUntilMovement\":62367,\"totalShares\":63100000,\"maxShares\":12600000}},\"VitaLife\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"VitaLife\",\"symbol\":\"VITA\",\"price\":6943.35639377163,\"lastPrice\":6994.295569303623,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.8,\"b\":true,\"otlkMag\":8.638884008710813,\"otlkMagForecast\":56.41200540094053,\"cap\":173409050,\"spreadPerc\":0.9,\"shareTxForMovement\":58233,\"shareTxUntilMovement\":58233,\"totalShares\":116900000,\"maxShares\":23400000}},\"Icarus Microsystems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Icarus Microsystems\",\"symbol\":\"ICRS\",\"price\":37610.72713091247,\"lastPrice\":37817.67237351798,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.6,\"b\":false,\"otlkMag\":7.91432047359329,\"otlkMagForecast\":42.36320584114478,\"cap\":152475768,\"spreadPerc\":0.6,\"shareTxForMovement\":49027,\"shareTxUntilMovement\":49027,\"totalShares\":53000000,\"maxShares\":10600000}},\"Universal Energy\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Universal Energy\",\"symbol\":\"UNV\",\"price\":32747.512812182904,\"lastPrice\":32598.042825038647,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.5,\"b\":true,\"otlkMag\":10.574371196374917,\"otlkMagForecast\":61.42370528849435,\"cap\":267758928,\"spreadPerc\":0.7,\"shareTxForMovement\":101225,\"shareTxUntilMovement\":101225,\"totalShares\":37100000,\"maxShares\":7400000}},\"AeroCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"AeroCorp\",\"symbol\":\"AERO\",\"price\":7905.496768509227,\"lastPrice\":7951.170046455458,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.63,\"b\":false,\"otlkMag\":5.418409840580862,\"otlkMagForecast\":43.85041857846289,\"cap\":223492768,\"spreadPerc\":0.7,\"shareTxForMovement\":65705,\"shareTxUntilMovement\":65705,\"totalShares\":48200000,\"maxShares\":9600000}},\"Omnia Cybersystems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Omnia Cybersystems\",\"symbol\":\"OMN\",\"price\":6798.243855354008,\"lastPrice\":6843.130971278379,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.72,\"b\":false,\"otlkMag\":5.352228382382712,\"otlkMagForecast\":46.21669677521379,\"cap\":136079602,\"spreadPerc\":0.5,\"shareTxForMovement\":106279,\"shareTxUntilMovement\":106279,\"totalShares\":97100000,\"maxShares\":19400000}},\"Solaris Space Systems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Solaris Space Systems\",\"symbol\":\"SLRS\",\"price\":34791.63517267859,\"lastPrice\":34550.83069809896,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.76,\"b\":true,\"otlkMag\":8.682119212417588,\"otlkMagForecast\":59.08269740091384,\"cap\":562671644,\"spreadPerc\":0.7,\"shareTxForMovement\":56117,\"shareTxUntilMovement\":56117,\"totalShares\":25600000,\"maxShares\":5100000}},\"Global Pharmaceuticals\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"symbol\":\"GPH\",\"price\":20967.911163830577,\"lastPrice\":21092.89705508783,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.65,\"b\":false,\"otlkMag\":11.640349946446587,\"otlkMagForecast\":39.194586909735975,\"cap\":40352788,\"spreadPerc\":0.6,\"shareTxForMovement\":63590,\"shareTxUntilMovement\":63590,\"totalShares\":43200000,\"maxShares\":8600000}},\"Nova Medical\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Nova Medical\",\"symbol\":\"NVMD\",\"price\":27776.6644979704,\"lastPrice\":27965.16142729233,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.74,\"b\":false,\"otlkMag\":6.414493103332507,\"otlkMagForecast\":41.830505144488285,\"cap\":103269019,\"spreadPerc\":0.6,\"shareTxForMovement\":125054,\"shareTxUntilMovement\":125054,\"totalShares\":34700000,\"maxShares\":6900000}},\"Watchdog Security\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Watchdog Security\",\"symbol\":\"WDS\",\"price\":14278.975744999261,\"lastPrice\":14608.957602982775,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.52,\"b\":true,\"otlkMag\":6.555451953928351,\"otlkMagForecast\":51.55791968660504,\"cap\":13562865,\"spreadPerc\":0.8,\"shareTxForMovement\":18473,\"shareTxUntilMovement\":18473,\"totalShares\":75800000,\"maxShares\":15200000}},\"LexoCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"LexoCorp\",\"symbol\":\"LXO\",\"price\":8749.284294061066,\"lastPrice\":8854.392419573118,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.31,\"b\":true,\"otlkMag\":6.849286871271499,\"otlkMagForecast\":56.27533145002795,\"cap\":28098704,\"spreadPerc\":0.9,\"shareTxForMovement\":95970,\"shareTxUntilMovement\":95970,\"totalShares\":50300000,\"maxShares\":10100000}},\"Rho Construction\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Rho Construction\",\"symbol\":\"RHOC\",\"price\":5322.66255329269,\"lastPrice\":5292.088003284304,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.63,\"b\":true,\"otlkMag\":3.133754193406691,\"otlkMagForecast\":51.714086188049485,\"cap\":119387158,\"spreadPerc\":0.7,\"shareTxForMovement\":65522,\"shareTxUntilMovement\":65522,\"totalShares\":30500000,\"maxShares\":6100000}},\"Alpha Enterprises\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Alpha Enterprises\",\"symbol\":\"APHE\",\"price\":25114.15348462782,\"lastPrice\":24701.872102203874,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.82,\"b\":false,\"otlkMag\":7.203626462374713,\"otlkMagForecast\":42.52727899390008,\"cap\":166837586,\"spreadPerc\":1.2,\"shareTxForMovement\":47237,\"shareTxUntilMovement\":47237,\"totalShares\":29400000,\"maxShares\":5900000}},\"SysCore Securities\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"SysCore Securities\",\"symbol\":\"SYSC\",\"price\":13508.737772044928,\"lastPrice\":13303.774231360758,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.68,\"b\":true,\"otlkMag\":2.7772286038578775,\"otlkMagForecast\":50.32036611385254,\"cap\":25885273,\"spreadPerc\":0.5,\"shareTxForMovement\":55373,\"shareTxUntilMovement\":55373,\"totalShares\":33400000,\"maxShares\":6700000}},\"CompuTek\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"CompuTek\",\"symbol\":\"CTK\",\"price\":3088.073260558384,\"lastPrice\":3112.710912428418,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.87,\"b\":false,\"otlkMag\":5.178207723509065,\"otlkMagForecast\":46.827162305916005,\"cap\":27555387,\"spreadPerc\":0.8,\"shareTxForMovement\":75379,\"shareTxUntilMovement\":75379,\"totalShares\":109000000,\"maxShares\":21800000}},\"NetLink Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"NetLink Technologies\",\"symbol\":\"NTLK\",\"price\":7901.993084811939,\"lastPrice\":8142.577336632532,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":3.32,\"b\":true,\"otlkMag\":11.28022705322897,\"otlkMagForecast\":59.94297692203795,\"cap\":42311968,\"spreadPerc\":1.2,\"shareTxForMovement\":41068,\"shareTxUntilMovement\":41068,\"totalShares\":18300000,\"maxShares\":3700000}},\"Omega Software\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Omega Software\",\"symbol\":\"OMGA\",\"price\":7490.795796237368,\"lastPrice\":7553.307569303602,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.91,\"b\":false,\"otlkMag\":8.213424623678007,\"otlkMagForecast\":41.32312763204452,\"cap\":127811839,\"spreadPerc\":0.7,\"shareTxForMovement\":56413,\"shareTxUntilMovement\":56413,\"totalShares\":8000000,\"maxShares\":1600000}},\"FoodNStuff\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"FoodNStuff\",\"symbol\":\"FNS\",\"price\":3261.743490494573,\"lastPrice\":3283.878208370398,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.74,\"b\":true,\"otlkMag\":1.3643240212416328,\"otlkMagForecast\":53.08445741446157,\"cap\":9582165,\"spreadPerc\":0.7,\"shareTxForMovement\":91379,\"shareTxUntilMovement\":91379,\"totalShares\":18800000,\"maxShares\":3800000}},\"Sigma Cosmetics\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Sigma Cosmetics\",\"symbol\":\"SGC\",\"price\":13630.486473138651,\"lastPrice\":13344.135432755073,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.34,\"b\":true,\"otlkMag\":7.444552760179763,\"otlkMagForecast\":59.84232985007585,\"cap\":65866396,\"spreadPerc\":1.2,\"shareTxForMovement\":20920,\"shareTxUntilMovement\":20920,\"totalShares\":8700000,\"maxShares\":1700000}},\"Joe's Guns\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Joe's Guns\",\"symbol\":\"JGN\",\"price\":1134.1410744342597,\"lastPrice\":1113.7144632541426,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2,\"b\":false,\"otlkMag\":7.061437940052407,\"otlkMagForecast\":40.578249846929396,\"cap\":16017701,\"spreadPerc\":1.2,\"shareTxForMovement\":41170,\"shareTxUntilMovement\":41170,\"totalShares\":35100000,\"maxShares\":7000000}},\"Catalyst Ventures\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Catalyst Ventures\",\"symbol\":\"CTYS\",\"price\":2227.6278284768086,\"lastPrice\":2198.793296371138,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.43,\"b\":true,\"otlkMag\":6.557170795714294,\"otlkMagForecast\":60.680520324586915,\"cap\":15711505,\"spreadPerc\":1,\"shareTxForMovement\":44725,\"shareTxUntilMovement\":9576,\"totalShares\":88500000,\"maxShares\":17700000}},\"Microdyne Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Microdyne Technologies\",\"symbol\":\"MDYN\",\"price\":12434.328764084787,\"lastPrice\":12518.710126374726,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.74,\"b\":false,\"otlkMag\":10.080596114670184,\"otlkMagForecast\":40.860547460257784,\"cap\":129677321,\"spreadPerc\":0.8,\"shareTxForMovement\":191775,\"shareTxUntilMovement\":191775,\"totalShares\":21000000,\"maxShares\":4200000}},\"Titan Laboratories\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Titan Laboratories\",\"symbol\":\"TITN\",\"price\":25500.66979496708,\"lastPrice\":25358.81264932008,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.61,\"b\":false,\"otlkMag\":9.936915225592351,\"otlkMagForecast\":39.202742918427916,\"cap\":93769525,\"spreadPerc\":0.6,\"shareTxForMovement\":133880,\"shareTxUntilMovement\":133880,\"totalShares\":20400000,\"maxShares\":4100000}},\"Orders\":{\"ECP\":[],\"MGCP\":[],\"BLD\":[],\"CLRK\":[],\"OMTK\":[],\"FSIG\":[],\"KGI\":[],\"FLCM\":[],\"STM\":[],\"DCOMM\":[],\"HLS\":[],\"VITA\":[],\"ICRS\":[],\"UNV\":[],\"AERO\":[],\"OMN\":[],\"SLRS\":[],\"GPH\":[],\"NVMD\":[],\"WDS\":[],\"LXO\":[],\"RHOC\":[],\"APHE\":[],\"SYSC\":[],\"CTK\":[],\"NTLK\":[],\"OMGA\":[],\"FNS\":[],\"SGC\":[],\"JGN\":[],\"CTYS\":[],\"MDYN\":[],\"TITN\":[]},\"storedCycles\":17,\"lastUpdate\":1649688446339,\"ticksUntilCycle\":64}","SettingsSave":"{\"ActiveScriptsServerPageSize\":100,\"ActiveScriptsScriptPageSize\":10,\"AutosaveInterval\":60,\"CodeInstructionRunTime\":25,\"DisableASCIIArt\":false,\"DisableHotkeys\":false,\"DisableTextEffects\":false,\"DisableOverviewProgressBars\":false,\"EnableBashHotkeys\":false,\"TimestampsFormat\":\"\",\"Locale\":\"en\",\"MaxLogCapacity\":300,\"MaxPortCapacity\":100,\"MaxTerminalCapacity\":500,\"OwnedAugmentationsOrder\":0,\"PurchaseAugmentationsOrder\":2,\"SaveGameOnFileSave\":true,\"SuppressBuyAugmentationConfirmation\":true,\"SuppressFactionInvites\":true,\"SuppressMessages\":true,\"SuppressTravelConfirmation\":true,\"SuppressBladeburnerPopup\":false,\"SuppressTIXPopup\":false,\"SuppressSavedGameToast\":true,\"SuppressAutosaveDisabledWarnings\":false,\"UseIEC60027_2\":false,\"ExcludeRunningScriptsFromSave\":true,\"IsSidebarOpened\":true,\"MonacoTheme\":\"monokai\",\"MonacoInsertSpaces\":false,\"MonacoFontSize\":20,\"MonacoVim\":false,\"MonacoWordWrap\":\"off\",\"theme\":{\"primarylight\":\"#FFF\",\"primary\":\"#F8F8F2\",\"primarydark\":\"#FAFAEB\",\"successlight\":\"#ADE146\",\"success\":\"#A6E22E\",\"successdark\":\"#98E104\",\"errorlight\":\"#FF69A0\",\"error\":\"#F92672\",\"errordark\":\"#D10F56\",\"secondarylight\":\"#AAA\",\"secondary\":\"#888\",\"secondarydark\":\"#666\",\"warninglight\":\"#E1D992\",\"warning\":\"#E6DB74\",\"warningdark\":\"#EDDD54\",\"infolight\":\"#92E1F1\",\"info\":\"#66D9EF\",\"infodark\":\"#31CDED\",\"welllight\":\"#444\",\"well\":\"#222\",\"white\":\"#fff\",\"black\":\"#000\",\"hp\":\"#F92672\",\"money\":\"#E6DB74\",\"hack\":\"#A6E22E\",\"combat\":\"#75715E\",\"cha\":\"#AE81FF\",\"int\":\"#66D9EF\",\"rep\":\"#E69F66\",\"disabled\":\"#66cfbc\",\"backgroundprimary\":\"#272822\",\"backgroundsecondary\":\"#1B1C18\",\"button\":\"#333\"},\"styles\":{\"lineHeight\":1.5,\"fontFamily\":\"Lucida Console, Lucida Sans Unicode, Fira Mono, Consolas, Courier New, Courier, monospace, Times New Roman\"},\"overview\":{\"x\":-1,\"y\":0,\"opened\":true}}","VersionSave":"13","AllGangsSave":"","LastExportBonus":"1649688449772","StaneksGiftSave":"{\"ctor\":\"StaneksGift\",\"data\":{\"storedCycles\":0,\"fragments\":[]}}"}}